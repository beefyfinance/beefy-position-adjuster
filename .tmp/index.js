var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// (disabled):node_modules/buffer/index.js
var require_buffer = __commonJS({
  "(disabled):node_modules/buffer/index.js"() {
  }
});

// node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound2, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound2) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/@ethersproject/logger/lib/_version.js
var require_version = __commonJS({
  "node_modules/@ethersproject/logger/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "logger/5.7.0";
  }
});

// node_modules/@ethersproject/logger/lib/index.js
var require_lib = __commonJS({
  "node_modules/@ethersproject/logger/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Logger = exports.ErrorCode = exports.LogLevel = void 0;
    var _permanentCensorErrors = false;
    var _censorErrors = false;
    var LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    var _logLevel = LogLevels["default"];
    var _version_1 = require_version();
    var _globalLogger = null;
    function _checkNormalize() {
      try {
        var missing_1 = [];
        ["NFD", "NFC", "NFKD", "NFKC"].forEach(function(form) {
          try {
            if ("test".normalize(form) !== "test") {
              throw new Error("bad normalize");
            }
            ;
          } catch (error) {
            missing_1.push(form);
          }
        });
        if (missing_1.length) {
          throw new Error("missing " + missing_1.join(", "));
        }
        if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
          throw new Error("broken implementation");
        }
      } catch (error) {
        return error.message;
      }
      return null;
    }
    var _normalizeError = _checkNormalize();
    var LogLevel;
    (function(LogLevel2) {
      LogLevel2["DEBUG"] = "DEBUG";
      LogLevel2["INFO"] = "INFO";
      LogLevel2["WARNING"] = "WARNING";
      LogLevel2["ERROR"] = "ERROR";
      LogLevel2["OFF"] = "OFF";
    })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
    var ErrorCode;
    (function(ErrorCode2) {
      ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
      ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
      ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
      ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
      ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
      ErrorCode2["TIMEOUT"] = "TIMEOUT";
      ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
      ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
      ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
      ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
      ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
      ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
      ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
      ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
      ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
      ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
      ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
      ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
    })(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
    var HEX = "0123456789abcdef";
    var Logger = (
      /** @class */
      function() {
        function Logger2(version) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version,
            writable: false
          });
        }
        Logger2.prototype._log = function(logLevel, args) {
          var level = logLevel.toLowerCase();
          if (LogLevels[level] == null) {
            this.throwArgumentError("invalid log level name", "logLevel", logLevel);
          }
          if (_logLevel > LogLevels[level]) {
            return;
          }
          console.log.apply(console, args);
        };
        Logger2.prototype.debug = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          this._log(Logger2.levels.DEBUG, args);
        };
        Logger2.prototype.info = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          this._log(Logger2.levels.INFO, args);
        };
        Logger2.prototype.warn = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          this._log(Logger2.levels.WARNING, args);
        };
        Logger2.prototype.makeError = function(message, code, params) {
          if (_censorErrors) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger2.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          var messageDetails = [];
          Object.keys(params).forEach(function(key) {
            var value = params[key];
            try {
              if (value instanceof Uint8Array) {
                var hex = "";
                for (var i = 0; i < value.length; i++) {
                  hex += HEX[value[i] >> 4];
                  hex += HEX[value[i] & 15];
                }
                messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key + "=" + JSON.stringify(value));
              }
            } catch (error2) {
              messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
            }
          });
          messageDetails.push("code=" + code);
          messageDetails.push("version=" + this.version);
          var reason = message;
          var url = "";
          switch (code) {
            case ErrorCode.NUMERIC_FAULT: {
              url = "NUMERIC_FAULT";
              var fault = message;
              switch (fault) {
                case "overflow":
                case "underflow":
                case "division-by-zero":
                  url += "-" + fault;
                  break;
                case "negative-power":
                case "negative-width":
                  url += "-unsupported";
                  break;
                case "unbound-bitwise-result":
                  url += "-unbound-result";
                  break;
              }
              break;
            }
            case ErrorCode.CALL_EXCEPTION:
            case ErrorCode.INSUFFICIENT_FUNDS:
            case ErrorCode.MISSING_NEW:
            case ErrorCode.NONCE_EXPIRED:
            case ErrorCode.REPLACEMENT_UNDERPRICED:
            case ErrorCode.TRANSACTION_REPLACED:
            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
              url = code;
              break;
          }
          if (url) {
            message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
          }
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          var error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function(key) {
            error[key] = params[key];
          });
          return error;
        };
        Logger2.prototype.throwError = function(message, code, params) {
          throw this.makeError(message, code, params);
        };
        Logger2.prototype.throwArgumentError = function(message, name, value) {
          return this.throwError(message, Logger2.errors.INVALID_ARGUMENT, {
            argument: name,
            value
          });
        };
        Logger2.prototype.assert = function(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        };
        Logger2.prototype.assertArgument = function(condition, message, name, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name, value);
        };
        Logger2.prototype.checkNormalize = function(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError) {
            this.throwError("platform missing String.prototype.normalize", Logger2.errors.UNSUPPORTED_OPERATION, {
              operation: "String.prototype.normalize",
              form: _normalizeError
            });
          }
        };
        Logger2.prototype.checkSafeUint53 = function(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 9007199254740991) {
            this.throwError(message, Logger2.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value
            });
          }
          if (value % 1) {
            this.throwError(message, Logger2.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value
            });
          }
        };
        Logger2.prototype.checkArgumentCount = function(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError("missing argument" + message, Logger2.errors.MISSING_ARGUMENT, {
              count,
              expectedCount
            });
          }
          if (count > expectedCount) {
            this.throwError("too many arguments" + message, Logger2.errors.UNEXPECTED_ARGUMENT, {
              count,
              expectedCount
            });
          }
        };
        Logger2.prototype.checkNew = function(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger2.errors.MISSING_NEW, { name: kind.name });
          }
        };
        Logger2.prototype.checkAbstract = function(target, kind) {
          if (target === kind) {
            this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger2.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger2.errors.MISSING_NEW, { name: kind.name });
          }
        };
        Logger2.globalLogger = function() {
          if (!_globalLogger) {
            _globalLogger = new Logger2(_version_1.version);
          }
          return _globalLogger;
        };
        Logger2.setCensorship = function(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError("cannot permanently disable censorship", Logger2.errors.UNSUPPORTED_OPERATION, {
              operation: "setCensorship"
            });
          }
          if (_permanentCensorErrors) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError("error censorship permanent", Logger2.errors.UNSUPPORTED_OPERATION, {
              operation: "setCensorship"
            });
          }
          _censorErrors = !!censorship;
          _permanentCensorErrors = !!permanent;
        };
        Logger2.setLogLevel = function(logLevel) {
          var level = LogLevels[logLevel.toLowerCase()];
          if (level == null) {
            Logger2.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel = level;
        };
        Logger2.from = function(version) {
          return new Logger2(version);
        };
        Logger2.errors = ErrorCode;
        Logger2.levels = LogLevel;
        return Logger2;
      }()
    );
    exports.Logger = Logger;
  }
});

// node_modules/@ethersproject/bytes/lib/_version.js
var require_version2 = __commonJS({
  "node_modules/@ethersproject/bytes/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "bytes/5.7.0";
  }
});

// node_modules/@ethersproject/bytes/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/@ethersproject/bytes/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.joinSignature = exports.splitSignature = exports.hexZeroPad = exports.hexStripZeros = exports.hexValue = exports.hexConcat = exports.hexDataSlice = exports.hexDataLength = exports.hexlify = exports.isHexString = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.isBytes = exports.isBytesLike = void 0;
    var logger_1 = require_lib();
    var _version_1 = require_version2();
    var logger = new logger_1.Logger(_version_1.version);
    function isHexable(value) {
      return !!value.toHexString;
    }
    function addSlice(array) {
      if (array.slice) {
        return array;
      }
      array.slice = function() {
        var args = Array.prototype.slice.call(arguments);
        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
      };
      return array;
    }
    function isBytesLike(value) {
      return isHexString(value) && !(value.length % 2) || isBytes(value);
    }
    exports.isBytesLike = isBytesLike;
    function isInteger(value) {
      return typeof value === "number" && value == value && value % 1 === 0;
    }
    function isBytes(value) {
      if (value == null) {
        return false;
      }
      if (value.constructor === Uint8Array) {
        return true;
      }
      if (typeof value === "string") {
        return false;
      }
      if (!isInteger(value.length) || value.length < 0) {
        return false;
      }
      for (var i = 0; i < value.length; i++) {
        var v = value[i];
        if (!isInteger(v) || v < 0 || v >= 256) {
          return false;
        }
      }
      return true;
    }
    exports.isBytes = isBytes;
    function arrayify(value, options) {
      if (!options) {
        options = {};
      }
      if (typeof value === "number") {
        logger.checkSafeUint53(value, "invalid arrayify value");
        var result = [];
        while (value) {
          result.unshift(value & 255);
          value = parseInt(String(value / 256));
        }
        if (result.length === 0) {
          result.push(0);
        }
        return addSlice(new Uint8Array(result));
      }
      if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
        value = "0x" + value;
      }
      if (isHexable(value)) {
        value = value.toHexString();
      }
      if (isHexString(value)) {
        var hex = value.substring(2);
        if (hex.length % 2) {
          if (options.hexPad === "left") {
            hex = "0" + hex;
          } else if (options.hexPad === "right") {
            hex += "0";
          } else {
            logger.throwArgumentError("hex data is odd-length", "value", value);
          }
        }
        var result = [];
        for (var i = 0; i < hex.length; i += 2) {
          result.push(parseInt(hex.substring(i, i + 2), 16));
        }
        return addSlice(new Uint8Array(result));
      }
      if (isBytes(value)) {
        return addSlice(new Uint8Array(value));
      }
      return logger.throwArgumentError("invalid arrayify value", "value", value);
    }
    exports.arrayify = arrayify;
    function concat(items) {
      var objects = items.map(function(item) {
        return arrayify(item);
      });
      var length = objects.reduce(function(accum, item) {
        return accum + item.length;
      }, 0);
      var result = new Uint8Array(length);
      objects.reduce(function(offset, object) {
        result.set(object, offset);
        return offset + object.length;
      }, 0);
      return addSlice(result);
    }
    exports.concat = concat;
    function stripZeros(value) {
      var result = arrayify(value);
      if (result.length === 0) {
        return result;
      }
      var start = 0;
      while (start < result.length && result[start] === 0) {
        start++;
      }
      if (start) {
        result = result.slice(start);
      }
      return result;
    }
    exports.stripZeros = stripZeros;
    function zeroPad(value, length) {
      value = arrayify(value);
      if (value.length > length) {
        logger.throwArgumentError("value out of range", "value", arguments[0]);
      }
      var result = new Uint8Array(length);
      result.set(value, length - value.length);
      return addSlice(result);
    }
    exports.zeroPad = zeroPad;
    function isHexString(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
      }
      if (length && value.length !== 2 + 2 * length) {
        return false;
      }
      return true;
    }
    exports.isHexString = isHexString;
    var HexCharacters = "0123456789abcdef";
    function hexlify(value, options) {
      if (!options) {
        options = {};
      }
      if (typeof value === "number") {
        logger.checkSafeUint53(value, "invalid hexlify value");
        var hex = "";
        while (value) {
          hex = HexCharacters[value & 15] + hex;
          value = Math.floor(value / 16);
        }
        if (hex.length) {
          if (hex.length % 2) {
            hex = "0" + hex;
          }
          return "0x" + hex;
        }
        return "0x00";
      }
      if (typeof value === "bigint") {
        value = value.toString(16);
        if (value.length % 2) {
          return "0x0" + value;
        }
        return "0x" + value;
      }
      if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
        value = "0x" + value;
      }
      if (isHexable(value)) {
        return value.toHexString();
      }
      if (isHexString(value)) {
        if (value.length % 2) {
          if (options.hexPad === "left") {
            value = "0x0" + value.substring(2);
          } else if (options.hexPad === "right") {
            value += "0";
          } else {
            logger.throwArgumentError("hex data is odd-length", "value", value);
          }
        }
        return value.toLowerCase();
      }
      if (isBytes(value)) {
        var result = "0x";
        for (var i = 0; i < value.length; i++) {
          var v = value[i];
          result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
        }
        return result;
      }
      return logger.throwArgumentError("invalid hexlify value", "value", value);
    }
    exports.hexlify = hexlify;
    function hexDataLength(data) {
      if (typeof data !== "string") {
        data = hexlify(data);
      } else if (!isHexString(data) || data.length % 2) {
        return null;
      }
      return (data.length - 2) / 2;
    }
    exports.hexDataLength = hexDataLength;
    function hexDataSlice(data, offset, endOffset) {
      if (typeof data !== "string") {
        data = hexlify(data);
      } else if (!isHexString(data) || data.length % 2) {
        logger.throwArgumentError("invalid hexData", "value", data);
      }
      offset = 2 + 2 * offset;
      if (endOffset != null) {
        return "0x" + data.substring(offset, 2 + 2 * endOffset);
      }
      return "0x" + data.substring(offset);
    }
    exports.hexDataSlice = hexDataSlice;
    function hexConcat(items) {
      var result = "0x";
      items.forEach(function(item) {
        result += hexlify(item).substring(2);
      });
      return result;
    }
    exports.hexConcat = hexConcat;
    function hexValue(value) {
      var trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
      if (trimmed === "0x") {
        return "0x0";
      }
      return trimmed;
    }
    exports.hexValue = hexValue;
    function hexStripZeros(value) {
      if (typeof value !== "string") {
        value = hexlify(value);
      }
      if (!isHexString(value)) {
        logger.throwArgumentError("invalid hex string", "value", value);
      }
      value = value.substring(2);
      var offset = 0;
      while (offset < value.length && value[offset] === "0") {
        offset++;
      }
      return "0x" + value.substring(offset);
    }
    exports.hexStripZeros = hexStripZeros;
    function hexZeroPad(value, length) {
      if (typeof value !== "string") {
        value = hexlify(value);
      } else if (!isHexString(value)) {
        logger.throwArgumentError("invalid hex string", "value", value);
      }
      if (value.length > 2 * length + 2) {
        logger.throwArgumentError("value out of range", "value", arguments[1]);
      }
      while (value.length < 2 * length + 2) {
        value = "0x0" + value.substring(2);
      }
      return value;
    }
    exports.hexZeroPad = hexZeroPad;
    function splitSignature(signature) {
      var result = {
        r: "0x",
        s: "0x",
        _vs: "0x",
        recoveryParam: 0,
        v: 0,
        yParityAndS: "0x",
        compact: "0x"
      };
      if (isBytesLike(signature)) {
        var bytes = arrayify(signature);
        if (bytes.length === 64) {
          result.v = 27 + (bytes[32] >> 7);
          bytes[32] &= 127;
          result.r = hexlify(bytes.slice(0, 32));
          result.s = hexlify(bytes.slice(32, 64));
        } else if (bytes.length === 65) {
          result.r = hexlify(bytes.slice(0, 32));
          result.s = hexlify(bytes.slice(32, 64));
          result.v = bytes[64];
        } else {
          logger.throwArgumentError("invalid signature string", "signature", signature);
        }
        if (result.v < 27) {
          if (result.v === 0 || result.v === 1) {
            result.v += 27;
          } else {
            logger.throwArgumentError("signature invalid v byte", "signature", signature);
          }
        }
        result.recoveryParam = 1 - result.v % 2;
        if (result.recoveryParam) {
          bytes[32] |= 128;
        }
        result._vs = hexlify(bytes.slice(32, 64));
      } else {
        result.r = signature.r;
        result.s = signature.s;
        result.v = signature.v;
        result.recoveryParam = signature.recoveryParam;
        result._vs = signature._vs;
        if (result._vs != null) {
          var vs_1 = zeroPad(arrayify(result._vs), 32);
          result._vs = hexlify(vs_1);
          var recoveryParam = vs_1[0] >= 128 ? 1 : 0;
          if (result.recoveryParam == null) {
            result.recoveryParam = recoveryParam;
          } else if (result.recoveryParam !== recoveryParam) {
            logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
          }
          vs_1[0] &= 127;
          var s = hexlify(vs_1);
          if (result.s == null) {
            result.s = s;
          } else if (result.s !== s) {
            logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
          }
        }
        if (result.recoveryParam == null) {
          if (result.v == null) {
            logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
          } else if (result.v === 0 || result.v === 1) {
            result.recoveryParam = result.v;
          } else {
            result.recoveryParam = 1 - result.v % 2;
          }
        } else {
          if (result.v == null) {
            result.v = 27 + result.recoveryParam;
          } else {
            var recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
            if (result.recoveryParam !== recId) {
              logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
            }
          }
        }
        if (result.r == null || !isHexString(result.r)) {
          logger.throwArgumentError("signature missing or invalid r", "signature", signature);
        } else {
          result.r = hexZeroPad(result.r, 32);
        }
        if (result.s == null || !isHexString(result.s)) {
          logger.throwArgumentError("signature missing or invalid s", "signature", signature);
        } else {
          result.s = hexZeroPad(result.s, 32);
        }
        var vs = arrayify(result.s);
        if (vs[0] >= 128) {
          logger.throwArgumentError("signature s out of range", "signature", signature);
        }
        if (result.recoveryParam) {
          vs[0] |= 128;
        }
        var _vs = hexlify(vs);
        if (result._vs) {
          if (!isHexString(result._vs)) {
            logger.throwArgumentError("signature invalid _vs", "signature", signature);
          }
          result._vs = hexZeroPad(result._vs, 32);
        }
        if (result._vs == null) {
          result._vs = _vs;
        } else if (result._vs !== _vs) {
          logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
        }
      }
      result.yParityAndS = result._vs;
      result.compact = result.r + result.yParityAndS.substring(2);
      return result;
    }
    exports.splitSignature = splitSignature;
    function joinSignature(signature) {
      signature = splitSignature(signature);
      return hexlify(concat([
        signature.r,
        signature.s,
        signature.recoveryParam ? "0x1c" : "0x1b"
      ]));
    }
    exports.joinSignature = joinSignature;
  }
});

// node_modules/@ethersproject/bignumber/lib/_version.js
var require_version3 = __commonJS({
  "node_modules/@ethersproject/bignumber/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "bignumber/5.7.0";
  }
});

// node_modules/@ethersproject/bignumber/lib/bignumber.js
var require_bignumber = __commonJS({
  "node_modules/@ethersproject/bignumber/lib/bignumber.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._base16To36 = exports._base36To16 = exports.BigNumber = exports.isBigNumberish = void 0;
    var bn_js_1 = __importDefault(require_bn());
    var BN = bn_js_1.default.BN;
    var bytes_1 = require_lib2();
    var logger_1 = require_lib();
    var _version_1 = require_version3();
    var logger = new logger_1.Logger(_version_1.version);
    var _constructorGuard = {};
    var MAX_SAFE = 9007199254740991;
    function isBigNumberish(value) {
      return value != null && (BigNumber2.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || (0, bytes_1.isHexString)(value) || typeof value === "bigint" || (0, bytes_1.isBytes)(value));
    }
    exports.isBigNumberish = isBigNumberish;
    var _warnedToStringRadix = false;
    var BigNumber2 = (
      /** @class */
      function() {
        function BigNumber3(constructorGuard, hex) {
          if (constructorGuard !== _constructorGuard) {
            logger.throwError("cannot call constructor directly; use BigNumber.from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "new (BigNumber)"
            });
          }
          this._hex = hex;
          this._isBigNumber = true;
          Object.freeze(this);
        }
        BigNumber3.prototype.fromTwos = function(value) {
          return toBigNumber(toBN(this).fromTwos(value));
        };
        BigNumber3.prototype.toTwos = function(value) {
          return toBigNumber(toBN(this).toTwos(value));
        };
        BigNumber3.prototype.abs = function() {
          if (this._hex[0] === "-") {
            return BigNumber3.from(this._hex.substring(1));
          }
          return this;
        };
        BigNumber3.prototype.add = function(other) {
          return toBigNumber(toBN(this).add(toBN(other)));
        };
        BigNumber3.prototype.sub = function(other) {
          return toBigNumber(toBN(this).sub(toBN(other)));
        };
        BigNumber3.prototype.div = function(other) {
          var o = BigNumber3.from(other);
          if (o.isZero()) {
            throwFault("division-by-zero", "div");
          }
          return toBigNumber(toBN(this).div(toBN(other)));
        };
        BigNumber3.prototype.mul = function(other) {
          return toBigNumber(toBN(this).mul(toBN(other)));
        };
        BigNumber3.prototype.mod = function(other) {
          var value = toBN(other);
          if (value.isNeg()) {
            throwFault("division-by-zero", "mod");
          }
          return toBigNumber(toBN(this).umod(value));
        };
        BigNumber3.prototype.pow = function(other) {
          var value = toBN(other);
          if (value.isNeg()) {
            throwFault("negative-power", "pow");
          }
          return toBigNumber(toBN(this).pow(value));
        };
        BigNumber3.prototype.and = function(other) {
          var value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
            throwFault("unbound-bitwise-result", "and");
          }
          return toBigNumber(toBN(this).and(value));
        };
        BigNumber3.prototype.or = function(other) {
          var value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
            throwFault("unbound-bitwise-result", "or");
          }
          return toBigNumber(toBN(this).or(value));
        };
        BigNumber3.prototype.xor = function(other) {
          var value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
            throwFault("unbound-bitwise-result", "xor");
          }
          return toBigNumber(toBN(this).xor(value));
        };
        BigNumber3.prototype.mask = function(value) {
          if (this.isNegative() || value < 0) {
            throwFault("negative-width", "mask");
          }
          return toBigNumber(toBN(this).maskn(value));
        };
        BigNumber3.prototype.shl = function(value) {
          if (this.isNegative() || value < 0) {
            throwFault("negative-width", "shl");
          }
          return toBigNumber(toBN(this).shln(value));
        };
        BigNumber3.prototype.shr = function(value) {
          if (this.isNegative() || value < 0) {
            throwFault("negative-width", "shr");
          }
          return toBigNumber(toBN(this).shrn(value));
        };
        BigNumber3.prototype.eq = function(other) {
          return toBN(this).eq(toBN(other));
        };
        BigNumber3.prototype.lt = function(other) {
          return toBN(this).lt(toBN(other));
        };
        BigNumber3.prototype.lte = function(other) {
          return toBN(this).lte(toBN(other));
        };
        BigNumber3.prototype.gt = function(other) {
          return toBN(this).gt(toBN(other));
        };
        BigNumber3.prototype.gte = function(other) {
          return toBN(this).gte(toBN(other));
        };
        BigNumber3.prototype.isNegative = function() {
          return this._hex[0] === "-";
        };
        BigNumber3.prototype.isZero = function() {
          return toBN(this).isZero();
        };
        BigNumber3.prototype.toNumber = function() {
          try {
            return toBN(this).toNumber();
          } catch (error) {
            throwFault("overflow", "toNumber", this.toString());
          }
          return null;
        };
        BigNumber3.prototype.toBigInt = function() {
          try {
            return BigInt(this.toString());
          } catch (e) {
          }
          return logger.throwError("this platform does not support BigInt", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
            value: this.toString()
          });
        };
        BigNumber3.prototype.toString = function() {
          if (arguments.length > 0) {
            if (arguments[0] === 10) {
              if (!_warnedToStringRadix) {
                _warnedToStringRadix = true;
                logger.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
              }
            } else if (arguments[0] === 16) {
              logger.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});
            } else {
              logger.throwError("BigNumber.toString does not accept parameters", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});
            }
          }
          return toBN(this).toString(10);
        };
        BigNumber3.prototype.toHexString = function() {
          return this._hex;
        };
        BigNumber3.prototype.toJSON = function(key) {
          return { type: "BigNumber", hex: this.toHexString() };
        };
        BigNumber3.from = function(value) {
          if (value instanceof BigNumber3) {
            return value;
          }
          if (typeof value === "string") {
            if (value.match(/^-?0x[0-9a-f]+$/i)) {
              return new BigNumber3(_constructorGuard, toHex(value));
            }
            if (value.match(/^-?[0-9]+$/)) {
              return new BigNumber3(_constructorGuard, toHex(new BN(value)));
            }
            return logger.throwArgumentError("invalid BigNumber string", "value", value);
          }
          if (typeof value === "number") {
            if (value % 1) {
              throwFault("underflow", "BigNumber.from", value);
            }
            if (value >= MAX_SAFE || value <= -MAX_SAFE) {
              throwFault("overflow", "BigNumber.from", value);
            }
            return BigNumber3.from(String(value));
          }
          var anyValue = value;
          if (typeof anyValue === "bigint") {
            return BigNumber3.from(anyValue.toString());
          }
          if ((0, bytes_1.isBytes)(anyValue)) {
            return BigNumber3.from((0, bytes_1.hexlify)(anyValue));
          }
          if (anyValue) {
            if (anyValue.toHexString) {
              var hex = anyValue.toHexString();
              if (typeof hex === "string") {
                return BigNumber3.from(hex);
              }
            } else {
              var hex = anyValue._hex;
              if (hex == null && anyValue.type === "BigNumber") {
                hex = anyValue.hex;
              }
              if (typeof hex === "string") {
                if ((0, bytes_1.isHexString)(hex) || hex[0] === "-" && (0, bytes_1.isHexString)(hex.substring(1))) {
                  return BigNumber3.from(hex);
                }
              }
            }
          }
          return logger.throwArgumentError("invalid BigNumber value", "value", value);
        };
        BigNumber3.isBigNumber = function(value) {
          return !!(value && value._isBigNumber);
        };
        return BigNumber3;
      }()
    );
    exports.BigNumber = BigNumber2;
    function toHex(value) {
      if (typeof value !== "string") {
        return toHex(value.toString(16));
      }
      if (value[0] === "-") {
        value = value.substring(1);
        if (value[0] === "-") {
          logger.throwArgumentError("invalid hex", "value", value);
        }
        value = toHex(value);
        if (value === "0x00") {
          return value;
        }
        return "-" + value;
      }
      if (value.substring(0, 2) !== "0x") {
        value = "0x" + value;
      }
      if (value === "0x") {
        return "0x00";
      }
      if (value.length % 2) {
        value = "0x0" + value.substring(2);
      }
      while (value.length > 4 && value.substring(0, 4) === "0x00") {
        value = "0x" + value.substring(4);
      }
      return value;
    }
    function toBigNumber(value) {
      return BigNumber2.from(toHex(value));
    }
    function toBN(value) {
      var hex = BigNumber2.from(value).toHexString();
      if (hex[0] === "-") {
        return new BN("-" + hex.substring(3), 16);
      }
      return new BN(hex.substring(2), 16);
    }
    function throwFault(fault, operation, value) {
      var params = { fault, operation };
      if (value != null) {
        params.value = value;
      }
      return logger.throwError(fault, logger_1.Logger.errors.NUMERIC_FAULT, params);
    }
    function _base36To16(value) {
      return new BN(value, 36).toString(16);
    }
    exports._base36To16 = _base36To16;
    function _base16To36(value) {
      return new BN(value, 16).toString(36);
    }
    exports._base16To36 = _base16To36;
  }
});

// node_modules/@ethersproject/bignumber/lib/fixednumber.js
var require_fixednumber = __commonJS({
  "node_modules/@ethersproject/bignumber/lib/fixednumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixedNumber = exports.FixedFormat = exports.parseFixed = exports.formatFixed = void 0;
    var bytes_1 = require_lib2();
    var logger_1 = require_lib();
    var _version_1 = require_version3();
    var logger = new logger_1.Logger(_version_1.version);
    var bignumber_1 = require_bignumber();
    var _constructorGuard = {};
    var Zero = bignumber_1.BigNumber.from(0);
    var NegativeOne = bignumber_1.BigNumber.from(-1);
    function throwFault(message, fault, operation, value) {
      var params = { fault, operation };
      if (value !== void 0) {
        params.value = value;
      }
      return logger.throwError(message, logger_1.Logger.errors.NUMERIC_FAULT, params);
    }
    var zeros = "0";
    while (zeros.length < 256) {
      zeros += zeros;
    }
    function getMultiplier(decimals) {
      if (typeof decimals !== "number") {
        try {
          decimals = bignumber_1.BigNumber.from(decimals).toNumber();
        } catch (e) {
        }
      }
      if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
        return "1" + zeros.substring(0, decimals);
      }
      return logger.throwArgumentError("invalid decimal size", "decimals", decimals);
    }
    function formatFixed(value, decimals) {
      if (decimals == null) {
        decimals = 0;
      }
      var multiplier = getMultiplier(decimals);
      value = bignumber_1.BigNumber.from(value);
      var negative = value.lt(Zero);
      if (negative) {
        value = value.mul(NegativeOne);
      }
      var fraction = value.mod(multiplier).toString();
      while (fraction.length < multiplier.length - 1) {
        fraction = "0" + fraction;
      }
      fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
      var whole = value.div(multiplier).toString();
      if (multiplier.length === 1) {
        value = whole;
      } else {
        value = whole + "." + fraction;
      }
      if (negative) {
        value = "-" + value;
      }
      return value;
    }
    exports.formatFixed = formatFixed;
    function parseFixed(value, decimals) {
      if (decimals == null) {
        decimals = 0;
      }
      var multiplier = getMultiplier(decimals);
      if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
        logger.throwArgumentError("invalid decimal value", "value", value);
      }
      var negative = value.substring(0, 1) === "-";
      if (negative) {
        value = value.substring(1);
      }
      if (value === ".") {
        logger.throwArgumentError("missing value", "value", value);
      }
      var comps = value.split(".");
      if (comps.length > 2) {
        logger.throwArgumentError("too many decimal points", "value", value);
      }
      var whole = comps[0], fraction = comps[1];
      if (!whole) {
        whole = "0";
      }
      if (!fraction) {
        fraction = "0";
      }
      while (fraction[fraction.length - 1] === "0") {
        fraction = fraction.substring(0, fraction.length - 1);
      }
      if (fraction.length > multiplier.length - 1) {
        throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
      }
      if (fraction === "") {
        fraction = "0";
      }
      while (fraction.length < multiplier.length - 1) {
        fraction += "0";
      }
      var wholeValue = bignumber_1.BigNumber.from(whole);
      var fractionValue = bignumber_1.BigNumber.from(fraction);
      var wei = wholeValue.mul(multiplier).add(fractionValue);
      if (negative) {
        wei = wei.mul(NegativeOne);
      }
      return wei;
    }
    exports.parseFixed = parseFixed;
    var FixedFormat = (
      /** @class */
      function() {
        function FixedFormat2(constructorGuard, signed, width, decimals) {
          if (constructorGuard !== _constructorGuard) {
            logger.throwError("cannot use FixedFormat constructor; use FixedFormat.from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "new FixedFormat"
            });
          }
          this.signed = signed;
          this.width = width;
          this.decimals = decimals;
          this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
          this._multiplier = getMultiplier(decimals);
          Object.freeze(this);
        }
        FixedFormat2.from = function(value) {
          if (value instanceof FixedFormat2) {
            return value;
          }
          if (typeof value === "number") {
            value = "fixed128x" + value;
          }
          var signed = true;
          var width = 128;
          var decimals = 18;
          if (typeof value === "string") {
            if (value === "fixed") {
            } else if (value === "ufixed") {
              signed = false;
            } else {
              var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
              if (!match) {
                logger.throwArgumentError("invalid fixed format", "format", value);
              }
              signed = match[1] !== "u";
              width = parseInt(match[2]);
              decimals = parseInt(match[3]);
            }
          } else if (value) {
            var check = function(key, type, defaultValue) {
              if (value[key] == null) {
                return defaultValue;
              }
              if (typeof value[key] !== type) {
                logger.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
              }
              return value[key];
            };
            signed = check("signed", "boolean", signed);
            width = check("width", "number", width);
            decimals = check("decimals", "number", decimals);
          }
          if (width % 8) {
            logger.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
          }
          if (decimals > 80) {
            logger.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
          }
          return new FixedFormat2(_constructorGuard, signed, width, decimals);
        };
        return FixedFormat2;
      }()
    );
    exports.FixedFormat = FixedFormat;
    var FixedNumber = (
      /** @class */
      function() {
        function FixedNumber2(constructorGuard, hex, value, format) {
          if (constructorGuard !== _constructorGuard) {
            logger.throwError("cannot use FixedNumber constructor; use FixedNumber.from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "new FixedFormat"
            });
          }
          this.format = format;
          this._hex = hex;
          this._value = value;
          this._isFixedNumber = true;
          Object.freeze(this);
        }
        FixedNumber2.prototype._checkFormat = function(other) {
          if (this.format.name !== other.format.name) {
            logger.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
          }
        };
        FixedNumber2.prototype.addUnsafe = function(other) {
          this._checkFormat(other);
          var a = parseFixed(this._value, this.format.decimals);
          var b = parseFixed(other._value, other.format.decimals);
          return FixedNumber2.fromValue(a.add(b), this.format.decimals, this.format);
        };
        FixedNumber2.prototype.subUnsafe = function(other) {
          this._checkFormat(other);
          var a = parseFixed(this._value, this.format.decimals);
          var b = parseFixed(other._value, other.format.decimals);
          return FixedNumber2.fromValue(a.sub(b), this.format.decimals, this.format);
        };
        FixedNumber2.prototype.mulUnsafe = function(other) {
          this._checkFormat(other);
          var a = parseFixed(this._value, this.format.decimals);
          var b = parseFixed(other._value, other.format.decimals);
          return FixedNumber2.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
        };
        FixedNumber2.prototype.divUnsafe = function(other) {
          this._checkFormat(other);
          var a = parseFixed(this._value, this.format.decimals);
          var b = parseFixed(other._value, other.format.decimals);
          return FixedNumber2.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
        };
        FixedNumber2.prototype.floor = function() {
          var comps = this.toString().split(".");
          if (comps.length === 1) {
            comps.push("0");
          }
          var result = FixedNumber2.from(comps[0], this.format);
          var hasFraction = !comps[1].match(/^(0*)$/);
          if (this.isNegative() && hasFraction) {
            result = result.subUnsafe(ONE.toFormat(result.format));
          }
          return result;
        };
        FixedNumber2.prototype.ceiling = function() {
          var comps = this.toString().split(".");
          if (comps.length === 1) {
            comps.push("0");
          }
          var result = FixedNumber2.from(comps[0], this.format);
          var hasFraction = !comps[1].match(/^(0*)$/);
          if (!this.isNegative() && hasFraction) {
            result = result.addUnsafe(ONE.toFormat(result.format));
          }
          return result;
        };
        FixedNumber2.prototype.round = function(decimals) {
          if (decimals == null) {
            decimals = 0;
          }
          var comps = this.toString().split(".");
          if (comps.length === 1) {
            comps.push("0");
          }
          if (decimals < 0 || decimals > 80 || decimals % 1) {
            logger.throwArgumentError("invalid decimal count", "decimals", decimals);
          }
          if (comps[1].length <= decimals) {
            return this;
          }
          var factor = FixedNumber2.from("1" + zeros.substring(0, decimals), this.format);
          var bump = BUMP.toFormat(this.format);
          return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
        };
        FixedNumber2.prototype.isZero = function() {
          return this._value === "0.0" || this._value === "0";
        };
        FixedNumber2.prototype.isNegative = function() {
          return this._value[0] === "-";
        };
        FixedNumber2.prototype.toString = function() {
          return this._value;
        };
        FixedNumber2.prototype.toHexString = function(width) {
          if (width == null) {
            return this._hex;
          }
          if (width % 8) {
            logger.throwArgumentError("invalid byte width", "width", width);
          }
          var hex = bignumber_1.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
          return (0, bytes_1.hexZeroPad)(hex, width / 8);
        };
        FixedNumber2.prototype.toUnsafeFloat = function() {
          return parseFloat(this.toString());
        };
        FixedNumber2.prototype.toFormat = function(format) {
          return FixedNumber2.fromString(this._value, format);
        };
        FixedNumber2.fromValue = function(value, decimals, format) {
          if (format == null && decimals != null && !(0, bignumber_1.isBigNumberish)(decimals)) {
            format = decimals;
            decimals = null;
          }
          if (decimals == null) {
            decimals = 0;
          }
          if (format == null) {
            format = "fixed";
          }
          return FixedNumber2.fromString(formatFixed(value, decimals), FixedFormat.from(format));
        };
        FixedNumber2.fromString = function(value, format) {
          if (format == null) {
            format = "fixed";
          }
          var fixedFormat = FixedFormat.from(format);
          var numeric = parseFixed(value, fixedFormat.decimals);
          if (!fixedFormat.signed && numeric.lt(Zero)) {
            throwFault("unsigned value cannot be negative", "overflow", "value", value);
          }
          var hex = null;
          if (fixedFormat.signed) {
            hex = numeric.toTwos(fixedFormat.width).toHexString();
          } else {
            hex = numeric.toHexString();
            hex = (0, bytes_1.hexZeroPad)(hex, fixedFormat.width / 8);
          }
          var decimal = formatFixed(numeric, fixedFormat.decimals);
          return new FixedNumber2(_constructorGuard, hex, decimal, fixedFormat);
        };
        FixedNumber2.fromBytes = function(value, format) {
          if (format == null) {
            format = "fixed";
          }
          var fixedFormat = FixedFormat.from(format);
          if ((0, bytes_1.arrayify)(value).length > fixedFormat.width / 8) {
            throw new Error("overflow");
          }
          var numeric = bignumber_1.BigNumber.from(value);
          if (fixedFormat.signed) {
            numeric = numeric.fromTwos(fixedFormat.width);
          }
          var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
          var decimal = formatFixed(numeric, fixedFormat.decimals);
          return new FixedNumber2(_constructorGuard, hex, decimal, fixedFormat);
        };
        FixedNumber2.from = function(value, format) {
          if (typeof value === "string") {
            return FixedNumber2.fromString(value, format);
          }
          if ((0, bytes_1.isBytes)(value)) {
            return FixedNumber2.fromBytes(value, format);
          }
          try {
            return FixedNumber2.fromValue(value, 0, format);
          } catch (error) {
            if (error.code !== logger_1.Logger.errors.INVALID_ARGUMENT) {
              throw error;
            }
          }
          return logger.throwArgumentError("invalid FixedNumber value", "value", value);
        };
        FixedNumber2.isFixedNumber = function(value) {
          return !!(value && value._isFixedNumber);
        };
        return FixedNumber2;
      }()
    );
    exports.FixedNumber = FixedNumber;
    var ONE = FixedNumber.from(1);
    var BUMP = FixedNumber.from("0.5");
  }
});

// node_modules/@ethersproject/bignumber/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@ethersproject/bignumber/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._base36To16 = exports._base16To36 = exports.parseFixed = exports.FixedNumber = exports.FixedFormat = exports.formatFixed = exports.BigNumber = void 0;
    var bignumber_1 = require_bignumber();
    Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function() {
      return bignumber_1.BigNumber;
    } });
    var fixednumber_1 = require_fixednumber();
    Object.defineProperty(exports, "formatFixed", { enumerable: true, get: function() {
      return fixednumber_1.formatFixed;
    } });
    Object.defineProperty(exports, "FixedFormat", { enumerable: true, get: function() {
      return fixednumber_1.FixedFormat;
    } });
    Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function() {
      return fixednumber_1.FixedNumber;
    } });
    Object.defineProperty(exports, "parseFixed", { enumerable: true, get: function() {
      return fixednumber_1.parseFixed;
    } });
    var bignumber_2 = require_bignumber();
    Object.defineProperty(exports, "_base16To36", { enumerable: true, get: function() {
      return bignumber_2._base16To36;
    } });
    Object.defineProperty(exports, "_base36To16", { enumerable: true, get: function() {
      return bignumber_2._base36To16;
    } });
  }
});

// node_modules/@ethersproject/properties/lib/_version.js
var require_version4 = __commonJS({
  "node_modules/@ethersproject/properties/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "properties/5.7.0";
  }
});

// node_modules/@ethersproject/properties/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/@ethersproject/properties/lib/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Description = exports.deepCopy = exports.shallowCopy = exports.checkProperties = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = void 0;
    var logger_1 = require_lib();
    var _version_1 = require_version4();
    var logger = new logger_1.Logger(_version_1.version);
    function defineReadOnly(object, name, value) {
      Object.defineProperty(object, name, {
        enumerable: true,
        value,
        writable: false
      });
    }
    exports.defineReadOnly = defineReadOnly;
    function getStatic(ctor, key) {
      for (var i = 0; i < 32; i++) {
        if (ctor[key]) {
          return ctor[key];
        }
        if (!ctor.prototype || typeof ctor.prototype !== "object") {
          break;
        }
        ctor = Object.getPrototypeOf(ctor.prototype).constructor;
      }
      return null;
    }
    exports.getStatic = getStatic;
    function resolveProperties(object) {
      return __awaiter(this, void 0, void 0, function() {
        var promises, results;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              promises = Object.keys(object).map(function(key) {
                var value = object[key];
                return Promise.resolve(value).then(function(v) {
                  return { key, value: v };
                });
              });
              return [4, Promise.all(promises)];
            case 1:
              results = _a.sent();
              return [2, results.reduce(function(accum, result) {
                accum[result.key] = result.value;
                return accum;
              }, {})];
          }
        });
      });
    }
    exports.resolveProperties = resolveProperties;
    function checkProperties(object, properties) {
      if (!object || typeof object !== "object") {
        logger.throwArgumentError("invalid object", "object", object);
      }
      Object.keys(object).forEach(function(key) {
        if (!properties[key]) {
          logger.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
        }
      });
    }
    exports.checkProperties = checkProperties;
    function shallowCopy(object) {
      var result = {};
      for (var key in object) {
        result[key] = object[key];
      }
      return result;
    }
    exports.shallowCopy = shallowCopy;
    var opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
    function _isFrozen(object) {
      if (object === void 0 || object === null || opaque[typeof object]) {
        return true;
      }
      if (Array.isArray(object) || typeof object === "object") {
        if (!Object.isFrozen(object)) {
          return false;
        }
        var keys = Object.keys(object);
        for (var i = 0; i < keys.length; i++) {
          var value = null;
          try {
            value = object[keys[i]];
          } catch (error) {
            continue;
          }
          if (!_isFrozen(value)) {
            return false;
          }
        }
        return true;
      }
      return logger.throwArgumentError("Cannot deepCopy " + typeof object, "object", object);
    }
    function _deepCopy(object) {
      if (_isFrozen(object)) {
        return object;
      }
      if (Array.isArray(object)) {
        return Object.freeze(object.map(function(item) {
          return deepCopy(item);
        }));
      }
      if (typeof object === "object") {
        var result = {};
        for (var key in object) {
          var value = object[key];
          if (value === void 0) {
            continue;
          }
          defineReadOnly(result, key, deepCopy(value));
        }
        return result;
      }
      return logger.throwArgumentError("Cannot deepCopy " + typeof object, "object", object);
    }
    function deepCopy(object) {
      return _deepCopy(object);
    }
    exports.deepCopy = deepCopy;
    var Description = (
      /** @class */
      function() {
        function Description2(info) {
          for (var key in info) {
            this[key] = deepCopy(info[key]);
          }
        }
        return Description2;
      }()
    );
    exports.Description = Description;
  }
});

// node_modules/@ethersproject/abi/lib/_version.js
var require_version5 = __commonJS({
  "node_modules/@ethersproject/abi/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "abi/5.7.0";
  }
});

// node_modules/@ethersproject/abi/lib/fragments.js
var require_fragments = __commonJS({
  "node_modules/@ethersproject/abi/lib/fragments.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrorFragment = exports.FunctionFragment = exports.ConstructorFragment = exports.EventFragment = exports.Fragment = exports.ParamType = exports.FormatTypes = void 0;
    var bignumber_1 = require_lib3();
    var properties_1 = require_lib4();
    var logger_1 = require_lib();
    var _version_1 = require_version5();
    var logger = new logger_1.Logger(_version_1.version);
    var _constructorGuard = {};
    var ModifiersBytes = { calldata: true, memory: true, storage: true };
    var ModifiersNest = { calldata: true, memory: true };
    function checkModifier(type, name) {
      if (type === "bytes" || type === "string") {
        if (ModifiersBytes[name]) {
          return true;
        }
      } else if (type === "address") {
        if (name === "payable") {
          return true;
        }
      } else if (type.indexOf("[") >= 0 || type === "tuple") {
        if (ModifiersNest[name]) {
          return true;
        }
      }
      if (ModifiersBytes[name] || name === "payable") {
        logger.throwArgumentError("invalid modifier", "name", name);
      }
      return false;
    }
    function parseParamType(param, allowIndexed) {
      var originalParam = param;
      function throwError(i2) {
        logger.throwArgumentError("unexpected character at position " + i2, "param", param);
      }
      param = param.replace(/\s/g, " ");
      function newNode(parent2) {
        var node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
        if (allowIndexed) {
          node2.indexed = false;
        }
        return node2;
      }
      var parent = { type: "", name: "", state: { allowType: true } };
      var node = parent;
      for (var i = 0; i < param.length; i++) {
        var c = param[i];
        switch (c) {
          case "(":
            if (node.state.allowType && node.type === "") {
              node.type = "tuple";
            } else if (!node.state.allowParams) {
              throwError(i);
            }
            node.state.allowType = false;
            node.type = verifyType(node.type);
            node.components = [newNode(node)];
            node = node.components[0];
            break;
          case ")":
            delete node.state;
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError(i);
              }
              node.indexed = true;
              node.name = "";
            }
            if (checkModifier(node.type, node.name)) {
              node.name = "";
            }
            node.type = verifyType(node.type);
            var child = node;
            node = node.parent;
            if (!node) {
              throwError(i);
            }
            delete child.parent;
            node.state.allowParams = false;
            node.state.allowName = true;
            node.state.allowArray = true;
            break;
          case ",":
            delete node.state;
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError(i);
              }
              node.indexed = true;
              node.name = "";
            }
            if (checkModifier(node.type, node.name)) {
              node.name = "";
            }
            node.type = verifyType(node.type);
            var sibling = newNode(node.parent);
            node.parent.components.push(sibling);
            delete node.parent;
            node = sibling;
            break;
          case " ":
            if (node.state.allowType) {
              if (node.type !== "") {
                node.type = verifyType(node.type);
                delete node.state.allowType;
                node.state.allowName = true;
                node.state.allowParams = true;
              }
            }
            if (node.state.allowName) {
              if (node.name !== "") {
                if (node.name === "indexed") {
                  if (!allowIndexed) {
                    throwError(i);
                  }
                  if (node.indexed) {
                    throwError(i);
                  }
                  node.indexed = true;
                  node.name = "";
                } else if (checkModifier(node.type, node.name)) {
                  node.name = "";
                } else {
                  node.state.allowName = false;
                }
              }
            }
            break;
          case "[":
            if (!node.state.allowArray) {
              throwError(i);
            }
            node.type += c;
            node.state.allowArray = false;
            node.state.allowName = false;
            node.state.readArray = true;
            break;
          case "]":
            if (!node.state.readArray) {
              throwError(i);
            }
            node.type += c;
            node.state.readArray = false;
            node.state.allowArray = true;
            node.state.allowName = true;
            break;
          default:
            if (node.state.allowType) {
              node.type += c;
              node.state.allowParams = true;
              node.state.allowArray = true;
            } else if (node.state.allowName) {
              node.name += c;
              delete node.state.allowArray;
            } else if (node.state.readArray) {
              node.type += c;
            } else {
              throwError(i);
            }
        }
      }
      if (node.parent) {
        logger.throwArgumentError("unexpected eof", "param", param);
      }
      delete parent.state;
      if (node.name === "indexed") {
        if (!allowIndexed) {
          throwError(originalParam.length - 7);
        }
        if (node.indexed) {
          throwError(originalParam.length - 7);
        }
        node.indexed = true;
        node.name = "";
      } else if (checkModifier(node.type, node.name)) {
        node.name = "";
      }
      parent.type = verifyType(parent.type);
      return parent;
    }
    function populate(object, params) {
      for (var key in params) {
        (0, properties_1.defineReadOnly)(object, key, params[key]);
      }
    }
    exports.FormatTypes = Object.freeze({
      // Bare formatting, as is needed for computing a sighash of an event or function
      sighash: "sighash",
      // Human-Readable with Minimal spacing and without names (compact human-readable)
      minimal: "minimal",
      // Human-Readable with nice spacing, including all names
      full: "full",
      // JSON-format a la Solidity
      json: "json"
    });
    var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    var ParamType = (
      /** @class */
      function() {
        function ParamType2(constructorGuard, params) {
          if (constructorGuard !== _constructorGuard) {
            logger.throwError("use fromString", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "new ParamType()"
            });
          }
          populate(this, params);
          var match = this.type.match(paramTypeArray);
          if (match) {
            populate(this, {
              arrayLength: parseInt(match[2] || "-1"),
              arrayChildren: ParamType2.fromObject({
                type: match[1],
                components: this.components
              }),
              baseType: "array"
            });
          } else {
            populate(this, {
              arrayLength: null,
              arrayChildren: null,
              baseType: this.components != null ? "tuple" : this.type
            });
          }
          this._isParamType = true;
          Object.freeze(this);
        }
        ParamType2.prototype.format = function(format) {
          if (!format) {
            format = exports.FormatTypes.sighash;
          }
          if (!exports.FormatTypes[format]) {
            logger.throwArgumentError("invalid format type", "format", format);
          }
          if (format === exports.FormatTypes.json) {
            var result_1 = {
              type: this.baseType === "tuple" ? "tuple" : this.type,
              name: this.name || void 0
            };
            if (typeof this.indexed === "boolean") {
              result_1.indexed = this.indexed;
            }
            if (this.components) {
              result_1.components = this.components.map(function(comp) {
                return JSON.parse(comp.format(format));
              });
            }
            return JSON.stringify(result_1);
          }
          var result = "";
          if (this.baseType === "array") {
            result += this.arrayChildren.format(format);
            result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
          } else {
            if (this.baseType === "tuple") {
              if (format !== exports.FormatTypes.sighash) {
                result += this.type;
              }
              result += "(" + this.components.map(function(comp) {
                return comp.format(format);
              }).join(format === exports.FormatTypes.full ? ", " : ",") + ")";
            } else {
              result += this.type;
            }
          }
          if (format !== exports.FormatTypes.sighash) {
            if (this.indexed === true) {
              result += " indexed";
            }
            if (format === exports.FormatTypes.full && this.name) {
              result += " " + this.name;
            }
          }
          return result;
        };
        ParamType2.from = function(value, allowIndexed) {
          if (typeof value === "string") {
            return ParamType2.fromString(value, allowIndexed);
          }
          return ParamType2.fromObject(value);
        };
        ParamType2.fromObject = function(value) {
          if (ParamType2.isParamType(value)) {
            return value;
          }
          return new ParamType2(_constructorGuard, {
            name: value.name || null,
            type: verifyType(value.type),
            indexed: value.indexed == null ? null : !!value.indexed,
            components: value.components ? value.components.map(ParamType2.fromObject) : null
          });
        };
        ParamType2.fromString = function(value, allowIndexed) {
          function ParamTypify(node) {
            return ParamType2.fromObject({
              name: node.name,
              type: node.type,
              indexed: node.indexed,
              components: node.components
            });
          }
          return ParamTypify(parseParamType(value, !!allowIndexed));
        };
        ParamType2.isParamType = function(value) {
          return !!(value != null && value._isParamType);
        };
        return ParamType2;
      }()
    );
    exports.ParamType = ParamType;
    function parseParams(value, allowIndex) {
      return splitNesting(value).map(function(param) {
        return ParamType.fromString(param, allowIndex);
      });
    }
    var Fragment = (
      /** @class */
      function() {
        function Fragment2(constructorGuard, params) {
          if (constructorGuard !== _constructorGuard) {
            logger.throwError("use a static from method", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "new Fragment()"
            });
          }
          populate(this, params);
          this._isFragment = true;
          Object.freeze(this);
        }
        Fragment2.from = function(value) {
          if (Fragment2.isFragment(value)) {
            return value;
          }
          if (typeof value === "string") {
            return Fragment2.fromString(value);
          }
          return Fragment2.fromObject(value);
        };
        Fragment2.fromObject = function(value) {
          if (Fragment2.isFragment(value)) {
            return value;
          }
          switch (value.type) {
            case "function":
              return FunctionFragment.fromObject(value);
            case "event":
              return EventFragment.fromObject(value);
            case "constructor":
              return ConstructorFragment.fromObject(value);
            case "error":
              return ErrorFragment.fromObject(value);
            case "fallback":
            case "receive":
              return null;
          }
          return logger.throwArgumentError("invalid fragment object", "value", value);
        };
        Fragment2.fromString = function(value) {
          value = value.replace(/\s/g, " ");
          value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
          value = value.trim();
          if (value.split(" ")[0] === "event") {
            return EventFragment.fromString(value.substring(5).trim());
          } else if (value.split(" ")[0] === "function") {
            return FunctionFragment.fromString(value.substring(8).trim());
          } else if (value.split("(")[0].trim() === "constructor") {
            return ConstructorFragment.fromString(value.trim());
          } else if (value.split(" ")[0] === "error") {
            return ErrorFragment.fromString(value.substring(5).trim());
          }
          return logger.throwArgumentError("unsupported fragment", "value", value);
        };
        Fragment2.isFragment = function(value) {
          return !!(value && value._isFragment);
        };
        return Fragment2;
      }()
    );
    exports.Fragment = Fragment;
    var EventFragment = (
      /** @class */
      function(_super) {
        __extends(EventFragment2, _super);
        function EventFragment2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        EventFragment2.prototype.format = function(format) {
          if (!format) {
            format = exports.FormatTypes.sighash;
          }
          if (!exports.FormatTypes[format]) {
            logger.throwArgumentError("invalid format type", "format", format);
          }
          if (format === exports.FormatTypes.json) {
            return JSON.stringify({
              type: "event",
              anonymous: this.anonymous,
              name: this.name,
              inputs: this.inputs.map(function(input) {
                return JSON.parse(input.format(format));
              })
            });
          }
          var result = "";
          if (format !== exports.FormatTypes.sighash) {
            result += "event ";
          }
          result += this.name + "(" + this.inputs.map(function(input) {
            return input.format(format);
          }).join(format === exports.FormatTypes.full ? ", " : ",") + ") ";
          if (format !== exports.FormatTypes.sighash) {
            if (this.anonymous) {
              result += "anonymous ";
            }
          }
          return result.trim();
        };
        EventFragment2.from = function(value) {
          if (typeof value === "string") {
            return EventFragment2.fromString(value);
          }
          return EventFragment2.fromObject(value);
        };
        EventFragment2.fromObject = function(value) {
          if (EventFragment2.isEventFragment(value)) {
            return value;
          }
          if (value.type !== "event") {
            logger.throwArgumentError("invalid event object", "value", value);
          }
          var params = {
            name: verifyIdentifier(value.name),
            anonymous: value.anonymous,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            type: "event"
          };
          return new EventFragment2(_constructorGuard, params);
        };
        EventFragment2.fromString = function(value) {
          var match = value.match(regexParen);
          if (!match) {
            logger.throwArgumentError("invalid event string", "value", value);
          }
          var anonymous = false;
          match[3].split(" ").forEach(function(modifier) {
            switch (modifier.trim()) {
              case "anonymous":
                anonymous = true;
                break;
              case "":
                break;
              default:
                logger.warn("unknown modifier: " + modifier);
            }
          });
          return EventFragment2.fromObject({
            name: match[1].trim(),
            anonymous,
            inputs: parseParams(match[2], true),
            type: "event"
          });
        };
        EventFragment2.isEventFragment = function(value) {
          return value && value._isFragment && value.type === "event";
        };
        return EventFragment2;
      }(Fragment)
    );
    exports.EventFragment = EventFragment;
    function parseGas(value, params) {
      params.gas = null;
      var comps = value.split("@");
      if (comps.length !== 1) {
        if (comps.length > 2) {
          logger.throwArgumentError("invalid human-readable ABI signature", "value", value);
        }
        if (!comps[1].match(/^[0-9]+$/)) {
          logger.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
        }
        params.gas = bignumber_1.BigNumber.from(comps[1]);
        return comps[0];
      }
      return value;
    }
    function parseModifiers(value, params) {
      params.constant = false;
      params.payable = false;
      params.stateMutability = "nonpayable";
      value.split(" ").forEach(function(modifier) {
        switch (modifier.trim()) {
          case "constant":
            params.constant = true;
            break;
          case "payable":
            params.payable = true;
            params.stateMutability = "payable";
            break;
          case "nonpayable":
            params.payable = false;
            params.stateMutability = "nonpayable";
            break;
          case "pure":
            params.constant = true;
            params.stateMutability = "pure";
            break;
          case "view":
            params.constant = true;
            params.stateMutability = "view";
            break;
          case "external":
          case "public":
          case "":
            break;
          default:
            console.log("unknown modifier: " + modifier);
        }
      });
    }
    function verifyState(value) {
      var result = {
        constant: false,
        payable: true,
        stateMutability: "payable"
      };
      if (value.stateMutability != null) {
        result.stateMutability = value.stateMutability;
        result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
        if (value.constant != null) {
          if (!!value.constant !== result.constant) {
            logger.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
          }
        }
        result.payable = result.stateMutability === "payable";
        if (value.payable != null) {
          if (!!value.payable !== result.payable) {
            logger.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
          }
        }
      } else if (value.payable != null) {
        result.payable = !!value.payable;
        if (value.constant == null && !result.payable && value.type !== "constructor") {
          logger.throwArgumentError("unable to determine stateMutability", "value", value);
        }
        result.constant = !!value.constant;
        if (result.constant) {
          result.stateMutability = "view";
        } else {
          result.stateMutability = result.payable ? "payable" : "nonpayable";
        }
        if (result.payable && result.constant) {
          logger.throwArgumentError("cannot have constant payable function", "value", value);
        }
      } else if (value.constant != null) {
        result.constant = !!value.constant;
        result.payable = !result.constant;
        result.stateMutability = result.constant ? "view" : "payable";
      } else if (value.type !== "constructor") {
        logger.throwArgumentError("unable to determine stateMutability", "value", value);
      }
      return result;
    }
    var ConstructorFragment = (
      /** @class */
      function(_super) {
        __extends(ConstructorFragment2, _super);
        function ConstructorFragment2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ConstructorFragment2.prototype.format = function(format) {
          if (!format) {
            format = exports.FormatTypes.sighash;
          }
          if (!exports.FormatTypes[format]) {
            logger.throwArgumentError("invalid format type", "format", format);
          }
          if (format === exports.FormatTypes.json) {
            return JSON.stringify({
              type: "constructor",
              stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
              payable: this.payable,
              gas: this.gas ? this.gas.toNumber() : void 0,
              inputs: this.inputs.map(function(input) {
                return JSON.parse(input.format(format));
              })
            });
          }
          if (format === exports.FormatTypes.sighash) {
            logger.throwError("cannot format a constructor for sighash", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "format(sighash)"
            });
          }
          var result = "constructor(" + this.inputs.map(function(input) {
            return input.format(format);
          }).join(format === exports.FormatTypes.full ? ", " : ",") + ") ";
          if (this.stateMutability && this.stateMutability !== "nonpayable") {
            result += this.stateMutability + " ";
          }
          return result.trim();
        };
        ConstructorFragment2.from = function(value) {
          if (typeof value === "string") {
            return ConstructorFragment2.fromString(value);
          }
          return ConstructorFragment2.fromObject(value);
        };
        ConstructorFragment2.fromObject = function(value) {
          if (ConstructorFragment2.isConstructorFragment(value)) {
            return value;
          }
          if (value.type !== "constructor") {
            logger.throwArgumentError("invalid constructor object", "value", value);
          }
          var state = verifyState(value);
          if (state.constant) {
            logger.throwArgumentError("constructor cannot be constant", "value", value);
          }
          var params = {
            name: null,
            type: value.type,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            payable: state.payable,
            stateMutability: state.stateMutability,
            gas: value.gas ? bignumber_1.BigNumber.from(value.gas) : null
          };
          return new ConstructorFragment2(_constructorGuard, params);
        };
        ConstructorFragment2.fromString = function(value) {
          var params = { type: "constructor" };
          value = parseGas(value, params);
          var parens = value.match(regexParen);
          if (!parens || parens[1].trim() !== "constructor") {
            logger.throwArgumentError("invalid constructor string", "value", value);
          }
          params.inputs = parseParams(parens[2].trim(), false);
          parseModifiers(parens[3].trim(), params);
          return ConstructorFragment2.fromObject(params);
        };
        ConstructorFragment2.isConstructorFragment = function(value) {
          return value && value._isFragment && value.type === "constructor";
        };
        return ConstructorFragment2;
      }(Fragment)
    );
    exports.ConstructorFragment = ConstructorFragment;
    var FunctionFragment = (
      /** @class */
      function(_super) {
        __extends(FunctionFragment2, _super);
        function FunctionFragment2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        FunctionFragment2.prototype.format = function(format) {
          if (!format) {
            format = exports.FormatTypes.sighash;
          }
          if (!exports.FormatTypes[format]) {
            logger.throwArgumentError("invalid format type", "format", format);
          }
          if (format === exports.FormatTypes.json) {
            return JSON.stringify({
              type: "function",
              name: this.name,
              constant: this.constant,
              stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
              payable: this.payable,
              gas: this.gas ? this.gas.toNumber() : void 0,
              inputs: this.inputs.map(function(input) {
                return JSON.parse(input.format(format));
              }),
              outputs: this.outputs.map(function(output) {
                return JSON.parse(output.format(format));
              })
            });
          }
          var result = "";
          if (format !== exports.FormatTypes.sighash) {
            result += "function ";
          }
          result += this.name + "(" + this.inputs.map(function(input) {
            return input.format(format);
          }).join(format === exports.FormatTypes.full ? ", " : ",") + ") ";
          if (format !== exports.FormatTypes.sighash) {
            if (this.stateMutability) {
              if (this.stateMutability !== "nonpayable") {
                result += this.stateMutability + " ";
              }
            } else if (this.constant) {
              result += "view ";
            }
            if (this.outputs && this.outputs.length) {
              result += "returns (" + this.outputs.map(function(output) {
                return output.format(format);
              }).join(", ") + ") ";
            }
            if (this.gas != null) {
              result += "@" + this.gas.toString() + " ";
            }
          }
          return result.trim();
        };
        FunctionFragment2.from = function(value) {
          if (typeof value === "string") {
            return FunctionFragment2.fromString(value);
          }
          return FunctionFragment2.fromObject(value);
        };
        FunctionFragment2.fromObject = function(value) {
          if (FunctionFragment2.isFunctionFragment(value)) {
            return value;
          }
          if (value.type !== "function") {
            logger.throwArgumentError("invalid function object", "value", value);
          }
          var state = verifyState(value);
          var params = {
            type: value.type,
            name: verifyIdentifier(value.name),
            constant: state.constant,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
            payable: state.payable,
            stateMutability: state.stateMutability,
            gas: value.gas ? bignumber_1.BigNumber.from(value.gas) : null
          };
          return new FunctionFragment2(_constructorGuard, params);
        };
        FunctionFragment2.fromString = function(value) {
          var params = { type: "function" };
          value = parseGas(value, params);
          var comps = value.split(" returns ");
          if (comps.length > 2) {
            logger.throwArgumentError("invalid function string", "value", value);
          }
          var parens = comps[0].match(regexParen);
          if (!parens) {
            logger.throwArgumentError("invalid function signature", "value", value);
          }
          params.name = parens[1].trim();
          if (params.name) {
            verifyIdentifier(params.name);
          }
          params.inputs = parseParams(parens[2], false);
          parseModifiers(parens[3].trim(), params);
          if (comps.length > 1) {
            var returns = comps[1].match(regexParen);
            if (returns[1].trim() != "" || returns[3].trim() != "") {
              logger.throwArgumentError("unexpected tokens", "value", value);
            }
            params.outputs = parseParams(returns[2], false);
          } else {
            params.outputs = [];
          }
          return FunctionFragment2.fromObject(params);
        };
        FunctionFragment2.isFunctionFragment = function(value) {
          return value && value._isFragment && value.type === "function";
        };
        return FunctionFragment2;
      }(ConstructorFragment)
    );
    exports.FunctionFragment = FunctionFragment;
    function checkForbidden(fragment) {
      var sig = fragment.format();
      if (sig === "Error(string)" || sig === "Panic(uint256)") {
        logger.throwArgumentError("cannot specify user defined " + sig + " error", "fragment", fragment);
      }
      return fragment;
    }
    var ErrorFragment = (
      /** @class */
      function(_super) {
        __extends(ErrorFragment2, _super);
        function ErrorFragment2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ErrorFragment2.prototype.format = function(format) {
          if (!format) {
            format = exports.FormatTypes.sighash;
          }
          if (!exports.FormatTypes[format]) {
            logger.throwArgumentError("invalid format type", "format", format);
          }
          if (format === exports.FormatTypes.json) {
            return JSON.stringify({
              type: "error",
              name: this.name,
              inputs: this.inputs.map(function(input) {
                return JSON.parse(input.format(format));
              })
            });
          }
          var result = "";
          if (format !== exports.FormatTypes.sighash) {
            result += "error ";
          }
          result += this.name + "(" + this.inputs.map(function(input) {
            return input.format(format);
          }).join(format === exports.FormatTypes.full ? ", " : ",") + ") ";
          return result.trim();
        };
        ErrorFragment2.from = function(value) {
          if (typeof value === "string") {
            return ErrorFragment2.fromString(value);
          }
          return ErrorFragment2.fromObject(value);
        };
        ErrorFragment2.fromObject = function(value) {
          if (ErrorFragment2.isErrorFragment(value)) {
            return value;
          }
          if (value.type !== "error") {
            logger.throwArgumentError("invalid error object", "value", value);
          }
          var params = {
            type: value.type,
            name: verifyIdentifier(value.name),
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
          };
          return checkForbidden(new ErrorFragment2(_constructorGuard, params));
        };
        ErrorFragment2.fromString = function(value) {
          var params = { type: "error" };
          var parens = value.match(regexParen);
          if (!parens) {
            logger.throwArgumentError("invalid error signature", "value", value);
          }
          params.name = parens[1].trim();
          if (params.name) {
            verifyIdentifier(params.name);
          }
          params.inputs = parseParams(parens[2], false);
          return checkForbidden(ErrorFragment2.fromObject(params));
        };
        ErrorFragment2.isErrorFragment = function(value) {
          return value && value._isFragment && value.type === "error";
        };
        return ErrorFragment2;
      }(Fragment)
    );
    exports.ErrorFragment = ErrorFragment;
    function verifyType(type) {
      if (type.match(/^uint($|[^1-9])/)) {
        type = "uint256" + type.substring(4);
      } else if (type.match(/^int($|[^1-9])/)) {
        type = "int256" + type.substring(3);
      }
      return type;
    }
    var regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    function verifyIdentifier(value) {
      if (!value || !value.match(regexIdentifier)) {
        logger.throwArgumentError('invalid identifier "' + value + '"', "value", value);
      }
      return value;
    }
    var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
    function splitNesting(value) {
      value = value.trim();
      var result = [];
      var accum = "";
      var depth = 0;
      for (var offset = 0; offset < value.length; offset++) {
        var c = value[offset];
        if (c === "," && depth === 0) {
          result.push(accum);
          accum = "";
        } else {
          accum += c;
          if (c === "(") {
            depth++;
          } else if (c === ")") {
            depth--;
            if (depth === -1) {
              logger.throwArgumentError("unbalanced parenthesis", "value", value);
            }
          }
        }
      }
      if (accum) {
        result.push(accum);
      }
      return result;
    }
  }
});

// node_modules/@ethersproject/abi/lib/coders/abstract-coder.js
var require_abstract_coder = __commonJS({
  "node_modules/@ethersproject/abi/lib/coders/abstract-coder.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Reader = exports.Writer = exports.Coder = exports.checkResultErrors = void 0;
    var bytes_1 = require_lib2();
    var bignumber_1 = require_lib3();
    var properties_1 = require_lib4();
    var logger_1 = require_lib();
    var _version_1 = require_version5();
    var logger = new logger_1.Logger(_version_1.version);
    function checkResultErrors(result) {
      var errors = [];
      var checkErrors = function(path, object) {
        if (!Array.isArray(object)) {
          return;
        }
        for (var key in object) {
          var childPath = path.slice();
          childPath.push(key);
          try {
            checkErrors(childPath, object[key]);
          } catch (error) {
            errors.push({ path: childPath, error });
          }
        }
      };
      checkErrors([], result);
      return errors;
    }
    exports.checkResultErrors = checkResultErrors;
    var Coder = (
      /** @class */
      function() {
        function Coder2(name, type, localName, dynamic) {
          this.name = name;
          this.type = type;
          this.localName = localName;
          this.dynamic = dynamic;
        }
        Coder2.prototype._throwError = function(message, value) {
          logger.throwArgumentError(message, this.localName, value);
        };
        return Coder2;
      }()
    );
    exports.Coder = Coder;
    var Writer = (
      /** @class */
      function() {
        function Writer2(wordSize) {
          (0, properties_1.defineReadOnly)(this, "wordSize", wordSize || 32);
          this._data = [];
          this._dataLength = 0;
          this._padding = new Uint8Array(wordSize);
        }
        Object.defineProperty(Writer2.prototype, "data", {
          get: function() {
            return (0, bytes_1.hexConcat)(this._data);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Writer2.prototype, "length", {
          get: function() {
            return this._dataLength;
          },
          enumerable: false,
          configurable: true
        });
        Writer2.prototype._writeData = function(data) {
          this._data.push(data);
          this._dataLength += data.length;
          return data.length;
        };
        Writer2.prototype.appendWriter = function(writer) {
          return this._writeData((0, bytes_1.concat)(writer._data));
        };
        Writer2.prototype.writeBytes = function(value) {
          var bytes = (0, bytes_1.arrayify)(value);
          var paddingOffset = bytes.length % this.wordSize;
          if (paddingOffset) {
            bytes = (0, bytes_1.concat)([bytes, this._padding.slice(paddingOffset)]);
          }
          return this._writeData(bytes);
        };
        Writer2.prototype._getValue = function(value) {
          var bytes = (0, bytes_1.arrayify)(bignumber_1.BigNumber.from(value));
          if (bytes.length > this.wordSize) {
            logger.throwError("value out-of-bounds", logger_1.Logger.errors.BUFFER_OVERRUN, {
              length: this.wordSize,
              offset: bytes.length
            });
          }
          if (bytes.length % this.wordSize) {
            bytes = (0, bytes_1.concat)([this._padding.slice(bytes.length % this.wordSize), bytes]);
          }
          return bytes;
        };
        Writer2.prototype.writeValue = function(value) {
          return this._writeData(this._getValue(value));
        };
        Writer2.prototype.writeUpdatableValue = function() {
          var _this = this;
          var offset = this._data.length;
          this._data.push(this._padding);
          this._dataLength += this.wordSize;
          return function(value) {
            _this._data[offset] = _this._getValue(value);
          };
        };
        return Writer2;
      }()
    );
    exports.Writer = Writer;
    var Reader = (
      /** @class */
      function() {
        function Reader2(data, wordSize, coerceFunc, allowLoose) {
          (0, properties_1.defineReadOnly)(this, "_data", (0, bytes_1.arrayify)(data));
          (0, properties_1.defineReadOnly)(this, "wordSize", wordSize || 32);
          (0, properties_1.defineReadOnly)(this, "_coerceFunc", coerceFunc);
          (0, properties_1.defineReadOnly)(this, "allowLoose", allowLoose);
          this._offset = 0;
        }
        Object.defineProperty(Reader2.prototype, "data", {
          get: function() {
            return (0, bytes_1.hexlify)(this._data);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Reader2.prototype, "consumed", {
          get: function() {
            return this._offset;
          },
          enumerable: false,
          configurable: true
        });
        Reader2.coerce = function(name, value) {
          var match = name.match("^u?int([0-9]+)$");
          if (match && parseInt(match[1]) <= 48) {
            value = value.toNumber();
          }
          return value;
        };
        Reader2.prototype.coerce = function(name, value) {
          if (this._coerceFunc) {
            return this._coerceFunc(name, value);
          }
          return Reader2.coerce(name, value);
        };
        Reader2.prototype._peekBytes = function(offset, length, loose) {
          var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
          if (this._offset + alignedLength > this._data.length) {
            if (this.allowLoose && loose && this._offset + length <= this._data.length) {
              alignedLength = length;
            } else {
              logger.throwError("data out-of-bounds", logger_1.Logger.errors.BUFFER_OVERRUN, {
                length: this._data.length,
                offset: this._offset + alignedLength
              });
            }
          }
          return this._data.slice(this._offset, this._offset + alignedLength);
        };
        Reader2.prototype.subReader = function(offset) {
          return new Reader2(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
        };
        Reader2.prototype.readBytes = function(length, loose) {
          var bytes = this._peekBytes(0, length, !!loose);
          this._offset += bytes.length;
          return bytes.slice(0, length);
        };
        Reader2.prototype.readValue = function() {
          return bignumber_1.BigNumber.from(this.readBytes(this.wordSize));
        };
        return Reader2;
      }()
    );
    exports.Reader = Reader;
  }
});

// node_modules/js-sha3/src/sha3.js
var require_sha3 = __commonJS({
  "node_modules/js-sha3/src/sha3.js"(exports, module) {
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === "object" && module.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits2, padding, outputType) {
        return function(message) {
          return new Keccak(bits2, padding, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding, outputType) {
        return function(message, outputBits, n, s) {
          return methods["cshake" + bits2].update(message, outputBits, n, s)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding, outputType) {
        return function(key, message, outputBits, s) {
          return methods["kmac" + bits2].update(key, message, outputBits, s)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding) {
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method[type] = createMethod2(bits2, padding, type);
        }
        return method;
      };
      var createMethod = function(bits2, padding) {
        var method = createOutputMethod(bits2, padding, "hex");
        method.create = function() {
          return new Keccak(bits2, padding, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding);
      };
      var createShakeMethod = function(bits2, padding) {
        var method = createShakeOutputMethod(bits2, padding, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding);
      };
      var createCshakeMethod = function(bits2, padding) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding, "hex");
        method.create = function(outputBits, n, s) {
          if (!n && !s) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak(bits2, padding, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function(message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding);
      };
      var createKmacMethod = function(bits2, padding) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding, "hex");
        method.create = function(key, outputBits, s) {
          return new Kmac(bits2, padding, outputBits).bytepad(["KMAC", s], w).bytepad([key], w);
        };
        method.update = function(key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + "_" + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak(bits2, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i2 = 0; i2 < 50; ++i2) {
          this.s[i2] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i2, code;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          if (notString) {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
            }
          } else {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
              } else if (code < 2048) {
                blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              }
            }
          }
          this.lastByteIndex = i2;
          if (i2 >= byteCount) {
            this.start = i2 - byteCount;
            this.block = blocks[blockCount];
            for (i2 = 0; i2 < blockCount; ++i2) {
              s[i2] ^= blocks[i2];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i2;
          }
        }
        return this;
      };
      Keccak.prototype.encode = function(x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };
      Keccak.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== "string") {
          if (type === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i2 = 0; i2 < str.length; ++i2) {
            var code = str.charCodeAt(i2);
            if (code < 128) {
              bytes += 1;
            } else if (code < 2048) {
              bytes += 2;
            } else if (code < 55296 || code >= 57344) {
              bytes += 3;
            } else {
              code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i2) & 1023);
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };
      Keccak.prototype.bytepad = function(strs, w) {
        var bytes = this.encode(w);
        for (var i2 = 0; i2 < strs.length; ++i2) {
          bytes += this.encodeString(strs[i2]);
        }
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };
      Keccak.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i2 >> 2] |= this.padding[i2 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i2 = 1; i2 < blockCount + 1; ++i2) {
            blocks[i2] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i2 = 0; i2 < blockCount; ++i2) {
          s[i2] ^= blocks[i2];
        }
        f(s);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var hex = "", block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            block = s[i2];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j2 % blockCount === 0) {
            f(s);
            i2 = 0;
          }
        }
        if (extraBytes) {
          block = s[i2];
          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            array[j2] = s[i2];
          }
          if (j2 % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i2] = s[i2];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var array = [], offset, block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            offset = j2 << 2;
            block = s[i2];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j2 % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j2 << 2;
          block = s[i2];
          array[offset] = block & 255;
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      function Kmac(bits2, padding, outputBits) {
        Keccak.call(this, bits2, padding, outputBits);
      }
      Kmac.prototype = new Keccak();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };
      var f = function(s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
          h = c8 ^ (c2 << 1 | c3 >>> 31);
          l = c9 ^ (c3 << 1 | c2 >>> 31);
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ (c4 << 1 | c5 >>> 31);
          l = c1 ^ (c5 << 1 | c4 >>> 31);
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ (c6 << 1 | c7 >>> 31);
          l = c3 ^ (c7 << 1 | c6 >>> 31);
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ (c8 << 1 | c9 >>> 31);
          l = c5 ^ (c9 << 1 | c8 >>> 31);
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ (c0 << 1 | c1 >>> 31);
          l = c7 ^ (c1 << 1 | c0 >>> 31);
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;
          b0 = s[0];
          b1 = s[1];
          b32 = s[11] << 4 | s[10] >>> 28;
          b33 = s[10] << 4 | s[11] >>> 28;
          b14 = s[20] << 3 | s[21] >>> 29;
          b15 = s[21] << 3 | s[20] >>> 29;
          b46 = s[31] << 9 | s[30] >>> 23;
          b47 = s[30] << 9 | s[31] >>> 23;
          b28 = s[40] << 18 | s[41] >>> 14;
          b29 = s[41] << 18 | s[40] >>> 14;
          b20 = s[2] << 1 | s[3] >>> 31;
          b21 = s[3] << 1 | s[2] >>> 31;
          b2 = s[13] << 12 | s[12] >>> 20;
          b3 = s[12] << 12 | s[13] >>> 20;
          b34 = s[22] << 10 | s[23] >>> 22;
          b35 = s[23] << 10 | s[22] >>> 22;
          b16 = s[33] << 13 | s[32] >>> 19;
          b17 = s[32] << 13 | s[33] >>> 19;
          b48 = s[42] << 2 | s[43] >>> 30;
          b49 = s[43] << 2 | s[42] >>> 30;
          b40 = s[5] << 30 | s[4] >>> 2;
          b41 = s[4] << 30 | s[5] >>> 2;
          b22 = s[14] << 6 | s[15] >>> 26;
          b23 = s[15] << 6 | s[14] >>> 26;
          b4 = s[25] << 11 | s[24] >>> 21;
          b5 = s[24] << 11 | s[25] >>> 21;
          b36 = s[34] << 15 | s[35] >>> 17;
          b37 = s[35] << 15 | s[34] >>> 17;
          b18 = s[45] << 29 | s[44] >>> 3;
          b19 = s[44] << 29 | s[45] >>> 3;
          b10 = s[6] << 28 | s[7] >>> 4;
          b11 = s[7] << 28 | s[6] >>> 4;
          b42 = s[17] << 23 | s[16] >>> 9;
          b43 = s[16] << 23 | s[17] >>> 9;
          b24 = s[26] << 25 | s[27] >>> 7;
          b25 = s[27] << 25 | s[26] >>> 7;
          b6 = s[36] << 21 | s[37] >>> 11;
          b7 = s[37] << 21 | s[36] >>> 11;
          b38 = s[47] << 24 | s[46] >>> 8;
          b39 = s[46] << 24 | s[47] >>> 8;
          b30 = s[8] << 27 | s[9] >>> 5;
          b31 = s[9] << 27 | s[8] >>> 5;
          b12 = s[18] << 20 | s[19] >>> 12;
          b13 = s[19] << 20 | s[18] >>> 12;
          b44 = s[29] << 7 | s[28] >>> 25;
          b45 = s[28] << 7 | s[29] >>> 25;
          b26 = s[38] << 8 | s[39] >>> 24;
          b27 = s[39] << 8 | s[38] >>> 24;
          b8 = s[48] << 14 | s[49] >>> 18;
          b9 = s[49] << 14 | s[48] >>> 18;
          s[0] = b0 ^ ~b2 & b4;
          s[1] = b1 ^ ~b3 & b5;
          s[10] = b10 ^ ~b12 & b14;
          s[11] = b11 ^ ~b13 & b15;
          s[20] = b20 ^ ~b22 & b24;
          s[21] = b21 ^ ~b23 & b25;
          s[30] = b30 ^ ~b32 & b34;
          s[31] = b31 ^ ~b33 & b35;
          s[40] = b40 ^ ~b42 & b44;
          s[41] = b41 ^ ~b43 & b45;
          s[2] = b2 ^ ~b4 & b6;
          s[3] = b3 ^ ~b5 & b7;
          s[12] = b12 ^ ~b14 & b16;
          s[13] = b13 ^ ~b15 & b17;
          s[22] = b22 ^ ~b24 & b26;
          s[23] = b23 ^ ~b25 & b27;
          s[32] = b32 ^ ~b34 & b36;
          s[33] = b33 ^ ~b35 & b37;
          s[42] = b42 ^ ~b44 & b46;
          s[43] = b43 ^ ~b45 & b47;
          s[4] = b4 ^ ~b6 & b8;
          s[5] = b5 ^ ~b7 & b9;
          s[14] = b14 ^ ~b16 & b18;
          s[15] = b15 ^ ~b17 & b19;
          s[24] = b24 ^ ~b26 & b28;
          s[25] = b25 ^ ~b27 & b29;
          s[34] = b34 ^ ~b36 & b38;
          s[35] = b35 ^ ~b37 & b39;
          s[44] = b44 ^ ~b46 & b48;
          s[45] = b45 ^ ~b47 & b49;
          s[6] = b6 ^ ~b8 & b0;
          s[7] = b7 ^ ~b9 & b1;
          s[16] = b16 ^ ~b18 & b10;
          s[17] = b17 ^ ~b19 & b11;
          s[26] = b26 ^ ~b28 & b20;
          s[27] = b27 ^ ~b29 & b21;
          s[36] = b36 ^ ~b38 & b30;
          s[37] = b37 ^ ~b39 & b31;
          s[46] = b46 ^ ~b48 & b40;
          s[47] = b47 ^ ~b49 & b41;
          s[8] = b8 ^ ~b0 & b2;
          s[9] = b9 ^ ~b1 & b3;
          s[18] = b18 ^ ~b10 & b12;
          s[19] = b19 ^ ~b11 & b13;
          s[28] = b28 ^ ~b20 & b22;
          s[29] = b29 ^ ~b21 & b23;
          s[38] = b38 ^ ~b30 & b32;
          s[39] = b39 ^ ~b31 & b33;
          s[48] = b48 ^ ~b40 & b42;
          s[49] = b49 ^ ~b41 & b43;
          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
        if (AMD) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// node_modules/@ethersproject/keccak256/lib/index.js
var require_lib5 = __commonJS({
  "node_modules/@ethersproject/keccak256/lib/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keccak256 = void 0;
    var js_sha3_1 = __importDefault(require_sha3());
    var bytes_1 = require_lib2();
    function keccak256(data) {
      return "0x" + js_sha3_1.default.keccak_256((0, bytes_1.arrayify)(data));
    }
    exports.keccak256 = keccak256;
  }
});

// node_modules/@ethersproject/rlp/lib/_version.js
var require_version6 = __commonJS({
  "node_modules/@ethersproject/rlp/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "rlp/5.7.0";
  }
});

// node_modules/@ethersproject/rlp/lib/index.js
var require_lib6 = __commonJS({
  "node_modules/@ethersproject/rlp/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decode = exports.encode = void 0;
    var bytes_1 = require_lib2();
    var logger_1 = require_lib();
    var _version_1 = require_version6();
    var logger = new logger_1.Logger(_version_1.version);
    function arrayifyInteger(value) {
      var result = [];
      while (value) {
        result.unshift(value & 255);
        value >>= 8;
      }
      return result;
    }
    function unarrayifyInteger(data, offset, length) {
      var result = 0;
      for (var i = 0; i < length; i++) {
        result = result * 256 + data[offset + i];
      }
      return result;
    }
    function _encode(object) {
      if (Array.isArray(object)) {
        var payload_1 = [];
        object.forEach(function(child) {
          payload_1 = payload_1.concat(_encode(child));
        });
        if (payload_1.length <= 55) {
          payload_1.unshift(192 + payload_1.length);
          return payload_1;
        }
        var length_1 = arrayifyInteger(payload_1.length);
        length_1.unshift(247 + length_1.length);
        return length_1.concat(payload_1);
      }
      if (!(0, bytes_1.isBytesLike)(object)) {
        logger.throwArgumentError("RLP object must be BytesLike", "object", object);
      }
      var data = Array.prototype.slice.call((0, bytes_1.arrayify)(object));
      if (data.length === 1 && data[0] <= 127) {
        return data;
      } else if (data.length <= 55) {
        data.unshift(128 + data.length);
        return data;
      }
      var length = arrayifyInteger(data.length);
      length.unshift(183 + length.length);
      return length.concat(data);
    }
    function encode(object) {
      return (0, bytes_1.hexlify)(_encode(object));
    }
    exports.encode = encode;
    function _decodeChildren(data, offset, childOffset, length) {
      var result = [];
      while (childOffset < offset + 1 + length) {
        var decoded = _decode(data, childOffset);
        result.push(decoded.result);
        childOffset += decoded.consumed;
        if (childOffset > offset + 1 + length) {
          logger.throwError("child data too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
        }
      }
      return { consumed: 1 + length, result };
    }
    function _decode(data, offset) {
      if (data.length === 0) {
        logger.throwError("data too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
      }
      if (data[offset] >= 248) {
        var lengthLength = data[offset] - 247;
        if (offset + 1 + lengthLength > data.length) {
          logger.throwError("data short segment too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
        }
        var length_2 = unarrayifyInteger(data, offset + 1, lengthLength);
        if (offset + 1 + lengthLength + length_2 > data.length) {
          logger.throwError("data long segment too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
        }
        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length_2);
      } else if (data[offset] >= 192) {
        var length_3 = data[offset] - 192;
        if (offset + 1 + length_3 > data.length) {
          logger.throwError("data array too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
        }
        return _decodeChildren(data, offset, offset + 1, length_3);
      } else if (data[offset] >= 184) {
        var lengthLength = data[offset] - 183;
        if (offset + 1 + lengthLength > data.length) {
          logger.throwError("data array too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
        }
        var length_4 = unarrayifyInteger(data, offset + 1, lengthLength);
        if (offset + 1 + lengthLength + length_4 > data.length) {
          logger.throwError("data array too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
        }
        var result = (0, bytes_1.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length_4));
        return { consumed: 1 + lengthLength + length_4, result };
      } else if (data[offset] >= 128) {
        var length_5 = data[offset] - 128;
        if (offset + 1 + length_5 > data.length) {
          logger.throwError("data too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
        }
        var result = (0, bytes_1.hexlify)(data.slice(offset + 1, offset + 1 + length_5));
        return { consumed: 1 + length_5, result };
      }
      return { consumed: 1, result: (0, bytes_1.hexlify)(data[offset]) };
    }
    function decode(data) {
      var bytes = (0, bytes_1.arrayify)(data);
      var decoded = _decode(bytes, 0);
      if (decoded.consumed !== bytes.length) {
        logger.throwArgumentError("invalid rlp data", "data", data);
      }
      return decoded.result;
    }
    exports.decode = decode;
  }
});

// node_modules/@ethersproject/address/lib/_version.js
var require_version7 = __commonJS({
  "node_modules/@ethersproject/address/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "address/5.7.0";
  }
});

// node_modules/@ethersproject/address/lib/index.js
var require_lib7 = __commonJS({
  "node_modules/@ethersproject/address/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.isAddress = exports.getAddress = void 0;
    var bytes_1 = require_lib2();
    var bignumber_1 = require_lib3();
    var keccak256_1 = require_lib5();
    var rlp_1 = require_lib6();
    var logger_1 = require_lib();
    var _version_1 = require_version7();
    var logger = new logger_1.Logger(_version_1.version);
    function getChecksumAddress(address) {
      if (!(0, bytes_1.isHexString)(address, 20)) {
        logger.throwArgumentError("invalid address", "address", address);
      }
      address = address.toLowerCase();
      var chars = address.substring(2).split("");
      var expanded = new Uint8Array(40);
      for (var i2 = 0; i2 < 40; i2++) {
        expanded[i2] = chars[i2].charCodeAt(0);
      }
      var hashed = (0, bytes_1.arrayify)((0, keccak256_1.keccak256)(expanded));
      for (var i2 = 0; i2 < 40; i2 += 2) {
        if (hashed[i2 >> 1] >> 4 >= 8) {
          chars[i2] = chars[i2].toUpperCase();
        }
        if ((hashed[i2 >> 1] & 15) >= 8) {
          chars[i2 + 1] = chars[i2 + 1].toUpperCase();
        }
      }
      return "0x" + chars.join("");
    }
    var MAX_SAFE_INTEGER = 9007199254740991;
    function log10(x) {
      if (Math.log10) {
        return Math.log10(x);
      }
      return Math.log(x) / Math.LN10;
    }
    var ibanLookup = {};
    for (i = 0; i < 10; i++) {
      ibanLookup[String(i)] = String(i);
    }
    var i;
    for (i = 0; i < 26; i++) {
      ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    var i;
    var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
    function ibanChecksum(address) {
      address = address.toUpperCase();
      address = address.substring(4) + address.substring(0, 2) + "00";
      var expanded = address.split("").map(function(c) {
        return ibanLookup[c];
      }).join("");
      while (expanded.length >= safeDigits) {
        var block = expanded.substring(0, safeDigits);
        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
      }
      var checksum = String(98 - parseInt(expanded, 10) % 97);
      while (checksum.length < 2) {
        checksum = "0" + checksum;
      }
      return checksum;
    }
    function getAddress(address) {
      var result = null;
      if (typeof address !== "string") {
        logger.throwArgumentError("invalid address", "address", address);
      }
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        if (address.substring(0, 2) !== "0x") {
          address = "0x" + address;
        }
        result = getChecksumAddress(address);
        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
          logger.throwArgumentError("bad address checksum", "address", address);
        }
      } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        if (address.substring(2, 4) !== ibanChecksum(address)) {
          logger.throwArgumentError("bad icap checksum", "address", address);
        }
        result = (0, bignumber_1._base36To16)(address.substring(4));
        while (result.length < 40) {
          result = "0" + result;
        }
        result = getChecksumAddress("0x" + result);
      } else {
        logger.throwArgumentError("invalid address", "address", address);
      }
      return result;
    }
    exports.getAddress = getAddress;
    function isAddress(address) {
      try {
        getAddress(address);
        return true;
      } catch (error) {
      }
      return false;
    }
    exports.isAddress = isAddress;
    function getIcapAddress(address) {
      var base36 = (0, bignumber_1._base16To36)(getAddress(address).substring(2)).toUpperCase();
      while (base36.length < 30) {
        base36 = "0" + base36;
      }
      return "XE" + ibanChecksum("XE00" + base36) + base36;
    }
    exports.getIcapAddress = getIcapAddress;
    function getContractAddress(transaction) {
      var from = null;
      try {
        from = getAddress(transaction.from);
      } catch (error) {
        logger.throwArgumentError("missing from address", "transaction", transaction);
      }
      var nonce = (0, bytes_1.stripZeros)((0, bytes_1.arrayify)(bignumber_1.BigNumber.from(transaction.nonce).toHexString()));
      return getAddress((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, rlp_1.encode)([from, nonce])), 12));
    }
    exports.getContractAddress = getContractAddress;
    function getCreate2Address(from, salt, initCodeHash) {
      if ((0, bytes_1.hexDataLength)(salt) !== 32) {
        logger.throwArgumentError("salt must be 32 bytes", "salt", salt);
      }
      if ((0, bytes_1.hexDataLength)(initCodeHash) !== 32) {
        logger.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
      }
      return getAddress((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, bytes_1.concat)(["0xff", getAddress(from), salt, initCodeHash])), 12));
    }
    exports.getCreate2Address = getCreate2Address;
  }
});

// node_modules/@ethersproject/abi/lib/coders/address.js
var require_address = __commonJS({
  "node_modules/@ethersproject/abi/lib/coders/address.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddressCoder = void 0;
    var address_1 = require_lib7();
    var bytes_1 = require_lib2();
    var abstract_coder_1 = require_abstract_coder();
    var AddressCoder = (
      /** @class */
      function(_super) {
        __extends(AddressCoder2, _super);
        function AddressCoder2(localName) {
          return _super.call(this, "address", "address", localName, false) || this;
        }
        AddressCoder2.prototype.defaultValue = function() {
          return "0x0000000000000000000000000000000000000000";
        };
        AddressCoder2.prototype.encode = function(writer, value) {
          try {
            value = (0, address_1.getAddress)(value);
          } catch (error) {
            this._throwError(error.message, value);
          }
          return writer.writeValue(value);
        };
        AddressCoder2.prototype.decode = function(reader) {
          return (0, address_1.getAddress)((0, bytes_1.hexZeroPad)(reader.readValue().toHexString(), 20));
        };
        return AddressCoder2;
      }(abstract_coder_1.Coder)
    );
    exports.AddressCoder = AddressCoder;
  }
});

// node_modules/@ethersproject/abi/lib/coders/anonymous.js
var require_anonymous = __commonJS({
  "node_modules/@ethersproject/abi/lib/coders/anonymous.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnonymousCoder = void 0;
    var abstract_coder_1 = require_abstract_coder();
    var AnonymousCoder = (
      /** @class */
      function(_super) {
        __extends(AnonymousCoder2, _super);
        function AnonymousCoder2(coder) {
          var _this = _super.call(this, coder.name, coder.type, void 0, coder.dynamic) || this;
          _this.coder = coder;
          return _this;
        }
        AnonymousCoder2.prototype.defaultValue = function() {
          return this.coder.defaultValue();
        };
        AnonymousCoder2.prototype.encode = function(writer, value) {
          return this.coder.encode(writer, value);
        };
        AnonymousCoder2.prototype.decode = function(reader) {
          return this.coder.decode(reader);
        };
        return AnonymousCoder2;
      }(abstract_coder_1.Coder)
    );
    exports.AnonymousCoder = AnonymousCoder;
  }
});

// node_modules/@ethersproject/abi/lib/coders/array.js
var require_array = __commonJS({
  "node_modules/@ethersproject/abi/lib/coders/array.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayCoder = exports.unpack = exports.pack = void 0;
    var logger_1 = require_lib();
    var _version_1 = require_version5();
    var logger = new logger_1.Logger(_version_1.version);
    var abstract_coder_1 = require_abstract_coder();
    var anonymous_1 = require_anonymous();
    function pack(writer, coders, values) {
      var arrayValues = null;
      if (Array.isArray(values)) {
        arrayValues = values;
      } else if (values && typeof values === "object") {
        var unique_1 = {};
        arrayValues = coders.map(function(coder) {
          var name = coder.localName;
          if (!name) {
            logger.throwError("cannot encode object for signature with missing names", logger_1.Logger.errors.INVALID_ARGUMENT, {
              argument: "values",
              coder,
              value: values
            });
          }
          if (unique_1[name]) {
            logger.throwError("cannot encode object for signature with duplicate names", logger_1.Logger.errors.INVALID_ARGUMENT, {
              argument: "values",
              coder,
              value: values
            });
          }
          unique_1[name] = true;
          return values[name];
        });
      } else {
        logger.throwArgumentError("invalid tuple value", "tuple", values);
      }
      if (coders.length !== arrayValues.length) {
        logger.throwArgumentError("types/value length mismatch", "tuple", values);
      }
      var staticWriter = new abstract_coder_1.Writer(writer.wordSize);
      var dynamicWriter = new abstract_coder_1.Writer(writer.wordSize);
      var updateFuncs = [];
      coders.forEach(function(coder, index) {
        var value = arrayValues[index];
        if (coder.dynamic) {
          var dynamicOffset_1 = dynamicWriter.length;
          coder.encode(dynamicWriter, value);
          var updateFunc_1 = staticWriter.writeUpdatableValue();
          updateFuncs.push(function(baseOffset) {
            updateFunc_1(baseOffset + dynamicOffset_1);
          });
        } else {
          coder.encode(staticWriter, value);
        }
      });
      updateFuncs.forEach(function(func) {
        func(staticWriter.length);
      });
      var length = writer.appendWriter(staticWriter);
      length += writer.appendWriter(dynamicWriter);
      return length;
    }
    exports.pack = pack;
    function unpack(reader, coders) {
      var values = [];
      var baseReader = reader.subReader(0);
      coders.forEach(function(coder) {
        var value = null;
        if (coder.dynamic) {
          var offset = reader.readValue();
          var offsetReader = baseReader.subReader(offset.toNumber());
          try {
            value = coder.decode(offsetReader);
          } catch (error) {
            if (error.code === logger_1.Logger.errors.BUFFER_OVERRUN) {
              throw error;
            }
            value = error;
            value.baseType = coder.name;
            value.name = coder.localName;
            value.type = coder.type;
          }
        } else {
          try {
            value = coder.decode(reader);
          } catch (error) {
            if (error.code === logger_1.Logger.errors.BUFFER_OVERRUN) {
              throw error;
            }
            value = error;
            value.baseType = coder.name;
            value.name = coder.localName;
            value.type = coder.type;
          }
        }
        if (value != void 0) {
          values.push(value);
        }
      });
      var uniqueNames = coders.reduce(function(accum, coder) {
        var name = coder.localName;
        if (name) {
          if (!accum[name]) {
            accum[name] = 0;
          }
          accum[name]++;
        }
        return accum;
      }, {});
      coders.forEach(function(coder, index) {
        var name = coder.localName;
        if (!name || uniqueNames[name] !== 1) {
          return;
        }
        if (name === "length") {
          name = "_length";
        }
        if (values[name] != null) {
          return;
        }
        var value = values[index];
        if (value instanceof Error) {
          Object.defineProperty(values, name, {
            enumerable: true,
            get: function() {
              throw value;
            }
          });
        } else {
          values[name] = value;
        }
      });
      var _loop_1 = function(i2) {
        var value = values[i2];
        if (value instanceof Error) {
          Object.defineProperty(values, i2, {
            enumerable: true,
            get: function() {
              throw value;
            }
          });
        }
      };
      for (var i = 0; i < values.length; i++) {
        _loop_1(i);
      }
      return Object.freeze(values);
    }
    exports.unpack = unpack;
    var ArrayCoder = (
      /** @class */
      function(_super) {
        __extends(ArrayCoder2, _super);
        function ArrayCoder2(coder, length, localName) {
          var _this = this;
          var type = coder.type + "[" + (length >= 0 ? length : "") + "]";
          var dynamic = length === -1 || coder.dynamic;
          _this = _super.call(this, "array", type, localName, dynamic) || this;
          _this.coder = coder;
          _this.length = length;
          return _this;
        }
        ArrayCoder2.prototype.defaultValue = function() {
          var defaultChild = this.coder.defaultValue();
          var result = [];
          for (var i = 0; i < this.length; i++) {
            result.push(defaultChild);
          }
          return result;
        };
        ArrayCoder2.prototype.encode = function(writer, value) {
          if (!Array.isArray(value)) {
            this._throwError("expected array value", value);
          }
          var count = this.length;
          if (count === -1) {
            count = value.length;
            writer.writeValue(value.length);
          }
          logger.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
          var coders = [];
          for (var i = 0; i < value.length; i++) {
            coders.push(this.coder);
          }
          return pack(writer, coders, value);
        };
        ArrayCoder2.prototype.decode = function(reader) {
          var count = this.length;
          if (count === -1) {
            count = reader.readValue().toNumber();
            if (count * 32 > reader._data.length) {
              logger.throwError("insufficient data length", logger_1.Logger.errors.BUFFER_OVERRUN, {
                length: reader._data.length,
                count
              });
            }
          }
          var coders = [];
          for (var i = 0; i < count; i++) {
            coders.push(new anonymous_1.AnonymousCoder(this.coder));
          }
          return reader.coerce(this.name, unpack(reader, coders));
        };
        return ArrayCoder2;
      }(abstract_coder_1.Coder)
    );
    exports.ArrayCoder = ArrayCoder;
  }
});

// node_modules/@ethersproject/abi/lib/coders/boolean.js
var require_boolean = __commonJS({
  "node_modules/@ethersproject/abi/lib/coders/boolean.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BooleanCoder = void 0;
    var abstract_coder_1 = require_abstract_coder();
    var BooleanCoder = (
      /** @class */
      function(_super) {
        __extends(BooleanCoder2, _super);
        function BooleanCoder2(localName) {
          return _super.call(this, "bool", "bool", localName, false) || this;
        }
        BooleanCoder2.prototype.defaultValue = function() {
          return false;
        };
        BooleanCoder2.prototype.encode = function(writer, value) {
          return writer.writeValue(value ? 1 : 0);
        };
        BooleanCoder2.prototype.decode = function(reader) {
          return reader.coerce(this.type, !reader.readValue().isZero());
        };
        return BooleanCoder2;
      }(abstract_coder_1.Coder)
    );
    exports.BooleanCoder = BooleanCoder;
  }
});

// node_modules/@ethersproject/abi/lib/coders/bytes.js
var require_bytes = __commonJS({
  "node_modules/@ethersproject/abi/lib/coders/bytes.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesCoder = exports.DynamicBytesCoder = void 0;
    var bytes_1 = require_lib2();
    var abstract_coder_1 = require_abstract_coder();
    var DynamicBytesCoder = (
      /** @class */
      function(_super) {
        __extends(DynamicBytesCoder2, _super);
        function DynamicBytesCoder2(type, localName) {
          return _super.call(this, type, type, localName, true) || this;
        }
        DynamicBytesCoder2.prototype.defaultValue = function() {
          return "0x";
        };
        DynamicBytesCoder2.prototype.encode = function(writer, value) {
          value = (0, bytes_1.arrayify)(value);
          var length = writer.writeValue(value.length);
          length += writer.writeBytes(value);
          return length;
        };
        DynamicBytesCoder2.prototype.decode = function(reader) {
          return reader.readBytes(reader.readValue().toNumber(), true);
        };
        return DynamicBytesCoder2;
      }(abstract_coder_1.Coder)
    );
    exports.DynamicBytesCoder = DynamicBytesCoder;
    var BytesCoder = (
      /** @class */
      function(_super) {
        __extends(BytesCoder2, _super);
        function BytesCoder2(localName) {
          return _super.call(this, "bytes", localName) || this;
        }
        BytesCoder2.prototype.decode = function(reader) {
          return reader.coerce(this.name, (0, bytes_1.hexlify)(_super.prototype.decode.call(this, reader)));
        };
        return BytesCoder2;
      }(DynamicBytesCoder)
    );
    exports.BytesCoder = BytesCoder;
  }
});

// node_modules/@ethersproject/abi/lib/coders/fixed-bytes.js
var require_fixed_bytes = __commonJS({
  "node_modules/@ethersproject/abi/lib/coders/fixed-bytes.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixedBytesCoder = void 0;
    var bytes_1 = require_lib2();
    var abstract_coder_1 = require_abstract_coder();
    var FixedBytesCoder = (
      /** @class */
      function(_super) {
        __extends(FixedBytesCoder2, _super);
        function FixedBytesCoder2(size, localName) {
          var _this = this;
          var name = "bytes" + String(size);
          _this = _super.call(this, name, name, localName, false) || this;
          _this.size = size;
          return _this;
        }
        FixedBytesCoder2.prototype.defaultValue = function() {
          return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
        };
        FixedBytesCoder2.prototype.encode = function(writer, value) {
          var data = (0, bytes_1.arrayify)(value);
          if (data.length !== this.size) {
            this._throwError("incorrect data length", value);
          }
          return writer.writeBytes(data);
        };
        FixedBytesCoder2.prototype.decode = function(reader) {
          return reader.coerce(this.name, (0, bytes_1.hexlify)(reader.readBytes(this.size)));
        };
        return FixedBytesCoder2;
      }(abstract_coder_1.Coder)
    );
    exports.FixedBytesCoder = FixedBytesCoder;
  }
});

// node_modules/@ethersproject/abi/lib/coders/null.js
var require_null = __commonJS({
  "node_modules/@ethersproject/abi/lib/coders/null.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NullCoder = void 0;
    var abstract_coder_1 = require_abstract_coder();
    var NullCoder = (
      /** @class */
      function(_super) {
        __extends(NullCoder2, _super);
        function NullCoder2(localName) {
          return _super.call(this, "null", "", localName, false) || this;
        }
        NullCoder2.prototype.defaultValue = function() {
          return null;
        };
        NullCoder2.prototype.encode = function(writer, value) {
          if (value != null) {
            this._throwError("not null", value);
          }
          return writer.writeBytes([]);
        };
        NullCoder2.prototype.decode = function(reader) {
          reader.readBytes(0);
          return reader.coerce(this.name, null);
        };
        return NullCoder2;
      }(abstract_coder_1.Coder)
    );
    exports.NullCoder = NullCoder;
  }
});

// node_modules/@ethersproject/constants/lib/addresses.js
var require_addresses = __commonJS({
  "node_modules/@ethersproject/constants/lib/addresses.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddressZero = void 0;
    exports.AddressZero = "0x0000000000000000000000000000000000000000";
  }
});

// node_modules/@ethersproject/constants/lib/bignumbers.js
var require_bignumbers = __commonJS({
  "node_modules/@ethersproject/constants/lib/bignumbers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.Two = exports.One = exports.Zero = exports.NegativeOne = void 0;
    var bignumber_1 = require_lib3();
    var NegativeOne = /* @__PURE__ */ bignumber_1.BigNumber.from(-1);
    exports.NegativeOne = NegativeOne;
    var Zero = /* @__PURE__ */ bignumber_1.BigNumber.from(0);
    exports.Zero = Zero;
    var One = /* @__PURE__ */ bignumber_1.BigNumber.from(1);
    exports.One = One;
    var Two = /* @__PURE__ */ bignumber_1.BigNumber.from(2);
    exports.Two = Two;
    var WeiPerEther = /* @__PURE__ */ bignumber_1.BigNumber.from("1000000000000000000");
    exports.WeiPerEther = WeiPerEther;
    var MaxUint256 = /* @__PURE__ */ bignumber_1.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    exports.MaxUint256 = MaxUint256;
    var MinInt256 = /* @__PURE__ */ bignumber_1.BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
    exports.MinInt256 = MinInt256;
    var MaxInt256 = /* @__PURE__ */ bignumber_1.BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    exports.MaxInt256 = MaxInt256;
  }
});

// node_modules/@ethersproject/constants/lib/hashes.js
var require_hashes = __commonJS({
  "node_modules/@ethersproject/constants/lib/hashes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HashZero = void 0;
    exports.HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
  }
});

// node_modules/@ethersproject/constants/lib/strings.js
var require_strings = __commonJS({
  "node_modules/@ethersproject/constants/lib/strings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EtherSymbol = void 0;
    exports.EtherSymbol = "\u039E";
  }
});

// node_modules/@ethersproject/constants/lib/index.js
var require_lib8 = __commonJS({
  "node_modules/@ethersproject/constants/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EtherSymbol = exports.HashZero = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.Two = exports.One = exports.Zero = exports.NegativeOne = exports.AddressZero = void 0;
    var addresses_1 = require_addresses();
    Object.defineProperty(exports, "AddressZero", { enumerable: true, get: function() {
      return addresses_1.AddressZero;
    } });
    var bignumbers_1 = require_bignumbers();
    Object.defineProperty(exports, "NegativeOne", { enumerable: true, get: function() {
      return bignumbers_1.NegativeOne;
    } });
    Object.defineProperty(exports, "Zero", { enumerable: true, get: function() {
      return bignumbers_1.Zero;
    } });
    Object.defineProperty(exports, "One", { enumerable: true, get: function() {
      return bignumbers_1.One;
    } });
    Object.defineProperty(exports, "Two", { enumerable: true, get: function() {
      return bignumbers_1.Two;
    } });
    Object.defineProperty(exports, "WeiPerEther", { enumerable: true, get: function() {
      return bignumbers_1.WeiPerEther;
    } });
    Object.defineProperty(exports, "MaxUint256", { enumerable: true, get: function() {
      return bignumbers_1.MaxUint256;
    } });
    Object.defineProperty(exports, "MinInt256", { enumerable: true, get: function() {
      return bignumbers_1.MinInt256;
    } });
    Object.defineProperty(exports, "MaxInt256", { enumerable: true, get: function() {
      return bignumbers_1.MaxInt256;
    } });
    var hashes_1 = require_hashes();
    Object.defineProperty(exports, "HashZero", { enumerable: true, get: function() {
      return hashes_1.HashZero;
    } });
    var strings_1 = require_strings();
    Object.defineProperty(exports, "EtherSymbol", { enumerable: true, get: function() {
      return strings_1.EtherSymbol;
    } });
  }
});

// node_modules/@ethersproject/abi/lib/coders/number.js
var require_number = __commonJS({
  "node_modules/@ethersproject/abi/lib/coders/number.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumberCoder = void 0;
    var bignumber_1 = require_lib3();
    var constants_1 = require_lib8();
    var abstract_coder_1 = require_abstract_coder();
    var NumberCoder = (
      /** @class */
      function(_super) {
        __extends(NumberCoder2, _super);
        function NumberCoder2(size, signed, localName) {
          var _this = this;
          var name = (signed ? "int" : "uint") + size * 8;
          _this = _super.call(this, name, name, localName, false) || this;
          _this.size = size;
          _this.signed = signed;
          return _this;
        }
        NumberCoder2.prototype.defaultValue = function() {
          return 0;
        };
        NumberCoder2.prototype.encode = function(writer, value) {
          var v = bignumber_1.BigNumber.from(value);
          var maxUintValue = constants_1.MaxUint256.mask(writer.wordSize * 8);
          if (this.signed) {
            var bounds = maxUintValue.mask(this.size * 8 - 1);
            if (v.gt(bounds) || v.lt(bounds.add(constants_1.One).mul(constants_1.NegativeOne))) {
              this._throwError("value out-of-bounds", value);
            }
          } else if (v.lt(constants_1.Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
            this._throwError("value out-of-bounds", value);
          }
          v = v.toTwos(this.size * 8).mask(this.size * 8);
          if (this.signed) {
            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
          }
          return writer.writeValue(v);
        };
        NumberCoder2.prototype.decode = function(reader) {
          var value = reader.readValue().mask(this.size * 8);
          if (this.signed) {
            value = value.fromTwos(this.size * 8);
          }
          return reader.coerce(this.name, value);
        };
        return NumberCoder2;
      }(abstract_coder_1.Coder)
    );
    exports.NumberCoder = NumberCoder;
  }
});

// node_modules/@ethersproject/strings/lib/_version.js
var require_version8 = __commonJS({
  "node_modules/@ethersproject/strings/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "strings/5.7.0";
  }
});

// node_modules/@ethersproject/strings/lib/utf8.js
var require_utf8 = __commonJS({
  "node_modules/@ethersproject/strings/lib/utf8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8CodePoints = exports.toUtf8String = exports._toUtf8String = exports._toEscapedUtf8String = exports.toUtf8Bytes = exports.Utf8ErrorFuncs = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = void 0;
    var bytes_1 = require_lib2();
    var logger_1 = require_lib();
    var _version_1 = require_version8();
    var logger = new logger_1.Logger(_version_1.version);
    var UnicodeNormalizationForm;
    (function(UnicodeNormalizationForm2) {
      UnicodeNormalizationForm2["current"] = "";
      UnicodeNormalizationForm2["NFC"] = "NFC";
      UnicodeNormalizationForm2["NFD"] = "NFD";
      UnicodeNormalizationForm2["NFKC"] = "NFKC";
      UnicodeNormalizationForm2["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));
    var Utf8ErrorReason;
    (function(Utf8ErrorReason2) {
      Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
      Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
      Utf8ErrorReason2["OVERRUN"] = "string overrun";
      Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
      Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
      Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
      Utf8ErrorReason2["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason = exports.Utf8ErrorReason || (exports.Utf8ErrorReason = {}));
    function errorFunc(reason, offset, bytes, output, badCodepoint) {
      return logger.throwArgumentError("invalid codepoint at offset " + offset + "; " + reason, "bytes", bytes);
    }
    function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
      if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
        var i = 0;
        for (var o = offset + 1; o < bytes.length; o++) {
          if (bytes[o] >> 6 !== 2) {
            break;
          }
          i++;
        }
        return i;
      }
      if (reason === Utf8ErrorReason.OVERRUN) {
        return bytes.length - offset - 1;
      }
      return 0;
    }
    function replaceFunc(reason, offset, bytes, output, badCodepoint) {
      if (reason === Utf8ErrorReason.OVERLONG) {
        output.push(badCodepoint);
        return 0;
      }
      output.push(65533);
      return ignoreFunc(reason, offset, bytes, output, badCodepoint);
    }
    exports.Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
    });
    function getUtf8CodePoints(bytes, onError) {
      if (onError == null) {
        onError = exports.Utf8ErrorFuncs.error;
      }
      bytes = (0, bytes_1.arrayify)(bytes);
      var result = [];
      var i = 0;
      while (i < bytes.length) {
        var c = bytes[i++];
        if (c >> 7 === 0) {
          result.push(c);
          continue;
        }
        var extraLength = null;
        var overlongMask = null;
        if ((c & 224) === 192) {
          extraLength = 1;
          overlongMask = 127;
        } else if ((c & 240) === 224) {
          extraLength = 2;
          overlongMask = 2047;
        } else if ((c & 248) === 240) {
          extraLength = 3;
          overlongMask = 65535;
        } else {
          if ((c & 192) === 128) {
            i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
          } else {
            i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
          }
          continue;
        }
        if (i - 1 + extraLength >= bytes.length) {
          i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
          continue;
        }
        var res = c & (1 << 8 - extraLength - 1) - 1;
        for (var j = 0; j < extraLength; j++) {
          var nextChar = bytes[i];
          if ((nextChar & 192) != 128) {
            i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
            res = null;
            break;
          }
          ;
          res = res << 6 | nextChar & 63;
          i++;
        }
        if (res === null) {
          continue;
        }
        if (res > 1114111) {
          i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
          continue;
        }
        if (res >= 55296 && res <= 57343) {
          i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
          continue;
        }
        if (res <= overlongMask) {
          i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
          continue;
        }
        result.push(res);
      }
      return result;
    }
    function toUtf8Bytes(str, form) {
      if (form === void 0) {
        form = UnicodeNormalizationForm.current;
      }
      if (form != UnicodeNormalizationForm.current) {
        logger.checkNormalize();
        str = str.normalize(form);
      }
      var result = [];
      for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
          result.push(c);
        } else if (c < 2048) {
          result.push(c >> 6 | 192);
          result.push(c & 63 | 128);
        } else if ((c & 64512) == 55296) {
          i++;
          var c2 = str.charCodeAt(i);
          if (i >= str.length || (c2 & 64512) !== 56320) {
            throw new Error("invalid utf-8 string");
          }
          var pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
          result.push(pair >> 18 | 240);
          result.push(pair >> 12 & 63 | 128);
          result.push(pair >> 6 & 63 | 128);
          result.push(pair & 63 | 128);
        } else {
          result.push(c >> 12 | 224);
          result.push(c >> 6 & 63 | 128);
          result.push(c & 63 | 128);
        }
      }
      return (0, bytes_1.arrayify)(result);
    }
    exports.toUtf8Bytes = toUtf8Bytes;
    function escapeChar(value) {
      var hex = "0000" + value.toString(16);
      return "\\u" + hex.substring(hex.length - 4);
    }
    function _toEscapedUtf8String(bytes, onError) {
      return '"' + getUtf8CodePoints(bytes, onError).map(function(codePoint) {
        if (codePoint < 256) {
          switch (codePoint) {
            case 8:
              return "\\b";
            case 9:
              return "\\t";
            case 10:
              return "\\n";
            case 13:
              return "\\r";
            case 34:
              return '\\"';
            case 92:
              return "\\\\";
          }
          if (codePoint >= 32 && codePoint < 127) {
            return String.fromCharCode(codePoint);
          }
        }
        if (codePoint <= 65535) {
          return escapeChar(codePoint);
        }
        codePoint -= 65536;
        return escapeChar((codePoint >> 10 & 1023) + 55296) + escapeChar((codePoint & 1023) + 56320);
      }).join("") + '"';
    }
    exports._toEscapedUtf8String = _toEscapedUtf8String;
    function _toUtf8String(codePoints) {
      return codePoints.map(function(codePoint) {
        if (codePoint <= 65535) {
          return String.fromCharCode(codePoint);
        }
        codePoint -= 65536;
        return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
      }).join("");
    }
    exports._toUtf8String = _toUtf8String;
    function toUtf8String(bytes, onError) {
      return _toUtf8String(getUtf8CodePoints(bytes, onError));
    }
    exports.toUtf8String = toUtf8String;
    function toUtf8CodePoints(str, form) {
      if (form === void 0) {
        form = UnicodeNormalizationForm.current;
      }
      return getUtf8CodePoints(toUtf8Bytes(str, form));
    }
    exports.toUtf8CodePoints = toUtf8CodePoints;
  }
});

// node_modules/@ethersproject/strings/lib/bytes32.js
var require_bytes32 = __commonJS({
  "node_modules/@ethersproject/strings/lib/bytes32.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseBytes32String = exports.formatBytes32String = void 0;
    var constants_1 = require_lib8();
    var bytes_1 = require_lib2();
    var utf8_1 = require_utf8();
    function formatBytes32String(text) {
      var bytes = (0, utf8_1.toUtf8Bytes)(text);
      if (bytes.length > 31) {
        throw new Error("bytes32 string must be less than 32 bytes");
      }
      return (0, bytes_1.hexlify)((0, bytes_1.concat)([bytes, constants_1.HashZero]).slice(0, 32));
    }
    exports.formatBytes32String = formatBytes32String;
    function parseBytes32String(bytes) {
      var data = (0, bytes_1.arrayify)(bytes);
      if (data.length !== 32) {
        throw new Error("invalid bytes32 - not 32 bytes long");
      }
      if (data[31] !== 0) {
        throw new Error("invalid bytes32 string - no null terminator");
      }
      var length = 31;
      while (data[length - 1] === 0) {
        length--;
      }
      return (0, utf8_1.toUtf8String)(data.slice(0, length));
    }
    exports.parseBytes32String = parseBytes32String;
  }
});

// node_modules/@ethersproject/strings/lib/idna.js
var require_idna = __commonJS({
  "node_modules/@ethersproject/strings/lib/idna.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nameprep = exports._nameprepTableC = exports._nameprepTableB2 = exports._nameprepTableA1 = void 0;
    var utf8_1 = require_utf8();
    function bytes2(data) {
      if (data.length % 4 !== 0) {
        throw new Error("bad data");
      }
      var result = [];
      for (var i = 0; i < data.length; i += 4) {
        result.push(parseInt(data.substring(i, i + 4), 16));
      }
      return result;
    }
    function createTable(data, func) {
      if (!func) {
        func = function(value) {
          return [parseInt(value, 16)];
        };
      }
      var lo = 0;
      var result = {};
      data.split(",").forEach(function(pair) {
        var comps = pair.split(":");
        lo += parseInt(comps[0], 16);
        result[lo] = func(comps[1]);
      });
      return result;
    }
    function createRangeTable(data) {
      var hi = 0;
      return data.split(",").map(function(v) {
        var comps = v.split("-");
        if (comps.length === 1) {
          comps[1] = "0";
        } else if (comps[1] === "") {
          comps[1] = "1";
        }
        var lo = hi + parseInt(comps[0], 16);
        hi = parseInt(comps[1], 16);
        return { l: lo, h: hi };
      });
    }
    function matchMap(value, ranges) {
      var lo = 0;
      for (var i = 0; i < ranges.length; i++) {
        var range = ranges[i];
        lo += range.l;
        if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {
          if (range.e && range.e.indexOf(value - lo) !== -1) {
            continue;
          }
          return range;
        }
      }
      return null;
    }
    var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(function(v) {
      return parseInt(v, 16);
    });
    var Table_B_2_ranges = [
      { h: 25, s: 32, l: 65 },
      { h: 30, s: 32, e: [23], l: 127 },
      { h: 54, s: 1, e: [48], l: 64, d: 2 },
      { h: 14, s: 1, l: 57, d: 2 },
      { h: 44, s: 1, l: 17, d: 2 },
      { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
      { h: 16, s: 1, l: 68, d: 2 },
      { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
      { h: 26, s: 32, e: [17], l: 435 },
      { h: 22, s: 1, l: 71, d: 2 },
      { h: 15, s: 80, l: 40 },
      { h: 31, s: 32, l: 16 },
      { h: 32, s: 1, l: 80, d: 2 },
      { h: 52, s: 1, l: 42, d: 2 },
      { h: 12, s: 1, l: 55, d: 2 },
      { h: 40, s: 1, e: [38], l: 15, d: 2 },
      { h: 14, s: 1, l: 48, d: 2 },
      { h: 37, s: 48, l: 49 },
      { h: 148, s: 1, l: 6351, d: 2 },
      { h: 88, s: 1, l: 160, d: 2 },
      { h: 15, s: 16, l: 704 },
      { h: 25, s: 26, l: 854 },
      { h: 25, s: 32, l: 55915 },
      { h: 37, s: 40, l: 1247 },
      { h: 25, s: -119711, l: 53248 },
      { h: 25, s: -119763, l: 52 },
      { h: 25, s: -119815, l: 52 },
      { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
      { h: 25, s: -119919, l: 52 },
      { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
      { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
      { h: 25, s: -120075, l: 52 },
      { h: 25, s: -120127, l: 52 },
      { h: 25, s: -120179, l: 52 },
      { h: 25, s: -120231, l: 52 },
      { h: 25, s: -120283, l: 52 },
      { h: 25, s: -120335, l: 52 },
      { h: 24, s: -119543, e: [17], l: 56 },
      { h: 24, s: -119601, e: [17], l: 58 },
      { h: 24, s: -119659, e: [17], l: 58 },
      { h: 24, s: -119717, e: [17], l: 58 },
      { h: 24, s: -119775, e: [17], l: 58 }
    ];
    var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
    function flatten(values) {
      return values.reduce(function(accum, value) {
        value.forEach(function(value2) {
          accum.push(value2);
        });
        return accum;
      }, []);
    }
    function _nameprepTableA1(codepoint) {
      return !!matchMap(codepoint, Table_A_1_ranges);
    }
    exports._nameprepTableA1 = _nameprepTableA1;
    function _nameprepTableB2(codepoint) {
      var range = matchMap(codepoint, Table_B_2_ranges);
      if (range) {
        return [codepoint + range.s];
      }
      var codes = Table_B_2_lut_abs[codepoint];
      if (codes) {
        return codes;
      }
      var shift = Table_B_2_lut_rel[codepoint];
      if (shift) {
        return [codepoint + shift[0]];
      }
      var complex = Table_B_2_complex[codepoint];
      if (complex) {
        return complex;
      }
      return null;
    }
    exports._nameprepTableB2 = _nameprepTableB2;
    function _nameprepTableC(codepoint) {
      return !!matchMap(codepoint, Table_C_ranges);
    }
    exports._nameprepTableC = _nameprepTableC;
    function nameprep(value) {
      if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
        return value.toLowerCase();
      }
      var codes = (0, utf8_1.toUtf8CodePoints)(value);
      codes = flatten(codes.map(function(code) {
        if (Table_B_1_flags.indexOf(code) >= 0) {
          return [];
        }
        if (code >= 65024 && code <= 65039) {
          return [];
        }
        var codesTableB2 = _nameprepTableB2(code);
        if (codesTableB2) {
          return codesTableB2;
        }
        return [code];
      }));
      codes = (0, utf8_1.toUtf8CodePoints)((0, utf8_1._toUtf8String)(codes), utf8_1.UnicodeNormalizationForm.NFKC);
      codes.forEach(function(code) {
        if (_nameprepTableC(code)) {
          throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
        }
      });
      codes.forEach(function(code) {
        if (_nameprepTableA1(code)) {
          throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
        }
      });
      var name = (0, utf8_1._toUtf8String)(codes);
      if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
        throw new Error("invalid hyphen");
      }
      return name;
    }
    exports.nameprep = nameprep;
  }
});

// node_modules/@ethersproject/strings/lib/index.js
var require_lib9 = __commonJS({
  "node_modules/@ethersproject/strings/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nameprep = exports.parseBytes32String = exports.formatBytes32String = exports.UnicodeNormalizationForm = exports.Utf8ErrorReason = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = void 0;
    var bytes32_1 = require_bytes32();
    Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function() {
      return bytes32_1.formatBytes32String;
    } });
    Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function() {
      return bytes32_1.parseBytes32String;
    } });
    var idna_1 = require_idna();
    Object.defineProperty(exports, "nameprep", { enumerable: true, get: function() {
      return idna_1.nameprep;
    } });
    var utf8_1 = require_utf8();
    Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function() {
      return utf8_1._toEscapedUtf8String;
    } });
    Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function() {
      return utf8_1.toUtf8Bytes;
    } });
    Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function() {
      return utf8_1.toUtf8CodePoints;
    } });
    Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function() {
      return utf8_1.toUtf8String;
    } });
    Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function() {
      return utf8_1.UnicodeNormalizationForm;
    } });
    Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function() {
      return utf8_1.Utf8ErrorFuncs;
    } });
    Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function() {
      return utf8_1.Utf8ErrorReason;
    } });
  }
});

// node_modules/@ethersproject/abi/lib/coders/string.js
var require_string = __commonJS({
  "node_modules/@ethersproject/abi/lib/coders/string.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringCoder = void 0;
    var strings_1 = require_lib9();
    var bytes_1 = require_bytes();
    var StringCoder = (
      /** @class */
      function(_super) {
        __extends(StringCoder2, _super);
        function StringCoder2(localName) {
          return _super.call(this, "string", localName) || this;
        }
        StringCoder2.prototype.defaultValue = function() {
          return "";
        };
        StringCoder2.prototype.encode = function(writer, value) {
          return _super.prototype.encode.call(this, writer, (0, strings_1.toUtf8Bytes)(value));
        };
        StringCoder2.prototype.decode = function(reader) {
          return (0, strings_1.toUtf8String)(_super.prototype.decode.call(this, reader));
        };
        return StringCoder2;
      }(bytes_1.DynamicBytesCoder)
    );
    exports.StringCoder = StringCoder;
  }
});

// node_modules/@ethersproject/abi/lib/coders/tuple.js
var require_tuple = __commonJS({
  "node_modules/@ethersproject/abi/lib/coders/tuple.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TupleCoder = void 0;
    var abstract_coder_1 = require_abstract_coder();
    var array_1 = require_array();
    var TupleCoder = (
      /** @class */
      function(_super) {
        __extends(TupleCoder2, _super);
        function TupleCoder2(coders, localName) {
          var _this = this;
          var dynamic = false;
          var types = [];
          coders.forEach(function(coder) {
            if (coder.dynamic) {
              dynamic = true;
            }
            types.push(coder.type);
          });
          var type = "tuple(" + types.join(",") + ")";
          _this = _super.call(this, "tuple", type, localName, dynamic) || this;
          _this.coders = coders;
          return _this;
        }
        TupleCoder2.prototype.defaultValue = function() {
          var values = [];
          this.coders.forEach(function(coder) {
            values.push(coder.defaultValue());
          });
          var uniqueNames = this.coders.reduce(function(accum, coder) {
            var name = coder.localName;
            if (name) {
              if (!accum[name]) {
                accum[name] = 0;
              }
              accum[name]++;
            }
            return accum;
          }, {});
          this.coders.forEach(function(coder, index) {
            var name = coder.localName;
            if (!name || uniqueNames[name] !== 1) {
              return;
            }
            if (name === "length") {
              name = "_length";
            }
            if (values[name] != null) {
              return;
            }
            values[name] = values[index];
          });
          return Object.freeze(values);
        };
        TupleCoder2.prototype.encode = function(writer, value) {
          return (0, array_1.pack)(writer, this.coders, value);
        };
        TupleCoder2.prototype.decode = function(reader) {
          return reader.coerce(this.name, (0, array_1.unpack)(reader, this.coders));
        };
        return TupleCoder2;
      }(abstract_coder_1.Coder)
    );
    exports.TupleCoder = TupleCoder;
  }
});

// node_modules/@ethersproject/abi/lib/abi-coder.js
var require_abi_coder = __commonJS({
  "node_modules/@ethersproject/abi/lib/abi-coder.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultAbiCoder = exports.AbiCoder = void 0;
    var bytes_1 = require_lib2();
    var properties_1 = require_lib4();
    var logger_1 = require_lib();
    var _version_1 = require_version5();
    var logger = new logger_1.Logger(_version_1.version);
    var abstract_coder_1 = require_abstract_coder();
    var address_1 = require_address();
    var array_1 = require_array();
    var boolean_1 = require_boolean();
    var bytes_2 = require_bytes();
    var fixed_bytes_1 = require_fixed_bytes();
    var null_1 = require_null();
    var number_1 = require_number();
    var string_1 = require_string();
    var tuple_1 = require_tuple();
    var fragments_1 = require_fragments();
    var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    var AbiCoder = (
      /** @class */
      function() {
        function AbiCoder2(coerceFunc) {
          (0, properties_1.defineReadOnly)(this, "coerceFunc", coerceFunc || null);
        }
        AbiCoder2.prototype._getCoder = function(param) {
          var _this = this;
          switch (param.baseType) {
            case "address":
              return new address_1.AddressCoder(param.name);
            case "bool":
              return new boolean_1.BooleanCoder(param.name);
            case "string":
              return new string_1.StringCoder(param.name);
            case "bytes":
              return new bytes_2.BytesCoder(param.name);
            case "array":
              return new array_1.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
            case "tuple":
              return new tuple_1.TupleCoder((param.components || []).map(function(component) {
                return _this._getCoder(component);
              }), param.name);
            case "":
              return new null_1.NullCoder(param.name);
          }
          var match = param.type.match(paramTypeNumber);
          if (match) {
            var size = parseInt(match[2] || "256");
            if (size === 0 || size > 256 || size % 8 !== 0) {
              logger.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
            }
            return new number_1.NumberCoder(size / 8, match[1] === "int", param.name);
          }
          match = param.type.match(paramTypeBytes);
          if (match) {
            var size = parseInt(match[1]);
            if (size === 0 || size > 32) {
              logger.throwArgumentError("invalid bytes length", "param", param);
            }
            return new fixed_bytes_1.FixedBytesCoder(size, param.name);
          }
          return logger.throwArgumentError("invalid type", "type", param.type);
        };
        AbiCoder2.prototype._getWordSize = function() {
          return 32;
        };
        AbiCoder2.prototype._getReader = function(data, allowLoose) {
          return new abstract_coder_1.Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
        };
        AbiCoder2.prototype._getWriter = function() {
          return new abstract_coder_1.Writer(this._getWordSize());
        };
        AbiCoder2.prototype.getDefaultValue = function(types) {
          var _this = this;
          var coders = types.map(function(type) {
            return _this._getCoder(fragments_1.ParamType.from(type));
          });
          var coder = new tuple_1.TupleCoder(coders, "_");
          return coder.defaultValue();
        };
        AbiCoder2.prototype.encode = function(types, values) {
          var _this = this;
          if (types.length !== values.length) {
            logger.throwError("types/values length mismatch", logger_1.Logger.errors.INVALID_ARGUMENT, {
              count: { types: types.length, values: values.length },
              value: { types, values }
            });
          }
          var coders = types.map(function(type) {
            return _this._getCoder(fragments_1.ParamType.from(type));
          });
          var coder = new tuple_1.TupleCoder(coders, "_");
          var writer = this._getWriter();
          coder.encode(writer, values);
          return writer.data;
        };
        AbiCoder2.prototype.decode = function(types, data, loose) {
          var _this = this;
          var coders = types.map(function(type) {
            return _this._getCoder(fragments_1.ParamType.from(type));
          });
          var coder = new tuple_1.TupleCoder(coders, "_");
          return coder.decode(this._getReader((0, bytes_1.arrayify)(data), loose));
        };
        return AbiCoder2;
      }()
    );
    exports.AbiCoder = AbiCoder;
    exports.defaultAbiCoder = new AbiCoder();
  }
});

// node_modules/@ethersproject/hash/lib/id.js
var require_id = __commonJS({
  "node_modules/@ethersproject/hash/lib/id.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.id = void 0;
    var keccak256_1 = require_lib5();
    var strings_1 = require_lib9();
    function id(text) {
      return (0, keccak256_1.keccak256)((0, strings_1.toUtf8Bytes)(text));
    }
    exports.id = id;
  }
});

// node_modules/@ethersproject/hash/lib/_version.js
var require_version9 = __commonJS({
  "node_modules/@ethersproject/hash/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "hash/5.7.0";
  }
});

// node_modules/@ethersproject/base64/lib/browser-base64.js
var require_browser_base64 = __commonJS({
  "node_modules/@ethersproject/base64/lib/browser-base64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encode = exports.decode = void 0;
    var bytes_1 = require_lib2();
    function decode(textData) {
      textData = atob(textData);
      var data = [];
      for (var i = 0; i < textData.length; i++) {
        data.push(textData.charCodeAt(i));
      }
      return (0, bytes_1.arrayify)(data);
    }
    exports.decode = decode;
    function encode(data) {
      data = (0, bytes_1.arrayify)(data);
      var textData = "";
      for (var i = 0; i < data.length; i++) {
        textData += String.fromCharCode(data[i]);
      }
      return btoa(textData);
    }
    exports.encode = encode;
  }
});

// node_modules/@ethersproject/base64/lib/index.js
var require_lib10 = __commonJS({
  "node_modules/@ethersproject/base64/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encode = exports.decode = void 0;
    var base64_1 = require_browser_base64();
    Object.defineProperty(exports, "decode", { enumerable: true, get: function() {
      return base64_1.decode;
    } });
    Object.defineProperty(exports, "encode", { enumerable: true, get: function() {
      return base64_1.encode;
    } });
  }
});

// node_modules/@ethersproject/hash/lib/ens-normalize/decoder.js
var require_decoder = __commonJS({
  "node_modules/@ethersproject/hash/lib/ens-normalize/decoder.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.read_emoji_trie = exports.read_zero_terminated_array = exports.read_mapped_map = exports.read_member_array = exports.signed = exports.read_compressed_payload = exports.read_payload = exports.decode_arithmetic = void 0;
    function flat(array, depth) {
      if (depth == null) {
        depth = 1;
      }
      var result = [];
      var forEach = result.forEach;
      var flatDeep = function(arr, depth2) {
        forEach.call(arr, function(val) {
          if (depth2 > 0 && Array.isArray(val)) {
            flatDeep(val, depth2 - 1);
          } else {
            result.push(val);
          }
        });
      };
      flatDeep(array, depth);
      return result;
    }
    function fromEntries(array) {
      var result = {};
      for (var i = 0; i < array.length; i++) {
        var value = array[i];
        result[value[0]] = value[1];
      }
      return result;
    }
    function decode_arithmetic(bytes) {
      var pos = 0;
      function u16() {
        return bytes[pos++] << 8 | bytes[pos++];
      }
      var symbol_count = u16();
      var total = 1;
      var acc = [0, 1];
      for (var i = 1; i < symbol_count; i++) {
        acc.push(total += u16());
      }
      var skip = u16();
      var pos_payload = pos;
      pos += skip;
      var read_width = 0;
      var read_buffer = 0;
      function read_bit() {
        if (read_width == 0) {
          read_buffer = read_buffer << 8 | bytes[pos++];
          read_width = 8;
        }
        return read_buffer >> --read_width & 1;
      }
      var N = 31;
      var FULL = Math.pow(2, N);
      var HALF = FULL >>> 1;
      var QRTR = HALF >> 1;
      var MASK = FULL - 1;
      var register = 0;
      for (var i = 0; i < N; i++)
        register = register << 1 | read_bit();
      var symbols = [];
      var low = 0;
      var range = FULL;
      while (true) {
        var value = Math.floor(((register - low + 1) * total - 1) / range);
        var start = 0;
        var end = symbol_count;
        while (end - start > 1) {
          var mid = start + end >>> 1;
          if (value < acc[mid]) {
            end = mid;
          } else {
            start = mid;
          }
        }
        if (start == 0)
          break;
        symbols.push(start);
        var a = low + Math.floor(range * acc[start] / total);
        var b = low + Math.floor(range * acc[start + 1] / total) - 1;
        while (((a ^ b) & HALF) == 0) {
          register = register << 1 & MASK | read_bit();
          a = a << 1 & MASK;
          b = b << 1 & MASK | 1;
        }
        while (a & ~b & QRTR) {
          register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
          a = a << 1 ^ HALF;
          b = (b ^ HALF) << 1 | HALF | 1;
        }
        low = a;
        range = 1 + b - a;
      }
      var offset = symbol_count - 4;
      return symbols.map(function(x) {
        switch (x - offset) {
          case 3:
            return offset + 65792 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
          case 2:
            return offset + 256 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
          case 1:
            return offset + bytes[pos_payload++];
          default:
            return x - 1;
        }
      });
    }
    exports.decode_arithmetic = decode_arithmetic;
    function read_payload(v) {
      var pos = 0;
      return function() {
        return v[pos++];
      };
    }
    exports.read_payload = read_payload;
    function read_compressed_payload(bytes) {
      return read_payload(decode_arithmetic(bytes));
    }
    exports.read_compressed_payload = read_compressed_payload;
    function signed(i) {
      return i & 1 ? ~i >> 1 : i >> 1;
    }
    exports.signed = signed;
    function read_counts(n, next) {
      var v = Array(n);
      for (var i = 0; i < n; i++)
        v[i] = 1 + next();
      return v;
    }
    function read_ascending(n, next) {
      var v = Array(n);
      for (var i = 0, x = -1; i < n; i++)
        v[i] = x += 1 + next();
      return v;
    }
    function read_deltas(n, next) {
      var v = Array(n);
      for (var i = 0, x = 0; i < n; i++)
        v[i] = x += signed(next());
      return v;
    }
    function read_member_array(next, lookup) {
      var v = read_ascending(next(), next);
      var n = next();
      var vX = read_ascending(n, next);
      var vN = read_counts(n, next);
      for (var i = 0; i < n; i++) {
        for (var j = 0; j < vN[i]; j++) {
          v.push(vX[i] + j);
        }
      }
      return lookup ? v.map(function(x) {
        return lookup[x];
      }) : v;
    }
    exports.read_member_array = read_member_array;
    function read_mapped_map(next) {
      var ret = [];
      while (true) {
        var w = next();
        if (w == 0)
          break;
        ret.push(read_linear_table(w, next));
      }
      while (true) {
        var w = next() - 1;
        if (w < 0)
          break;
        ret.push(read_replacement_table(w, next));
      }
      return fromEntries(flat(ret));
    }
    exports.read_mapped_map = read_mapped_map;
    function read_zero_terminated_array(next) {
      var v = [];
      while (true) {
        var i = next();
        if (i == 0)
          break;
        v.push(i);
      }
      return v;
    }
    exports.read_zero_terminated_array = read_zero_terminated_array;
    function read_transposed(n, w, next) {
      var m = Array(n).fill(void 0).map(function() {
        return [];
      });
      for (var i = 0; i < w; i++) {
        read_deltas(n, next).forEach(function(x, j) {
          return m[j].push(x);
        });
      }
      return m;
    }
    function read_linear_table(w, next) {
      var dx = 1 + next();
      var dy = next();
      var vN = read_zero_terminated_array(next);
      var m = read_transposed(vN.length, 1 + w, next);
      return flat(m.map(function(v, i) {
        var x = v[0], ys = v.slice(1);
        return Array(vN[i]).fill(void 0).map(function(_, j) {
          var j_dy = j * dy;
          return [x + j * dx, ys.map(function(y) {
            return y + j_dy;
          })];
        });
      }));
    }
    function read_replacement_table(w, next) {
      var n = 1 + next();
      var m = read_transposed(n, 1 + w, next);
      return m.map(function(v) {
        return [v[0], v.slice(1)];
      });
    }
    function read_emoji_trie(next) {
      var sorted = read_member_array(next).sort(function(a, b) {
        return a - b;
      });
      return read();
      function read() {
        var branches = [];
        while (true) {
          var keys = read_member_array(next, sorted);
          if (keys.length == 0)
            break;
          branches.push({ set: new Set(keys), node: read() });
        }
        branches.sort(function(a, b) {
          return b.set.size - a.set.size;
        });
        var temp = next();
        var valid = temp % 3;
        temp = temp / 3 | 0;
        var fe0f = !!(temp & 1);
        temp >>= 1;
        var save = temp == 1;
        var check = temp == 2;
        return { branches, valid, fe0f, save, check };
      }
    }
    exports.read_emoji_trie = read_emoji_trie;
  }
});

// node_modules/@ethersproject/hash/lib/ens-normalize/include.js
var require_include = __commonJS({
  "node_modules/@ethersproject/hash/lib/ens-normalize/include.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getData = void 0;
    var base64_1 = require_lib10();
    var decoder_js_1 = require_decoder();
    function getData() {
      return (0, decoder_js_1.read_compressed_payload)((0, base64_1.decode)(""));
    }
    exports.getData = getData;
  }
});

// node_modules/@ethersproject/hash/lib/ens-normalize/lib.js
var require_lib11 = __commonJS({
  "node_modules/@ethersproject/hash/lib/ens-normalize/lib.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ens_normalize = exports.ens_normalize_post_check = void 0;
    var strings_1 = require_lib9();
    var include_js_1 = require_include();
    var r = (0, include_js_1.getData)();
    var decoder_js_1 = require_decoder();
    var VALID = new Set((0, decoder_js_1.read_member_array)(r));
    var IGNORED = new Set((0, decoder_js_1.read_member_array)(r));
    var MAPPED = (0, decoder_js_1.read_mapped_map)(r);
    var EMOJI_ROOT = (0, decoder_js_1.read_emoji_trie)(r);
    var HYPHEN = 45;
    var UNDERSCORE = 95;
    function explode_cp(name) {
      return (0, strings_1.toUtf8CodePoints)(name);
    }
    function filter_fe0f(cps) {
      return cps.filter(function(cp) {
        return cp != 65039;
      });
    }
    function ens_normalize_post_check(name) {
      for (var _i = 0, _a = name.split("."); _i < _a.length; _i++) {
        var label = _a[_i];
        var cps = explode_cp(label);
        try {
          for (var i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {
            if (cps[i] !== UNDERSCORE) {
              throw new Error("underscore only allowed at start");
            }
          }
          if (cps.length >= 4 && cps.every(function(cp) {
            return cp < 128;
          }) && cps[2] === HYPHEN && cps[3] === HYPHEN) {
            throw new Error("invalid label extension");
          }
        } catch (err) {
          throw new Error('Invalid label "' + label + '": ' + err.message);
        }
      }
      return name;
    }
    exports.ens_normalize_post_check = ens_normalize_post_check;
    function ens_normalize(name) {
      return ens_normalize_post_check(normalize(name, filter_fe0f));
    }
    exports.ens_normalize = ens_normalize;
    function normalize(name, emoji_filter) {
      var input = explode_cp(name).reverse();
      var output = [];
      while (input.length) {
        var emoji = consume_emoji_reversed(input);
        if (emoji) {
          output.push.apply(output, emoji_filter(emoji));
          continue;
        }
        var cp = input.pop();
        if (VALID.has(cp)) {
          output.push(cp);
          continue;
        }
        if (IGNORED.has(cp)) {
          continue;
        }
        var cps = MAPPED[cp];
        if (cps) {
          output.push.apply(output, cps);
          continue;
        }
        throw new Error("Disallowed codepoint: 0x" + cp.toString(16).toUpperCase());
      }
      return ens_normalize_post_check(nfc(String.fromCodePoint.apply(String, output)));
    }
    function nfc(s) {
      return s.normalize("NFC");
    }
    function consume_emoji_reversed(cps, eaten) {
      var _a;
      var node = EMOJI_ROOT;
      var emoji;
      var saved;
      var stack = [];
      var pos = cps.length;
      if (eaten)
        eaten.length = 0;
      var _loop_1 = function() {
        var cp = cps[--pos];
        node = (_a = node.branches.find(function(x) {
          return x.set.has(cp);
        })) === null || _a === void 0 ? void 0 : _a.node;
        if (!node)
          return "break";
        if (node.save) {
          saved = cp;
        } else if (node.check) {
          if (cp === saved)
            return "break";
        }
        stack.push(cp);
        if (node.fe0f) {
          stack.push(65039);
          if (pos > 0 && cps[pos - 1] == 65039)
            pos--;
        }
        if (node.valid) {
          emoji = stack.slice();
          if (node.valid == 2)
            emoji.splice(1, 1);
          if (eaten)
            eaten.push.apply(eaten, cps.slice(pos).reverse());
          cps.length = pos;
        }
      };
      while (pos) {
        var state_1 = _loop_1();
        if (state_1 === "break")
          break;
      }
      return emoji;
    }
  }
});

// node_modules/@ethersproject/hash/lib/namehash.js
var require_namehash = __commonJS({
  "node_modules/@ethersproject/hash/lib/namehash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = void 0;
    var bytes_1 = require_lib2();
    var strings_1 = require_lib9();
    var keccak256_1 = require_lib5();
    var logger_1 = require_lib();
    var _version_1 = require_version9();
    var logger = new logger_1.Logger(_version_1.version);
    var lib_1 = require_lib11();
    var Zeros = new Uint8Array(32);
    Zeros.fill(0);
    function checkComponent(comp) {
      if (comp.length === 0) {
        throw new Error("invalid ENS name; empty component");
      }
      return comp;
    }
    function ensNameSplit(name) {
      var bytes = (0, strings_1.toUtf8Bytes)((0, lib_1.ens_normalize)(name));
      var comps = [];
      if (name.length === 0) {
        return comps;
      }
      var last = 0;
      for (var i = 0; i < bytes.length; i++) {
        var d = bytes[i];
        if (d === 46) {
          comps.push(checkComponent(bytes.slice(last, i)));
          last = i + 1;
        }
      }
      if (last >= bytes.length) {
        throw new Error("invalid ENS name; empty component");
      }
      comps.push(checkComponent(bytes.slice(last)));
      return comps;
    }
    function ensNormalize(name) {
      return ensNameSplit(name).map(function(comp) {
        return (0, strings_1.toUtf8String)(comp);
      }).join(".");
    }
    exports.ensNormalize = ensNormalize;
    function isValidName(name) {
      try {
        return ensNameSplit(name).length !== 0;
      } catch (error) {
      }
      return false;
    }
    exports.isValidName = isValidName;
    function namehash(name) {
      if (typeof name !== "string") {
        logger.throwArgumentError("invalid ENS name; not a string", "name", name);
      }
      var result = Zeros;
      var comps = ensNameSplit(name);
      while (comps.length) {
        result = (0, keccak256_1.keccak256)((0, bytes_1.concat)([result, (0, keccak256_1.keccak256)(comps.pop())]));
      }
      return (0, bytes_1.hexlify)(result);
    }
    exports.namehash = namehash;
    function dnsEncode(name) {
      return (0, bytes_1.hexlify)((0, bytes_1.concat)(ensNameSplit(name).map(function(comp) {
        if (comp.length > 63) {
          throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
        }
        var bytes = new Uint8Array(comp.length + 1);
        bytes.set(comp, 1);
        bytes[0] = bytes.length - 1;
        return bytes;
      }))) + "00";
    }
    exports.dnsEncode = dnsEncode;
  }
});

// node_modules/@ethersproject/hash/lib/message.js
var require_message = __commonJS({
  "node_modules/@ethersproject/hash/lib/message.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashMessage = exports.messagePrefix = void 0;
    var bytes_1 = require_lib2();
    var keccak256_1 = require_lib5();
    var strings_1 = require_lib9();
    exports.messagePrefix = "Ethereum Signed Message:\n";
    function hashMessage(message) {
      if (typeof message === "string") {
        message = (0, strings_1.toUtf8Bytes)(message);
      }
      return (0, keccak256_1.keccak256)((0, bytes_1.concat)([
        (0, strings_1.toUtf8Bytes)(exports.messagePrefix),
        (0, strings_1.toUtf8Bytes)(String(message.length)),
        message
      ]));
    }
    exports.hashMessage = hashMessage;
  }
});

// node_modules/@ethersproject/hash/lib/typed-data.js
var require_typed_data = __commonJS({
  "node_modules/@ethersproject/hash/lib/typed-data.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypedDataEncoder = void 0;
    var address_1 = require_lib7();
    var bignumber_1 = require_lib3();
    var bytes_1 = require_lib2();
    var keccak256_1 = require_lib5();
    var properties_1 = require_lib4();
    var logger_1 = require_lib();
    var _version_1 = require_version9();
    var logger = new logger_1.Logger(_version_1.version);
    var id_1 = require_id();
    var padding = new Uint8Array(32);
    padding.fill(0);
    var NegativeOne = bignumber_1.BigNumber.from(-1);
    var Zero = bignumber_1.BigNumber.from(0);
    var One = bignumber_1.BigNumber.from(1);
    var MaxUint256 = bignumber_1.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    function hexPadRight(value) {
      var bytes = (0, bytes_1.arrayify)(value);
      var padOffset = bytes.length % 32;
      if (padOffset) {
        return (0, bytes_1.hexConcat)([bytes, padding.slice(padOffset)]);
      }
      return (0, bytes_1.hexlify)(bytes);
    }
    var hexTrue = (0, bytes_1.hexZeroPad)(One.toHexString(), 32);
    var hexFalse = (0, bytes_1.hexZeroPad)(Zero.toHexString(), 32);
    var domainFieldTypes = {
      name: "string",
      version: "string",
      chainId: "uint256",
      verifyingContract: "address",
      salt: "bytes32"
    };
    var domainFieldNames = [
      "name",
      "version",
      "chainId",
      "verifyingContract",
      "salt"
    ];
    function checkString(key) {
      return function(value) {
        if (typeof value !== "string") {
          logger.throwArgumentError("invalid domain value for " + JSON.stringify(key), "domain." + key, value);
        }
        return value;
      };
    }
    var domainChecks = {
      name: checkString("name"),
      version: checkString("version"),
      chainId: function(value) {
        try {
          return bignumber_1.BigNumber.from(value).toString();
        } catch (error) {
        }
        return logger.throwArgumentError('invalid domain value for "chainId"', "domain.chainId", value);
      },
      verifyingContract: function(value) {
        try {
          return (0, address_1.getAddress)(value).toLowerCase();
        } catch (error) {
        }
        return logger.throwArgumentError('invalid domain value "verifyingContract"', "domain.verifyingContract", value);
      },
      salt: function(value) {
        try {
          var bytes = (0, bytes_1.arrayify)(value);
          if (bytes.length !== 32) {
            throw new Error("bad length");
          }
          return (0, bytes_1.hexlify)(bytes);
        } catch (error) {
        }
        return logger.throwArgumentError('invalid domain value "salt"', "domain.salt", value);
      }
    };
    function getBaseEncoder(type) {
      {
        var match = type.match(/^(u?)int(\d*)$/);
        if (match) {
          var signed = match[1] === "";
          var width = parseInt(match[2] || "256");
          if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {
            logger.throwArgumentError("invalid numeric width", "type", type);
          }
          var boundsUpper_1 = MaxUint256.mask(signed ? width - 1 : width);
          var boundsLower_1 = signed ? boundsUpper_1.add(One).mul(NegativeOne) : Zero;
          return function(value) {
            var v = bignumber_1.BigNumber.from(value);
            if (v.lt(boundsLower_1) || v.gt(boundsUpper_1)) {
              logger.throwArgumentError("value out-of-bounds for " + type, "value", value);
            }
            return (0, bytes_1.hexZeroPad)(v.toTwos(256).toHexString(), 32);
          };
        }
      }
      {
        var match = type.match(/^bytes(\d+)$/);
        if (match) {
          var width_1 = parseInt(match[1]);
          if (width_1 === 0 || width_1 > 32 || match[1] !== String(width_1)) {
            logger.throwArgumentError("invalid bytes width", "type", type);
          }
          return function(value) {
            var bytes = (0, bytes_1.arrayify)(value);
            if (bytes.length !== width_1) {
              logger.throwArgumentError("invalid length for " + type, "value", value);
            }
            return hexPadRight(value);
          };
        }
      }
      switch (type) {
        case "address":
          return function(value) {
            return (0, bytes_1.hexZeroPad)((0, address_1.getAddress)(value), 32);
          };
        case "bool":
          return function(value) {
            return !value ? hexFalse : hexTrue;
          };
        case "bytes":
          return function(value) {
            return (0, keccak256_1.keccak256)(value);
          };
        case "string":
          return function(value) {
            return (0, id_1.id)(value);
          };
      }
      return null;
    }
    function encodeType(name, fields) {
      return name + "(" + fields.map(function(_a) {
        var name2 = _a.name, type = _a.type;
        return type + " " + name2;
      }).join(",") + ")";
    }
    var TypedDataEncoder = (
      /** @class */
      function() {
        function TypedDataEncoder2(types) {
          (0, properties_1.defineReadOnly)(this, "types", Object.freeze((0, properties_1.deepCopy)(types)));
          (0, properties_1.defineReadOnly)(this, "_encoderCache", {});
          (0, properties_1.defineReadOnly)(this, "_types", {});
          var links = {};
          var parents = {};
          var subtypes = {};
          Object.keys(types).forEach(function(type) {
            links[type] = {};
            parents[type] = [];
            subtypes[type] = {};
          });
          var _loop_1 = function(name_12) {
            var uniqueNames = {};
            types[name_12].forEach(function(field) {
              if (uniqueNames[field.name]) {
                logger.throwArgumentError("duplicate variable name " + JSON.stringify(field.name) + " in " + JSON.stringify(name_12), "types", types);
              }
              uniqueNames[field.name] = true;
              var baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
              if (baseType === name_12) {
                logger.throwArgumentError("circular type reference to " + JSON.stringify(baseType), "types", types);
              }
              var encoder = getBaseEncoder(baseType);
              if (encoder) {
                return;
              }
              if (!parents[baseType]) {
                logger.throwArgumentError("unknown type " + JSON.stringify(baseType), "types", types);
              }
              parents[baseType].push(name_12);
              links[name_12][baseType] = true;
            });
          };
          for (var name_1 in types) {
            _loop_1(name_1);
          }
          var primaryTypes = Object.keys(parents).filter(function(n) {
            return parents[n].length === 0;
          });
          if (primaryTypes.length === 0) {
            logger.throwArgumentError("missing primary type", "types", types);
          } else if (primaryTypes.length > 1) {
            logger.throwArgumentError("ambiguous primary types or unused types: " + primaryTypes.map(function(t) {
              return JSON.stringify(t);
            }).join(", "), "types", types);
          }
          (0, properties_1.defineReadOnly)(this, "primaryType", primaryTypes[0]);
          function checkCircular(type, found) {
            if (found[type]) {
              logger.throwArgumentError("circular type reference to " + JSON.stringify(type), "types", types);
            }
            found[type] = true;
            Object.keys(links[type]).forEach(function(child) {
              if (!parents[child]) {
                return;
              }
              checkCircular(child, found);
              Object.keys(found).forEach(function(subtype) {
                subtypes[subtype][child] = true;
              });
            });
            delete found[type];
          }
          checkCircular(this.primaryType, {});
          for (var name_2 in subtypes) {
            var st = Object.keys(subtypes[name_2]);
            st.sort();
            this._types[name_2] = encodeType(name_2, types[name_2]) + st.map(function(t) {
              return encodeType(t, types[t]);
            }).join("");
          }
        }
        TypedDataEncoder2.prototype.getEncoder = function(type) {
          var encoder = this._encoderCache[type];
          if (!encoder) {
            encoder = this._encoderCache[type] = this._getEncoder(type);
          }
          return encoder;
        };
        TypedDataEncoder2.prototype._getEncoder = function(type) {
          var _this = this;
          {
            var encoder = getBaseEncoder(type);
            if (encoder) {
              return encoder;
            }
          }
          var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
          if (match) {
            var subtype_1 = match[1];
            var subEncoder_1 = this.getEncoder(subtype_1);
            var length_1 = parseInt(match[3]);
            return function(value) {
              if (length_1 >= 0 && value.length !== length_1) {
                logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
              }
              var result = value.map(subEncoder_1);
              if (_this._types[subtype_1]) {
                result = result.map(keccak256_1.keccak256);
              }
              return (0, keccak256_1.keccak256)((0, bytes_1.hexConcat)(result));
            };
          }
          var fields = this.types[type];
          if (fields) {
            var encodedType_1 = (0, id_1.id)(this._types[type]);
            return function(value) {
              var values = fields.map(function(_a) {
                var name = _a.name, type2 = _a.type;
                var result = _this.getEncoder(type2)(value[name]);
                if (_this._types[type2]) {
                  return (0, keccak256_1.keccak256)(result);
                }
                return result;
              });
              values.unshift(encodedType_1);
              return (0, bytes_1.hexConcat)(values);
            };
          }
          return logger.throwArgumentError("unknown type: " + type, "type", type);
        };
        TypedDataEncoder2.prototype.encodeType = function(name) {
          var result = this._types[name];
          if (!result) {
            logger.throwArgumentError("unknown type: " + JSON.stringify(name), "name", name);
          }
          return result;
        };
        TypedDataEncoder2.prototype.encodeData = function(type, value) {
          return this.getEncoder(type)(value);
        };
        TypedDataEncoder2.prototype.hashStruct = function(name, value) {
          return (0, keccak256_1.keccak256)(this.encodeData(name, value));
        };
        TypedDataEncoder2.prototype.encode = function(value) {
          return this.encodeData(this.primaryType, value);
        };
        TypedDataEncoder2.prototype.hash = function(value) {
          return this.hashStruct(this.primaryType, value);
        };
        TypedDataEncoder2.prototype._visit = function(type, value, callback) {
          var _this = this;
          {
            var encoder = getBaseEncoder(type);
            if (encoder) {
              return callback(type, value);
            }
          }
          var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
          if (match) {
            var subtype_2 = match[1];
            var length_2 = parseInt(match[3]);
            if (length_2 >= 0 && value.length !== length_2) {
              logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
            }
            return value.map(function(v) {
              return _this._visit(subtype_2, v, callback);
            });
          }
          var fields = this.types[type];
          if (fields) {
            return fields.reduce(function(accum, _a) {
              var name = _a.name, type2 = _a.type;
              accum[name] = _this._visit(type2, value[name], callback);
              return accum;
            }, {});
          }
          return logger.throwArgumentError("unknown type: " + type, "type", type);
        };
        TypedDataEncoder2.prototype.visit = function(value, callback) {
          return this._visit(this.primaryType, value, callback);
        };
        TypedDataEncoder2.from = function(types) {
          return new TypedDataEncoder2(types);
        };
        TypedDataEncoder2.getPrimaryType = function(types) {
          return TypedDataEncoder2.from(types).primaryType;
        };
        TypedDataEncoder2.hashStruct = function(name, types, value) {
          return TypedDataEncoder2.from(types).hashStruct(name, value);
        };
        TypedDataEncoder2.hashDomain = function(domain) {
          var domainFields = [];
          for (var name_3 in domain) {
            var type = domainFieldTypes[name_3];
            if (!type) {
              logger.throwArgumentError("invalid typed-data domain key: " + JSON.stringify(name_3), "domain", domain);
            }
            domainFields.push({ name: name_3, type });
          }
          domainFields.sort(function(a, b) {
            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
          });
          return TypedDataEncoder2.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
        };
        TypedDataEncoder2.encode = function(domain, types, value) {
          return (0, bytes_1.hexConcat)([
            "0x1901",
            TypedDataEncoder2.hashDomain(domain),
            TypedDataEncoder2.from(types).hash(value)
          ]);
        };
        TypedDataEncoder2.hash = function(domain, types, value) {
          return (0, keccak256_1.keccak256)(TypedDataEncoder2.encode(domain, types, value));
        };
        TypedDataEncoder2.resolveNames = function(domain, types, value, resolveName) {
          return __awaiter(this, void 0, void 0, function() {
            var ensCache, encoder, _a, _b, _i, name_4, _c, _d;
            return __generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  domain = (0, properties_1.shallowCopy)(domain);
                  ensCache = {};
                  if (domain.verifyingContract && !(0, bytes_1.isHexString)(domain.verifyingContract, 20)) {
                    ensCache[domain.verifyingContract] = "0x";
                  }
                  encoder = TypedDataEncoder2.from(types);
                  encoder.visit(value, function(type, value2) {
                    if (type === "address" && !(0, bytes_1.isHexString)(value2, 20)) {
                      ensCache[value2] = "0x";
                    }
                    return value2;
                  });
                  _a = [];
                  for (_b in ensCache)
                    _a.push(_b);
                  _i = 0;
                  _e.label = 1;
                case 1:
                  if (!(_i < _a.length))
                    return [3, 4];
                  name_4 = _a[_i];
                  _c = ensCache;
                  _d = name_4;
                  return [4, resolveName(name_4)];
                case 2:
                  _c[_d] = _e.sent();
                  _e.label = 3;
                case 3:
                  _i++;
                  return [3, 1];
                case 4:
                  if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                    domain.verifyingContract = ensCache[domain.verifyingContract];
                  }
                  value = encoder.visit(value, function(type, value2) {
                    if (type === "address" && ensCache[value2]) {
                      return ensCache[value2];
                    }
                    return value2;
                  });
                  return [2, { domain, value }];
              }
            });
          });
        };
        TypedDataEncoder2.getPayload = function(domain, types, value) {
          TypedDataEncoder2.hashDomain(domain);
          var domainValues = {};
          var domainTypes = [];
          domainFieldNames.forEach(function(name) {
            var value2 = domain[name];
            if (value2 == null) {
              return;
            }
            domainValues[name] = domainChecks[name](value2);
            domainTypes.push({ name, type: domainFieldTypes[name] });
          });
          var encoder = TypedDataEncoder2.from(types);
          var typesWithDomain = (0, properties_1.shallowCopy)(types);
          if (typesWithDomain.EIP712Domain) {
            logger.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
          } else {
            typesWithDomain.EIP712Domain = domainTypes;
          }
          encoder.encode(value);
          return {
            types: typesWithDomain,
            domain: domainValues,
            primaryType: encoder.primaryType,
            message: encoder.visit(value, function(type, value2) {
              if (type.match(/^bytes(\d*)/)) {
                return (0, bytes_1.hexlify)((0, bytes_1.arrayify)(value2));
              }
              if (type.match(/^u?int/)) {
                return bignumber_1.BigNumber.from(value2).toString();
              }
              switch (type) {
                case "address":
                  return value2.toLowerCase();
                case "bool":
                  return !!value2;
                case "string":
                  if (typeof value2 !== "string") {
                    logger.throwArgumentError("invalid string", "value", value2);
                  }
                  return value2;
              }
              return logger.throwArgumentError("unsupported type", "type", type);
            })
          };
        };
        return TypedDataEncoder2;
      }()
    );
    exports.TypedDataEncoder = TypedDataEncoder;
  }
});

// node_modules/@ethersproject/hash/lib/index.js
var require_lib12 = __commonJS({
  "node_modules/@ethersproject/hash/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports._TypedDataEncoder = exports.hashMessage = exports.messagePrefix = exports.ensNormalize = exports.isValidName = exports.namehash = exports.dnsEncode = exports.id = void 0;
    var id_1 = require_id();
    Object.defineProperty(exports, "id", { enumerable: true, get: function() {
      return id_1.id;
    } });
    var namehash_1 = require_namehash();
    Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function() {
      return namehash_1.dnsEncode;
    } });
    Object.defineProperty(exports, "isValidName", { enumerable: true, get: function() {
      return namehash_1.isValidName;
    } });
    Object.defineProperty(exports, "namehash", { enumerable: true, get: function() {
      return namehash_1.namehash;
    } });
    var message_1 = require_message();
    Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function() {
      return message_1.hashMessage;
    } });
    Object.defineProperty(exports, "messagePrefix", { enumerable: true, get: function() {
      return message_1.messagePrefix;
    } });
    var namehash_2 = require_namehash();
    Object.defineProperty(exports, "ensNormalize", { enumerable: true, get: function() {
      return namehash_2.ensNormalize;
    } });
    var typed_data_1 = require_typed_data();
    Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function() {
      return typed_data_1.TypedDataEncoder;
    } });
  }
});

// node_modules/@ethersproject/abi/lib/interface.js
var require_interface = __commonJS({
  "node_modules/@ethersproject/abi/lib/interface.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Interface = exports.Indexed = exports.ErrorDescription = exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = void 0;
    var address_1 = require_lib7();
    var bignumber_1 = require_lib3();
    var bytes_1 = require_lib2();
    var hash_1 = require_lib12();
    var keccak256_1 = require_lib5();
    var properties_1 = require_lib4();
    var abi_coder_1 = require_abi_coder();
    var abstract_coder_1 = require_abstract_coder();
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function() {
      return abstract_coder_1.checkResultErrors;
    } });
    var fragments_1 = require_fragments();
    var logger_1 = require_lib();
    var _version_1 = require_version5();
    var logger = new logger_1.Logger(_version_1.version);
    var LogDescription = (
      /** @class */
      function(_super) {
        __extends(LogDescription2, _super);
        function LogDescription2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return LogDescription2;
      }(properties_1.Description)
    );
    exports.LogDescription = LogDescription;
    var TransactionDescription = (
      /** @class */
      function(_super) {
        __extends(TransactionDescription2, _super);
        function TransactionDescription2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionDescription2;
      }(properties_1.Description)
    );
    exports.TransactionDescription = TransactionDescription;
    var ErrorDescription = (
      /** @class */
      function(_super) {
        __extends(ErrorDescription2, _super);
        function ErrorDescription2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return ErrorDescription2;
      }(properties_1.Description)
    );
    exports.ErrorDescription = ErrorDescription;
    var Indexed = (
      /** @class */
      function(_super) {
        __extends(Indexed2, _super);
        function Indexed2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Indexed2.isIndexed = function(value) {
          return !!(value && value._isIndexed);
        };
        return Indexed2;
      }(properties_1.Description)
    );
    exports.Indexed = Indexed;
    var BuiltinErrors = {
      "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
      "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    };
    function wrapAccessError(property, error) {
      var wrap = new Error("deferred error during ABI decoding triggered accessing " + property);
      wrap.error = error;
      return wrap;
    }
    var Interface = (
      /** @class */
      function() {
        function Interface2(fragments) {
          var _newTarget = this.constructor;
          var _this = this;
          var abi = [];
          if (typeof fragments === "string") {
            abi = JSON.parse(fragments);
          } else {
            abi = fragments;
          }
          (0, properties_1.defineReadOnly)(this, "fragments", abi.map(function(fragment) {
            return fragments_1.Fragment.from(fragment);
          }).filter(function(fragment) {
            return fragment != null;
          }));
          (0, properties_1.defineReadOnly)(this, "_abiCoder", (0, properties_1.getStatic)(_newTarget, "getAbiCoder")());
          (0, properties_1.defineReadOnly)(this, "functions", {});
          (0, properties_1.defineReadOnly)(this, "errors", {});
          (0, properties_1.defineReadOnly)(this, "events", {});
          (0, properties_1.defineReadOnly)(this, "structs", {});
          this.fragments.forEach(function(fragment) {
            var bucket = null;
            switch (fragment.type) {
              case "constructor":
                if (_this.deploy) {
                  logger.warn("duplicate definition - constructor");
                  return;
                }
                (0, properties_1.defineReadOnly)(_this, "deploy", fragment);
                return;
              case "function":
                bucket = _this.functions;
                break;
              case "event":
                bucket = _this.events;
                break;
              case "error":
                bucket = _this.errors;
                break;
              default:
                return;
            }
            var signature = fragment.format();
            if (bucket[signature]) {
              logger.warn("duplicate definition - " + signature);
              return;
            }
            bucket[signature] = fragment;
          });
          if (!this.deploy) {
            (0, properties_1.defineReadOnly)(this, "deploy", fragments_1.ConstructorFragment.from({
              payable: false,
              type: "constructor"
            }));
          }
          (0, properties_1.defineReadOnly)(this, "_isInterface", true);
        }
        Interface2.prototype.format = function(format) {
          if (!format) {
            format = fragments_1.FormatTypes.full;
          }
          if (format === fragments_1.FormatTypes.sighash) {
            logger.throwArgumentError("interface does not support formatting sighash", "format", format);
          }
          var abi = this.fragments.map(function(fragment) {
            return fragment.format(format);
          });
          if (format === fragments_1.FormatTypes.json) {
            return JSON.stringify(abi.map(function(j) {
              return JSON.parse(j);
            }));
          }
          return abi;
        };
        Interface2.getAbiCoder = function() {
          return abi_coder_1.defaultAbiCoder;
        };
        Interface2.getAddress = function(address) {
          return (0, address_1.getAddress)(address);
        };
        Interface2.getSighash = function(fragment) {
          return (0, bytes_1.hexDataSlice)((0, hash_1.id)(fragment.format()), 0, 4);
        };
        Interface2.getEventTopic = function(eventFragment) {
          return (0, hash_1.id)(eventFragment.format());
        };
        Interface2.prototype.getFunction = function(nameOrSignatureOrSighash) {
          if ((0, bytes_1.isHexString)(nameOrSignatureOrSighash)) {
            for (var name_1 in this.functions) {
              if (nameOrSignatureOrSighash === this.getSighash(name_1)) {
                return this.functions[name_1];
              }
            }
            logger.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
          }
          if (nameOrSignatureOrSighash.indexOf("(") === -1) {
            var name_2 = nameOrSignatureOrSighash.trim();
            var matching = Object.keys(this.functions).filter(function(f) {
              return f.split(
                "("
                /* fix:) */
              )[0] === name_2;
            });
            if (matching.length === 0) {
              logger.throwArgumentError("no matching function", "name", name_2);
            } else if (matching.length > 1) {
              logger.throwArgumentError("multiple matching functions", "name", name_2);
            }
            return this.functions[matching[0]];
          }
          var result = this.functions[fragments_1.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
          if (!result) {
            logger.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
          }
          return result;
        };
        Interface2.prototype.getEvent = function(nameOrSignatureOrTopic) {
          if ((0, bytes_1.isHexString)(nameOrSignatureOrTopic)) {
            var topichash = nameOrSignatureOrTopic.toLowerCase();
            for (var name_3 in this.events) {
              if (topichash === this.getEventTopic(name_3)) {
                return this.events[name_3];
              }
            }
            logger.throwArgumentError("no matching event", "topichash", topichash);
          }
          if (nameOrSignatureOrTopic.indexOf("(") === -1) {
            var name_4 = nameOrSignatureOrTopic.trim();
            var matching = Object.keys(this.events).filter(function(f) {
              return f.split(
                "("
                /* fix:) */
              )[0] === name_4;
            });
            if (matching.length === 0) {
              logger.throwArgumentError("no matching event", "name", name_4);
            } else if (matching.length > 1) {
              logger.throwArgumentError("multiple matching events", "name", name_4);
            }
            return this.events[matching[0]];
          }
          var result = this.events[fragments_1.EventFragment.fromString(nameOrSignatureOrTopic).format()];
          if (!result) {
            logger.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
          }
          return result;
        };
        Interface2.prototype.getError = function(nameOrSignatureOrSighash) {
          if ((0, bytes_1.isHexString)(nameOrSignatureOrSighash)) {
            var getSighash = (0, properties_1.getStatic)(this.constructor, "getSighash");
            for (var name_5 in this.errors) {
              var error = this.errors[name_5];
              if (nameOrSignatureOrSighash === getSighash(error)) {
                return this.errors[name_5];
              }
            }
            logger.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
          }
          if (nameOrSignatureOrSighash.indexOf("(") === -1) {
            var name_6 = nameOrSignatureOrSighash.trim();
            var matching = Object.keys(this.errors).filter(function(f) {
              return f.split(
                "("
                /* fix:) */
              )[0] === name_6;
            });
            if (matching.length === 0) {
              logger.throwArgumentError("no matching error", "name", name_6);
            } else if (matching.length > 1) {
              logger.throwArgumentError("multiple matching errors", "name", name_6);
            }
            return this.errors[matching[0]];
          }
          var result = this.errors[fragments_1.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
          if (!result) {
            logger.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
          }
          return result;
        };
        Interface2.prototype.getSighash = function(fragment) {
          if (typeof fragment === "string") {
            try {
              fragment = this.getFunction(fragment);
            } catch (error) {
              try {
                fragment = this.getError(fragment);
              } catch (_) {
                throw error;
              }
            }
          }
          return (0, properties_1.getStatic)(this.constructor, "getSighash")(fragment);
        };
        Interface2.prototype.getEventTopic = function(eventFragment) {
          if (typeof eventFragment === "string") {
            eventFragment = this.getEvent(eventFragment);
          }
          return (0, properties_1.getStatic)(this.constructor, "getEventTopic")(eventFragment);
        };
        Interface2.prototype._decodeParams = function(params, data) {
          return this._abiCoder.decode(params, data);
        };
        Interface2.prototype._encodeParams = function(params, values) {
          return this._abiCoder.encode(params, values);
        };
        Interface2.prototype.encodeDeploy = function(values) {
          return this._encodeParams(this.deploy.inputs, values || []);
        };
        Interface2.prototype.decodeErrorResult = function(fragment, data) {
          if (typeof fragment === "string") {
            fragment = this.getError(fragment);
          }
          var bytes = (0, bytes_1.arrayify)(data);
          if ((0, bytes_1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
            logger.throwArgumentError("data signature does not match error " + fragment.name + ".", "data", (0, bytes_1.hexlify)(bytes));
          }
          return this._decodeParams(fragment.inputs, bytes.slice(4));
        };
        Interface2.prototype.encodeErrorResult = function(fragment, values) {
          if (typeof fragment === "string") {
            fragment = this.getError(fragment);
          }
          return (0, bytes_1.hexlify)((0, bytes_1.concat)([
            this.getSighash(fragment),
            this._encodeParams(fragment.inputs, values || [])
          ]));
        };
        Interface2.prototype.decodeFunctionData = function(functionFragment, data) {
          if (typeof functionFragment === "string") {
            functionFragment = this.getFunction(functionFragment);
          }
          var bytes = (0, bytes_1.arrayify)(data);
          if ((0, bytes_1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
            logger.throwArgumentError("data signature does not match function " + functionFragment.name + ".", "data", (0, bytes_1.hexlify)(bytes));
          }
          return this._decodeParams(functionFragment.inputs, bytes.slice(4));
        };
        Interface2.prototype.encodeFunctionData = function(functionFragment, values) {
          if (typeof functionFragment === "string") {
            functionFragment = this.getFunction(functionFragment);
          }
          return (0, bytes_1.hexlify)((0, bytes_1.concat)([
            this.getSighash(functionFragment),
            this._encodeParams(functionFragment.inputs, values || [])
          ]));
        };
        Interface2.prototype.decodeFunctionResult = function(functionFragment, data) {
          if (typeof functionFragment === "string") {
            functionFragment = this.getFunction(functionFragment);
          }
          var bytes = (0, bytes_1.arrayify)(data);
          var reason = null;
          var message = "";
          var errorArgs = null;
          var errorName = null;
          var errorSignature = null;
          switch (bytes.length % this._abiCoder._getWordSize()) {
            case 0:
              try {
                return this._abiCoder.decode(functionFragment.outputs, bytes);
              } catch (error2) {
              }
              break;
            case 4: {
              var selector = (0, bytes_1.hexlify)(bytes.slice(0, 4));
              var builtin = BuiltinErrors[selector];
              if (builtin) {
                errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
                errorName = builtin.name;
                errorSignature = builtin.signature;
                if (builtin.reason) {
                  reason = errorArgs[0];
                }
                if (errorName === "Error") {
                  message = "; VM Exception while processing transaction: reverted with reason string " + JSON.stringify(errorArgs[0]);
                } else if (errorName === "Panic") {
                  message = "; VM Exception while processing transaction: reverted with panic code " + errorArgs[0];
                }
              } else {
                try {
                  var error = this.getError(selector);
                  errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                  errorName = error.name;
                  errorSignature = error.format();
                } catch (error2) {
                }
              }
              break;
            }
          }
          return logger.throwError("call revert exception" + message, logger_1.Logger.errors.CALL_EXCEPTION, {
            method: functionFragment.format(),
            data: (0, bytes_1.hexlify)(data),
            errorArgs,
            errorName,
            errorSignature,
            reason
          });
        };
        Interface2.prototype.encodeFunctionResult = function(functionFragment, values) {
          if (typeof functionFragment === "string") {
            functionFragment = this.getFunction(functionFragment);
          }
          return (0, bytes_1.hexlify)(this._abiCoder.encode(functionFragment.outputs, values || []));
        };
        Interface2.prototype.encodeFilterTopics = function(eventFragment, values) {
          var _this = this;
          if (typeof eventFragment === "string") {
            eventFragment = this.getEvent(eventFragment);
          }
          if (values.length > eventFragment.inputs.length) {
            logger.throwError("too many arguments for " + eventFragment.format(), logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {
              argument: "values",
              value: values
            });
          }
          var topics = [];
          if (!eventFragment.anonymous) {
            topics.push(this.getEventTopic(eventFragment));
          }
          var encodeTopic = function(param, value) {
            if (param.type === "string") {
              return (0, hash_1.id)(value);
            } else if (param.type === "bytes") {
              return (0, keccak256_1.keccak256)((0, bytes_1.hexlify)(value));
            }
            if (param.type === "bool" && typeof value === "boolean") {
              value = value ? "0x01" : "0x00";
            }
            if (param.type.match(/^u?int/)) {
              value = bignumber_1.BigNumber.from(value).toHexString();
            }
            if (param.type === "address") {
              _this._abiCoder.encode(["address"], [value]);
            }
            return (0, bytes_1.hexZeroPad)((0, bytes_1.hexlify)(value), 32);
          };
          values.forEach(function(value, index) {
            var param = eventFragment.inputs[index];
            if (!param.indexed) {
              if (value != null) {
                logger.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
              }
              return;
            }
            if (value == null) {
              topics.push(null);
            } else if (param.baseType === "array" || param.baseType === "tuple") {
              logger.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
            } else if (Array.isArray(value)) {
              topics.push(value.map(function(value2) {
                return encodeTopic(param, value2);
              }));
            } else {
              topics.push(encodeTopic(param, value));
            }
          });
          while (topics.length && topics[topics.length - 1] === null) {
            topics.pop();
          }
          return topics;
        };
        Interface2.prototype.encodeEventLog = function(eventFragment, values) {
          var _this = this;
          if (typeof eventFragment === "string") {
            eventFragment = this.getEvent(eventFragment);
          }
          var topics = [];
          var dataTypes = [];
          var dataValues = [];
          if (!eventFragment.anonymous) {
            topics.push(this.getEventTopic(eventFragment));
          }
          if (values.length !== eventFragment.inputs.length) {
            logger.throwArgumentError("event arguments/values mismatch", "values", values);
          }
          eventFragment.inputs.forEach(function(param, index) {
            var value = values[index];
            if (param.indexed) {
              if (param.type === "string") {
                topics.push((0, hash_1.id)(value));
              } else if (param.type === "bytes") {
                topics.push((0, keccak256_1.keccak256)(value));
              } else if (param.baseType === "tuple" || param.baseType === "array") {
                throw new Error("not implemented");
              } else {
                topics.push(_this._abiCoder.encode([param.type], [value]));
              }
            } else {
              dataTypes.push(param);
              dataValues.push(value);
            }
          });
          return {
            data: this._abiCoder.encode(dataTypes, dataValues),
            topics
          };
        };
        Interface2.prototype.decodeEventLog = function(eventFragment, data, topics) {
          if (typeof eventFragment === "string") {
            eventFragment = this.getEvent(eventFragment);
          }
          if (topics != null && !eventFragment.anonymous) {
            var topicHash = this.getEventTopic(eventFragment);
            if (!(0, bytes_1.isHexString)(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
              logger.throwError("fragment/topic mismatch", logger_1.Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
            }
            topics = topics.slice(1);
          }
          var indexed = [];
          var nonIndexed = [];
          var dynamic = [];
          eventFragment.inputs.forEach(function(param, index) {
            if (param.indexed) {
              if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                indexed.push(fragments_1.ParamType.fromObject({ type: "bytes32", name: param.name }));
                dynamic.push(true);
              } else {
                indexed.push(param);
                dynamic.push(false);
              }
            } else {
              nonIndexed.push(param);
              dynamic.push(false);
            }
          });
          var resultIndexed = topics != null ? this._abiCoder.decode(indexed, (0, bytes_1.concat)(topics)) : null;
          var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
          var result = [];
          var nonIndexedIndex = 0, indexedIndex = 0;
          eventFragment.inputs.forEach(function(param, index) {
            if (param.indexed) {
              if (resultIndexed == null) {
                result[index] = new Indexed({ _isIndexed: true, hash: null });
              } else if (dynamic[index]) {
                result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
              } else {
                try {
                  result[index] = resultIndexed[indexedIndex++];
                } catch (error) {
                  result[index] = error;
                }
              }
            } else {
              try {
                result[index] = resultNonIndexed[nonIndexedIndex++];
              } catch (error) {
                result[index] = error;
              }
            }
            if (param.name && result[param.name] == null) {
              var value_1 = result[index];
              if (value_1 instanceof Error) {
                Object.defineProperty(result, param.name, {
                  enumerable: true,
                  get: function() {
                    throw wrapAccessError("property " + JSON.stringify(param.name), value_1);
                  }
                });
              } else {
                result[param.name] = value_1;
              }
            }
          });
          var _loop_1 = function(i2) {
            var value = result[i2];
            if (value instanceof Error) {
              Object.defineProperty(result, i2, {
                enumerable: true,
                get: function() {
                  throw wrapAccessError("index " + i2, value);
                }
              });
            }
          };
          for (var i = 0; i < result.length; i++) {
            _loop_1(i);
          }
          return Object.freeze(result);
        };
        Interface2.prototype.parseTransaction = function(tx) {
          var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
          if (!fragment) {
            return null;
          }
          return new TransactionDescription({
            args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
            functionFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            sighash: this.getSighash(fragment),
            value: bignumber_1.BigNumber.from(tx.value || "0")
          });
        };
        Interface2.prototype.parseLog = function(log) {
          var fragment = this.getEvent(log.topics[0]);
          if (!fragment || fragment.anonymous) {
            return null;
          }
          return new LogDescription({
            eventFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            topic: this.getEventTopic(fragment),
            args: this.decodeEventLog(fragment, log.data, log.topics)
          });
        };
        Interface2.prototype.parseError = function(data) {
          var hexData = (0, bytes_1.hexlify)(data);
          var fragment = this.getError(hexData.substring(0, 10).toLowerCase());
          if (!fragment) {
            return null;
          }
          return new ErrorDescription({
            args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
            errorFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            sighash: this.getSighash(fragment)
          });
        };
        Interface2.isInterface = function(value) {
          return !!(value && value._isInterface);
        };
        return Interface2;
      }()
    );
    exports.Interface = Interface;
  }
});

// node_modules/@ethersproject/abi/lib/index.js
var require_lib13 = __commonJS({
  "node_modules/@ethersproject/abi/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = exports.Indexed = exports.Interface = exports.defaultAbiCoder = exports.AbiCoder = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.Fragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = void 0;
    var fragments_1 = require_fragments();
    Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function() {
      return fragments_1.ConstructorFragment;
    } });
    Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function() {
      return fragments_1.ErrorFragment;
    } });
    Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function() {
      return fragments_1.EventFragment;
    } });
    Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function() {
      return fragments_1.FormatTypes;
    } });
    Object.defineProperty(exports, "Fragment", { enumerable: true, get: function() {
      return fragments_1.Fragment;
    } });
    Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function() {
      return fragments_1.FunctionFragment;
    } });
    Object.defineProperty(exports, "ParamType", { enumerable: true, get: function() {
      return fragments_1.ParamType;
    } });
    var abi_coder_1 = require_abi_coder();
    Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function() {
      return abi_coder_1.AbiCoder;
    } });
    Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function() {
      return abi_coder_1.defaultAbiCoder;
    } });
    var interface_1 = require_interface();
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function() {
      return interface_1.checkResultErrors;
    } });
    Object.defineProperty(exports, "Indexed", { enumerable: true, get: function() {
      return interface_1.Indexed;
    } });
    Object.defineProperty(exports, "Interface", { enumerable: true, get: function() {
      return interface_1.Interface;
    } });
    Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function() {
      return interface_1.LogDescription;
    } });
    Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function() {
      return interface_1.TransactionDescription;
    } });
  }
});

// node_modules/@ethersproject/abstract-provider/lib/_version.js
var require_version10 = __commonJS({
  "node_modules/@ethersproject/abstract-provider/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "abstract-provider/5.7.0";
  }
});

// node_modules/@ethersproject/abstract-provider/lib/index.js
var require_lib14 = __commonJS({
  "node_modules/@ethersproject/abstract-provider/lib/index.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Provider = exports.TransactionOrderForkEvent = exports.TransactionForkEvent = exports.BlockForkEvent = exports.ForkEvent = void 0;
    var bignumber_1 = require_lib3();
    var bytes_1 = require_lib2();
    var properties_1 = require_lib4();
    var logger_1 = require_lib();
    var _version_1 = require_version10();
    var logger = new logger_1.Logger(_version_1.version);
    var ForkEvent = (
      /** @class */
      function(_super) {
        __extends(ForkEvent2, _super);
        function ForkEvent2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ForkEvent2.isForkEvent = function(value) {
          return !!(value && value._isForkEvent);
        };
        return ForkEvent2;
      }(properties_1.Description)
    );
    exports.ForkEvent = ForkEvent;
    var BlockForkEvent = (
      /** @class */
      function(_super) {
        __extends(BlockForkEvent2, _super);
        function BlockForkEvent2(blockHash, expiry) {
          var _this = this;
          if (!(0, bytes_1.isHexString)(blockHash, 32)) {
            logger.throwArgumentError("invalid blockHash", "blockHash", blockHash);
          }
          _this = _super.call(this, {
            _isForkEvent: true,
            _isBlockForkEvent: true,
            expiry: expiry || 0,
            blockHash
          }) || this;
          return _this;
        }
        return BlockForkEvent2;
      }(ForkEvent)
    );
    exports.BlockForkEvent = BlockForkEvent;
    var TransactionForkEvent = (
      /** @class */
      function(_super) {
        __extends(TransactionForkEvent2, _super);
        function TransactionForkEvent2(hash, expiry) {
          var _this = this;
          if (!(0, bytes_1.isHexString)(hash, 32)) {
            logger.throwArgumentError("invalid transaction hash", "hash", hash);
          }
          _this = _super.call(this, {
            _isForkEvent: true,
            _isTransactionForkEvent: true,
            expiry: expiry || 0,
            hash
          }) || this;
          return _this;
        }
        return TransactionForkEvent2;
      }(ForkEvent)
    );
    exports.TransactionForkEvent = TransactionForkEvent;
    var TransactionOrderForkEvent = (
      /** @class */
      function(_super) {
        __extends(TransactionOrderForkEvent2, _super);
        function TransactionOrderForkEvent2(beforeHash, afterHash, expiry) {
          var _this = this;
          if (!(0, bytes_1.isHexString)(beforeHash, 32)) {
            logger.throwArgumentError("invalid transaction hash", "beforeHash", beforeHash);
          }
          if (!(0, bytes_1.isHexString)(afterHash, 32)) {
            logger.throwArgumentError("invalid transaction hash", "afterHash", afterHash);
          }
          _this = _super.call(this, {
            _isForkEvent: true,
            _isTransactionOrderForkEvent: true,
            expiry: expiry || 0,
            beforeHash,
            afterHash
          }) || this;
          return _this;
        }
        return TransactionOrderForkEvent2;
      }(ForkEvent)
    );
    exports.TransactionOrderForkEvent = TransactionOrderForkEvent;
    var Provider = (
      /** @class */
      function() {
        function Provider2() {
          var _newTarget = this.constructor;
          logger.checkAbstract(_newTarget, Provider2);
          (0, properties_1.defineReadOnly)(this, "_isProvider", true);
        }
        Provider2.prototype.getFeeData = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _a, block, gasPrice, lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  return [4, (0, properties_1.resolveProperties)({
                    block: this.getBlock("latest"),
                    gasPrice: this.getGasPrice().catch(function(error) {
                      return null;
                    })
                  })];
                case 1:
                  _a = _b.sent(), block = _a.block, gasPrice = _a.gasPrice;
                  lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;
                  if (block && block.baseFeePerGas) {
                    lastBaseFeePerGas = block.baseFeePerGas;
                    maxPriorityFeePerGas = bignumber_1.BigNumber.from("1500000000");
                    maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
                  }
                  return [2, { lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas, gasPrice }];
              }
            });
          });
        };
        Provider2.prototype.addListener = function(eventName, listener) {
          return this.on(eventName, listener);
        };
        Provider2.prototype.removeListener = function(eventName, listener) {
          return this.off(eventName, listener);
        };
        Provider2.isProvider = function(value) {
          return !!(value && value._isProvider);
        };
        return Provider2;
      }()
    );
    exports.Provider = Provider;
  }
});

// node_modules/@ethersproject/abstract-signer/lib/_version.js
var require_version11 = __commonJS({
  "node_modules/@ethersproject/abstract-signer/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "abstract-signer/5.7.0";
  }
});

// node_modules/@ethersproject/abstract-signer/lib/index.js
var require_lib15 = __commonJS({
  "node_modules/@ethersproject/abstract-signer/lib/index.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VoidSigner = exports.Signer = void 0;
    var properties_1 = require_lib4();
    var logger_1 = require_lib();
    var _version_1 = require_version11();
    var logger = new logger_1.Logger(_version_1.version);
    var allowedTransactionKeys = [
      "accessList",
      "ccipReadEnabled",
      "chainId",
      "customData",
      "data",
      "from",
      "gasLimit",
      "gasPrice",
      "maxFeePerGas",
      "maxPriorityFeePerGas",
      "nonce",
      "to",
      "type",
      "value"
    ];
    var forwardErrors = [
      logger_1.Logger.errors.INSUFFICIENT_FUNDS,
      logger_1.Logger.errors.NONCE_EXPIRED,
      logger_1.Logger.errors.REPLACEMENT_UNDERPRICED
    ];
    var Signer = (
      /** @class */
      function() {
        function Signer2() {
          var _newTarget = this.constructor;
          logger.checkAbstract(_newTarget, Signer2);
          (0, properties_1.defineReadOnly)(this, "_isSigner", true);
        }
        Signer2.prototype.getBalance = function(blockTag) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this._checkProvider("getBalance");
                  return [4, this.provider.getBalance(this.getAddress(), blockTag)];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Signer2.prototype.getTransactionCount = function(blockTag) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this._checkProvider("getTransactionCount");
                  return [4, this.provider.getTransactionCount(this.getAddress(), blockTag)];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Signer2.prototype.estimateGas = function(transaction) {
          return __awaiter(this, void 0, void 0, function() {
            var tx;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this._checkProvider("estimateGas");
                  return [4, (0, properties_1.resolveProperties)(this.checkTransaction(transaction))];
                case 1:
                  tx = _a.sent();
                  return [4, this.provider.estimateGas(tx)];
                case 2:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Signer2.prototype.call = function(transaction, blockTag) {
          return __awaiter(this, void 0, void 0, function() {
            var tx;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this._checkProvider("call");
                  return [4, (0, properties_1.resolveProperties)(this.checkTransaction(transaction))];
                case 1:
                  tx = _a.sent();
                  return [4, this.provider.call(tx, blockTag)];
                case 2:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Signer2.prototype.sendTransaction = function(transaction) {
          return __awaiter(this, void 0, void 0, function() {
            var tx, signedTx;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this._checkProvider("sendTransaction");
                  return [4, this.populateTransaction(transaction)];
                case 1:
                  tx = _a.sent();
                  return [4, this.signTransaction(tx)];
                case 2:
                  signedTx = _a.sent();
                  return [4, this.provider.sendTransaction(signedTx)];
                case 3:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Signer2.prototype.getChainId = function() {
          return __awaiter(this, void 0, void 0, function() {
            var network;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this._checkProvider("getChainId");
                  return [4, this.provider.getNetwork()];
                case 1:
                  network = _a.sent();
                  return [2, network.chainId];
              }
            });
          });
        };
        Signer2.prototype.getGasPrice = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this._checkProvider("getGasPrice");
                  return [4, this.provider.getGasPrice()];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Signer2.prototype.getFeeData = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this._checkProvider("getFeeData");
                  return [4, this.provider.getFeeData()];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Signer2.prototype.resolveName = function(name) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  this._checkProvider("resolveName");
                  return [4, this.provider.resolveName(name)];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Signer2.prototype.checkTransaction = function(transaction) {
          for (var key in transaction) {
            if (allowedTransactionKeys.indexOf(key) === -1) {
              logger.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
            }
          }
          var tx = (0, properties_1.shallowCopy)(transaction);
          if (tx.from == null) {
            tx.from = this.getAddress();
          } else {
            tx.from = Promise.all([
              Promise.resolve(tx.from),
              this.getAddress()
            ]).then(function(result) {
              if (result[0].toLowerCase() !== result[1].toLowerCase()) {
                logger.throwArgumentError("from address mismatch", "transaction", transaction);
              }
              return result[0];
            });
          }
          return tx;
        };
        Signer2.prototype.populateTransaction = function(transaction) {
          return __awaiter(this, void 0, void 0, function() {
            var tx, hasEip1559, feeData, gasPrice;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, properties_1.resolveProperties)(this.checkTransaction(transaction))];
                case 1:
                  tx = _a.sent();
                  if (tx.to != null) {
                    tx.to = Promise.resolve(tx.to).then(function(to) {
                      return __awaiter(_this, void 0, void 0, function() {
                        var address;
                        return __generator(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              if (to == null) {
                                return [2, null];
                              }
                              return [4, this.resolveName(to)];
                            case 1:
                              address = _a2.sent();
                              if (address == null) {
                                logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                              }
                              return [2, address];
                          }
                        });
                      });
                    });
                    tx.to.catch(function(error) {
                    });
                  }
                  hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;
                  if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
                    logger.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
                  } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
                    logger.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
                  }
                  if (!((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)))
                    return [3, 2];
                  tx.type = 2;
                  return [3, 5];
                case 2:
                  if (!(tx.type === 0 || tx.type === 1))
                    return [3, 3];
                  if (tx.gasPrice == null) {
                    tx.gasPrice = this.getGasPrice();
                  }
                  return [3, 5];
                case 3:
                  return [4, this.getFeeData()];
                case 4:
                  feeData = _a.sent();
                  if (tx.type == null) {
                    if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                      tx.type = 2;
                      if (tx.gasPrice != null) {
                        gasPrice = tx.gasPrice;
                        delete tx.gasPrice;
                        tx.maxFeePerGas = gasPrice;
                        tx.maxPriorityFeePerGas = gasPrice;
                      } else {
                        if (tx.maxFeePerGas == null) {
                          tx.maxFeePerGas = feeData.maxFeePerGas;
                        }
                        if (tx.maxPriorityFeePerGas == null) {
                          tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                        }
                      }
                    } else if (feeData.gasPrice != null) {
                      if (hasEip1559) {
                        logger.throwError("network does not support EIP-1559", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                          operation: "populateTransaction"
                        });
                      }
                      if (tx.gasPrice == null) {
                        tx.gasPrice = feeData.gasPrice;
                      }
                      tx.type = 0;
                    } else {
                      logger.throwError("failed to get consistent fee data", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "signer.getFeeData"
                      });
                    }
                  } else if (tx.type === 2) {
                    if (tx.maxFeePerGas == null) {
                      tx.maxFeePerGas = feeData.maxFeePerGas;
                    }
                    if (tx.maxPriorityFeePerGas == null) {
                      tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                    }
                  }
                  _a.label = 5;
                case 5:
                  if (tx.nonce == null) {
                    tx.nonce = this.getTransactionCount("pending");
                  }
                  if (tx.gasLimit == null) {
                    tx.gasLimit = this.estimateGas(tx).catch(function(error) {
                      if (forwardErrors.indexOf(error.code) >= 0) {
                        throw error;
                      }
                      return logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                        error,
                        tx
                      });
                    });
                  }
                  if (tx.chainId == null) {
                    tx.chainId = this.getChainId();
                  } else {
                    tx.chainId = Promise.all([
                      Promise.resolve(tx.chainId),
                      this.getChainId()
                    ]).then(function(results) {
                      if (results[1] !== 0 && results[0] !== results[1]) {
                        logger.throwArgumentError("chainId address mismatch", "transaction", transaction);
                      }
                      return results[0];
                    });
                  }
                  return [4, (0, properties_1.resolveProperties)(tx)];
                case 6:
                  return [2, _a.sent()];
              }
            });
          });
        };
        Signer2.prototype._checkProvider = function(operation) {
          if (!this.provider) {
            logger.throwError("missing provider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: operation || "_checkProvider"
            });
          }
        };
        Signer2.isSigner = function(value) {
          return !!(value && value._isSigner);
        };
        return Signer2;
      }()
    );
    exports.Signer = Signer;
    var VoidSigner = (
      /** @class */
      function(_super) {
        __extends(VoidSigner2, _super);
        function VoidSigner2(address, provider) {
          var _this = _super.call(this) || this;
          (0, properties_1.defineReadOnly)(_this, "address", address);
          (0, properties_1.defineReadOnly)(_this, "provider", provider || null);
          return _this;
        }
        VoidSigner2.prototype.getAddress = function() {
          return Promise.resolve(this.address);
        };
        VoidSigner2.prototype._fail = function(message, operation) {
          return Promise.resolve().then(function() {
            logger.throwError(message, logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation });
          });
        };
        VoidSigner2.prototype.signMessage = function(message) {
          return this._fail("VoidSigner cannot sign messages", "signMessage");
        };
        VoidSigner2.prototype.signTransaction = function(transaction) {
          return this._fail("VoidSigner cannot sign transactions", "signTransaction");
        };
        VoidSigner2.prototype._signTypedData = function(domain, types, value) {
          return this._fail("VoidSigner cannot sign typed data", "signTypedData");
        };
        VoidSigner2.prototype.connect = function(provider) {
          return new VoidSigner2(this.address, provider);
        };
        return VoidSigner2;
      }(Signer)
    );
    exports.VoidSigner = VoidSigner;
  }
});

// node_modules/elliptic/package.json
var require_package = __commonJS({
  "node_modules/elliptic/package.json"(exports, module) {
    module.exports = {
      name: "elliptic",
      version: "6.5.4",
      description: "EC cryptography",
      main: "lib/elliptic.js",
      files: [
        "lib"
      ],
      scripts: {
        lint: "eslint lib test",
        "lint:fix": "npm run lint -- --fix",
        unit: "istanbul test _mocha --reporter=spec test/index.js",
        test: "npm run lint && npm run unit",
        version: "grunt dist && git add dist/"
      },
      repository: {
        type: "git",
        url: "git@github.com:indutny/elliptic"
      },
      keywords: [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      author: "Fedor Indutny <fedor@indutny.com>",
      license: "MIT",
      bugs: {
        url: "https://github.com/indutny/elliptic/issues"
      },
      homepage: "https://github.com/indutny/elliptic",
      devDependencies: {
        brfs: "^2.0.2",
        coveralls: "^3.1.0",
        eslint: "^7.6.0",
        grunt: "^1.2.1",
        "grunt-browserify": "^5.3.0",
        "grunt-cli": "^1.3.2",
        "grunt-contrib-connect": "^3.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^5.0.0",
        "grunt-mocha-istanbul": "^5.0.2",
        "grunt-saucelabs": "^9.0.1",
        istanbul: "^0.4.5",
        mocha: "^8.0.1"
      },
      dependencies: {
        "bn.js": "^4.11.9",
        brorand: "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        inherits: "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    };
  }
});

// node_modules/elliptic/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "node_modules/elliptic/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound2, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound2) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            r += c - 49 + 10;
          } else if (c >= 17) {
            r += c - 17 + 10;
          } else {
            r += c;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
  "node_modules/minimalistic-assert/index.js"(exports, module) {
    module.exports = assert;
    function assert(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    assert.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || "Assertion failed: " + l + " != " + r);
    };
  }
});

// node_modules/minimalistic-crypto-utils/lib/utils.js
var require_utils = __commonJS({
  "node_modules/minimalistic-crypto-utils/lib/utils.js"(exports) {
    "use strict";
    var utils2 = exports;
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils2.toArray = toArray;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils2.zero2 = zero2;
    function toHex(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils2.toHex = toHex;
    utils2.encode = function encode(arr, enc) {
      if (enc === "hex")
        return toHex(arr);
      else
        return arr;
    };
  }
});

// node_modules/elliptic/lib/elliptic/utils.js
var require_utils2 = __commonJS({
  "node_modules/elliptic/lib/elliptic/utils.js"(exports) {
    "use strict";
    var utils2 = exports;
    var BN = require_bn2();
    var minAssert = require_minimalistic_assert();
    var minUtils = require_utils();
    utils2.assert = minAssert;
    utils2.toArray = minUtils.toArray;
    utils2.zero2 = minUtils.zero2;
    utils2.toHex = minUtils.toHex;
    utils2.encode = minUtils.encode;
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);
      var ws = 1 << w + 1;
      var k = num.clone();
      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf[i] = z;
        k.iushrn(1);
      }
      return naf;
    }
    utils2.getNAF = getNAF;
    function getJSF(k1, k2) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils2.getJSF = getJSF;
    function cachedProperty(obj, name, computer) {
      var key = "_" + name;
      obj.prototype[name] = function cachedProperty2() {
        return this[key] !== void 0 ? this[key] : this[key] = computer.call(this);
      };
    }
    utils2.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === "string" ? utils2.toArray(bytes, "hex") : bytes;
    }
    utils2.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new BN(bytes, "hex", "le");
    }
    utils2.intFromLE = intFromLE;
  }
});

// (disabled):crypto
var require_crypto = __commonJS({
  "(disabled):crypto"() {
  }
});

// node_modules/brorand/index.js
var require_brorand = __commonJS({
  "node_modules/brorand/index.js"(exports, module) {
    var r;
    module.exports = function rand(len) {
      if (!r)
        r = new Rand(null);
      return r.generate(len);
    };
    function Rand(rand) {
      this.rand = rand;
    }
    module.exports.Rand = Rand;
    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
    if (typeof self === "object") {
      if (self.crypto && self.crypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };
      } else if (typeof window === "object") {
        Rand.prototype._rand = function() {
          throw new Error("Not implemented yet");
        };
      }
    } else {
      try {
        crypto = require_crypto();
        if (typeof crypto.randomBytes !== "function")
          throw new Error("Not supported");
        Rand.prototype._rand = function _rand(n) {
          return crypto.randomBytes(n);
        };
      } catch (e) {
      }
    }
    var crypto;
  }
});

// node_modules/elliptic/lib/elliptic/curve/base.js
var require_base = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/base.js"(exports, module) {
    "use strict";
    var BN = require_bn2();
    var utils2 = require_utils2();
    var getNAF = utils2.getNAF;
    var getJSF = utils2.getJSF;
    var assert = utils2.assert;
    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN(conf.p, 16);
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red);
      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module.exports = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype.validate = function validate2() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert(p.precomputed);
      var doubles = p._getDoubles();
      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k, w, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);
        if (i < 0)
          break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === "affine") {
          if (z > 0)
            acc = acc.mixedAdd(wnd[z - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else {
          if (z > 0)
            acc = acc.add(wnd[z - 1 >> 1]);
          else
            acc = acc.add(wnd[-z - 1 >> 1].neg());
        }
      }
      return p.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }
        var comb = [
          points[a],
          /* 1 */
          null,
          /* 3 */
          null,
          /* 5 */
          points[b]
          /* 7 */
        ];
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
          -3,
          /* -1 -1 */
          -1,
          /* -1 0 */
          -5,
          /* -1 1 */
          -7,
          /* 0 -1 */
          0,
          /* 0 0 */
          7,
          /* 0 1 */
          5,
          /* 1 -1 */
          1,
          /* 1 0 */
          3
          /* 1 1 */
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;
        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;
        for (j = 0; j < len; j++) {
          var z = tmp[j];
          p;
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][z - 1 >> 1];
          else if (z < 0)
            p = wnd[j][-z - 1 >> 1].neg();
          if (p.type === "affine")
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      for (i = 0; i < len; i++)
        wnd[i] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
    };
    BasePoint.prototype.validate = function validate2() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils2.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(
          bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len)
        );
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x);
      return [4].concat(x, this.getY().toArray("be", len));
    };
    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils2.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd,
        points: res
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports, module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/elliptic/lib/elliptic/curve/short.js
var require_short = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/short.js"(exports, module) {
    "use strict";
    var utils2 = require_utils2();
    var BN = require_bn2();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var assert = utils2.assert;
    function ShortCurve(conf) {
      Base.call(this, "short", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve, Base);
    module.exports = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [l1, l2];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x2 = new BN(0);
      var y2 = new BN(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a2;
      var b2;
      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
      ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1, k2 };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    ShortCurve.prototype.validate = function validate2(point) {
      if (point.inf)
        return true;
      var x = point.x;
      var y = point.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };
    function Point(curve, x, y, isRed) {
      Base.BasePoint.call(this, curve, "affine");
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits(Point, Base.BasePoint);
    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p) {
      if (this.inf)
        return p;
      if (p.inf)
        return this;
      if (this.eq(p))
        return this.dbl();
      if (this.neg().eq(p))
        return this.curve.point(null, null);
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k) {
      k = new BN(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k]);
      else
        return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq(p) {
      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    function JPoint(curve, x, y, z) {
      Base.BasePoint.call(this, curve, "jacobian");
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint, Base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      if (this.isInfinity())
        return p.toJ();
      if (p.isInfinity())
        return this;
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx);
        var t = m.redSqr().redISub(s).redISub(s);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t;
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = b.redSqr();
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        var e = a.redAdd(a).redIAdd(a);
        var f = e.redSqr();
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f.redISub(d).redISub(d);
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t = m.redSqr().redISub(s).redISub(s);
        nx = t;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m = xx.redAdd(xx).redIAdd(xx);
      var mm = m.redSqr();
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      var ee = e.redSqr();
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN(k, kbase);
      return this.curve._wnafMul(this, k);
    };
    JPoint.prototype.eq = function eq(p) {
      if (p.type === "affine")
        return this.eq(p.toJ());
      if (this === p)
        return true;
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };
    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
  }
});

// node_modules/elliptic/lib/elliptic/curve/mont.js
var require_mont = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/mont.js"(exports, module) {
    "use strict";
    var BN = require_bn2();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var utils2 = require_utils2();
    function MontCurve(conf) {
      Base.call(this, "mont", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    module.exports = MontCurve;
    MontCurve.prototype.validate = function validate2(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();
      return y.redSqr().cmp(rhs) === 0;
    };
    function Point(curve, x, z) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits(Point, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils2.toArray(bytes, enc), 1);
    };
    MontCurve.prototype.point = function point(x, z) {
      return new Point(this, x, z);
    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    Point.prototype.precompute = function precompute() {
    };
    Point.prototype._encode = function _encode() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1] || curve.one);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
    Point.prototype.dbl = function dbl() {
      var a = this.x.redAdd(this.z);
      var aa = a.redSqr();
      var b = this.x.redSub(this.z);
      var bb = b.redSqr();
      var c = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };
    Point.prototype.add = function add() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.diffAdd = function diffAdd(p, diff) {
      var a = this.x.redAdd(this.z);
      var b = this.x.redSub(this.z);
      var c = p.x.redAdd(p.z);
      var d = p.x.redSub(p.z);
      var da = d.redMul(a);
      var cb = c.redMul(b);
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    Point.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this;
      var b = this.curve.point(null, null);
      var c = this;
      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));
      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          a = a.diffAdd(b, c);
          b = b.dbl();
        } else {
          b = a.diffAdd(b, c);
          a = a.dbl();
        }
      }
      return b;
    };
    Point.prototype.mulAdd = function mulAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    Point.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
  }
});

// node_modules/elliptic/lib/elliptic/curve/edwards.js
var require_edwards = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/edwards.js"(exports, module) {
    "use strict";
    var utils2 = require_utils2();
    var BN = require_bn2();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var assert = utils2.assert;
    function EdwardsCurve(conf) {
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, "edwards", conf);
      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits(EdwardsCurve, Base);
    module.exports = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };
    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN(y, 16);
      if (!y.red)
        y = y.toRed(this.red);
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());
      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error("invalid point");
        else
          return this.point(this.zero, y);
      }
      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.validate = function validate2(point) {
      if (point.isInfinity())
        return true;
      point.normalize();
      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
      return lhs.cmp(rhs) === 0;
    };
    function Point(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits(Point, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    Point.prototype._extDbl = function _extDbl() {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      var d = this.curve._mulA(a);
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      var g = d.redAdd(b);
      var f = g.redSub(c);
      var h = d.redSub(b);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point.prototype._projDbl = function _projDbl() {
      var b = this.x.redAdd(this.y).redSqr();
      var c = this.x.redSqr();
      var d = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        e = this.curve._mulA(c);
        var f = e.redAdd(d);
        if (this.zOne) {
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          ny = f.redMul(e.redSub(d));
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          h = this.z.redSqr();
          j = f.redSub(h).redISub(h);
          nx = b.redSub(c).redISub(d).redMul(j);
          ny = f.redMul(e.redSub(d));
          nz = f.redMul(j);
        }
      } else {
        e = c.redAdd(d);
        h = this.curve._mulC(this.z).redSqr();
        j = e.redSub(h).redSub(h);
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };
    Point.prototype._extAdd = function _extAdd(p) {
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      var d = this.z.redMul(p.z.redAdd(p.z));
      var e = b.redSub(a);
      var f = d.redSub(c);
      var g = d.redAdd(c);
      var h = b.redAdd(a);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point.prototype._projAdd = function _projAdd(p) {
      var a = this.z.redMul(p.z);
      var b = a.redSqr();
      var c = this.x.redMul(p.x);
      var d = this.y.redMul(p.y);
      var e = this.curve.d.redMul(c).redMul(d);
      var f = b.redSub(e);
      var g = b.redAdd(e);
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        nz = f.redMul(g);
      } else {
        ny = a.redMul(g).redMul(d.redSub(c));
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };
    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
    };
    Point.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    Point.prototype.neg = function neg() {
      return this.curve.point(
        this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg()
      );
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };
    Point.prototype.eq = function eq(other) {
      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
    };
    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
  }
});

// node_modules/elliptic/lib/elliptic/curve/index.js
var require_curve = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/index.js"(exports) {
    "use strict";
    var curve = exports;
    curve.base = require_base();
    curve.short = require_short();
    curve.mont = require_mont();
    curve.edwards = require_edwards();
  }
});

// node_modules/hash.js/lib/hash/utils.js
var require_utils3 = __commonJS({
  "node_modules/hash.js/lib/hash/utils.js"(exports) {
    "use strict";
    var assert = require_minimalistic_assert();
    var inherits = require_inherits_browser();
    exports.inherits = inherits;
    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 64512) !== 55296) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 64512) === 56320;
    }
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === "string") {
        if (!enc) {
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = c >> 6 | 192;
              res[p++] = c & 63 | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
              res[p++] = c >> 18 | 240;
              res[p++] = c >> 12 & 63 | 128;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            } else {
              res[p++] = c >> 12 | 224;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            }
          }
        } else if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    exports.toArray = toArray;
    function toHex(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    exports.toHex = toHex;
    function htonl(w) {
      var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
      return res >>> 0;
    }
    exports.htonl = htonl;
    function toHex32(msg, endian) {
      var res = "";
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === "little")
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    exports.zero2 = zero2;
    function zero8(word) {
      if (word.length === 7)
        return "0" + word;
      else if (word.length === 6)
        return "00" + word;
      else if (word.length === 5)
        return "000" + word;
      else if (word.length === 4)
        return "0000" + word;
      else if (word.length === 3)
        return "00000" + word;
      else if (word.length === 2)
        return "000000" + word;
      else if (word.length === 1)
        return "0000000" + word;
      else
        return word;
    }
    exports.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === "big")
          w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else
          w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    exports.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === "big") {
          res[k] = m >>> 24;
          res[k + 1] = m >>> 16 & 255;
          res[k + 2] = m >>> 8 & 255;
          res[k + 3] = m & 255;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = m >>> 16 & 255;
          res[k + 1] = m >>> 8 & 255;
          res[k] = m & 255;
        }
      }
      return res;
    }
    exports.split32 = split32;
    function rotr32(w, b) {
      return w >>> b | w << 32 - b;
    }
    exports.rotr32 = rotr32;
    function rotl32(w, b) {
      return w << b | w >>> 32 - b;
    }
    exports.rotl32 = rotl32;
    function sum32(a, b) {
      return a + b >>> 0;
    }
    exports.sum32 = sum32;
    function sum32_3(a, b, c) {
      return a + b + c >>> 0;
    }
    exports.sum32_3 = sum32_3;
    function sum32_4(a, b, c, d) {
      return a + b + c + d >>> 0;
    }
    exports.sum32_4 = sum32_4;
    function sum32_5(a, b, c, d, e) {
      return a + b + c + d + e >>> 0;
    }
    exports.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
      return lo >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r = al << 32 - num | ah >>> num;
      return r >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r = ah << 32 - num | al >>> num;
      return r >>> 0;
    }
    exports.shr64_lo = shr64_lo;
  }
});

// node_modules/hash.js/lib/hash/common.js
var require_common = __commonJS({
  "node_modules/hash.js/lib/hash/common.js"(exports) {
    "use strict";
    var utils2 = require_utils3();
    var assert = require_minimalistic_assert();
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;
    BlockHash.prototype.update = function update(msg, enc) {
      msg = utils2.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;
        msg = utils2.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - (len + this.padLength) % bytes;
      var res = new Array(k + this.padLength);
      res[0] = 128;
      for (var i = 1; i < k; i++)
        res[i] = 0;
      len <<= 3;
      if (this.endian === "big") {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len & 255;
      } else {
        res[i++] = len & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 24 & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }
      return res;
    };
  }
});

// node_modules/hash.js/lib/hash/sha/common.js
var require_common2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/common.js"(exports) {
    "use strict";
    var utils2 = require_utils3();
    var rotr32 = utils2.rotr32;
    function ft_1(s, x, y, z) {
      if (s === 0)
        return ch32(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32(x, y, z);
    }
    exports.ft_1 = ft_1;
    function ch32(x, y, z) {
      return x & y ^ ~x & z;
    }
    exports.ch32 = ch32;
    function maj32(x, y, z) {
      return x & y ^ x & z ^ y & z;
    }
    exports.maj32 = maj32;
    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    exports.p32 = p32;
    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    exports.s0_256 = s0_256;
    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    exports.s1_256 = s1_256;
    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
    }
    exports.g0_256 = g0_256;
    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
    }
    exports.g1_256 = g1_256;
  }
});

// node_modules/hash.js/lib/hash/sha/1.js
var require__ = __commonJS({
  "node_modules/hash.js/lib/hash/sha/1.js"(exports, module) {
    "use strict";
    var utils2 = require_utils3();
    var common = require_common();
    var shaCommon = require_common2();
    var rotl32 = utils2.rotl32;
    var sum32 = utils2.sum32;
    var sum32_5 = utils2.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [
      1518500249,
      1859775393,
      2400959708,
      3395469782
    ];
    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();
      BlockHash.call(this);
      this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ];
      this.W = new Array(80);
    }
    utils2.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };
    SHA1.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils2.toHex32(this.h, "big");
      else
        return utils2.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/256.js
var require__2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/256.js"(exports, module) {
    "use strict";
    var utils2 = require_utils3();
    var common = require_common();
    var shaCommon = require_common2();
    var assert = require_minimalistic_assert();
    var sum32 = utils2.sum32;
    var sum32_4 = utils2.sum32_4;
    var sum32_5 = utils2.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();
      BlockHash.call(this);
      this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils2.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
      assert(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };
    SHA256.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils2.toHex32(this.h, "big");
      else
        return utils2.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/224.js
var require__3 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/224.js"(exports, module) {
    "use strict";
    var utils2 = require_utils3();
    var SHA256 = require__2();
    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();
      SHA256.call(this);
      this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
      ];
    }
    utils2.inherits(SHA224, SHA256);
    module.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils2.toHex32(this.h.slice(0, 7), "big");
      else
        return utils2.split32(this.h.slice(0, 7), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/512.js
var require__4 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/512.js"(exports, module) {
    "use strict";
    var utils2 = require_utils3();
    var common = require_common();
    var assert = require_minimalistic_assert();
    var rotr64_hi = utils2.rotr64_hi;
    var rotr64_lo = utils2.rotr64_lo;
    var shr64_hi = utils2.shr64_hi;
    var shr64_lo = utils2.shr64_lo;
    var sum64 = utils2.sum64;
    var sum64_hi = utils2.sum64_hi;
    var sum64_lo = utils2.sum64_lo;
    var sum64_4_hi = utils2.sum64_4_hi;
    var sum64_4_lo = utils2.sum64_4_lo;
    var sum64_5_hi = utils2.sum64_5_hi;
    var sum64_5_lo = utils2.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();
      BlockHash.call(this);
      this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
      ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils2.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
        W[i + 1] = sum64_4_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        var T1_lo = sum64_5_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils2.toHex32(this.h, "big");
      else
        return utils2.split32(this.h, "big");
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ ~xh & zh;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ ~xl & zl;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = xh & yh ^ xh & zh ^ yh & zh;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = xl & yl ^ xl & zl ^ yl & zl;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 4294967296;
      return r;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 4294967296;
      return r;
    }
  }
});

// node_modules/hash.js/lib/hash/sha/384.js
var require__5 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/384.js"(exports, module) {
    "use strict";
    var utils2 = require_utils3();
    var SHA512 = require__4();
    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();
      SHA512.call(this);
      this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
      ];
    }
    utils2.inherits(SHA384, SHA512);
    module.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils2.toHex32(this.h.slice(0, 12), "big");
      else
        return utils2.split32(this.h.slice(0, 12), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha.js
var require_sha = __commonJS({
  "node_modules/hash.js/lib/hash/sha.js"(exports) {
    "use strict";
    exports.sha1 = require__();
    exports.sha224 = require__3();
    exports.sha256 = require__2();
    exports.sha384 = require__5();
    exports.sha512 = require__4();
  }
});

// node_modules/hash.js/lib/hash/ripemd.js
var require_ripemd = __commonJS({
  "node_modules/hash.js/lib/hash/ripemd.js"(exports) {
    "use strict";
    var utils2 = require_utils3();
    var common = require_common();
    var rotl32 = utils2.rotl32;
    var sum32 = utils2.sum32;
    var sum32_3 = utils2.sum32_3;
    var sum32_4 = utils2.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();
      BlockHash.call(this);
      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      this.endian = "little";
    }
    utils2.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
            s[j]
          ),
          E
        );
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]
          ),
          Eh
        );
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils2.toHex32(this.h, "little");
      else
        return utils2.split32(this.h, "little");
    };
    function f(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return x & y | ~x & z;
      else if (j <= 47)
        return (x | ~y) ^ z;
      else if (j <= 63)
        return x & z | y & ~z;
      else
        return x ^ (y | ~z);
    }
    function K(j) {
      if (j <= 15)
        return 0;
      else if (j <= 31)
        return 1518500249;
      else if (j <= 47)
        return 1859775393;
      else if (j <= 63)
        return 2400959708;
      else
        return 2840853838;
    }
    function Kh(j) {
      if (j <= 15)
        return 1352829926;
      else if (j <= 31)
        return 1548603684;
      else if (j <= 47)
        return 1836072691;
      else if (j <= 63)
        return 2053994217;
      else
        return 0;
    }
    var r = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var rh = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var s = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sh = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
  }
});

// node_modules/hash.js/lib/hash/hmac.js
var require_hmac = __commonJS({
  "node_modules/hash.js/lib/hash/hmac.js"(exports, module) {
    "use strict";
    var utils2 = require_utils3();
    var assert = require_minimalistic_assert();
    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils2.toArray(key, enc));
    }
    module.exports = Hmac;
    Hmac.prototype._init = function init(key) {
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);
      for (i = 0; i < key.length; i++)
        key[i] ^= 54;
      this.inner = new this.Hash().update(key);
      for (i = 0; i < key.length; i++)
        key[i] ^= 106;
      this.outer = new this.Hash().update(key);
    };
    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }
});

// node_modules/hash.js/lib/hash.js
var require_hash = __commonJS({
  "node_modules/hash.js/lib/hash.js"(exports) {
    var hash = exports;
    hash.utils = require_utils3();
    hash.common = require_common();
    hash.sha = require_sha();
    hash.ripemd = require_ripemd();
    hash.hmac = require_hmac();
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
  }
});

// node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"(exports, module) {
    module.exports = {
      doubles: {
        step: 4,
        points: [
          [
            "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
            "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
          ],
          [
            "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
            "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
          ],
          [
            "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
            "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
          ],
          [
            "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
            "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
          ],
          [
            "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
            "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
          ],
          [
            "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
            "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
          ],
          [
            "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
            "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
          ],
          [
            "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
            "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
          ],
          [
            "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
            "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
          ],
          [
            "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
            "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
          ],
          [
            "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
            "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
          ],
          [
            "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
            "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
          ],
          [
            "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
            "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
          ],
          [
            "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
            "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
          ],
          [
            "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
            "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
          ],
          [
            "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
            "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
          ],
          [
            "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
            "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
          ],
          [
            "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
            "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
          ],
          [
            "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
            "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
          ],
          [
            "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
            "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
          ],
          [
            "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
            "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
          ],
          [
            "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
            "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
          ],
          [
            "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
            "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
          ],
          [
            "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
            "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
          ],
          [
            "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
            "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
          ],
          [
            "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
            "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
          ],
          [
            "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
            "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
          ],
          [
            "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
            "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
          ],
          [
            "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
            "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
          ],
          [
            "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
            "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
          ],
          [
            "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
            "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
          ],
          [
            "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
            "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
          ],
          [
            "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
            "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
          ],
          [
            "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
            "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
          ],
          [
            "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
            "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
          ],
          [
            "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
            "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
          ],
          [
            "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
            "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
          ],
          [
            "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
            "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
          ],
          [
            "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
            "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
          ],
          [
            "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
            "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
          ],
          [
            "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
            "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
          ],
          [
            "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
            "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
          ],
          [
            "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
            "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
          ],
          [
            "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
            "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
          ],
          [
            "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
            "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
          ],
          [
            "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
            "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
          ],
          [
            "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
            "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
          ],
          [
            "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
            "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
          ],
          [
            "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
            "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
          ],
          [
            "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
            "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
          ],
          [
            "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
            "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
          ],
          [
            "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
            "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
          ],
          [
            "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
            "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
          ],
          [
            "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
            "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
          ],
          [
            "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
            "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
          ],
          [
            "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
            "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
          ],
          [
            "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
            "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
          ],
          [
            "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
            "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
          ],
          [
            "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
            "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
          ],
          [
            "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
            "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
          ],
          [
            "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
            "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
          ],
          [
            "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
            "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
          ],
          [
            "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
            "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
          ],
          [
            "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
            "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
          ],
          [
            "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
            "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
          ],
          [
            "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
          ],
          [
            "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
          ],
          [
            "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
          ],
          [
            "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
          ],
          [
            "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
          ],
          [
            "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
          ],
          [
            "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
            "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
          ],
          [
            "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
            "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
          ],
          [
            "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
            "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
          ],
          [
            "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
            "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
          ],
          [
            "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
            "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
          ],
          [
            "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
            "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
          ],
          [
            "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
            "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
          ],
          [
            "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
            "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
          ],
          [
            "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
            "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
          ],
          [
            "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
            "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
          ],
          [
            "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
            "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
          ],
          [
            "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
            "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
          ],
          [
            "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
            "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
          ],
          [
            "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
            "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
          ],
          [
            "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
            "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
          ],
          [
            "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
            "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
          ],
          [
            "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
            "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
          ],
          [
            "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
            "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
          ],
          [
            "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
            "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
          ],
          [
            "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
            "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
          ],
          [
            "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
            "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
          ],
          [
            "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
            "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
          ],
          [
            "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
            "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
          ],
          [
            "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
            "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
          ],
          [
            "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
            "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
          ],
          [
            "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
            "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
          ],
          [
            "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
            "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
          ],
          [
            "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
            "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
          ],
          [
            "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
            "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
          ],
          [
            "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
            "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
          ],
          [
            "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
            "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
          ],
          [
            "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
            "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
          ],
          [
            "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
            "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
          ],
          [
            "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
            "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
          ],
          [
            "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
            "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
          ],
          [
            "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
            "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
          ],
          [
            "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
            "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
          ],
          [
            "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
            "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
          ],
          [
            "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
            "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
          ],
          [
            "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
            "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
          ],
          [
            "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
            "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
          ],
          [
            "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
            "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
          ],
          [
            "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
            "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
          ],
          [
            "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
            "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
          ],
          [
            "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
            "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
          ],
          [
            "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
            "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
          ],
          [
            "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
            "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
          ],
          [
            "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
            "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
          ],
          [
            "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
            "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
          ],
          [
            "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
            "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
          ],
          [
            "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
            "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
          ],
          [
            "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
            "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
          ],
          [
            "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
            "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
          ],
          [
            "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
            "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
          ],
          [
            "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
            "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
          ],
          [
            "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
            "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
          ],
          [
            "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
            "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
          ],
          [
            "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
            "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
          ],
          [
            "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
            "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
          ],
          [
            "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
            "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
          ],
          [
            "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
            "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
          ],
          [
            "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
            "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
          ],
          [
            "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
            "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
          ],
          [
            "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
            "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
          ],
          [
            "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
            "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
          ],
          [
            "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
            "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
          ],
          [
            "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
            "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
          ],
          [
            "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
            "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
          ],
          [
            "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
            "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
          ],
          [
            "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
            "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
          ],
          [
            "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
            "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
          ],
          [
            "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
            "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
          ],
          [
            "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
            "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
          ],
          [
            "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
            "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
          ],
          [
            "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
            "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
          ],
          [
            "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
            "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
          ],
          [
            "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
            "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
          ],
          [
            "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
            "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
          ],
          [
            "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
            "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
          ],
          [
            "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
            "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
          ],
          [
            "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
            "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
          ],
          [
            "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
            "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
          ],
          [
            "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
            "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
          ],
          [
            "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
            "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
          ],
          [
            "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
            "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
          ],
          [
            "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
            "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
          ],
          [
            "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
            "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
          ],
          [
            "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
            "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
          ],
          [
            "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
            "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
          ],
          [
            "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
            "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
          ],
          [
            "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
            "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
          ],
          [
            "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
            "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
          ],
          [
            "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
            "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
          ],
          [
            "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
            "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
          ],
          [
            "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
            "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
          ],
          [
            "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
            "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
          ],
          [
            "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
            "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
          ],
          [
            "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
            "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
          ],
          [
            "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
            "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
          ],
          [
            "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
            "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
          ],
          [
            "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
            "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
          ],
          [
            "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
            "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
          ],
          [
            "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
            "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
          ],
          [
            "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
            "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
          ],
          [
            "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
            "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
          ],
          [
            "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
            "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
          ],
          [
            "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
            "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
          ],
          [
            "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
            "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
          ],
          [
            "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
            "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
          ],
          [
            "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
            "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
          ],
          [
            "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
            "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
          ],
          [
            "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
            "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
          ],
          [
            "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
            "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
          ],
          [
            "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
            "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
          ],
          [
            "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
            "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
          ],
          [
            "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
            "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
          ],
          [
            "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
            "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
          ],
          [
            "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
            "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
          ],
          [
            "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
            "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
          ],
          [
            "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
            "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
          ]
        ]
      }
    };
  }
});

// node_modules/elliptic/lib/elliptic/curves.js
var require_curves = __commonJS({
  "node_modules/elliptic/lib/elliptic/curves.js"(exports) {
    "use strict";
    var curves = exports;
    var hash = require_hash();
    var curve = require_curve();
    var utils2 = require_utils2();
    var assert = utils2.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve.short(options);
      else if (options.type === "edwards")
        this.curve = new curve.edwards(options);
      else
        this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert(this.g.validate(), "Invalid curve");
      assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve2 = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve2
          });
          return curve2;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = require_secp256k1();
    } catch (e) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  }
});

// node_modules/hmac-drbg/lib/hmac-drbg.js
var require_hmac_drbg = __commonJS({
  "node_modules/hmac-drbg/lib/hmac-drbg.js"(exports, module) {
    "use strict";
    var hash = require_hash();
    var utils2 = require_utils();
    var assert = require_minimalistic_assert();
    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils2.toArray(options.entropy, options.entropyEnc || "hex");
      var nonce = utils2.toArray(options.nonce, options.nonceEnc || "hex");
      var pers = utils2.toArray(options.pers, options.persEnc || "hex");
      assert(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._init(entropy, nonce, pers);
    }
    module.exports = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0;
        this.V[i] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac() {
      return new hash.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils2.toArray(entropy, entropyEnc);
      add = utils2.toArray(add, addEnc);
      assert(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
      }
      if (add) {
        add = utils2.toArray(add, addEnc || "hex");
        this._update(add);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils2.encode(res, enc);
    };
  }
});

// node_modules/elliptic/lib/elliptic/ec/key.js
var require_key = __commonJS({
  "node_modules/elliptic/lib/elliptic/ec/key.js"(exports, module) {
    "use strict";
    var BN = require_bn2();
    var utils2 = require_utils2();
    var assert = utils2.assert;
    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    module.exports = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(ec, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;
      return new KeyPair(ec, {
        priv,
        privEnc: enc
      });
    };
    KeyPair.prototype.validate = function validate2() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN(key, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        if (this.ec.curve.type === "mont") {
          assert(key.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert(key.x && key.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };
    KeyPair.prototype.inspect = function inspect() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
  }
});

// node_modules/elliptic/lib/elliptic/ec/signature.js
var require_signature = __commonJS({
  "node_modules/elliptic/lib/elliptic/ec/signature.js"(exports, module) {
    "use strict";
    var BN = require_bn2();
    var utils2 = require_utils2();
    var assert = utils2.assert;
    function Signature(options, enc) {
      if (options instanceof Signature)
        return options;
      if (this._importDER(options, enc))
        return;
      assert(options.r && options.s, "Signature without r or s");
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      if (options.recoveryParam === void 0)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    module.exports = Signature;
    function Position() {
      this.place = 0;
    }
    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 128)) {
        return initial;
      }
      var octetLen = initial & 15;
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }
      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }
      if (val <= 127) {
        return false;
      }
      p.place = off;
      return val;
    }
    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils2.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 48) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if (len + p.place !== data.length) {
        return false;
      }
      if (data[p.place++] !== 2) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 2) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 128) {
          r = r.slice(1);
        } else {
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 128) {
          s = s.slice(1);
        } else {
          return false;
        }
      }
      this.r = new BN(r);
      this.s = new BN(s);
      this.recoveryParam = null;
      return true;
    };
    function constructLength(arr, len) {
      if (len < 128) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 128);
      while (--octets) {
        arr.push(len >>> (octets << 3) & 255);
      }
      arr.push(len);
    }
    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();
      if (r[0] & 128)
        r = [0].concat(r);
      if (s[0] & 128)
        s = [0].concat(s);
      r = rmPadding(r);
      s = rmPadding(s);
      while (!s[0] && !(s[1] & 128)) {
        s = s.slice(1);
      }
      var arr = [2];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(2);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [48];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils2.encode(res, enc);
    };
  }
});

// node_modules/elliptic/lib/elliptic/ec/index.js
var require_ec = __commonJS({
  "node_modules/elliptic/lib/elliptic/ec/index.js"(exports, module) {
    "use strict";
    var BN = require_bn2();
    var HmacDRBG = require_hmac_drbg();
    var utils2 = require_utils2();
    var curves = require_curves();
    var rand = require_brorand();
    var assert = utils2.assert;
    var KeyPair = require_key();
    var Signature = require_signature();
    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);
      if (typeof options === "string") {
        assert(
          Object.prototype.hasOwnProperty.call(curves, options),
          "Unknown curve " + options
        );
        options = curves[options];
      }
      if (options instanceof curves.PresetCurve)
        options = { curve: options };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
    }
    module.exports = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));
      for (; ; ) {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN(msg, 16));
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new BN(1));
      for (var iter = 0; ; iter++) {
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
        return new Signature({ r, s, recoveryParam });
      }
    };
    EC.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new BN(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, "hex");
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;
      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;
        return p.getX().umod(this.n).cmp(r) === 0;
      }
      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.eqXToP(r);
    };
    EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
      assert((3 & j) === j, "The recovery param is more than two bits");
      signature = new Signature(signature, enc);
      var n = this.n;
      var e = new BN(msg);
      var r = signature.r;
      var s = signature.s;
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);
      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
      return this.g.mulAdd(s1, r, s2);
    };
    EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
      signature = new Signature(signature, enc);
      if (signature.recoveryParam !== null)
        return signature.recoveryParam;
      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e2) {
          continue;
        }
        if (Qprime.eq(Q))
          return i;
      }
      throw new Error("Unable to find valid recovery factor");
    };
  }
});

// node_modules/elliptic/lib/elliptic/eddsa/key.js
var require_key2 = __commonJS({
  "node_modules/elliptic/lib/elliptic/eddsa/key.js"(exports, module) {
    "use strict";
    var utils2 = require_utils2();
    var assert = utils2.assert;
    var parseBytes = utils2.parseBytes;
    var cachedProperty = utils2.cachedProperty;
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }
    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(eddsa, { pub });
    };
    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair)
        return secret;
      return new KeyPair(eddsa, { secret });
    };
    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };
    cachedProperty(KeyPair, "pubBytes", function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair, "pub", function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair, "privBytes", function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;
      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;
      return a;
    });
    cachedProperty(KeyPair, "priv", function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair, "hash", function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    KeyPair.prototype.sign = function sign(message) {
      assert(this._secret, "KeyPair can only verify");
      return this.eddsa.sign(message, this);
    };
    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert(this._secret, "KeyPair is public only");
      return utils2.encode(this.secret(), enc);
    };
    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils2.encode(this.pubBytes(), enc);
    };
    module.exports = KeyPair;
  }
});

// node_modules/elliptic/lib/elliptic/eddsa/signature.js
var require_signature2 = __commonJS({
  "node_modules/elliptic/lib/elliptic/eddsa/signature.js"(exports, module) {
    "use strict";
    var BN = require_bn2();
    var utils2 = require_utils2();
    var assert = utils2.assert;
    var cachedProperty = utils2.cachedProperty;
    var parseBytes = utils2.parseBytes;
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;
      if (typeof sig !== "object")
        sig = parseBytes(sig);
      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }
      assert(sig.R && sig.S, "Signature without R or S");
      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN)
        this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    cachedProperty(Signature, "S", function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature, "R", function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature, "Rencoded", function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature, "Sencoded", function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };
    Signature.prototype.toHex = function toHex() {
      return utils2.encode(this.toBytes(), "hex").toUpperCase();
    };
    module.exports = Signature;
  }
});

// node_modules/elliptic/lib/elliptic/eddsa/index.js
var require_eddsa = __commonJS({
  "node_modules/elliptic/lib/elliptic/eddsa/index.js"(exports, module) {
    "use strict";
    var hash = require_hash();
    var curves = require_curves();
    var utils2 = require_utils2();
    var assert = utils2.assert;
    var parseBytes = utils2.parseBytes;
    var KeyPair = require_key2();
    var Signature = require_signature2();
    function EDDSA(curve) {
      assert(curve === "ed25519", "only tested with ed25519 so far");
      if (!(this instanceof EDDSA))
        return new EDDSA(curve);
      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash.sha512;
    }
    module.exports = EDDSA;
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R, S, Rencoded });
    };
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };
    EDDSA.prototype.hashInt = function hashInt() {
      var hash2 = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash2.update(arguments[i]);
      return utils2.intFromLE(hash2.digest()).umod(this.curve.n);
    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature)
        return sig;
      return new Signature(this, sig);
    };
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray("le", this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
      return enc;
    };
    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils2.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
      var xIsOdd = (bytes[lastIx] & 128) !== 0;
      var y = utils2.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray("le", this.encodingLength);
    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils2.intFromLE(bytes);
    };
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
  }
});

// node_modules/elliptic/lib/elliptic.js
var require_elliptic = __commonJS({
  "node_modules/elliptic/lib/elliptic.js"(exports) {
    "use strict";
    var elliptic = exports;
    elliptic.version = require_package().version;
    elliptic.utils = require_utils2();
    elliptic.rand = require_brorand();
    elliptic.curve = require_curve();
    elliptic.curves = require_curves();
    elliptic.ec = require_ec();
    elliptic.eddsa = require_eddsa();
  }
});

// node_modules/@ethersproject/signing-key/lib/elliptic.js
var require_elliptic2 = __commonJS({
  "node_modules/@ethersproject/signing-key/lib/elliptic.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EC = void 0;
    var elliptic_1 = __importDefault(require_elliptic());
    var EC = elliptic_1.default.ec;
    exports.EC = EC;
  }
});

// node_modules/@ethersproject/signing-key/lib/_version.js
var require_version12 = __commonJS({
  "node_modules/@ethersproject/signing-key/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "signing-key/5.7.0";
  }
});

// node_modules/@ethersproject/signing-key/lib/index.js
var require_lib16 = __commonJS({
  "node_modules/@ethersproject/signing-key/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.computePublicKey = exports.recoverPublicKey = exports.SigningKey = void 0;
    var elliptic_1 = require_elliptic2();
    var bytes_1 = require_lib2();
    var properties_1 = require_lib4();
    var logger_1 = require_lib();
    var _version_1 = require_version12();
    var logger = new logger_1.Logger(_version_1.version);
    var _curve = null;
    function getCurve() {
      if (!_curve) {
        _curve = new elliptic_1.EC("secp256k1");
      }
      return _curve;
    }
    var SigningKey = (
      /** @class */
      function() {
        function SigningKey2(privateKey) {
          (0, properties_1.defineReadOnly)(this, "curve", "secp256k1");
          (0, properties_1.defineReadOnly)(this, "privateKey", (0, bytes_1.hexlify)(privateKey));
          if ((0, bytes_1.hexDataLength)(this.privateKey) !== 32) {
            logger.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
          }
          var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));
          (0, properties_1.defineReadOnly)(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
          (0, properties_1.defineReadOnly)(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
          (0, properties_1.defineReadOnly)(this, "_isSigningKey", true);
        }
        SigningKey2.prototype._addPoint = function(other) {
          var p0 = getCurve().keyFromPublic((0, bytes_1.arrayify)(this.publicKey));
          var p1 = getCurve().keyFromPublic((0, bytes_1.arrayify)(other));
          return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
        };
        SigningKey2.prototype.signDigest = function(digest) {
          var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));
          var digestBytes = (0, bytes_1.arrayify)(digest);
          if (digestBytes.length !== 32) {
            logger.throwArgumentError("bad digest length", "digest", digest);
          }
          var signature = keyPair.sign(digestBytes, { canonical: true });
          return (0, bytes_1.splitSignature)({
            recoveryParam: signature.recoveryParam,
            r: (0, bytes_1.hexZeroPad)("0x" + signature.r.toString(16), 32),
            s: (0, bytes_1.hexZeroPad)("0x" + signature.s.toString(16), 32)
          });
        };
        SigningKey2.prototype.computeSharedSecret = function(otherKey) {
          var keyPair = getCurve().keyFromPrivate((0, bytes_1.arrayify)(this.privateKey));
          var otherKeyPair = getCurve().keyFromPublic((0, bytes_1.arrayify)(computePublicKey(otherKey)));
          return (0, bytes_1.hexZeroPad)("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
        };
        SigningKey2.isSigningKey = function(value) {
          return !!(value && value._isSigningKey);
        };
        return SigningKey2;
      }()
    );
    exports.SigningKey = SigningKey;
    function recoverPublicKey(digest, signature) {
      var sig = (0, bytes_1.splitSignature)(signature);
      var rs = { r: (0, bytes_1.arrayify)(sig.r), s: (0, bytes_1.arrayify)(sig.s) };
      return "0x" + getCurve().recoverPubKey((0, bytes_1.arrayify)(digest), rs, sig.recoveryParam).encode("hex", false);
    }
    exports.recoverPublicKey = recoverPublicKey;
    function computePublicKey(key, compressed) {
      var bytes = (0, bytes_1.arrayify)(key);
      if (bytes.length === 32) {
        var signingKey = new SigningKey(bytes);
        if (compressed) {
          return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
        }
        return signingKey.publicKey;
      } else if (bytes.length === 33) {
        if (compressed) {
          return (0, bytes_1.hexlify)(bytes);
        }
        return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
      } else if (bytes.length === 65) {
        if (!compressed) {
          return (0, bytes_1.hexlify)(bytes);
        }
        return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
      }
      return logger.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
    }
    exports.computePublicKey = computePublicKey;
  }
});

// node_modules/@ethersproject/transactions/lib/_version.js
var require_version13 = __commonJS({
  "node_modules/@ethersproject/transactions/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "transactions/5.7.0";
  }
});

// node_modules/@ethersproject/transactions/lib/index.js
var require_lib17 = __commonJS({
  "node_modules/@ethersproject/transactions/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parse = exports.serialize = exports.accessListify = exports.recoverAddress = exports.computeAddress = exports.TransactionTypes = void 0;
    var address_1 = require_lib7();
    var bignumber_1 = require_lib3();
    var bytes_1 = require_lib2();
    var constants_1 = require_lib8();
    var keccak256_1 = require_lib5();
    var properties_1 = require_lib4();
    var RLP = __importStar(require_lib6());
    var signing_key_1 = require_lib16();
    var logger_1 = require_lib();
    var _version_1 = require_version13();
    var logger = new logger_1.Logger(_version_1.version);
    var TransactionTypes;
    (function(TransactionTypes2) {
      TransactionTypes2[TransactionTypes2["legacy"] = 0] = "legacy";
      TransactionTypes2[TransactionTypes2["eip2930"] = 1] = "eip2930";
      TransactionTypes2[TransactionTypes2["eip1559"] = 2] = "eip1559";
    })(TransactionTypes = exports.TransactionTypes || (exports.TransactionTypes = {}));
    function handleAddress(value) {
      if (value === "0x") {
        return null;
      }
      return (0, address_1.getAddress)(value);
    }
    function handleNumber(value) {
      if (value === "0x") {
        return constants_1.Zero;
      }
      return bignumber_1.BigNumber.from(value);
    }
    var transactionFields = [
      { name: "nonce", maxLength: 32, numeric: true },
      { name: "gasPrice", maxLength: 32, numeric: true },
      { name: "gasLimit", maxLength: 32, numeric: true },
      { name: "to", length: 20 },
      { name: "value", maxLength: 32, numeric: true },
      { name: "data" }
    ];
    var allowedTransactionKeys = {
      chainId: true,
      data: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      type: true,
      value: true
    };
    function computeAddress(key) {
      var publicKey = (0, signing_key_1.computePublicKey)(key);
      return (0, address_1.getAddress)((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, bytes_1.hexDataSlice)(publicKey, 1)), 12));
    }
    exports.computeAddress = computeAddress;
    function recoverAddress(digest, signature) {
      return computeAddress((0, signing_key_1.recoverPublicKey)((0, bytes_1.arrayify)(digest), signature));
    }
    exports.recoverAddress = recoverAddress;
    function formatNumber(value, name) {
      var result = (0, bytes_1.stripZeros)(bignumber_1.BigNumber.from(value).toHexString());
      if (result.length > 32) {
        logger.throwArgumentError("invalid length for " + name, "transaction:" + name, value);
      }
      return result;
    }
    function accessSetify(addr, storageKeys) {
      return {
        address: (0, address_1.getAddress)(addr),
        storageKeys: (storageKeys || []).map(function(storageKey, index) {
          if ((0, bytes_1.hexDataLength)(storageKey) !== 32) {
            logger.throwArgumentError("invalid access list storageKey", "accessList[" + addr + ":" + index + "]", storageKey);
          }
          return storageKey.toLowerCase();
        })
      };
    }
    function accessListify(value) {
      if (Array.isArray(value)) {
        return value.map(function(set, index) {
          if (Array.isArray(set)) {
            if (set.length > 2) {
              logger.throwArgumentError("access list expected to be [ address, storageKeys[] ]", "value[" + index + "]", set);
            }
            return accessSetify(set[0], set[1]);
          }
          return accessSetify(set.address, set.storageKeys);
        });
      }
      var result = Object.keys(value).map(function(addr) {
        var storageKeys = value[addr].reduce(function(accum, storageKey) {
          accum[storageKey] = true;
          return accum;
        }, {});
        return accessSetify(addr, Object.keys(storageKeys).sort());
      });
      result.sort(function(a, b) {
        return a.address.localeCompare(b.address);
      });
      return result;
    }
    exports.accessListify = accessListify;
    function formatAccessList(value) {
      return accessListify(value).map(function(set) {
        return [set.address, set.storageKeys];
      });
    }
    function _serializeEip1559(transaction, signature) {
      if (transaction.gasPrice != null) {
        var gasPrice = bignumber_1.BigNumber.from(transaction.gasPrice);
        var maxFeePerGas = bignumber_1.BigNumber.from(transaction.maxFeePerGas || 0);
        if (!gasPrice.eq(maxFeePerGas)) {
          logger.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
            gasPrice,
            maxFeePerGas
          });
        }
      }
      var fields = [
        formatNumber(transaction.chainId || 0, "chainId"),
        formatNumber(transaction.nonce || 0, "nonce"),
        formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
        formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
        formatNumber(transaction.gasLimit || 0, "gasLimit"),
        transaction.to != null ? (0, address_1.getAddress)(transaction.to) : "0x",
        formatNumber(transaction.value || 0, "value"),
        transaction.data || "0x",
        formatAccessList(transaction.accessList || [])
      ];
      if (signature) {
        var sig = (0, bytes_1.splitSignature)(signature);
        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
        fields.push((0, bytes_1.stripZeros)(sig.r));
        fields.push((0, bytes_1.stripZeros)(sig.s));
      }
      return (0, bytes_1.hexConcat)(["0x02", RLP.encode(fields)]);
    }
    function _serializeEip2930(transaction, signature) {
      var fields = [
        formatNumber(transaction.chainId || 0, "chainId"),
        formatNumber(transaction.nonce || 0, "nonce"),
        formatNumber(transaction.gasPrice || 0, "gasPrice"),
        formatNumber(transaction.gasLimit || 0, "gasLimit"),
        transaction.to != null ? (0, address_1.getAddress)(transaction.to) : "0x",
        formatNumber(transaction.value || 0, "value"),
        transaction.data || "0x",
        formatAccessList(transaction.accessList || [])
      ];
      if (signature) {
        var sig = (0, bytes_1.splitSignature)(signature);
        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
        fields.push((0, bytes_1.stripZeros)(sig.r));
        fields.push((0, bytes_1.stripZeros)(sig.s));
      }
      return (0, bytes_1.hexConcat)(["0x01", RLP.encode(fields)]);
    }
    function _serialize(transaction, signature) {
      (0, properties_1.checkProperties)(transaction, allowedTransactionKeys);
      var raw = [];
      transactionFields.forEach(function(fieldInfo) {
        var value = transaction[fieldInfo.name] || [];
        var options = {};
        if (fieldInfo.numeric) {
          options.hexPad = "left";
        }
        value = (0, bytes_1.arrayify)((0, bytes_1.hexlify)(value, options));
        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
          logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
        }
        if (fieldInfo.maxLength) {
          value = (0, bytes_1.stripZeros)(value);
          if (value.length > fieldInfo.maxLength) {
            logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
          }
        }
        raw.push((0, bytes_1.hexlify)(value));
      });
      var chainId = 0;
      if (transaction.chainId != null) {
        chainId = transaction.chainId;
        if (typeof chainId !== "number") {
          logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
        }
      } else if (signature && !(0, bytes_1.isBytesLike)(signature) && signature.v > 28) {
        chainId = Math.floor((signature.v - 35) / 2);
      }
      if (chainId !== 0) {
        raw.push((0, bytes_1.hexlify)(chainId));
        raw.push("0x");
        raw.push("0x");
      }
      if (!signature) {
        return RLP.encode(raw);
      }
      var sig = (0, bytes_1.splitSignature)(signature);
      var v = 27 + sig.recoveryParam;
      if (chainId !== 0) {
        raw.pop();
        raw.pop();
        raw.pop();
        v += chainId * 2 + 8;
        if (sig.v > 28 && sig.v !== v) {
          logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
        }
      } else if (sig.v !== v) {
        logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
      }
      raw.push((0, bytes_1.hexlify)(v));
      raw.push((0, bytes_1.stripZeros)((0, bytes_1.arrayify)(sig.r)));
      raw.push((0, bytes_1.stripZeros)((0, bytes_1.arrayify)(sig.s)));
      return RLP.encode(raw);
    }
    function serialize(transaction, signature) {
      if (transaction.type == null || transaction.type === 0) {
        if (transaction.accessList != null) {
          logger.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
        }
        return _serialize(transaction, signature);
      }
      switch (transaction.type) {
        case 1:
          return _serializeEip2930(transaction, signature);
        case 2:
          return _serializeEip1559(transaction, signature);
        default:
          break;
      }
      return logger.throwError("unsupported transaction type: " + transaction.type, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "serializeTransaction",
        transactionType: transaction.type
      });
    }
    exports.serialize = serialize;
    function _parseEipSignature(tx, fields, serialize2) {
      try {
        var recid = handleNumber(fields[0]).toNumber();
        if (recid !== 0 && recid !== 1) {
          throw new Error("bad recid");
        }
        tx.v = recid;
      } catch (error) {
        logger.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
      }
      tx.r = (0, bytes_1.hexZeroPad)(fields[1], 32);
      tx.s = (0, bytes_1.hexZeroPad)(fields[2], 32);
      try {
        var digest = (0, keccak256_1.keccak256)(serialize2(tx));
        tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
      } catch (error) {
      }
    }
    function _parseEip1559(payload) {
      var transaction = RLP.decode(payload.slice(1));
      if (transaction.length !== 9 && transaction.length !== 12) {
        logger.throwArgumentError("invalid component count for transaction type: 2", "payload", (0, bytes_1.hexlify)(payload));
      }
      var maxPriorityFeePerGas = handleNumber(transaction[2]);
      var maxFeePerGas = handleNumber(transaction[3]);
      var tx = {
        type: 2,
        chainId: handleNumber(transaction[0]).toNumber(),
        nonce: handleNumber(transaction[1]).toNumber(),
        maxPriorityFeePerGas,
        maxFeePerGas,
        gasPrice: null,
        gasLimit: handleNumber(transaction[4]),
        to: handleAddress(transaction[5]),
        value: handleNumber(transaction[6]),
        data: transaction[7],
        accessList: accessListify(transaction[8])
      };
      if (transaction.length === 9) {
        return tx;
      }
      tx.hash = (0, keccak256_1.keccak256)(payload);
      _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
      return tx;
    }
    function _parseEip2930(payload) {
      var transaction = RLP.decode(payload.slice(1));
      if (transaction.length !== 8 && transaction.length !== 11) {
        logger.throwArgumentError("invalid component count for transaction type: 1", "payload", (0, bytes_1.hexlify)(payload));
      }
      var tx = {
        type: 1,
        chainId: handleNumber(transaction[0]).toNumber(),
        nonce: handleNumber(transaction[1]).toNumber(),
        gasPrice: handleNumber(transaction[2]),
        gasLimit: handleNumber(transaction[3]),
        to: handleAddress(transaction[4]),
        value: handleNumber(transaction[5]),
        data: transaction[6],
        accessList: accessListify(transaction[7])
      };
      if (transaction.length === 8) {
        return tx;
      }
      tx.hash = (0, keccak256_1.keccak256)(payload);
      _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
      return tx;
    }
    function _parse(rawTransaction) {
      var transaction = RLP.decode(rawTransaction);
      if (transaction.length !== 9 && transaction.length !== 6) {
        logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
      }
      var tx = {
        nonce: handleNumber(transaction[0]).toNumber(),
        gasPrice: handleNumber(transaction[1]),
        gasLimit: handleNumber(transaction[2]),
        to: handleAddress(transaction[3]),
        value: handleNumber(transaction[4]),
        data: transaction[5],
        chainId: 0
      };
      if (transaction.length === 6) {
        return tx;
      }
      try {
        tx.v = bignumber_1.BigNumber.from(transaction[6]).toNumber();
      } catch (error) {
        return tx;
      }
      tx.r = (0, bytes_1.hexZeroPad)(transaction[7], 32);
      tx.s = (0, bytes_1.hexZeroPad)(transaction[8], 32);
      if (bignumber_1.BigNumber.from(tx.r).isZero() && bignumber_1.BigNumber.from(tx.s).isZero()) {
        tx.chainId = tx.v;
        tx.v = 0;
      } else {
        tx.chainId = Math.floor((tx.v - 35) / 2);
        if (tx.chainId < 0) {
          tx.chainId = 0;
        }
        var recoveryParam = tx.v - 27;
        var raw = transaction.slice(0, 6);
        if (tx.chainId !== 0) {
          raw.push((0, bytes_1.hexlify)(tx.chainId));
          raw.push("0x");
          raw.push("0x");
          recoveryParam -= tx.chainId * 2 + 8;
        }
        var digest = (0, keccak256_1.keccak256)(RLP.encode(raw));
        try {
          tx.from = recoverAddress(digest, { r: (0, bytes_1.hexlify)(tx.r), s: (0, bytes_1.hexlify)(tx.s), recoveryParam });
        } catch (error) {
        }
        tx.hash = (0, keccak256_1.keccak256)(rawTransaction);
      }
      tx.type = null;
      return tx;
    }
    function parse(rawTransaction) {
      var payload = (0, bytes_1.arrayify)(rawTransaction);
      if (payload[0] > 127) {
        return _parse(payload);
      }
      switch (payload[0]) {
        case 1:
          return _parseEip2930(payload);
        case 2:
          return _parseEip1559(payload);
        default:
          break;
      }
      return logger.throwError("unsupported transaction type: " + payload[0], logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "parseTransaction",
        transactionType: payload[0]
      });
    }
    exports.parse = parse;
  }
});

// node_modules/@ethersproject/contracts/lib/_version.js
var require_version14 = __commonJS({
  "node_modules/@ethersproject/contracts/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "contracts/5.7.0";
  }
});

// node_modules/@ethersproject/contracts/lib/index.js
var require_lib18 = __commonJS({
  "node_modules/@ethersproject/contracts/lib/index.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContractFactory = exports.Contract = exports.BaseContract = void 0;
    var abi_1 = require_lib13();
    var abstract_provider_1 = require_lib14();
    var abstract_signer_1 = require_lib15();
    var address_1 = require_lib7();
    var bignumber_1 = require_lib3();
    var bytes_1 = require_lib2();
    var properties_1 = require_lib4();
    var transactions_1 = require_lib17();
    var logger_1 = require_lib();
    var _version_1 = require_version14();
    var logger = new logger_1.Logger(_version_1.version);
    var allowedTransactionKeys = {
      chainId: true,
      data: true,
      from: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      value: true,
      type: true,
      accessList: true,
      maxFeePerGas: true,
      maxPriorityFeePerGas: true,
      customData: true,
      ccipReadEnabled: true
    };
    function resolveName(resolver, nameOrPromise) {
      return __awaiter(this, void 0, void 0, function() {
        var name, address;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, nameOrPromise];
            case 1:
              name = _a.sent();
              if (typeof name !== "string") {
                logger.throwArgumentError("invalid address or ENS name", "name", name);
              }
              try {
                return [2, (0, address_1.getAddress)(name)];
              } catch (error) {
              }
              if (!resolver) {
                logger.throwError("a provider or signer is needed to resolve ENS names", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "resolveName"
                });
              }
              return [4, resolver.resolveName(name)];
            case 2:
              address = _a.sent();
              if (address == null) {
                logger.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
              }
              return [2, address];
          }
        });
      });
    }
    function resolveAddresses(resolver, value, paramType) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!Array.isArray(paramType))
                return [3, 2];
              return [4, Promise.all(paramType.map(function(paramType2, index) {
                return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType2.name], paramType2);
              }))];
            case 1:
              return [2, _a.sent()];
            case 2:
              if (!(paramType.type === "address"))
                return [3, 4];
              return [4, resolveName(resolver, value)];
            case 3:
              return [2, _a.sent()];
            case 4:
              if (!(paramType.type === "tuple"))
                return [3, 6];
              return [4, resolveAddresses(resolver, value, paramType.components)];
            case 5:
              return [2, _a.sent()];
            case 6:
              if (!(paramType.baseType === "array"))
                return [3, 8];
              if (!Array.isArray(value)) {
                return [2, Promise.reject(logger.makeError("invalid value for array", logger_1.Logger.errors.INVALID_ARGUMENT, {
                  argument: "value",
                  value
                }))];
              }
              return [4, Promise.all(value.map(function(v) {
                return resolveAddresses(resolver, v, paramType.arrayChildren);
              }))];
            case 7:
              return [2, _a.sent()];
            case 8:
              return [2, value];
          }
        });
      });
    }
    function populateTransaction(contract, fragment, args) {
      return __awaiter(this, void 0, void 0, function() {
        var overrides, resolved, data, tx, ro, intrinsic, bytes, i, roValue, leftovers;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              overrides = {};
              if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
                overrides = (0, properties_1.shallowCopy)(args.pop());
              }
              logger.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
              if (contract.signer) {
                if (overrides.from) {
                  overrides.from = (0, properties_1.resolveProperties)({
                    override: resolveName(contract.signer, overrides.from),
                    signer: contract.signer.getAddress()
                  }).then(function(check) {
                    return __awaiter(_this, void 0, void 0, function() {
                      return __generator(this, function(_a2) {
                        if ((0, address_1.getAddress)(check.signer) !== check.override) {
                          logger.throwError("Contract with a Signer cannot override from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "overrides.from"
                          });
                        }
                        return [2, check.override];
                      });
                    });
                  });
                } else {
                  overrides.from = contract.signer.getAddress();
                }
              } else if (overrides.from) {
                overrides.from = resolveName(contract.provider, overrides.from);
              }
              return [4, (0, properties_1.resolveProperties)({
                args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
                address: contract.resolvedAddress,
                overrides: (0, properties_1.resolveProperties)(overrides) || {}
              })];
            case 1:
              resolved = _a.sent();
              data = contract.interface.encodeFunctionData(fragment, resolved.args);
              tx = {
                data,
                to: resolved.address
              };
              ro = resolved.overrides;
              if (ro.nonce != null) {
                tx.nonce = bignumber_1.BigNumber.from(ro.nonce).toNumber();
              }
              if (ro.gasLimit != null) {
                tx.gasLimit = bignumber_1.BigNumber.from(ro.gasLimit);
              }
              if (ro.gasPrice != null) {
                tx.gasPrice = bignumber_1.BigNumber.from(ro.gasPrice);
              }
              if (ro.maxFeePerGas != null) {
                tx.maxFeePerGas = bignumber_1.BigNumber.from(ro.maxFeePerGas);
              }
              if (ro.maxPriorityFeePerGas != null) {
                tx.maxPriorityFeePerGas = bignumber_1.BigNumber.from(ro.maxPriorityFeePerGas);
              }
              if (ro.from != null) {
                tx.from = ro.from;
              }
              if (ro.type != null) {
                tx.type = ro.type;
              }
              if (ro.accessList != null) {
                tx.accessList = (0, transactions_1.accessListify)(ro.accessList);
              }
              if (tx.gasLimit == null && fragment.gas != null) {
                intrinsic = 21e3;
                bytes = (0, bytes_1.arrayify)(data);
                for (i = 0; i < bytes.length; i++) {
                  intrinsic += 4;
                  if (bytes[i]) {
                    intrinsic += 64;
                  }
                }
                tx.gasLimit = bignumber_1.BigNumber.from(fragment.gas).add(intrinsic);
              }
              if (ro.value) {
                roValue = bignumber_1.BigNumber.from(ro.value);
                if (!roValue.isZero() && !fragment.payable) {
                  logger.throwError("non-payable method cannot override value", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "overrides.value",
                    value: overrides.value
                  });
                }
                tx.value = roValue;
              }
              if (ro.customData) {
                tx.customData = (0, properties_1.shallowCopy)(ro.customData);
              }
              if (ro.ccipReadEnabled) {
                tx.ccipReadEnabled = !!ro.ccipReadEnabled;
              }
              delete overrides.nonce;
              delete overrides.gasLimit;
              delete overrides.gasPrice;
              delete overrides.from;
              delete overrides.value;
              delete overrides.type;
              delete overrides.accessList;
              delete overrides.maxFeePerGas;
              delete overrides.maxPriorityFeePerGas;
              delete overrides.customData;
              delete overrides.ccipReadEnabled;
              leftovers = Object.keys(overrides).filter(function(key) {
                return overrides[key] != null;
              });
              if (leftovers.length) {
                logger.throwError("cannot override " + leftovers.map(function(l) {
                  return JSON.stringify(l);
                }).join(","), logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "overrides",
                  overrides: leftovers
                });
              }
              return [2, tx];
          }
        });
      });
    }
    function buildPopulate(contract, fragment) {
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return populateTransaction(contract, fragment, args);
      };
    }
    function buildEstimate(contract, fragment) {
      var signerOrProvider = contract.signer || contract.provider;
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function() {
          var tx;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                if (!signerOrProvider) {
                  logger.throwError("estimate require a provider or signer", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "estimateGas"
                  });
                }
                return [4, populateTransaction(contract, fragment, args)];
              case 1:
                tx = _a.sent();
                return [4, signerOrProvider.estimateGas(tx)];
              case 2:
                return [2, _a.sent()];
            }
          });
        });
      };
    }
    function addContractWait(contract, tx) {
      var wait = tx.wait.bind(tx);
      tx.wait = function(confirmations) {
        return wait(confirmations).then(function(receipt) {
          receipt.events = receipt.logs.map(function(log) {
            var event = (0, properties_1.deepCopy)(log);
            var parsed = null;
            try {
              parsed = contract.interface.parseLog(log);
            } catch (e) {
            }
            if (parsed) {
              event.args = parsed.args;
              event.decode = function(data, topics) {
                return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
              };
              event.event = parsed.name;
              event.eventSignature = parsed.signature;
            }
            event.removeListener = function() {
              return contract.provider;
            };
            event.getBlock = function() {
              return contract.provider.getBlock(receipt.blockHash);
            };
            event.getTransaction = function() {
              return contract.provider.getTransaction(receipt.transactionHash);
            };
            event.getTransactionReceipt = function() {
              return Promise.resolve(receipt);
            };
            return event;
          });
          return receipt;
        });
      };
    }
    function buildCall(contract, fragment, collapseSimple) {
      var signerOrProvider = contract.signer || contract.provider;
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function() {
          var blockTag, overrides, tx, result, value;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                blockTag = void 0;
                if (!(args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object"))
                  return [3, 3];
                overrides = (0, properties_1.shallowCopy)(args.pop());
                if (!(overrides.blockTag != null))
                  return [3, 2];
                return [4, overrides.blockTag];
              case 1:
                blockTag = _a.sent();
                _a.label = 2;
              case 2:
                delete overrides.blockTag;
                args.push(overrides);
                _a.label = 3;
              case 3:
                if (!(contract.deployTransaction != null))
                  return [3, 5];
                return [4, contract._deployed(blockTag)];
              case 4:
                _a.sent();
                _a.label = 5;
              case 5:
                return [4, populateTransaction(contract, fragment, args)];
              case 6:
                tx = _a.sent();
                return [4, signerOrProvider.call(tx, blockTag)];
              case 7:
                result = _a.sent();
                try {
                  value = contract.interface.decodeFunctionResult(fragment, result);
                  if (collapseSimple && fragment.outputs.length === 1) {
                    value = value[0];
                  }
                  return [2, value];
                } catch (error) {
                  if (error.code === logger_1.Logger.errors.CALL_EXCEPTION) {
                    error.address = contract.address;
                    error.args = args;
                    error.transaction = tx;
                  }
                  throw error;
                }
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
    }
    function buildSend(contract, fragment) {
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function() {
          var txRequest, tx;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                if (!contract.signer) {
                  logger.throwError("sending a transaction requires a signer", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "sendTransaction"
                  });
                }
                if (!(contract.deployTransaction != null))
                  return [3, 2];
                return [4, contract._deployed()];
              case 1:
                _a.sent();
                _a.label = 2;
              case 2:
                return [4, populateTransaction(contract, fragment, args)];
              case 3:
                txRequest = _a.sent();
                return [4, contract.signer.sendTransaction(txRequest)];
              case 4:
                tx = _a.sent();
                addContractWait(contract, tx);
                return [2, tx];
            }
          });
        });
      };
    }
    function buildDefault(contract, fragment, collapseSimple) {
      if (fragment.constant) {
        return buildCall(contract, fragment, collapseSimple);
      }
      return buildSend(contract, fragment);
    }
    function getEventTag(filter) {
      if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
        return "*";
      }
      return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map(function(topic) {
        if (Array.isArray(topic)) {
          return topic.join("|");
        }
        return topic;
      }).join(":") : "");
    }
    var RunningEvent = (
      /** @class */
      function() {
        function RunningEvent2(tag, filter) {
          (0, properties_1.defineReadOnly)(this, "tag", tag);
          (0, properties_1.defineReadOnly)(this, "filter", filter);
          this._listeners = [];
        }
        RunningEvent2.prototype.addListener = function(listener, once) {
          this._listeners.push({ listener, once });
        };
        RunningEvent2.prototype.removeListener = function(listener) {
          var done = false;
          this._listeners = this._listeners.filter(function(item) {
            if (done || item.listener !== listener) {
              return true;
            }
            done = true;
            return false;
          });
        };
        RunningEvent2.prototype.removeAllListeners = function() {
          this._listeners = [];
        };
        RunningEvent2.prototype.listeners = function() {
          return this._listeners.map(function(i) {
            return i.listener;
          });
        };
        RunningEvent2.prototype.listenerCount = function() {
          return this._listeners.length;
        };
        RunningEvent2.prototype.run = function(args) {
          var _this = this;
          var listenerCount = this.listenerCount();
          this._listeners = this._listeners.filter(function(item) {
            var argsCopy = args.slice();
            setTimeout(function() {
              item.listener.apply(_this, argsCopy);
            }, 0);
            return !item.once;
          });
          return listenerCount;
        };
        RunningEvent2.prototype.prepareEvent = function(event) {
        };
        RunningEvent2.prototype.getEmit = function(event) {
          return [event];
        };
        return RunningEvent2;
      }()
    );
    var ErrorRunningEvent = (
      /** @class */
      function(_super) {
        __extends(ErrorRunningEvent2, _super);
        function ErrorRunningEvent2() {
          return _super.call(this, "error", null) || this;
        }
        return ErrorRunningEvent2;
      }(RunningEvent)
    );
    var FragmentRunningEvent = (
      /** @class */
      function(_super) {
        __extends(FragmentRunningEvent2, _super);
        function FragmentRunningEvent2(address, contractInterface, fragment, topics) {
          var _this = this;
          var filter = {
            address
          };
          var topic = contractInterface.getEventTopic(fragment);
          if (topics) {
            if (topic !== topics[0]) {
              logger.throwArgumentError("topic mismatch", "topics", topics);
            }
            filter.topics = topics.slice();
          } else {
            filter.topics = [topic];
          }
          _this = _super.call(this, getEventTag(filter), filter) || this;
          (0, properties_1.defineReadOnly)(_this, "address", address);
          (0, properties_1.defineReadOnly)(_this, "interface", contractInterface);
          (0, properties_1.defineReadOnly)(_this, "fragment", fragment);
          return _this;
        }
        FragmentRunningEvent2.prototype.prepareEvent = function(event) {
          var _this = this;
          _super.prototype.prepareEvent.call(this, event);
          event.event = this.fragment.name;
          event.eventSignature = this.fragment.format();
          event.decode = function(data, topics) {
            return _this.interface.decodeEventLog(_this.fragment, data, topics);
          };
          try {
            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
          } catch (error) {
            event.args = null;
            event.decodeError = error;
          }
        };
        FragmentRunningEvent2.prototype.getEmit = function(event) {
          var errors = (0, abi_1.checkResultErrors)(event.args);
          if (errors.length) {
            throw errors[0].error;
          }
          var args = (event.args || []).slice();
          args.push(event);
          return args;
        };
        return FragmentRunningEvent2;
      }(RunningEvent)
    );
    var WildcardRunningEvent = (
      /** @class */
      function(_super) {
        __extends(WildcardRunningEvent2, _super);
        function WildcardRunningEvent2(address, contractInterface) {
          var _this = _super.call(this, "*", { address }) || this;
          (0, properties_1.defineReadOnly)(_this, "address", address);
          (0, properties_1.defineReadOnly)(_this, "interface", contractInterface);
          return _this;
        }
        WildcardRunningEvent2.prototype.prepareEvent = function(event) {
          var _this = this;
          _super.prototype.prepareEvent.call(this, event);
          try {
            var parsed_1 = this.interface.parseLog(event);
            event.event = parsed_1.name;
            event.eventSignature = parsed_1.signature;
            event.decode = function(data, topics) {
              return _this.interface.decodeEventLog(parsed_1.eventFragment, data, topics);
            };
            event.args = parsed_1.args;
          } catch (error) {
          }
        };
        return WildcardRunningEvent2;
      }(RunningEvent)
    );
    var BaseContract = (
      /** @class */
      function() {
        function BaseContract2(addressOrName, contractInterface, signerOrProvider) {
          var _newTarget = this.constructor;
          var _this = this;
          (0, properties_1.defineReadOnly)(this, "interface", (0, properties_1.getStatic)(_newTarget, "getInterface")(contractInterface));
          if (signerOrProvider == null) {
            (0, properties_1.defineReadOnly)(this, "provider", null);
            (0, properties_1.defineReadOnly)(this, "signer", null);
          } else if (abstract_signer_1.Signer.isSigner(signerOrProvider)) {
            (0, properties_1.defineReadOnly)(this, "provider", signerOrProvider.provider || null);
            (0, properties_1.defineReadOnly)(this, "signer", signerOrProvider);
          } else if (abstract_provider_1.Provider.isProvider(signerOrProvider)) {
            (0, properties_1.defineReadOnly)(this, "provider", signerOrProvider);
            (0, properties_1.defineReadOnly)(this, "signer", null);
          } else {
            logger.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
          }
          (0, properties_1.defineReadOnly)(this, "callStatic", {});
          (0, properties_1.defineReadOnly)(this, "estimateGas", {});
          (0, properties_1.defineReadOnly)(this, "functions", {});
          (0, properties_1.defineReadOnly)(this, "populateTransaction", {});
          (0, properties_1.defineReadOnly)(this, "filters", {});
          {
            var uniqueFilters_1 = {};
            Object.keys(this.interface.events).forEach(function(eventSignature) {
              var event = _this.interface.events[eventSignature];
              (0, properties_1.defineReadOnly)(_this.filters, eventSignature, function() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments[_i];
                }
                return {
                  address: _this.address,
                  topics: _this.interface.encodeFilterTopics(event, args)
                };
              });
              if (!uniqueFilters_1[event.name]) {
                uniqueFilters_1[event.name] = [];
              }
              uniqueFilters_1[event.name].push(eventSignature);
            });
            Object.keys(uniqueFilters_1).forEach(function(name) {
              var filters = uniqueFilters_1[name];
              if (filters.length === 1) {
                (0, properties_1.defineReadOnly)(_this.filters, name, _this.filters[filters[0]]);
              } else {
                logger.warn("Duplicate definition of " + name + " (" + filters.join(", ") + ")");
              }
            });
          }
          (0, properties_1.defineReadOnly)(this, "_runningEvents", {});
          (0, properties_1.defineReadOnly)(this, "_wrappedEmits", {});
          if (addressOrName == null) {
            logger.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
          }
          (0, properties_1.defineReadOnly)(this, "address", addressOrName);
          if (this.provider) {
            (0, properties_1.defineReadOnly)(this, "resolvedAddress", resolveName(this.provider, addressOrName));
          } else {
            try {
              (0, properties_1.defineReadOnly)(this, "resolvedAddress", Promise.resolve((0, address_1.getAddress)(addressOrName)));
            } catch (error) {
              logger.throwError("provider is required to use ENS name as contract address", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new Contract"
              });
            }
          }
          this.resolvedAddress.catch(function(e) {
          });
          var uniqueNames = {};
          var uniqueSignatures = {};
          Object.keys(this.interface.functions).forEach(function(signature) {
            var fragment = _this.interface.functions[signature];
            if (uniqueSignatures[signature]) {
              logger.warn("Duplicate ABI entry for " + JSON.stringify(signature));
              return;
            }
            uniqueSignatures[signature] = true;
            {
              var name_1 = fragment.name;
              if (!uniqueNames["%" + name_1]) {
                uniqueNames["%" + name_1] = [];
              }
              uniqueNames["%" + name_1].push(signature);
            }
            if (_this[signature] == null) {
              (0, properties_1.defineReadOnly)(_this, signature, buildDefault(_this, fragment, true));
            }
            if (_this.functions[signature] == null) {
              (0, properties_1.defineReadOnly)(_this.functions, signature, buildDefault(_this, fragment, false));
            }
            if (_this.callStatic[signature] == null) {
              (0, properties_1.defineReadOnly)(_this.callStatic, signature, buildCall(_this, fragment, true));
            }
            if (_this.populateTransaction[signature] == null) {
              (0, properties_1.defineReadOnly)(_this.populateTransaction, signature, buildPopulate(_this, fragment));
            }
            if (_this.estimateGas[signature] == null) {
              (0, properties_1.defineReadOnly)(_this.estimateGas, signature, buildEstimate(_this, fragment));
            }
          });
          Object.keys(uniqueNames).forEach(function(name) {
            var signatures = uniqueNames[name];
            if (signatures.length > 1) {
              return;
            }
            name = name.substring(1);
            var signature = signatures[0];
            try {
              if (_this[name] == null) {
                (0, properties_1.defineReadOnly)(_this, name, _this[signature]);
              }
            } catch (e) {
            }
            if (_this.functions[name] == null) {
              (0, properties_1.defineReadOnly)(_this.functions, name, _this.functions[signature]);
            }
            if (_this.callStatic[name] == null) {
              (0, properties_1.defineReadOnly)(_this.callStatic, name, _this.callStatic[signature]);
            }
            if (_this.populateTransaction[name] == null) {
              (0, properties_1.defineReadOnly)(_this.populateTransaction, name, _this.populateTransaction[signature]);
            }
            if (_this.estimateGas[name] == null) {
              (0, properties_1.defineReadOnly)(_this.estimateGas, name, _this.estimateGas[signature]);
            }
          });
        }
        BaseContract2.getContractAddress = function(transaction) {
          return (0, address_1.getContractAddress)(transaction);
        };
        BaseContract2.getInterface = function(contractInterface) {
          if (abi_1.Interface.isInterface(contractInterface)) {
            return contractInterface;
          }
          return new abi_1.Interface(contractInterface);
        };
        BaseContract2.prototype.deployed = function() {
          return this._deployed();
        };
        BaseContract2.prototype._deployed = function(blockTag) {
          var _this = this;
          if (!this._deployedPromise) {
            if (this.deployTransaction) {
              this._deployedPromise = this.deployTransaction.wait().then(function() {
                return _this;
              });
            } else {
              this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function(code) {
                if (code === "0x") {
                  logger.throwError("contract not deployed", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    contractAddress: _this.address,
                    operation: "getDeployed"
                  });
                }
                return _this;
              });
            }
          }
          return this._deployedPromise;
        };
        BaseContract2.prototype.fallback = function(overrides) {
          var _this = this;
          if (!this.signer) {
            logger.throwError("sending a transactions require a signer", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
          }
          var tx = (0, properties_1.shallowCopy)(overrides || {});
          ["from", "to"].forEach(function(key) {
            if (tx[key] == null) {
              return;
            }
            logger.throwError("cannot override " + key, logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
          });
          tx.to = this.resolvedAddress;
          return this.deployed().then(function() {
            return _this.signer.sendTransaction(tx);
          });
        };
        BaseContract2.prototype.connect = function(signerOrProvider) {
          if (typeof signerOrProvider === "string") {
            signerOrProvider = new abstract_signer_1.VoidSigner(signerOrProvider, this.provider);
          }
          var contract = new this.constructor(this.address, this.interface, signerOrProvider);
          if (this.deployTransaction) {
            (0, properties_1.defineReadOnly)(contract, "deployTransaction", this.deployTransaction);
          }
          return contract;
        };
        BaseContract2.prototype.attach = function(addressOrName) {
          return new this.constructor(addressOrName, this.interface, this.signer || this.provider);
        };
        BaseContract2.isIndexed = function(value) {
          return abi_1.Indexed.isIndexed(value);
        };
        BaseContract2.prototype._normalizeRunningEvent = function(runningEvent) {
          if (this._runningEvents[runningEvent.tag]) {
            return this._runningEvents[runningEvent.tag];
          }
          return runningEvent;
        };
        BaseContract2.prototype._getRunningEvent = function(eventName) {
          if (typeof eventName === "string") {
            if (eventName === "error") {
              return this._normalizeRunningEvent(new ErrorRunningEvent());
            }
            if (eventName === "event") {
              return this._normalizeRunningEvent(new RunningEvent("event", null));
            }
            if (eventName === "*") {
              return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
            }
            var fragment = this.interface.getEvent(eventName);
            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
          }
          if (eventName.topics && eventName.topics.length > 0) {
            try {
              var topic = eventName.topics[0];
              if (typeof topic !== "string") {
                throw new Error("invalid topic");
              }
              var fragment = this.interface.getEvent(topic);
              return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
            } catch (error) {
            }
            var filter = {
              address: this.address,
              topics: eventName.topics
            };
            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
          }
          return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
        };
        BaseContract2.prototype._checkRunningEvents = function(runningEvent) {
          if (runningEvent.listenerCount() === 0) {
            delete this._runningEvents[runningEvent.tag];
            var emit = this._wrappedEmits[runningEvent.tag];
            if (emit && runningEvent.filter) {
              this.provider.off(runningEvent.filter, emit);
              delete this._wrappedEmits[runningEvent.tag];
            }
          }
        };
        BaseContract2.prototype._wrapEvent = function(runningEvent, log, listener) {
          var _this = this;
          var event = (0, properties_1.deepCopy)(log);
          event.removeListener = function() {
            if (!listener) {
              return;
            }
            runningEvent.removeListener(listener);
            _this._checkRunningEvents(runningEvent);
          };
          event.getBlock = function() {
            return _this.provider.getBlock(log.blockHash);
          };
          event.getTransaction = function() {
            return _this.provider.getTransaction(log.transactionHash);
          };
          event.getTransactionReceipt = function() {
            return _this.provider.getTransactionReceipt(log.transactionHash);
          };
          runningEvent.prepareEvent(event);
          return event;
        };
        BaseContract2.prototype._addEventListener = function(runningEvent, listener, once) {
          var _this = this;
          if (!this.provider) {
            logger.throwError("events require a provider or a signer with a provider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
          }
          runningEvent.addListener(listener, once);
          this._runningEvents[runningEvent.tag] = runningEvent;
          if (!this._wrappedEmits[runningEvent.tag]) {
            var wrappedEmit = function(log) {
              var event = _this._wrapEvent(runningEvent, log, listener);
              if (event.decodeError == null) {
                try {
                  var args = runningEvent.getEmit(event);
                  _this.emit.apply(_this, __spreadArray([runningEvent.filter], args, false));
                } catch (error) {
                  event.decodeError = error.error;
                }
              }
              if (runningEvent.filter != null) {
                _this.emit("event", event);
              }
              if (event.decodeError != null) {
                _this.emit("error", event.decodeError, event);
              }
            };
            this._wrappedEmits[runningEvent.tag] = wrappedEmit;
            if (runningEvent.filter != null) {
              this.provider.on(runningEvent.filter, wrappedEmit);
            }
          }
        };
        BaseContract2.prototype.queryFilter = function(event, fromBlockOrBlockhash, toBlock) {
          var _this = this;
          var runningEvent = this._getRunningEvent(event);
          var filter = (0, properties_1.shallowCopy)(runningEvent.filter);
          if (typeof fromBlockOrBlockhash === "string" && (0, bytes_1.isHexString)(fromBlockOrBlockhash, 32)) {
            if (toBlock != null) {
              logger.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
            }
            filter.blockHash = fromBlockOrBlockhash;
          } else {
            filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
            filter.toBlock = toBlock != null ? toBlock : "latest";
          }
          return this.provider.getLogs(filter).then(function(logs) {
            return logs.map(function(log) {
              return _this._wrapEvent(runningEvent, log, null);
            });
          });
        };
        BaseContract2.prototype.on = function(event, listener) {
          this._addEventListener(this._getRunningEvent(event), listener, false);
          return this;
        };
        BaseContract2.prototype.once = function(event, listener) {
          this._addEventListener(this._getRunningEvent(event), listener, true);
          return this;
        };
        BaseContract2.prototype.emit = function(eventName) {
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }
          if (!this.provider) {
            return false;
          }
          var runningEvent = this._getRunningEvent(eventName);
          var result = runningEvent.run(args) > 0;
          this._checkRunningEvents(runningEvent);
          return result;
        };
        BaseContract2.prototype.listenerCount = function(eventName) {
          var _this = this;
          if (!this.provider) {
            return 0;
          }
          if (eventName == null) {
            return Object.keys(this._runningEvents).reduce(function(accum, key) {
              return accum + _this._runningEvents[key].listenerCount();
            }, 0);
          }
          return this._getRunningEvent(eventName).listenerCount();
        };
        BaseContract2.prototype.listeners = function(eventName) {
          if (!this.provider) {
            return [];
          }
          if (eventName == null) {
            var result_1 = [];
            for (var tag in this._runningEvents) {
              this._runningEvents[tag].listeners().forEach(function(listener) {
                result_1.push(listener);
              });
            }
            return result_1;
          }
          return this._getRunningEvent(eventName).listeners();
        };
        BaseContract2.prototype.removeAllListeners = function(eventName) {
          if (!this.provider) {
            return this;
          }
          if (eventName == null) {
            for (var tag in this._runningEvents) {
              var runningEvent_1 = this._runningEvents[tag];
              runningEvent_1.removeAllListeners();
              this._checkRunningEvents(runningEvent_1);
            }
            return this;
          }
          var runningEvent = this._getRunningEvent(eventName);
          runningEvent.removeAllListeners();
          this._checkRunningEvents(runningEvent);
          return this;
        };
        BaseContract2.prototype.off = function(eventName, listener) {
          if (!this.provider) {
            return this;
          }
          var runningEvent = this._getRunningEvent(eventName);
          runningEvent.removeListener(listener);
          this._checkRunningEvents(runningEvent);
          return this;
        };
        BaseContract2.prototype.removeListener = function(eventName, listener) {
          return this.off(eventName, listener);
        };
        return BaseContract2;
      }()
    );
    exports.BaseContract = BaseContract;
    var Contract2 = (
      /** @class */
      function(_super) {
        __extends(Contract3, _super);
        function Contract3() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return Contract3;
      }(BaseContract)
    );
    exports.Contract = Contract2;
    var ContractFactory = (
      /** @class */
      function() {
        function ContractFactory2(contractInterface, bytecode, signer) {
          var _newTarget = this.constructor;
          var bytecodeHex = null;
          if (typeof bytecode === "string") {
            bytecodeHex = bytecode;
          } else if ((0, bytes_1.isBytes)(bytecode)) {
            bytecodeHex = (0, bytes_1.hexlify)(bytecode);
          } else if (bytecode && typeof bytecode.object === "string") {
            bytecodeHex = bytecode.object;
          } else {
            bytecodeHex = "!";
          }
          if (bytecodeHex.substring(0, 2) !== "0x") {
            bytecodeHex = "0x" + bytecodeHex;
          }
          if (!(0, bytes_1.isHexString)(bytecodeHex) || bytecodeHex.length % 2) {
            logger.throwArgumentError("invalid bytecode", "bytecode", bytecode);
          }
          if (signer && !abstract_signer_1.Signer.isSigner(signer)) {
            logger.throwArgumentError("invalid signer", "signer", signer);
          }
          (0, properties_1.defineReadOnly)(this, "bytecode", bytecodeHex);
          (0, properties_1.defineReadOnly)(this, "interface", (0, properties_1.getStatic)(_newTarget, "getInterface")(contractInterface));
          (0, properties_1.defineReadOnly)(this, "signer", signer || null);
        }
        ContractFactory2.prototype.getDeployTransaction = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var tx = {};
          if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
            tx = (0, properties_1.shallowCopy)(args.pop());
            for (var key in tx) {
              if (!allowedTransactionKeys[key]) {
                throw new Error("unknown transaction override " + key);
              }
            }
          }
          ["data", "from", "to"].forEach(function(key2) {
            if (tx[key2] == null) {
              return;
            }
            logger.throwError("cannot override " + key2, logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });
          });
          if (tx.value) {
            var value = bignumber_1.BigNumber.from(tx.value);
            if (!value.isZero() && !this.interface.deploy.payable) {
              logger.throwError("non-payable constructor cannot override value", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "overrides.value",
                value: tx.value
              });
            }
          }
          logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
          tx.data = (0, bytes_1.hexlify)((0, bytes_1.concat)([
            this.bytecode,
            this.interface.encodeDeploy(args)
          ]));
          return tx;
        };
        ContractFactory2.prototype.deploy = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return __awaiter(this, void 0, void 0, function() {
            var overrides, params, unsignedTx, tx, address, contract;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  overrides = {};
                  if (args.length === this.interface.deploy.inputs.length + 1) {
                    overrides = args.pop();
                  }
                  logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
                  return [4, resolveAddresses(this.signer, args, this.interface.deploy.inputs)];
                case 1:
                  params = _a.sent();
                  params.push(overrides);
                  unsignedTx = this.getDeployTransaction.apply(this, params);
                  return [4, this.signer.sendTransaction(unsignedTx)];
                case 2:
                  tx = _a.sent();
                  address = (0, properties_1.getStatic)(this.constructor, "getContractAddress")(tx);
                  contract = (0, properties_1.getStatic)(this.constructor, "getContract")(address, this.interface, this.signer);
                  addContractWait(contract, tx);
                  (0, properties_1.defineReadOnly)(contract, "deployTransaction", tx);
                  return [2, contract];
              }
            });
          });
        };
        ContractFactory2.prototype.attach = function(address) {
          return this.constructor.getContract(address, this.interface, this.signer);
        };
        ContractFactory2.prototype.connect = function(signer) {
          return new this.constructor(this.interface, this.bytecode, signer);
        };
        ContractFactory2.fromSolidity = function(compilerOutput, signer) {
          if (compilerOutput == null) {
            logger.throwError("missing compiler output", logger_1.Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
          }
          if (typeof compilerOutput === "string") {
            compilerOutput = JSON.parse(compilerOutput);
          }
          var abi = compilerOutput.abi;
          var bytecode = null;
          if (compilerOutput.bytecode) {
            bytecode = compilerOutput.bytecode;
          } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
            bytecode = compilerOutput.evm.bytecode;
          }
          return new this(abi, bytecode, signer);
        };
        ContractFactory2.getInterface = function(contractInterface) {
          return Contract2.getInterface(contractInterface);
        };
        ContractFactory2.getContractAddress = function(tx) {
          return (0, address_1.getContractAddress)(tx);
        };
        ContractFactory2.getContract = function(address, contractInterface, signer) {
          return new Contract2(address, contractInterface, signer);
        };
        return ContractFactory2;
      }()
    );
    exports.ContractFactory = ContractFactory;
  }
});

// node_modules/@ethersproject/basex/lib/index.js
var require_lib19 = __commonJS({
  "node_modules/@ethersproject/basex/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Base58 = exports.Base32 = exports.BaseX = void 0;
    var bytes_1 = require_lib2();
    var properties_1 = require_lib4();
    var BaseX = (
      /** @class */
      function() {
        function BaseX2(alphabet) {
          (0, properties_1.defineReadOnly)(this, "alphabet", alphabet);
          (0, properties_1.defineReadOnly)(this, "base", alphabet.length);
          (0, properties_1.defineReadOnly)(this, "_alphabetMap", {});
          (0, properties_1.defineReadOnly)(this, "_leader", alphabet.charAt(0));
          for (var i = 0; i < alphabet.length; i++) {
            this._alphabetMap[alphabet.charAt(i)] = i;
          }
        }
        BaseX2.prototype.encode = function(value) {
          var source = (0, bytes_1.arrayify)(value);
          if (source.length === 0) {
            return "";
          }
          var digits = [0];
          for (var i = 0; i < source.length; ++i) {
            var carry = source[i];
            for (var j = 0; j < digits.length; ++j) {
              carry += digits[j] << 8;
              digits[j] = carry % this.base;
              carry = carry / this.base | 0;
            }
            while (carry > 0) {
              digits.push(carry % this.base);
              carry = carry / this.base | 0;
            }
          }
          var string = "";
          for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
            string += this._leader;
          }
          for (var q = digits.length - 1; q >= 0; --q) {
            string += this.alphabet[digits[q]];
          }
          return string;
        };
        BaseX2.prototype.decode = function(value) {
          if (typeof value !== "string") {
            throw new TypeError("Expected String");
          }
          var bytes = [];
          if (value.length === 0) {
            return new Uint8Array(bytes);
          }
          bytes.push(0);
          for (var i = 0; i < value.length; i++) {
            var byte = this._alphabetMap[value[i]];
            if (byte === void 0) {
              throw new Error("Non-base" + this.base + " character");
            }
            var carry = byte;
            for (var j = 0; j < bytes.length; ++j) {
              carry += bytes[j] * this.base;
              bytes[j] = carry & 255;
              carry >>= 8;
            }
            while (carry > 0) {
              bytes.push(carry & 255);
              carry >>= 8;
            }
          }
          for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
            bytes.push(0);
          }
          return (0, bytes_1.arrayify)(new Uint8Array(bytes.reverse()));
        };
        return BaseX2;
      }()
    );
    exports.BaseX = BaseX;
    var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
    exports.Base32 = Base32;
    var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    exports.Base58 = Base58;
  }
});

// node_modules/@ethersproject/sha2/lib/types.js
var require_types = __commonJS({
  "node_modules/@ethersproject/sha2/lib/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SupportedAlgorithm = void 0;
    var SupportedAlgorithm;
    (function(SupportedAlgorithm2) {
      SupportedAlgorithm2["sha256"] = "sha256";
      SupportedAlgorithm2["sha512"] = "sha512";
    })(SupportedAlgorithm = exports.SupportedAlgorithm || (exports.SupportedAlgorithm = {}));
  }
});

// node_modules/@ethersproject/sha2/lib/_version.js
var require_version15 = __commonJS({
  "node_modules/@ethersproject/sha2/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "sha2/5.7.0";
  }
});

// node_modules/@ethersproject/sha2/lib/browser-sha2.js
var require_browser_sha2 = __commonJS({
  "node_modules/@ethersproject/sha2/lib/browser-sha2.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.computeHmac = exports.sha512 = exports.sha256 = exports.ripemd160 = void 0;
    var hash_js_1 = __importDefault(require_hash());
    var bytes_1 = require_lib2();
    var types_1 = require_types();
    var logger_1 = require_lib();
    var _version_1 = require_version15();
    var logger = new logger_1.Logger(_version_1.version);
    function ripemd160(data) {
      return "0x" + hash_js_1.default.ripemd160().update((0, bytes_1.arrayify)(data)).digest("hex");
    }
    exports.ripemd160 = ripemd160;
    function sha256(data) {
      return "0x" + hash_js_1.default.sha256().update((0, bytes_1.arrayify)(data)).digest("hex");
    }
    exports.sha256 = sha256;
    function sha512(data) {
      return "0x" + hash_js_1.default.sha512().update((0, bytes_1.arrayify)(data)).digest("hex");
    }
    exports.sha512 = sha512;
    function computeHmac(algorithm, key, data) {
      if (!types_1.SupportedAlgorithm[algorithm]) {
        logger.throwError("unsupported algorithm " + algorithm, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "hmac",
          algorithm
        });
      }
      return "0x" + hash_js_1.default.hmac(hash_js_1.default[algorithm], (0, bytes_1.arrayify)(key)).update((0, bytes_1.arrayify)(data)).digest("hex");
    }
    exports.computeHmac = computeHmac;
  }
});

// node_modules/@ethersproject/sha2/lib/index.js
var require_lib20 = __commonJS({
  "node_modules/@ethersproject/sha2/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SupportedAlgorithm = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.computeHmac = void 0;
    var sha2_1 = require_browser_sha2();
    Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function() {
      return sha2_1.computeHmac;
    } });
    Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function() {
      return sha2_1.ripemd160;
    } });
    Object.defineProperty(exports, "sha256", { enumerable: true, get: function() {
      return sha2_1.sha256;
    } });
    Object.defineProperty(exports, "sha512", { enumerable: true, get: function() {
      return sha2_1.sha512;
    } });
    var types_1 = require_types();
    Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function() {
      return types_1.SupportedAlgorithm;
    } });
  }
});

// node_modules/@ethersproject/pbkdf2/lib/browser-pbkdf2.js
var require_browser_pbkdf2 = __commonJS({
  "node_modules/@ethersproject/pbkdf2/lib/browser-pbkdf2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pbkdf2 = void 0;
    var bytes_1 = require_lib2();
    var sha2_1 = require_lib20();
    function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
      password = (0, bytes_1.arrayify)(password);
      salt = (0, bytes_1.arrayify)(salt);
      var hLen;
      var l = 1;
      var DK = new Uint8Array(keylen);
      var block1 = new Uint8Array(salt.length + 4);
      block1.set(salt);
      var r;
      var T;
      for (var i = 1; i <= l; i++) {
        block1[salt.length] = i >> 24 & 255;
        block1[salt.length + 1] = i >> 16 & 255;
        block1[salt.length + 2] = i >> 8 & 255;
        block1[salt.length + 3] = i & 255;
        var U = (0, bytes_1.arrayify)((0, sha2_1.computeHmac)(hashAlgorithm, password, block1));
        if (!hLen) {
          hLen = U.length;
          T = new Uint8Array(hLen);
          l = Math.ceil(keylen / hLen);
          r = keylen - (l - 1) * hLen;
        }
        T.set(U);
        for (var j = 1; j < iterations; j++) {
          U = (0, bytes_1.arrayify)((0, sha2_1.computeHmac)(hashAlgorithm, password, U));
          for (var k = 0; k < hLen; k++)
            T[k] ^= U[k];
        }
        var destPos = (i - 1) * hLen;
        var len = i === l ? r : hLen;
        DK.set((0, bytes_1.arrayify)(T).slice(0, len), destPos);
      }
      return (0, bytes_1.hexlify)(DK);
    }
    exports.pbkdf2 = pbkdf2;
  }
});

// node_modules/@ethersproject/pbkdf2/lib/index.js
var require_lib21 = __commonJS({
  "node_modules/@ethersproject/pbkdf2/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pbkdf2 = void 0;
    var pbkdf2_1 = require_browser_pbkdf2();
    Object.defineProperty(exports, "pbkdf2", { enumerable: true, get: function() {
      return pbkdf2_1.pbkdf2;
    } });
  }
});

// node_modules/@ethersproject/wordlists/lib/_version.js
var require_version16 = __commonJS({
  "node_modules/@ethersproject/wordlists/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "wordlists/5.7.0";
  }
});

// node_modules/@ethersproject/wordlists/lib/wordlist.js
var require_wordlist = __commonJS({
  "node_modules/@ethersproject/wordlists/lib/wordlist.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wordlist = exports.logger = void 0;
    var exportWordlist = false;
    var hash_1 = require_lib12();
    var properties_1 = require_lib4();
    var logger_1 = require_lib();
    var _version_1 = require_version16();
    exports.logger = new logger_1.Logger(_version_1.version);
    var Wordlist = (
      /** @class */
      function() {
        function Wordlist2(locale) {
          var _newTarget = this.constructor;
          exports.logger.checkAbstract(_newTarget, Wordlist2);
          (0, properties_1.defineReadOnly)(this, "locale", locale);
        }
        Wordlist2.prototype.split = function(mnemonic) {
          return mnemonic.toLowerCase().split(/ +/g);
        };
        Wordlist2.prototype.join = function(words) {
          return words.join(" ");
        };
        Wordlist2.check = function(wordlist) {
          var words = [];
          for (var i = 0; i < 2048; i++) {
            var word = wordlist.getWord(i);
            if (i !== wordlist.getWordIndex(word)) {
              return "0x";
            }
            words.push(word);
          }
          return (0, hash_1.id)(words.join("\n") + "\n");
        };
        Wordlist2.register = function(lang, name) {
          if (!name) {
            name = lang.locale;
          }
          if (exportWordlist) {
            try {
              var anyGlobal = window;
              if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {
                if (!anyGlobal._ethers.wordlists[name]) {
                  (0, properties_1.defineReadOnly)(anyGlobal._ethers.wordlists, name, lang);
                }
              }
            } catch (error) {
            }
          }
        };
        return Wordlist2;
      }()
    );
    exports.Wordlist = Wordlist;
  }
});

// node_modules/@ethersproject/wordlists/lib/lang-cz.js
var require_lang_cz = __commonJS({
  "node_modules/@ethersproject/wordlists/lib/lang-cz.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langCz = void 0;
    var wordlist_1 = require_wordlist();
    var words = "AbdikaceAbecedaAdresaAgreseAkceAktovkaAlejAlkoholAmputaceAnanasAndulkaAnekdotaAnketaAntikaAnulovatArchaAroganceAsfaltAsistentAspiraceAstmaAstronomAtlasAtletikaAtolAutobusAzylBabkaBachorBacilBaculkaBadatelBagetaBagrBahnoBakterieBaladaBaletkaBalkonBalonekBalvanBalzaBambusBankomatBarbarBaretBarmanBarokoBarvaBaterkaBatohBavlnaBazalkaBazilikaBazukaBednaBeranBesedaBestieBetonBezinkaBezmocBeztakBicyklBidloBiftekBikinyBilanceBiografBiologBitvaBizonBlahobytBlatouchBlechaBleduleBleskBlikatBliznaBlokovatBlouditBludBobekBobrBodlinaBodnoutBohatostBojkotBojovatBokorysBolestBorecBoroviceBotaBoubelBouchatBoudaBouleBouratBoxerBradavkaBramboraBrankaBratrBreptaBriketaBrkoBrlohBronzBroskevBrunetkaBrusinkaBrzdaBrzyBublinaBubnovatBuchtaBuditelBudkaBudovaBufetBujarostBukviceBuldokBulvaBundaBunkrBurzaButikBuvolBuzolaBydletBylinaBytovkaBzukotCapartCarevnaCedrCeduleCejchCejnCelaCelerCelkemCelniceCeninaCennostCenovkaCentrumCenzorCestopisCetkaChalupaChapadloCharitaChataChechtatChemieChichotChirurgChladChlebaChlubitChmelChmuraChobotChocholChodbaCholeraChomoutChopitChorobaChovChrapotChrlitChrtChrupChtivostChudinaChutnatChvatChvilkaChvostChybaChystatChytitCibuleCigaretaCihelnaCihlaCinkotCirkusCisternaCitaceCitrusCizinecCizostClonaCokolivCouvatCtitelCtnostCudnostCuketaCukrCupotCvaknoutCvalCvikCvrkotCyklistaDalekoDarebaDatelDatumDceraDebataDechovkaDecibelDeficitDeflaceDeklDekretDemokratDepreseDerbyDeskaDetektivDikobrazDiktovatDiodaDiplomDiskDisplejDivadloDivochDlahaDlouhoDluhopisDnesDobroDobytekDocentDochutitDodnesDohledDohodaDohraDojemDojniceDokladDokolaDoktorDokumentDolarDolevaDolinaDomaDominantDomluvitDomovDonutitDopadDopisDoplnitDoposudDoprovodDopustitDorazitDorostDortDosahDoslovDostatekDosudDosytaDotazDotekDotknoutDoufatDoutnatDovozceDozaduDoznatDozorceDrahotaDrakDramatikDravecDrazeDrdolDrobnostDrogerieDrozdDrsnostDrtitDrzostDubenDuchovnoDudekDuhaDuhovkaDusitDusnoDutostDvojiceDvorecDynamitEkologEkonomieElektronElipsaEmailEmiseEmoceEmpatieEpizodaEpochaEpopejEposEsejEsenceEskortaEskymoEtiketaEuforieEvoluceExekuceExkurzeExpediceExplozeExportExtraktFackaFajfkaFakultaFanatikFantazieFarmacieFavoritFazoleFederaceFejetonFenkaFialkaFigurantFilozofFiltrFinanceFintaFixaceFjordFlanelFlirtFlotilaFondFosforFotbalFotkaFotonFrakceFreskaFrontaFukarFunkceFyzikaGalejeGarantGenetikaGeologGilotinaGlazuraGlejtGolemGolfistaGotikaGrafGramofonGranuleGrepGrilGrogGroteskaGumaHadiceHadrHalaHalenkaHanbaHanopisHarfaHarpunaHavranHebkostHejkalHejnoHejtmanHektarHelmaHematomHerecHernaHesloHezkyHistorikHladovkaHlasivkyHlavaHledatHlenHlodavecHlohHloupostHltatHlubinaHluchotaHmatHmotaHmyzHnisHnojivoHnoutHoblinaHobojHochHodinyHodlatHodnotaHodovatHojnostHokejHolinkaHolkaHolubHomoleHonitbaHonoraceHoralHordaHorizontHorkoHorlivecHormonHorninaHoroskopHorstvoHospodaHostinaHotovostHoubaHoufHoupatHouskaHovorHradbaHraniceHravostHrazdaHrbolekHrdinaHrdloHrdostHrnekHrobkaHromadaHrotHroudaHrozenHrstkaHrubostHryzatHubenostHubnoutHudbaHukotHumrHusitaHustotaHvozdHybnostHydrantHygienaHymnaHysterikIdylkaIhnedIkonaIluzeImunitaInfekceInflaceInkasoInovaceInspekceInternetInvalidaInvestorInzerceIronieJablkoJachtaJahodaJakmileJakostJalovecJantarJarmarkJaroJasanJasnoJatkaJavorJazykJedinecJedleJednatelJehlanJekotJelenJelitoJemnostJenomJepiceJeseterJevitJezdecJezeroJinakJindyJinochJiskraJistotaJitrniceJizvaJmenovatJogurtJurtaKabaretKabelKabinetKachnaKadetKadidloKahanKajakKajutaKakaoKaktusKalamitaKalhotyKalibrKalnostKameraKamkolivKamnaKanibalKanoeKantorKapalinaKapelaKapitolaKapkaKapleKapotaKaprKapustaKapybaraKaramelKarotkaKartonKasaKatalogKatedraKauceKauzaKavalecKazajkaKazetaKazivostKdekolivKdesiKedlubenKempKeramikaKinoKlacekKladivoKlamKlapotKlasikaKlaunKlecKlenbaKlepatKlesnoutKlidKlimaKlisnaKloboukKlokanKlopaKloubKlubovnaKlusatKluzkostKmenKmitatKmotrKnihaKnotKoaliceKoberecKobkaKoblihaKobylaKocourKohoutKojenecKokosKoktejlKolapsKoledaKolizeKoloKomandoKometaKomikKomnataKomoraKompasKomunitaKonatKonceptKondiceKonecKonfeseKongresKoninaKonkursKontaktKonzervaKopanecKopieKopnoutKoprovkaKorbelKorektorKormidloKoroptevKorpusKorunaKorytoKorzetKosatecKostkaKotelKotletaKotoulKoukatKoupelnaKousekKouzloKovbojKozaKozorohKrabiceKrachKrajinaKralovatKrasopisKravataKreditKrejcarKresbaKrevetaKriketKritikKrizeKrkavecKrmelecKrmivoKrocanKrokKronikaKropitKroupaKrovkaKrtekKruhadloKrupiceKrutostKrvinkaKrychleKryptaKrystalKrytKudlankaKufrKujnostKuklaKulajdaKulichKulkaKulometKulturaKunaKupodivuKurtKurzorKutilKvalitaKvasinkaKvestorKynologKyselinaKytaraKyticeKytkaKytovecKyvadloLabradorLachtanLadnostLaikLakomecLamelaLampaLanovkaLasiceLasoLasturaLatinkaLavinaLebkaLeckdyLedenLedniceLedovkaLedvinaLegendaLegieLegraceLehceLehkostLehnoutLektvarLenochodLentilkaLepenkaLepidloLetadloLetecLetmoLetokruhLevhartLevitaceLevobokLibraLichotkaLidojedLidskostLihovinaLijavecLilekLimetkaLinieLinkaLinoleumListopadLitinaLitovatLobistaLodivodLogikaLogopedLokalitaLoketLomcovatLopataLopuchLordLososLotrLoudalLouhLoukaLouskatLovecLstivostLucernaLuciferLumpLuskLustraceLviceLyraLyrikaLysinaMadamMadloMagistrMahagonMajetekMajitelMajoritaMakakMakoviceMakrelaMalbaMalinaMalovatMalviceMaminkaMandleMankoMarnostMasakrMaskotMasopustMaticeMatrikaMaturitaMazanecMazivoMazlitMazurkaMdlobaMechanikMeditaceMedovinaMelasaMelounMentolkaMetlaMetodaMetrMezeraMigraceMihnoutMihuleMikinaMikrofonMilenecMilimetrMilostMimikaMincovnaMinibarMinometMinulostMiskaMistrMixovatMladostMlhaMlhovinaMlokMlsatMluvitMnichMnohemMobilMocnostModelkaModlitbaMohylaMokroMolekulaMomentkaMonarchaMonoklMonstrumMontovatMonzunMosazMoskytMostMotivaceMotorkaMotykaMouchaMoudrostMozaikaMozekMozolMramorMravenecMrkevMrtvolaMrzetMrzutostMstitelMudrcMuflonMulatMumieMuniceMusetMutaceMuzeumMuzikantMyslivecMzdaNabouratNachytatNadaceNadbytekNadhozNadobroNadpisNahlasNahnatNahodileNahraditNaivitaNajednouNajistoNajmoutNaklonitNakonecNakrmitNalevoNamazatNamluvitNanometrNaokoNaopakNaostroNapadatNapevnoNaplnitNapnoutNaposledNaprostoNaroditNarubyNarychloNasaditNasekatNaslepoNastatNatolikNavenekNavrchNavzdoryNazvatNebeNechatNeckyNedalekoNedbatNeduhNegaceNehetNehodaNejenNejprveNeklidNelibostNemilostNemocNeochotaNeonkaNepokojNerostNervNesmyslNesouladNetvorNeuronNevinaNezvykleNicotaNijakNikamNikdyNiklNikterakNitroNoclehNohaviceNominaceNoraNorekNositelNosnostNouzeNovinyNovotaNozdraNudaNudleNugetNutitNutnostNutrieNymfaObalObarvitObavaObdivObecObehnatObejmoutObezitaObhajobaObilniceObjasnitObjektObklopitOblastOblekOblibaOblohaObludaObnosObohatitObojekOboutObrazecObrnaObrubaObrysObsahObsluhaObstaratObuvObvazObvinitObvodObvykleObyvatelObzorOcasOcelOcenitOchladitOchotaOchranaOcitnoutOdbojOdbytOdchodOdcizitOdebratOdeslatOdevzdatOdezvaOdhadceOdhoditOdjetOdjinudOdkazOdkoupitOdlivOdlukaOdmlkaOdolnostOdpadOdpisOdploutOdporOdpustitOdpykatOdrazkaOdsouditOdstupOdsunOdtokOdtudOdvahaOdvetaOdvolatOdvracetOdznakOfinaOfsajdOhlasOhniskoOhradaOhrozitOhryzekOkapOkeniceOklikaOknoOkouzlitOkovyOkrasaOkresOkrsekOkruhOkupantOkurkaOkusitOlejninaOlizovatOmakOmeletaOmezitOmladinaOmlouvatOmluvaOmylOnehdyOpakovatOpasekOperaceOpiceOpilostOpisovatOporaOpoziceOpravduOprotiOrbitalOrchestrOrgieOrliceOrlojOrtelOsadaOschnoutOsikaOsivoOslavaOslepitOslnitOslovitOsnovaOsobaOsolitOspalecOstenOstrahaOstudaOstychOsvojitOteplitOtiskOtopOtrhatOtrlostOtrokOtrubyOtvorOvanoutOvarOvesOvlivnitOvoceOxidOzdobaPachatelPacientPadouchPahorekPaktPalandaPalecPalivoPalubaPamfletPamlsekPanenkaPanikaPannaPanovatPanstvoPantoflePaprikaParketaParodiePartaParukaParybaPasekaPasivitaPastelkaPatentPatronaPavoukPaznehtPazourekPeckaPedagogPejsekPekloPelotonPenaltaPendrekPenzePeriskopPeroPestrostPetardaPeticePetrolejPevninaPexesoPianistaPihaPijavicePiklePiknikPilinaPilnostPilulkaPinzetaPipetaPisatelPistolePitevnaPivnicePivovarPlacentaPlakatPlamenPlanetaPlastikaPlatitPlavidloPlazPlechPlemenoPlentaPlesPletivoPlevelPlivatPlnitPlnoPlochaPlodinaPlombaPloutPlukPlynPobavitPobytPochodPocitPoctivecPodatPodcenitPodepsatPodhledPodivitPodkladPodmanitPodnikPodobaPodporaPodrazPodstataPodvodPodzimPoeziePohankaPohnutkaPohovorPohromaPohybPointaPojistkaPojmoutPokazitPoklesPokojPokrokPokutaPokynPolednePolibekPolknoutPolohaPolynomPomaluPominoutPomlkaPomocPomstaPomysletPonechatPonorkaPonurostPopadatPopelPopisekPoplachPoprositPopsatPopudPoradcePorcePorodPoruchaPoryvPosaditPosedPosilaPoskokPoslanecPosouditPospoluPostavaPosudekPosypPotahPotkanPotleskPotomekPotravaPotupaPotvoraPoukazPoutoPouzdroPovahaPovidlaPovlakPovozPovrchPovstatPovykPovzdechPozdravPozemekPoznatekPozorPozvatPracovatPrahoryPraktikaPralesPraotecPraporekPrasePravdaPrincipPrknoProbuditProcentoProdejProfeseProhraProjektProlomitPromilePronikatPropadProrokProsbaProtonProutekProvazPrskavkaPrstenPrudkostPrutPrvekPrvohoryPsanecPsovodPstruhPtactvoPubertaPuchPudlPukavecPuklinaPukrlePultPumpaPuncPupenPusaPusinkaPustinaPutovatPutykaPyramidaPyskPytelRacekRachotRadiaceRadniceRadonRaftRagbyRaketaRakovinaRamenoRampouchRandeRarachRaritaRasovnaRastrRatolestRazanceRazidloReagovatReakceReceptRedaktorReferentReflexRejnokReklamaRekordRekrutRektorReputaceRevizeRevmaRevolverRezervaRiskovatRizikoRobotikaRodokmenRohovkaRokleRokokoRomanetoRopovodRopuchaRorejsRosolRostlinaRotmistrRotopedRotundaRoubenkaRouchoRoupRouraRovinaRovniceRozborRozchodRozdatRozeznatRozhodceRozinkaRozjezdRozkazRozlohaRozmarRozpadRozruchRozsahRoztokRozumRozvodRubrikaRuchadloRukaviceRukopisRybaRybolovRychlostRydloRypadloRytinaRyzostSadistaSahatSakoSamecSamizdatSamotaSanitkaSardinkaSasankaSatelitSazbaSazeniceSborSchovatSebrankaSeceseSedadloSedimentSedloSehnatSejmoutSekeraSektaSekundaSekvojeSemenoSenoServisSesaditSeshoraSeskokSeslatSestraSesuvSesypatSetbaSetinaSetkatSetnoutSetrvatSeverSeznamShodaShrnoutSifonSilniceSirkaSirotekSirupSituaceSkafandrSkaliskoSkanzenSkautSkeptikSkicaSkladbaSkleniceSkloSkluzSkobaSkokanSkoroSkriptaSkrzSkupinaSkvostSkvrnaSlabikaSladidloSlaninaSlastSlavnostSledovatSlepecSlevaSlezinaSlibSlinaSlizniceSlonSloupekSlovoSluchSluhaSlunceSlupkaSlzaSmaragdSmetanaSmilstvoSmlouvaSmogSmradSmrkSmrtkaSmutekSmyslSnadSnahaSnobSobotaSochaSodovkaSokolSopkaSotvaSoubojSoucitSoudceSouhlasSouladSoumrakSoupravaSousedSoutokSouvisetSpalovnaSpasitelSpisSplavSpodekSpojenecSpoluSponzorSpornostSpoustaSprchaSpustitSrandaSrazSrdceSrnaSrnecSrovnatSrpenSrstSrubStaniceStarostaStatikaStavbaStehnoStezkaStodolaStolekStopaStornoStoupatStrachStresStrhnoutStromStrunaStudnaStupniceStvolStykSubjektSubtropySucharSudostSuknoSundatSunoutSurikataSurovinaSvahSvalstvoSvetrSvatbaSvazekSvisleSvitekSvobodaSvodidloSvorkaSvrabSykavkaSykotSynekSynovecSypatSypkostSyrovostSyselSytostTabletkaTabuleTahounTajemnoTajfunTajgaTajitTajnostTaktikaTamhleTamponTancovatTanecTankerTapetaTaveninaTazatelTechnikaTehdyTekutinaTelefonTemnotaTendenceTenistaTenorTeplotaTepnaTeprveTerapieTermoskaTextilTichoTiskopisTitulekTkadlecTkaninaTlapkaTleskatTlukotTlupaTmelToaletaTopinkaTopolTorzoTouhaToulecTradiceTraktorTrampTrasaTraverzaTrefitTrestTrezorTrhavinaTrhlinaTrochuTrojiceTroskaTroubaTrpceTrpitelTrpkostTrubecTruchlitTruhliceTrusTrvatTudyTuhnoutTuhostTundraTuristaTurnajTuzemskoTvarohTvorbaTvrdostTvrzTygrTykevUbohostUbozeUbratUbrousekUbrusUbytovnaUchoUctivostUdivitUhraditUjednatUjistitUjmoutUkazatelUklidnitUklonitUkotvitUkrojitUliceUlitaUlovitUmyvadloUnavitUniformaUniknoutUpadnoutUplatnitUplynoutUpoutatUpravitUranUrazitUsednoutUsilovatUsmrtitUsnadnitUsnoutUsouditUstlatUstrnoutUtahovatUtkatUtlumitUtonoutUtopenecUtrousitUvalitUvolnitUvozovkaUzdravitUzelUzeninaUzlinaUznatVagonValchaValounVanaVandalVanilkaVaranVarhanyVarovatVcelkuVchodVdovaVedroVegetaceVejceVelbloudVeletrhVelitelVelmocVelrybaVenkovVerandaVerzeVeselkaVeskrzeVesniceVespoduVestaVeterinaVeverkaVibraceVichrVideohraVidinaVidleVilaViniceVisetVitalitaVizeVizitkaVjezdVkladVkusVlajkaVlakVlasecVlevoVlhkostVlivVlnovkaVloupatVnucovatVnukVodaVodivostVodoznakVodstvoVojenskyVojnaVojskoVolantVolbaVolitVolnoVoskovkaVozidloVozovnaVpravoVrabecVracetVrahVrataVrbaVrcholekVrhatVrstvaVrtuleVsaditVstoupitVstupVtipVybavitVybratVychovatVydatVydraVyfotitVyhledatVyhnoutVyhoditVyhraditVyhubitVyjasnitVyjetVyjmoutVyklopitVykonatVylekatVymazatVymezitVymizetVymysletVynechatVynikatVynutitVypadatVyplatitVypravitVypustitVyrazitVyrovnatVyrvatVyslovitVysokoVystavitVysunoutVysypatVytasitVytesatVytratitVyvinoutVyvolatVyvrhelVyzdobitVyznatVzaduVzbuditVzchopitVzdorVzduchVzdychatVzestupVzhledemVzkazVzlykatVznikVzorekVzpouraVztahVztekXylofonZabratZabydletZachovatZadarmoZadusitZafoukatZahltitZahoditZahradaZahynoutZajatecZajetZajistitZaklepatZakoupitZalepitZamezitZamotatZamysletZanechatZanikatZaplatitZapojitZapsatZarazitZastavitZasunoutZatajitZatemnitZatknoutZaujmoutZavalitZaveletZavinitZavolatZavrtatZazvonitZbavitZbrusuZbudovatZbytekZdalekaZdarmaZdatnostZdivoZdobitZdrojZdvihZdymadloZeleninaZemanZeminaZeptatZezaduZezdolaZhatitZhltnoutZhlubokaZhotovitZhrubaZimaZimniceZjemnitZklamatZkoumatZkratkaZkumavkaZlatoZlehkaZlobaZlomZlostZlozvykZmapovatZmarZmatekZmijeZmizetZmocnitZmodratZmrzlinaZmutovatZnakZnalostZnamenatZnovuZobrazitZotavitZoubekZoufaleZploditZpomalitZpravaZprostitZprudkaZprvuZradaZranitZrcadloZrnitostZrnoZrovnaZrychlitZrzavostZtichaZtratitZubovinaZubrZvednoutZvenkuZveselaZvonZvratZvukovodZvyk";
    var wordlist = null;
    function loadWords(lang) {
      if (wordlist != null) {
        return;
      }
      wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
      if (wordlist_1.Wordlist.check(lang) !== "0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a") {
        wordlist = null;
        throw new Error("BIP39 Wordlist for en (English) FAILED");
      }
    }
    var LangCz = (
      /** @class */
      function(_super) {
        __extends(LangCz2, _super);
        function LangCz2() {
          return _super.call(this, "cz") || this;
        }
        LangCz2.prototype.getWord = function(index) {
          loadWords(this);
          return wordlist[index];
        };
        LangCz2.prototype.getWordIndex = function(word) {
          loadWords(this);
          return wordlist.indexOf(word);
        };
        return LangCz2;
      }(wordlist_1.Wordlist)
    );
    var langCz = new LangCz();
    exports.langCz = langCz;
    wordlist_1.Wordlist.register(langCz);
  }
});

// node_modules/@ethersproject/wordlists/lib/lang-en.js
var require_lang_en = __commonJS({
  "node_modules/@ethersproject/wordlists/lib/lang-en.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langEn = void 0;
    var wordlist_1 = require_wordlist();
    var words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
    var wordlist = null;
    function loadWords(lang) {
      if (wordlist != null) {
        return;
      }
      wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
      if (wordlist_1.Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
        wordlist = null;
        throw new Error("BIP39 Wordlist for en (English) FAILED");
      }
    }
    var LangEn = (
      /** @class */
      function(_super) {
        __extends(LangEn2, _super);
        function LangEn2() {
          return _super.call(this, "en") || this;
        }
        LangEn2.prototype.getWord = function(index) {
          loadWords(this);
          return wordlist[index];
        };
        LangEn2.prototype.getWordIndex = function(word) {
          loadWords(this);
          return wordlist.indexOf(word);
        };
        return LangEn2;
      }(wordlist_1.Wordlist)
    );
    var langEn = new LangEn();
    exports.langEn = langEn;
    wordlist_1.Wordlist.register(langEn);
  }
});

// node_modules/@ethersproject/wordlists/lib/lang-es.js
var require_lang_es = __commonJS({
  "node_modules/@ethersproject/wordlists/lib/lang-es.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langEs = void 0;
    var strings_1 = require_lib9();
    var wordlist_1 = require_wordlist();
    var words = "A/bacoAbdomenAbejaAbiertoAbogadoAbonoAbortoAbrazoAbrirAbueloAbusoAcabarAcademiaAccesoAccio/nAceiteAcelgaAcentoAceptarA/cidoAclararAcne/AcogerAcosoActivoActoActrizActuarAcudirAcuerdoAcusarAdictoAdmitirAdoptarAdornoAduanaAdultoAe/reoAfectarAficio/nAfinarAfirmarA/gilAgitarAgoni/aAgostoAgotarAgregarAgrioAguaAgudoA/guilaAgujaAhogoAhorroAireAislarAjedrezAjenoAjusteAlacra/nAlambreAlarmaAlbaA/lbumAlcaldeAldeaAlegreAlejarAlertaAletaAlfilerAlgaAlgodo/nAliadoAlientoAlivioAlmaAlmejaAlmi/barAltarAltezaAltivoAltoAlturaAlumnoAlzarAmableAmanteAmapolaAmargoAmasarA/mbarA/mbitoAmenoAmigoAmistadAmorAmparoAmplioAnchoAncianoAnclaAndarAnde/nAnemiaA/nguloAnilloA/nimoAni/sAnotarAntenaAntiguoAntojoAnualAnularAnuncioA~adirA~ejoA~oApagarAparatoApetitoApioAplicarApodoAporteApoyoAprenderAprobarApuestaApuroAradoAra~aArarA/rbitroA/rbolArbustoArchivoArcoArderArdillaArduoA/reaA/ridoAriesArmoni/aArne/sAromaArpaArpo/nArregloArrozArrugaArteArtistaAsaAsadoAsaltoAscensoAsegurarAseoAsesorAsientoAsiloAsistirAsnoAsombroA/speroAstillaAstroAstutoAsumirAsuntoAtajoAtaqueAtarAtentoAteoA/ticoAtletaA/tomoAtraerAtrozAtu/nAudazAudioAugeAulaAumentoAusenteAutorAvalAvanceAvaroAveAvellanaAvenaAvestruzAvio/nAvisoAyerAyudaAyunoAzafra/nAzarAzoteAzu/carAzufreAzulBabaBaborBacheBahi/aBaileBajarBalanzaBalco/nBaldeBambu/BancoBandaBa~oBarbaBarcoBarnizBarroBa/sculaBasto/nBasuraBatallaBateri/aBatirBatutaBau/lBazarBebe/BebidaBelloBesarBesoBestiaBichoBienBingoBlancoBloqueBlusaBoaBobinaBoboBocaBocinaBodaBodegaBoinaBolaBoleroBolsaBombaBondadBonitoBonoBonsa/iBordeBorrarBosqueBoteBoti/nBo/vedaBozalBravoBrazoBrechaBreveBrilloBrincoBrisaBrocaBromaBronceBroteBrujaBruscoBrutoBuceoBucleBuenoBueyBufandaBufo/nBu/hoBuitreBultoBurbujaBurlaBurroBuscarButacaBuzo/nCaballoCabezaCabinaCabraCacaoCada/verCadenaCaerCafe/Cai/daCaima/nCajaCajo/nCalCalamarCalcioCaldoCalidadCalleCalmaCalorCalvoCamaCambioCamelloCaminoCampoCa/ncerCandilCanelaCanguroCanicaCantoCa~aCa~o/nCaobaCaosCapazCapita/nCapoteCaptarCapuchaCaraCarbo/nCa/rcelCaretaCargaCari~oCarneCarpetaCarroCartaCasaCascoCaseroCaspaCastorCatorceCatreCaudalCausaCazoCebollaCederCedroCeldaCe/lebreCelosoCe/lulaCementoCenizaCentroCercaCerdoCerezaCeroCerrarCertezaCe/spedCetroChacalChalecoChampu/ChanclaChapaCharlaChicoChisteChivoChoqueChozaChuletaChuparCiclo/nCiegoCieloCienCiertoCifraCigarroCimaCincoCineCintaCipre/sCircoCiruelaCisneCitaCiudadClamorClanClaroClaseClaveClienteClimaCli/nicaCobreCoccio/nCochinoCocinaCocoCo/digoCodoCofreCogerCoheteCoji/nCojoColaColchaColegioColgarColinaCollarColmoColumnaCombateComerComidaCo/modoCompraCondeConejoCongaConocerConsejoContarCopaCopiaCorazo/nCorbataCorchoCordo/nCoronaCorrerCoserCosmosCostaCra/neoCra/terCrearCrecerCrei/doCremaCri/aCrimenCriptaCrisisCromoCro/nicaCroquetaCrudoCruzCuadroCuartoCuatroCuboCubrirCucharaCuelloCuentoCuerdaCuestaCuevaCuidarCulebraCulpaCultoCumbreCumplirCunaCunetaCuotaCupo/nCu/pulaCurarCuriosoCursoCurvaCutisDamaDanzaDarDardoDa/tilDeberDe/bilDe/cadaDecirDedoDefensaDefinirDejarDelfi/nDelgadoDelitoDemoraDensoDentalDeporteDerechoDerrotaDesayunoDeseoDesfileDesnudoDestinoDesvi/oDetalleDetenerDeudaDi/aDiabloDiademaDiamanteDianaDiarioDibujoDictarDienteDietaDiezDifi/cilDignoDilemaDiluirDineroDirectoDirigirDiscoDise~oDisfrazDivaDivinoDobleDoceDolorDomingoDonDonarDoradoDormirDorsoDosDosisDrago/nDrogaDuchaDudaDueloDue~oDulceDu/oDuqueDurarDurezaDuroE/banoEbrioEcharEcoEcuadorEdadEdicio/nEdificioEditorEducarEfectoEficazEjeEjemploElefanteElegirElementoElevarElipseE/liteElixirElogioEludirEmbudoEmitirEmocio/nEmpateEmpe~oEmpleoEmpresaEnanoEncargoEnchufeEnci/aEnemigoEneroEnfadoEnfermoEnga~oEnigmaEnlaceEnormeEnredoEnsayoEnse~arEnteroEntrarEnvaseEnvi/oE/pocaEquipoErizoEscalaEscenaEscolarEscribirEscudoEsenciaEsferaEsfuerzoEspadaEspejoEspi/aEsposaEspumaEsqui/EstarEsteEstiloEstufaEtapaEternoE/ticaEtniaEvadirEvaluarEventoEvitarExactoExamenExcesoExcusaExentoExigirExilioExistirE/xitoExpertoExplicarExponerExtremoFa/bricaFa/bulaFachadaFa/cilFactorFaenaFajaFaldaFalloFalsoFaltarFamaFamiliaFamosoFarao/nFarmaciaFarolFarsaFaseFatigaFaunaFavorFaxFebreroFechaFelizFeoFeriaFerozFe/rtilFervorFesti/nFiableFianzaFiarFibraFiccio/nFichaFideoFiebreFielFieraFiestaFiguraFijarFijoFilaFileteFilialFiltroFinFincaFingirFinitoFirmaFlacoFlautaFlechaFlorFlotaFluirFlujoFlu/orFobiaFocaFogataFogo/nFolioFolletoFondoFormaForroFortunaForzarFosaFotoFracasoFra/gilFranjaFraseFraudeFrei/rFrenoFresaFri/oFritoFrutaFuegoFuenteFuerzaFugaFumarFuncio/nFundaFurgo/nFuriaFusilFu/tbolFuturoGacelaGafasGaitaGajoGalaGaleri/aGalloGambaGanarGanchoGangaGansoGarajeGarzaGasolinaGastarGatoGavila/nGemeloGemirGenGe/neroGenioGenteGeranioGerenteGermenGestoGiganteGimnasioGirarGiroGlaciarGloboGloriaGolGolfoGolosoGolpeGomaGordoGorilaGorraGotaGoteoGozarGradaGra/ficoGranoGrasaGratisGraveGrietaGrilloGripeGrisGritoGrosorGru/aGruesoGrumoGrupoGuanteGuapoGuardiaGuerraGui/aGui~oGuionGuisoGuitarraGusanoGustarHaberHa/bilHablarHacerHachaHadaHallarHamacaHarinaHazHaza~aHebillaHebraHechoHeladoHelioHembraHerirHermanoHe/roeHervirHieloHierroHi/gadoHigieneHijoHimnoHistoriaHocicoHogarHogueraHojaHombreHongoHonorHonraHoraHormigaHornoHostilHoyoHuecoHuelgaHuertaHuesoHuevoHuidaHuirHumanoHu/medoHumildeHumoHundirHuraca/nHurtoIconoIdealIdiomaI/doloIglesiaIglu/IgualIlegalIlusio/nImagenIma/nImitarImparImperioImponerImpulsoIncapazI/ndiceInerteInfielInformeIngenioInicioInmensoInmuneInnatoInsectoInstanteIntere/sI/ntimoIntuirInu/tilInviernoIraIrisIroni/aIslaIsloteJabali/Jabo/nJamo/nJarabeJardi/nJarraJaulaJazmi/nJefeJeringaJineteJornadaJorobaJovenJoyaJuergaJuevesJuezJugadorJugoJugueteJuicioJuncoJunglaJunioJuntarJu/piterJurarJustoJuvenilJuzgarKiloKoalaLabioLacioLacraLadoLadro/nLagartoLa/grimaLagunaLaicoLamerLa/minaLa/mparaLanaLanchaLangostaLanzaLa/pizLargoLarvaLa/stimaLataLa/texLatirLaurelLavarLazoLealLeccio/nLecheLectorLeerLegio/nLegumbreLejanoLenguaLentoLe~aLeo/nLeopardoLesio/nLetalLetraLeveLeyendaLibertadLibroLicorLi/derLidiarLienzoLigaLigeroLimaLi/miteLimo/nLimpioLinceLindoLi/neaLingoteLinoLinternaLi/quidoLisoListaLiteraLitioLitroLlagaLlamaLlantoLlaveLlegarLlenarLlevarLlorarLloverLluviaLoboLocio/nLocoLocuraLo/gicaLogroLombrizLomoLonjaLoteLuchaLucirLugarLujoLunaLunesLupaLustroLutoLuzMacetaMachoMaderaMadreMaduroMaestroMafiaMagiaMagoMai/zMaldadMaletaMallaMaloMama/MamboMamutMancoMandoManejarMangaManiqui/ManjarManoMansoMantaMa~anaMapaMa/quinaMarMarcoMareaMarfilMargenMaridoMa/rmolMarro/nMartesMarzoMasaMa/scaraMasivoMatarMateriaMatizMatrizMa/ximoMayorMazorcaMechaMedallaMedioMe/dulaMejillaMejorMelenaMelo/nMemoriaMenorMensajeMenteMenu/MercadoMerengueMe/ritoMesMeso/nMetaMeterMe/todoMetroMezclaMiedoMielMiembroMigaMilMilagroMilitarMillo/nMimoMinaMineroMi/nimoMinutoMiopeMirarMisaMiseriaMisilMismoMitadMitoMochilaMocio/nModaModeloMohoMojarMoldeMolerMolinoMomentoMomiaMonarcaMonedaMonjaMontoMo~oMoradaMorderMorenoMorirMorroMorsaMortalMoscaMostrarMotivoMoverMo/vilMozoMuchoMudarMuebleMuelaMuerteMuestraMugreMujerMulaMuletaMultaMundoMu~ecaMuralMuroMu/sculoMuseoMusgoMu/sicaMusloNa/carNacio/nNadarNaipeNaranjaNarizNarrarNasalNatalNativoNaturalNa/useaNavalNaveNavidadNecioNe/ctarNegarNegocioNegroNeo/nNervioNetoNeutroNevarNeveraNichoNidoNieblaNietoNi~ezNi~oNi/tidoNivelNoblezaNocheNo/minaNoriaNormaNorteNotaNoticiaNovatoNovelaNovioNubeNucaNu/cleoNudilloNudoNueraNueveNuezNuloNu/meroNutriaOasisObesoObispoObjetoObraObreroObservarObtenerObvioOcaOcasoOce/anoOchentaOchoOcioOcreOctavoOctubreOcultoOcuparOcurrirOdiarOdioOdiseaOesteOfensaOfertaOficioOfrecerOgroOi/doOi/rOjoOlaOleadaOlfatoOlivoOllaOlmoOlorOlvidoOmbligoOndaOnzaOpacoOpcio/nO/peraOpinarOponerOptarO/pticaOpuestoOracio/nOradorOralO/rbitaOrcaOrdenOrejaO/rganoOrgi/aOrgulloOrienteOrigenOrillaOroOrquestaOrugaOsadi/aOscuroOseznoOsoOstraOto~oOtroOvejaO/vuloO/xidoOxi/genoOyenteOzonoPactoPadrePaellaPa/ginaPagoPai/sPa/jaroPalabraPalcoPaletaPa/lidoPalmaPalomaPalparPanPanalPa/nicoPanteraPa~ueloPapa/PapelPapillaPaquetePararParcelaParedParirParoPa/rpadoParquePa/rrafoPartePasarPaseoPasio/nPasoPastaPataPatioPatriaPausaPautaPavoPayasoPeato/nPecadoPeceraPechoPedalPedirPegarPeinePelarPelda~oPeleaPeligroPellejoPeloPelucaPenaPensarPe~o/nPeo/nPeorPepinoPeque~oPeraPerchaPerderPerezaPerfilPericoPerlaPermisoPerroPersonaPesaPescaPe/simoPesta~aPe/taloPetro/leoPezPezu~aPicarPicho/nPiePiedraPiernaPiezaPijamaPilarPilotoPimientaPinoPintorPinzaPi~aPiojoPipaPirataPisarPiscinaPisoPistaPito/nPizcaPlacaPlanPlataPlayaPlazaPleitoPlenoPlomoPlumaPluralPobrePocoPoderPodioPoemaPoesi/aPoetaPolenPolici/aPolloPolvoPomadaPomeloPomoPompaPonerPorcio/nPortalPosadaPoseerPosiblePostePotenciaPotroPozoPradoPrecozPreguntaPremioPrensaPresoPrevioPrimoPri/ncipePrisio/nPrivarProaProbarProcesoProductoProezaProfesorProgramaProlePromesaProntoPropioPro/ximoPruebaPu/blicoPucheroPudorPuebloPuertaPuestoPulgaPulirPulmo/nPulpoPulsoPumaPuntoPu~alPu~oPupaPupilaPure/QuedarQuejaQuemarQuererQuesoQuietoQui/micaQuinceQuitarRa/banoRabiaRaboRacio/nRadicalRai/zRamaRampaRanchoRangoRapazRa/pidoRaptoRasgoRaspaRatoRayoRazaRazo/nReaccio/nRealidadReba~oReboteRecaerRecetaRechazoRecogerRecreoRectoRecursoRedRedondoReducirReflejoReformaRefra/nRefugioRegaloRegirReglaRegresoRehe/nReinoRei/rRejaRelatoRelevoRelieveRellenoRelojRemarRemedioRemoRencorRendirRentaRepartoRepetirReposoReptilResRescateResinaRespetoRestoResumenRetiroRetornoRetratoReunirReve/sRevistaReyRezarRicoRiegoRiendaRiesgoRifaRi/gidoRigorRinco/nRi~o/nRi/oRiquezaRisaRitmoRitoRizoRobleRoceRociarRodarRodeoRodillaRoerRojizoRojoRomeroRomperRonRoncoRondaRopaRoperoRosaRoscaRostroRotarRubi/RuborRudoRuedaRugirRuidoRuinaRuletaRuloRumboRumorRupturaRutaRutinaSa/badoSaberSabioSableSacarSagazSagradoSalaSaldoSaleroSalirSalmo/nSalo/nSalsaSaltoSaludSalvarSambaSancio/nSandi/aSanearSangreSanidadSanoSantoSapoSaqueSardinaSarte/nSastreSata/nSaunaSaxofo/nSeccio/nSecoSecretoSectaSedSeguirSeisSelloSelvaSemanaSemillaSendaSensorSe~alSe~orSepararSepiaSequi/aSerSerieSermo/nServirSesentaSesio/nSetaSetentaSeveroSexoSextoSidraSiestaSieteSigloSignoSi/labaSilbarSilencioSillaSi/mboloSimioSirenaSistemaSitioSituarSobreSocioSodioSolSolapaSoldadoSoledadSo/lidoSoltarSolucio/nSombraSondeoSonidoSonoroSonrisaSopaSoplarSoporteSordoSorpresaSorteoSoste/nSo/tanoSuaveSubirSucesoSudorSuegraSueloSue~oSuerteSufrirSujetoSulta/nSumarSuperarSuplirSuponerSupremoSurSurcoSure~oSurgirSustoSutilTabacoTabiqueTablaTabu/TacoTactoTajoTalarTalcoTalentoTallaTalo/nTama~oTamborTangoTanqueTapaTapeteTapiaTapo/nTaquillaTardeTareaTarifaTarjetaTarotTarroTartaTatuajeTauroTazaTazo/nTeatroTechoTeclaTe/cnicaTejadoTejerTejidoTelaTele/fonoTemaTemorTemploTenazTenderTenerTenisTensoTeori/aTerapiaTercoTe/rminoTernuraTerrorTesisTesoroTestigoTeteraTextoTezTibioTiburo/nTiempoTiendaTierraTiesoTigreTijeraTildeTimbreTi/midoTimoTintaTi/oTi/picoTipoTiraTiro/nTita/nTi/tereTi/tuloTizaToallaTobilloTocarTocinoTodoTogaToldoTomarTonoTontoToparTopeToqueTo/raxToreroTormentaTorneoToroTorpedoTorreTorsoTortugaTosToscoToserTo/xicoTrabajoTractorTraerTra/ficoTragoTrajeTramoTranceTratoTraumaTrazarTre/bolTreguaTreintaTrenTreparTresTribuTrigoTripaTristeTriunfoTrofeoTrompaTroncoTropaTroteTrozoTrucoTruenoTrufaTuberi/aTuboTuertoTumbaTumorTu/nelTu/nicaTurbinaTurismoTurnoTutorUbicarU/lceraUmbralUnidadUnirUniversoUnoUntarU~aUrbanoUrbeUrgenteUrnaUsarUsuarioU/tilUtopi/aUvaVacaVaci/oVacunaVagarVagoVainaVajillaValeVa/lidoValleValorVa/lvulaVampiroVaraVariarVaro/nVasoVecinoVectorVehi/culoVeinteVejezVelaVeleroVelozVenaVencerVendaVenenoVengarVenirVentaVenusVerVeranoVerboVerdeVeredaVerjaVersoVerterVi/aViajeVibrarVicioVi/ctimaVidaVi/deoVidrioViejoViernesVigorVilVillaVinagreVinoVi~edoVioli/nViralVirgoVirtudVisorVi/speraVistaVitaminaViudoVivazViveroVivirVivoVolca/nVolumenVolverVorazVotarVotoVozVueloVulgarYacerYateYeguaYemaYernoYesoYodoYogaYogurZafiroZanjaZapatoZarzaZonaZorroZumoZurdo";
    var lookup = {};
    var wordlist = null;
    function dropDiacritic(word) {
      wordlist_1.logger.checkNormalize();
      return (0, strings_1.toUtf8String)(Array.prototype.filter.call((0, strings_1.toUtf8Bytes)(word.normalize("NFD").toLowerCase()), function(c) {
        return c >= 65 && c <= 90 || c >= 97 && c <= 123;
      }));
    }
    function expand(word) {
      var output = [];
      Array.prototype.forEach.call((0, strings_1.toUtf8Bytes)(word), function(c) {
        if (c === 47) {
          output.push(204);
          output.push(129);
        } else if (c === 126) {
          output.push(110);
          output.push(204);
          output.push(131);
        } else {
          output.push(c);
        }
      });
      return (0, strings_1.toUtf8String)(output);
    }
    function loadWords(lang) {
      if (wordlist != null) {
        return;
      }
      wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map(function(w) {
        return expand(w);
      });
      wordlist.forEach(function(word, index) {
        lookup[dropDiacritic(word)] = index;
      });
      if (wordlist_1.Wordlist.check(lang) !== "0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300") {
        wordlist = null;
        throw new Error("BIP39 Wordlist for es (Spanish) FAILED");
      }
    }
    var LangEs = (
      /** @class */
      function(_super) {
        __extends(LangEs2, _super);
        function LangEs2() {
          return _super.call(this, "es") || this;
        }
        LangEs2.prototype.getWord = function(index) {
          loadWords(this);
          return wordlist[index];
        };
        LangEs2.prototype.getWordIndex = function(word) {
          loadWords(this);
          return lookup[dropDiacritic(word)];
        };
        return LangEs2;
      }(wordlist_1.Wordlist)
    );
    var langEs = new LangEs();
    exports.langEs = langEs;
    wordlist_1.Wordlist.register(langEs);
  }
});

// node_modules/@ethersproject/wordlists/lib/lang-fr.js
var require_lang_fr = __commonJS({
  "node_modules/@ethersproject/wordlists/lib/lang-fr.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langFr = void 0;
    var strings_1 = require_lib9();
    var wordlist_1 = require_wordlist();
    var words = "";
    var wordlist = null;
    var lookup = {};
    function dropDiacritic(word) {
      wordlist_1.logger.checkNormalize();
      return (0, strings_1.toUtf8String)(Array.prototype.filter.call((0, strings_1.toUtf8Bytes)(word.normalize("NFD").toLowerCase()), function(c) {
        return c >= 65 && c <= 90 || c >= 97 && c <= 123;
      }));
    }
    function expand(word) {
      var output = [];
      Array.prototype.forEach.call((0, strings_1.toUtf8Bytes)(word), function(c) {
        if (c === 47) {
          output.push(204);
          output.push(129);
        } else if (c === 45) {
          output.push(204);
          output.push(128);
        } else {
          output.push(c);
        }
      });
      return (0, strings_1.toUtf8String)(output);
    }
    function loadWords(lang) {
      if (wordlist != null) {
        return;
      }
      wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map(function(w) {
        return expand(w);
      });
      wordlist.forEach(function(word, index) {
        lookup[dropDiacritic(word)] = index;
      });
      if (wordlist_1.Wordlist.check(lang) !== "0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045") {
        wordlist = null;
        throw new Error("BIP39 Wordlist for fr (French) FAILED");
      }
    }
    var LangFr = (
      /** @class */
      function(_super) {
        __extends(LangFr2, _super);
        function LangFr2() {
          return _super.call(this, "fr") || this;
        }
        LangFr2.prototype.getWord = function(index) {
          loadWords(this);
          return wordlist[index];
        };
        LangFr2.prototype.getWordIndex = function(word) {
          loadWords(this);
          return lookup[dropDiacritic(word)];
        };
        return LangFr2;
      }(wordlist_1.Wordlist)
    );
    var langFr = new LangFr();
    exports.langFr = langFr;
    wordlist_1.Wordlist.register(langFr);
  }
});

// node_modules/@ethersproject/wordlists/lib/lang-ja.js
var require_lang_ja = __commonJS({
  "node_modules/@ethersproject/wordlists/lib/lang-ja.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langJa = void 0;
    var bytes_1 = require_lib2();
    var strings_1 = require_lib9();
    var wordlist_1 = require_wordlist();
    var data = [
      // 4-kana words
      "AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR",
      // 5-kana words
      "ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR",
      // 6-kana words
      "AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm",
      // 7-kana words
      "ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC",
      // 8-kana words
      "BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD",
      // 9-kana words
      "QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD",
      // 10-kana words
      "IJBEJqXZJ"
    ];
    var mapping = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt";
    var wordlist = null;
    function hex(word) {
      return (0, bytes_1.hexlify)((0, strings_1.toUtf8Bytes)(word));
    }
    var KiYoKu = "0xe3818de38284e3818f";
    var KyoKu = "0xe3818de38283e3818f";
    function loadWords(lang) {
      if (wordlist !== null) {
        return;
      }
      wordlist = [];
      var transform = {};
      transform[(0, strings_1.toUtf8String)([227, 130, 154])] = false;
      transform[(0, strings_1.toUtf8String)([227, 130, 153])] = false;
      transform[(0, strings_1.toUtf8String)([227, 130, 133])] = (0, strings_1.toUtf8String)([227, 130, 134]);
      transform[(0, strings_1.toUtf8String)([227, 129, 163])] = (0, strings_1.toUtf8String)([227, 129, 164]);
      transform[(0, strings_1.toUtf8String)([227, 130, 131])] = (0, strings_1.toUtf8String)([227, 130, 132]);
      transform[(0, strings_1.toUtf8String)([227, 130, 135])] = (0, strings_1.toUtf8String)([227, 130, 136]);
      function normalize(word2) {
        var result = "";
        for (var i2 = 0; i2 < word2.length; i2++) {
          var kana = word2[i2];
          var target = transform[kana];
          if (target === false) {
            continue;
          }
          if (target) {
            kana = target;
          }
          result += kana;
        }
        return result;
      }
      function sortJapanese(a, b) {
        a = normalize(a);
        b = normalize(b);
        if (a < b) {
          return -1;
        }
        if (a > b) {
          return 1;
        }
        return 0;
      }
      for (var length_1 = 3; length_1 <= 9; length_1++) {
        var d = data[length_1 - 3];
        for (var offset = 0; offset < d.length; offset += length_1) {
          var word = [];
          for (var i = 0; i < length_1; i++) {
            var k = mapping.indexOf(d[offset + i]);
            word.push(227);
            word.push(k & 64 ? 130 : 129);
            word.push((k & 63) + 128);
          }
          wordlist.push((0, strings_1.toUtf8String)(word));
        }
      }
      wordlist.sort(sortJapanese);
      if (hex(wordlist[442]) === KiYoKu && hex(wordlist[443]) === KyoKu) {
        var tmp = wordlist[442];
        wordlist[442] = wordlist[443];
        wordlist[443] = tmp;
      }
      if (wordlist_1.Wordlist.check(lang) !== "0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600") {
        wordlist = null;
        throw new Error("BIP39 Wordlist for ja (Japanese) FAILED");
      }
    }
    var LangJa = (
      /** @class */
      function(_super) {
        __extends(LangJa2, _super);
        function LangJa2() {
          return _super.call(this, "ja") || this;
        }
        LangJa2.prototype.getWord = function(index) {
          loadWords(this);
          return wordlist[index];
        };
        LangJa2.prototype.getWordIndex = function(word) {
          loadWords(this);
          return wordlist.indexOf(word);
        };
        LangJa2.prototype.split = function(mnemonic) {
          wordlist_1.logger.checkNormalize();
          return mnemonic.split(/(?:\u3000| )+/g);
        };
        LangJa2.prototype.join = function(words) {
          return words.join("\u3000");
        };
        return LangJa2;
      }(wordlist_1.Wordlist)
    );
    var langJa = new LangJa();
    exports.langJa = langJa;
    wordlist_1.Wordlist.register(langJa);
  }
});

// node_modules/@ethersproject/wordlists/lib/lang-ko.js
var require_lang_ko = __commonJS({
  "node_modules/@ethersproject/wordlists/lib/lang-ko.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langKo = void 0;
    var strings_1 = require_lib9();
    var wordlist_1 = require_wordlist();
    var data = [
      "OYAa",
      "ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8",
      "ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6",
      "ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv",
      "AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo",
      "AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg",
      "HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb",
      "AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl"
    ];
    var codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
    function getHangul(code) {
      if (code >= 40) {
        code = code + 168 - 40;
      } else if (code >= 19) {
        code = code + 97 - 19;
      }
      return (0, strings_1.toUtf8String)([225, (code >> 6) + 132, (code & 63) + 128]);
    }
    var wordlist = null;
    function loadWords(lang) {
      if (wordlist != null) {
        return;
      }
      wordlist = [];
      data.forEach(function(data2, length) {
        length += 4;
        for (var i = 0; i < data2.length; i += length) {
          var word = "";
          for (var j = 0; j < length; j++) {
            word += getHangul(codes.indexOf(data2[i + j]));
          }
          wordlist.push(word);
        }
      });
      wordlist.sort();
      if (wordlist_1.Wordlist.check(lang) !== "0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a") {
        wordlist = null;
        throw new Error("BIP39 Wordlist for ko (Korean) FAILED");
      }
    }
    var LangKo = (
      /** @class */
      function(_super) {
        __extends(LangKo2, _super);
        function LangKo2() {
          return _super.call(this, "ko") || this;
        }
        LangKo2.prototype.getWord = function(index) {
          loadWords(this);
          return wordlist[index];
        };
        LangKo2.prototype.getWordIndex = function(word) {
          loadWords(this);
          return wordlist.indexOf(word);
        };
        return LangKo2;
      }(wordlist_1.Wordlist)
    );
    var langKo = new LangKo();
    exports.langKo = langKo;
    wordlist_1.Wordlist.register(langKo);
  }
});

// node_modules/@ethersproject/wordlists/lib/lang-it.js
var require_lang_it = __commonJS({
  "node_modules/@ethersproject/wordlists/lib/lang-it.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langIt = void 0;
    var wordlist_1 = require_wordlist();
    var words = "AbacoAbbaglioAbbinatoAbeteAbissoAbolireAbrasivoAbrogatoAccadereAccennoAccusatoAcetoneAchilleAcidoAcquaAcreAcrilicoAcrobataAcutoAdagioAddebitoAddomeAdeguatoAderireAdipeAdottareAdulareAffabileAffettoAffissoAffrantoAforismaAfosoAfricanoAgaveAgenteAgevoleAggancioAgireAgitareAgonismoAgricoloAgrumetoAguzzoAlabardaAlatoAlbatroAlberatoAlboAlbumeAlceAlcolicoAlettoneAlfaAlgebraAlianteAlibiAlimentoAllagatoAllegroAllievoAllodolaAllusivoAlmenoAlogenoAlpacaAlpestreAltalenaAlternoAlticcioAltroveAlunnoAlveoloAlzareAmalgamaAmanitaAmarenaAmbitoAmbratoAmebaAmericaAmetistaAmicoAmmassoAmmendaAmmirareAmmonitoAmoreAmpioAmpliareAmuletoAnacardoAnagrafeAnalistaAnarchiaAnatraAncaAncellaAncoraAndareAndreaAnelloAngeloAngolareAngustoAnimaAnnegareAnnidatoAnnoAnnuncioAnonimoAnticipoAnziApaticoAperturaApodeApparireAppetitoAppoggioApprodoAppuntoAprileArabicaArachideAragostaAraldicaArancioAraturaArazzoArbitroArchivioArditoArenileArgentoArgineArgutoAriaArmoniaArneseArredatoArringaArrostoArsenicoArsoArteficeArzilloAsciuttoAscoltoAsepsiAsetticoAsfaltoAsinoAsolaAspiratoAsproAssaggioAsseAssolutoAssurdoAstaAstenutoAsticeAstrattoAtavicoAteismoAtomicoAtonoAttesaAttivareAttornoAttritoAttualeAusilioAustriaAutistaAutonomoAutunnoAvanzatoAvereAvvenireAvvisoAvvolgereAzioneAzotoAzzimoAzzurroBabeleBaccanoBacinoBacoBadessaBadilataBagnatoBaitaBalconeBaldoBalenaBallataBalzanoBambinoBandireBaraondaBarbaroBarcaBaritonoBarlumeBaroccoBasilicoBassoBatostaBattutoBauleBavaBavosaBeccoBeffaBelgioBelvaBendaBenevoleBenignoBenzinaBereBerlinaBetaBibitaBiciBidoneBifidoBigaBilanciaBimboBinocoloBiologoBipedeBipolareBirbanteBirraBiscottoBisestoBisnonnoBisonteBisturiBizzarroBlandoBlattaBollitoBonificoBordoBoscoBotanicoBottinoBozzoloBraccioBradipoBramaBrancaBravuraBretellaBrevettoBrezzaBrigliaBrillanteBrindareBroccoloBrodoBronzinaBrulloBrunoBubboneBucaBudinoBuffoneBuioBulboBuonoBurloneBurrascaBussolaBustaCadettoCaducoCalamaroCalcoloCalesseCalibroCalmoCaloriaCambusaCamerataCamiciaCamminoCamolaCampaleCanapaCandelaCaneCaninoCanottoCantinaCapaceCapelloCapitoloCapogiroCapperoCapraCapsulaCarapaceCarcassaCardoCarismaCarovanaCarrettoCartolinaCasaccioCascataCasermaCasoCassoneCastelloCasualeCatastaCatenaCatrameCautoCavilloCedibileCedrataCefaloCelebreCellulareCenaCenoneCentesimoCeramicaCercareCertoCerumeCervelloCesoiaCespoCetoChelaChiaroChiccaChiedereChimeraChinaChirurgoChitarraCiaoCiclismoCifrareCignoCilindroCiottoloCircaCirrosiCitricoCittadinoCiuffoCivettaCivileClassicoClinicaCloroCoccoCodardoCodiceCoerenteCognomeCollareColmatoColoreColposoColtivatoColzaComaCometaCommandoComodoComputerComuneConcisoCondurreConfermaCongelareConiugeConnessoConoscereConsumoContinuoConvegnoCopertoCopioneCoppiaCopricapoCorazzaCordataCoricatoCorniceCorollaCorpoCorredoCorsiaCorteseCosmicoCostanteCotturaCovatoCratereCravattaCreatoCredereCremosoCrescitaCretaCricetoCrinaleCrisiCriticoCroceCronacaCrostataCrucialeCruscaCucireCuculoCuginoCullatoCupolaCuratoreCursoreCurvoCuscinoCustodeDadoDainoDalmataDamerinoDanielaDannosoDanzareDatatoDavantiDavveroDebuttoDecennioDecisoDeclinoDecolloDecretoDedicatoDefinitoDeformeDegnoDelegareDelfinoDelirioDeltaDemenzaDenotatoDentroDepositoDerapataDerivareDerogaDescrittoDesertoDesiderioDesumereDetersivoDevotoDiametroDicembreDiedroDifesoDiffusoDigerireDigitaleDiluvioDinamicoDinnanziDipintoDiplomaDipoloDiradareDireDirottoDirupoDisagioDiscretoDisfareDisgeloDispostoDistanzaDisumanoDitoDivanoDiveltoDividereDivoratoDobloneDocenteDoganaleDogmaDolceDomatoDomenicaDominareDondoloDonoDormireDoteDottoreDovutoDozzinaDragoDruidoDubbioDubitareDucaleDunaDuomoDupliceDuraturoEbanoEccessoEccoEclissiEconomiaEderaEdicolaEdileEditoriaEducareEgemoniaEgliEgoismoEgregioElaboratoElargireEleganteElencatoElettoElevareElficoElicaElmoElsaElusoEmanatoEmblemaEmessoEmiroEmotivoEmozioneEmpiricoEmuloEndemicoEnduroEnergiaEnfasiEnotecaEntrareEnzimaEpatiteEpilogoEpisodioEpocaleEppureEquatoreErarioErbaErbosoEredeEremitaErigereErmeticoEroeErosivoErranteEsagonoEsameEsanimeEsaudireEscaEsempioEsercitoEsibitoEsigenteEsistereEsitoEsofagoEsortatoEsosoEspansoEspressoEssenzaEssoEstesoEstimareEstoniaEstrosoEsultareEtilicoEtnicoEtruscoEttoEuclideoEuropaEvasoEvidenzaEvitatoEvolutoEvvivaFabbricaFaccendaFachiroFalcoFamigliaFanaleFanfaraFangoFantasmaFareFarfallaFarinosoFarmacoFasciaFastosoFasulloFaticareFatoFavolosoFebbreFecolaFedeFegatoFelpaFeltroFemminaFendereFenomenoFermentoFerroFertileFessuraFestivoFettaFeudoFiabaFiduciaFifaFiguratoFiloFinanzaFinestraFinireFioreFiscaleFisicoFiumeFlaconeFlamencoFleboFlemmaFloridoFluenteFluoroFobicoFocacciaFocosoFoderatoFoglioFolataFolcloreFolgoreFondenteFoneticoFoniaFontanaForbitoForchettaForestaFormicaFornaioForoFortezzaForzareFosfatoFossoFracassoFranaFrassinoFratelloFreccettaFrenataFrescoFrigoFrollinoFrondeFrugaleFruttaFucilataFucsiaFuggenteFulmineFulvoFumanteFumettoFumosoFuneFunzioneFuocoFurboFurgoneFuroreFusoFutileGabbianoGaffeGalateoGallinaGaloppoGamberoGammaGaranziaGarboGarofanoGarzoneGasdottoGasolioGastricoGattoGaudioGazeboGazzellaGecoGelatinaGelsoGemelloGemmatoGeneGenitoreGennaioGenotipoGergoGhepardoGhiaccioGhisaGialloGildaGineproGiocareGioielloGiornoGioveGiratoGironeGittataGiudizioGiuratoGiustoGlobuloGlutineGnomoGobbaGolfGomitoGommoneGonfioGonnaGovernoGracileGradoGraficoGrammoGrandeGrattareGravosoGraziaGrecaGreggeGrifoneGrigioGrinzaGrottaGruppoGuadagnoGuaioGuantoGuardareGufoGuidareIbernatoIconaIdenticoIdillioIdoloIdraIdricoIdrogenoIgieneIgnaroIgnoratoIlareIllesoIllogicoIlludereImballoImbevutoImboccoImbutoImmaneImmersoImmolatoImpaccoImpetoImpiegoImportoImprontaInalareInarcareInattivoIncantoIncendioInchinoIncisivoInclusoIncontroIncrocioIncuboIndagineIndiaIndoleIneditoInfattiInfilareInflittoIngaggioIngegnoIngleseIngordoIngrossoInnescoInodoreInoltrareInondatoInsanoInsettoInsiemeInsonniaInsulinaIntasatoInteroIntonacoIntuitoInumidireInvalidoInveceInvitoIperboleIpnoticoIpotesiIppicaIrideIrlandaIronicoIrrigatoIrrorareIsolatoIsotopoIstericoIstitutoIstriceItaliaIterareLabbroLabirintoLaccaLaceratoLacrimaLacunaLaddoveLagoLampoLancettaLanternaLardosoLargaLaringeLastraLatenzaLatinoLattugaLavagnaLavoroLegaleLeggeroLemboLentezzaLenzaLeoneLepreLesivoLessatoLestoLetteraleLevaLevigatoLiberoLidoLievitoLillaLimaturaLimitareLimpidoLineareLinguaLiquidoLiraLiricaLiscaLiteLitigioLivreaLocandaLodeLogicaLombareLondraLongevoLoquaceLorenzoLotoLotteriaLuceLucidatoLumacaLuminosoLungoLupoLuppoloLusingaLussoLuttoMacabroMacchinaMaceroMacinatoMadamaMagicoMagliaMagneteMagroMaiolicaMalafedeMalgradoMalintesoMalsanoMaltoMalumoreManaManciaMandorlaMangiareManifestoMannaroManovraMansardaMantideManubrioMappaMaratonaMarcireMarettaMarmoMarsupioMascheraMassaiaMastinoMaterassoMatricolaMattoneMaturoMazurcaMeandroMeccanicoMecenateMedesimoMeditareMegaMelassaMelisMelodiaMeningeMenoMensolaMercurioMerendaMerloMeschinoMeseMessereMestoloMetalloMetodoMettereMiagolareMicaMicelioMicheleMicroboMidolloMieleMiglioreMilanoMiliteMimosaMineraleMiniMinoreMirinoMirtilloMiscelaMissivaMistoMisurareMitezzaMitigareMitraMittenteMnemonicoModelloModificaModuloMoganoMogioMoleMolossoMonasteroMoncoMondinaMonetarioMonileMonotonoMonsoneMontatoMonvisoMoraMordereMorsicatoMostroMotivatoMotosegaMottoMovenzaMovimentoMozzoMuccaMucosaMuffaMughettoMugnaioMulattoMulinelloMultiploMummiaMuntoMuovereMuraleMusaMuscoloMusicaMutevoleMutoNababboNaftaNanometroNarcisoNariceNarratoNascereNastrareNaturaleNauticaNaviglioNebulosaNecrosiNegativoNegozioNemmenoNeofitaNerettoNervoNessunoNettunoNeutraleNeveNevroticoNicchiaNinfaNitidoNobileNocivoNodoNomeNominaNordicoNormaleNorvegeseNostranoNotareNotiziaNotturnoNovellaNucleoNullaNumeroNuovoNutrireNuvolaNuzialeOasiObbedireObbligoObeliscoOblioOboloObsoletoOccasioneOcchioOccidenteOccorrereOccultareOcraOculatoOdiernoOdorareOffertaOffrireOffuscatoOggettoOggiOgnunoOlandeseOlfattoOliatoOlivaOlogrammaOltreOmaggioOmbelicoOmbraOmegaOmissioneOndosoOnereOniceOnnivoroOnorevoleOntaOperatoOpinioneOppostoOracoloOrafoOrdineOrecchinoOreficeOrfanoOrganicoOrigineOrizzonteOrmaOrmeggioOrnativoOrologioOrrendoOrribileOrtensiaOrticaOrzataOrzoOsareOscurareOsmosiOspedaleOspiteOssaOssidareOstacoloOsteOtiteOtreOttagonoOttimoOttobreOvaleOvestOvinoOviparoOvocitoOvunqueOvviareOzioPacchettoPacePacificoPadellaPadronePaesePagaPaginaPalazzinaPalesarePallidoPaloPaludePandoroPannelloPaoloPaonazzoPapricaParabolaParcellaParerePargoloPariParlatoParolaPartireParvenzaParzialePassivoPasticcaPataccaPatologiaPattumePavonePeccatoPedalarePedonalePeggioPelosoPenarePendicePenisolaPennutoPenombraPensarePentolaPepePepitaPerbenePercorsoPerdonatoPerforarePergamenaPeriodoPermessoPernoPerplessoPersuasoPertugioPervasoPesatorePesistaPesoPestiferoPetaloPettinePetulantePezzoPiacerePiantaPiattinoPiccinoPicozzaPiegaPietraPifferoPigiamaPigolioPigroPilaPiliferoPillolaPilotaPimpantePinetaPinnaPinoloPioggiaPiomboPiramidePireticoPiritePirolisiPitonePizzicoPlaceboPlanarePlasmaPlatanoPlenarioPochezzaPoderosoPodismoPoesiaPoggiarePolentaPoligonoPollicePolmonitePolpettaPolsoPoltronaPolverePomicePomodoroPontePopolosoPorfidoPorosoPorporaPorrePortataPosaPositivoPossessoPostulatoPotassioPoterePranzoPrassiPraticaPreclusoPredicaPrefissoPregiatoPrelievoPremerePrenotarePreparatoPresenzaPretestoPrevalsoPrimaPrincipePrivatoProblemaProcuraProdurreProfumoProgettoProlungaPromessaPronomePropostaProrogaProtesoProvaPrudentePrugnaPruritoPsichePubblicoPudicaPugilatoPugnoPulcePulitoPulsantePuntarePupazzoPupillaPuroQuadroQualcosaQuasiQuerelaQuotaRaccoltoRaddoppioRadicaleRadunatoRafficaRagazzoRagioneRagnoRamarroRamingoRamoRandagioRantolareRapatoRapinaRappresoRasaturaRaschiatoRasenteRassegnaRastrelloRataRavvedutoRealeRecepireRecintoReclutaReconditoRecuperoRedditoRedimereRegalatoRegistroRegolaRegressoRelazioneRemareRemotoRennaReplicaReprimereReputareResaResidenteResponsoRestauroReteRetinaRetoricaRettificaRevocatoRiassuntoRibadireRibelleRibrezzoRicaricaRiccoRicevereRiciclatoRicordoRicredutoRidicoloRidurreRifasareRiflessoRiformaRifugioRigareRigettatoRighelloRilassatoRilevatoRimanereRimbalzoRimedioRimorchioRinascitaRincaroRinforzoRinnovoRinomatoRinsavitoRintoccoRinunciaRinvenireRiparatoRipetutoRipienoRiportareRipresaRipulireRisataRischioRiservaRisibileRisoRispettoRistoroRisultatoRisvoltoRitardoRitegnoRitmicoRitrovoRiunioneRivaRiversoRivincitaRivoltoRizomaRobaRoboticoRobustoRocciaRocoRodaggioRodereRoditoreRogitoRollioRomanticoRompereRonzioRosolareRospoRotanteRotondoRotulaRovescioRubizzoRubricaRugaRullinoRumineRumorosoRuoloRupeRussareRusticoSabatoSabbiareSabotatoSagomaSalassoSaldaturaSalgemmaSalivareSalmoneSaloneSaltareSalutoSalvoSapereSapidoSaporitoSaracenoSarcasmoSartoSassosoSatelliteSatiraSatolloSaturnoSavanaSavioSaziatoSbadiglioSbalzoSbancatoSbarraSbattereSbavareSbendareSbirciareSbloccatoSbocciatoSbrinareSbruffoneSbuffareScabrosoScadenzaScalaScambiareScandaloScapolaScarsoScatenareScavatoSceltoScenicoScettroSchedaSchienaSciarpaScienzaScindereScippoSciroppoScivoloSclerareScodellaScolpitoScompartoSconfortoScoprireScortaScossoneScozzeseScribaScrollareScrutinioScuderiaScultoreScuolaScuroScusareSdebitareSdoganareSeccaturaSecondoSedanoSeggiolaSegnalatoSegregatoSeguitoSelciatoSelettivoSellaSelvaggioSemaforoSembrareSemeSeminatoSempreSensoSentireSepoltoSequenzaSerataSerbatoSerenoSerioSerpenteSerraglioServireSestinaSetolaSettimanaSfaceloSfaldareSfamatoSfarzosoSfaticatoSferaSfidaSfilatoSfingeSfocatoSfoderareSfogoSfoltireSforzatoSfrattoSfruttatoSfuggitoSfumareSfusoSgabelloSgarbatoSgonfiareSgorbioSgrassatoSguardoSibiloSiccomeSierraSiglaSignoreSilenzioSillabaSimboloSimpaticoSimulatoSinfoniaSingoloSinistroSinoSintesiSinusoideSiparioSismaSistoleSituatoSlittaSlogaturaSlovenoSmarritoSmemoratoSmentitoSmeraldoSmilzoSmontareSmottatoSmussatoSnellireSnervatoSnodoSobbalzoSobrioSoccorsoSocialeSodaleSoffittoSognoSoldatoSolenneSolidoSollazzoSoloSolubileSolventeSomaticoSommaSondaSonettoSonniferoSopireSoppesoSopraSorgereSorpassoSorrisoSorsoSorteggioSorvolatoSospiroSostaSottileSpadaSpallaSpargereSpatolaSpaventoSpazzolaSpecieSpedireSpegnereSpelaturaSperanzaSpessoreSpettraleSpezzatoSpiaSpigolosoSpillatoSpinosoSpiraleSplendidoSportivoSposoSprangaSprecareSpronatoSpruzzoSpuntinoSquilloSradicareSrotolatoStabileStaccoStaffaStagnareStampatoStantioStarnutoStaseraStatutoSteloSteppaSterzoStilettoStimaStirpeStivaleStizzosoStonatoStoricoStrappoStregatoStriduloStrozzareStruttoStuccareStufoStupendoSubentroSuccosoSudoreSuggeritoSugoSultanoSuonareSuperboSupportoSurgelatoSurrogatoSussurroSuturaSvagareSvedeseSveglioSvelareSvenutoSveziaSviluppoSvistaSvizzeraSvoltaSvuotareTabaccoTabulatoTacciareTaciturnoTaleTalismanoTamponeTanninoTaraTardivoTargatoTariffaTarpareTartarugaTastoTatticoTavernaTavolataTazzaTecaTecnicoTelefonoTemerarioTempoTemutoTendoneTeneroTensioneTentacoloTeoremaTermeTerrazzoTerzettoTesiTesseratoTestatoTetroTettoiaTifareTigellaTimbroTintoTipicoTipografoTiraggioTiroTitanioTitoloTitubanteTizioTizzoneToccareTollerareToltoTombolaTomoTonfoTonsillaTopazioTopologiaToppaTorbaTornareTorroneTortoraToscanoTossireTostaturaTotanoTraboccoTracheaTrafilaTragediaTralcioTramontoTransitoTrapanoTrarreTraslocoTrattatoTraveTrecciaTremolioTrespoloTributoTrichecoTrifoglioTrilloTrinceaTrioTristezzaTrituratoTrivellaTrombaTronoTroppoTrottolaTrovareTruccatoTubaturaTuffatoTulipanoTumultoTunisiaTurbareTurchinoTutaTutelaUbicatoUccelloUccisoreUdireUditivoUffaUfficioUgualeUlisseUltimatoUmanoUmileUmorismoUncinettoUngereUnghereseUnicornoUnificatoUnisonoUnitarioUnteUovoUpupaUraganoUrgenzaUrloUsanzaUsatoUscitoUsignoloUsuraioUtensileUtilizzoUtopiaVacanteVaccinatoVagabondoVagliatoValangaValgoValicoVallettaValorosoValutareValvolaVampataVangareVanitosoVanoVantaggioVanveraVaporeVaranoVarcatoVarianteVascaVedettaVedovaVedutoVegetaleVeicoloVelcroVelinaVellutoVeloceVenatoVendemmiaVentoVeraceVerbaleVergognaVerificaVeroVerrucaVerticaleVescicaVessilloVestaleVeteranoVetrinaVetustoViandanteVibranteVicendaVichingoVicinanzaVidimareVigiliaVignetoVigoreVileVillanoViminiVincitoreViolaViperaVirgolaVirologoVirulentoViscosoVisioneVispoVissutoVisuraVitaVitelloVittimaVivandaVividoViziareVoceVogaVolatileVolereVolpeVoragineVulcanoZampognaZannaZappatoZatteraZavorraZefiroZelanteZeloZenzeroZerbinoZibettoZincoZirconeZittoZollaZoticoZuccheroZufoloZuluZuppa";
    var wordlist = null;
    function loadWords(lang) {
      if (wordlist != null) {
        return;
      }
      wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
      if (wordlist_1.Wordlist.check(lang) !== "0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620") {
        wordlist = null;
        throw new Error("BIP39 Wordlist for it (Italian) FAILED");
      }
    }
    var LangIt = (
      /** @class */
      function(_super) {
        __extends(LangIt2, _super);
        function LangIt2() {
          return _super.call(this, "it") || this;
        }
        LangIt2.prototype.getWord = function(index) {
          loadWords(this);
          return wordlist[index];
        };
        LangIt2.prototype.getWordIndex = function(word) {
          loadWords(this);
          return wordlist.indexOf(word);
        };
        return LangIt2;
      }(wordlist_1.Wordlist)
    );
    var langIt = new LangIt();
    exports.langIt = langIt;
    wordlist_1.Wordlist.register(langIt);
  }
});

// node_modules/@ethersproject/wordlists/lib/lang-zh.js
var require_lang_zh = __commonJS({
  "node_modules/@ethersproject/wordlists/lib/lang-zh.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.langZhTw = exports.langZhCn = void 0;
    var strings_1 = require_lib9();
    var wordlist_1 = require_wordlist();
    var data = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH";
    var deltaData = "FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL";
    var wordlist = {
      zh_cn: null,
      zh_tw: null
    };
    var Checks = {
      zh_cn: "0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1",
      zh_tw: "0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d"
    };
    var codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var style = "~!@#$%^&*_-=[]{}|;:,.()<>?";
    function loadWords(lang) {
      if (wordlist[lang.locale] !== null) {
        return;
      }
      wordlist[lang.locale] = [];
      var deltaOffset = 0;
      for (var i = 0; i < 2048; i++) {
        var s = style.indexOf(data[i * 3]);
        var bytes = [
          228 + (s >> 2),
          128 + codes.indexOf(data[i * 3 + 1]),
          128 + codes.indexOf(data[i * 3 + 2])
        ];
        if (lang.locale === "zh_tw") {
          var common = s % 4;
          for (var i_1 = common; i_1 < 3; i_1++) {
            bytes[i_1] = codes.indexOf(deltaData[deltaOffset++]) + (i_1 == 0 ? 228 : 128);
          }
        }
        wordlist[lang.locale].push((0, strings_1.toUtf8String)(bytes));
      }
      if (wordlist_1.Wordlist.check(lang) !== Checks[lang.locale]) {
        wordlist[lang.locale] = null;
        throw new Error("BIP39 Wordlist for " + lang.locale + " (Chinese) FAILED");
      }
    }
    var LangZh = (
      /** @class */
      function(_super) {
        __extends(LangZh2, _super);
        function LangZh2(country) {
          return _super.call(this, "zh_" + country) || this;
        }
        LangZh2.prototype.getWord = function(index) {
          loadWords(this);
          return wordlist[this.locale][index];
        };
        LangZh2.prototype.getWordIndex = function(word) {
          loadWords(this);
          return wordlist[this.locale].indexOf(word);
        };
        LangZh2.prototype.split = function(mnemonic) {
          mnemonic = mnemonic.replace(/(?:\u3000| )+/g, "");
          return mnemonic.split("");
        };
        return LangZh2;
      }(wordlist_1.Wordlist)
    );
    var langZhCn = new LangZh("cn");
    exports.langZhCn = langZhCn;
    wordlist_1.Wordlist.register(langZhCn);
    wordlist_1.Wordlist.register(langZhCn, "zh");
    var langZhTw = new LangZh("tw");
    exports.langZhTw = langZhTw;
    wordlist_1.Wordlist.register(langZhTw);
  }
});

// node_modules/@ethersproject/wordlists/lib/wordlists.js
var require_wordlists = __commonJS({
  "node_modules/@ethersproject/wordlists/lib/wordlists.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wordlists = void 0;
    var lang_cz_1 = require_lang_cz();
    var lang_en_1 = require_lang_en();
    var lang_es_1 = require_lang_es();
    var lang_fr_1 = require_lang_fr();
    var lang_ja_1 = require_lang_ja();
    var lang_ko_1 = require_lang_ko();
    var lang_it_1 = require_lang_it();
    var lang_zh_1 = require_lang_zh();
    exports.wordlists = {
      cz: lang_cz_1.langCz,
      en: lang_en_1.langEn,
      es: lang_es_1.langEs,
      fr: lang_fr_1.langFr,
      it: lang_it_1.langIt,
      ja: lang_ja_1.langJa,
      ko: lang_ko_1.langKo,
      zh: lang_zh_1.langZhCn,
      zh_cn: lang_zh_1.langZhCn,
      zh_tw: lang_zh_1.langZhTw
    };
  }
});

// node_modules/@ethersproject/wordlists/lib/index.js
var require_lib22 = __commonJS({
  "node_modules/@ethersproject/wordlists/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wordlists = exports.Wordlist = exports.logger = void 0;
    var wordlist_1 = require_wordlist();
    Object.defineProperty(exports, "logger", { enumerable: true, get: function() {
      return wordlist_1.logger;
    } });
    Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function() {
      return wordlist_1.Wordlist;
    } });
    var wordlists_1 = require_wordlists();
    Object.defineProperty(exports, "wordlists", { enumerable: true, get: function() {
      return wordlists_1.wordlists;
    } });
  }
});

// node_modules/@ethersproject/hdnode/lib/_version.js
var require_version17 = __commonJS({
  "node_modules/@ethersproject/hdnode/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "hdnode/5.7.0";
  }
});

// node_modules/@ethersproject/hdnode/lib/index.js
var require_lib23 = __commonJS({
  "node_modules/@ethersproject/hdnode/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAccountPath = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.mnemonicToSeed = exports.HDNode = exports.defaultPath = void 0;
    var basex_1 = require_lib19();
    var bytes_1 = require_lib2();
    var bignumber_1 = require_lib3();
    var strings_1 = require_lib9();
    var pbkdf2_1 = require_lib21();
    var properties_1 = require_lib4();
    var signing_key_1 = require_lib16();
    var sha2_1 = require_lib20();
    var transactions_1 = require_lib17();
    var wordlists_1 = require_lib22();
    var logger_1 = require_lib();
    var _version_1 = require_version17();
    var logger = new logger_1.Logger(_version_1.version);
    var N = bignumber_1.BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var MasterSecret = (0, strings_1.toUtf8Bytes)("Bitcoin seed");
    var HardenedBit = 2147483648;
    function getUpperMask(bits) {
      return (1 << bits) - 1 << 8 - bits;
    }
    function getLowerMask(bits) {
      return (1 << bits) - 1;
    }
    function bytes32(value) {
      return (0, bytes_1.hexZeroPad)((0, bytes_1.hexlify)(value), 32);
    }
    function base58check(data) {
      return basex_1.Base58.encode((0, bytes_1.concat)([data, (0, bytes_1.hexDataSlice)((0, sha2_1.sha256)((0, sha2_1.sha256)(data)), 0, 4)]));
    }
    function getWordlist(wordlist) {
      if (wordlist == null) {
        return wordlists_1.wordlists["en"];
      }
      if (typeof wordlist === "string") {
        var words = wordlists_1.wordlists[wordlist];
        if (words == null) {
          logger.throwArgumentError("unknown locale", "wordlist", wordlist);
        }
        return words;
      }
      return wordlist;
    }
    var _constructorGuard = {};
    exports.defaultPath = "m/44'/60'/0'/0/0";
    var HDNode = (
      /** @class */
      function() {
        function HDNode2(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
          if (constructorGuard !== _constructorGuard) {
            throw new Error("HDNode constructor cannot be called directly");
          }
          if (privateKey) {
            var signingKey = new signing_key_1.SigningKey(privateKey);
            (0, properties_1.defineReadOnly)(this, "privateKey", signingKey.privateKey);
            (0, properties_1.defineReadOnly)(this, "publicKey", signingKey.compressedPublicKey);
          } else {
            (0, properties_1.defineReadOnly)(this, "privateKey", null);
            (0, properties_1.defineReadOnly)(this, "publicKey", (0, bytes_1.hexlify)(publicKey));
          }
          (0, properties_1.defineReadOnly)(this, "parentFingerprint", parentFingerprint);
          (0, properties_1.defineReadOnly)(this, "fingerprint", (0, bytes_1.hexDataSlice)((0, sha2_1.ripemd160)((0, sha2_1.sha256)(this.publicKey)), 0, 4));
          (0, properties_1.defineReadOnly)(this, "address", (0, transactions_1.computeAddress)(this.publicKey));
          (0, properties_1.defineReadOnly)(this, "chainCode", chainCode);
          (0, properties_1.defineReadOnly)(this, "index", index);
          (0, properties_1.defineReadOnly)(this, "depth", depth);
          if (mnemonicOrPath == null) {
            (0, properties_1.defineReadOnly)(this, "mnemonic", null);
            (0, properties_1.defineReadOnly)(this, "path", null);
          } else if (typeof mnemonicOrPath === "string") {
            (0, properties_1.defineReadOnly)(this, "mnemonic", null);
            (0, properties_1.defineReadOnly)(this, "path", mnemonicOrPath);
          } else {
            (0, properties_1.defineReadOnly)(this, "mnemonic", mnemonicOrPath);
            (0, properties_1.defineReadOnly)(this, "path", mnemonicOrPath.path);
          }
        }
        Object.defineProperty(HDNode2.prototype, "extendedKey", {
          get: function() {
            if (this.depth >= 256) {
              throw new Error("Depth too large!");
            }
            return base58check((0, bytes_1.concat)([
              this.privateKey != null ? "0x0488ADE4" : "0x0488B21E",
              (0, bytes_1.hexlify)(this.depth),
              this.parentFingerprint,
              (0, bytes_1.hexZeroPad)((0, bytes_1.hexlify)(this.index), 4),
              this.chainCode,
              this.privateKey != null ? (0, bytes_1.concat)(["0x00", this.privateKey]) : this.publicKey
            ]));
          },
          enumerable: false,
          configurable: true
        });
        HDNode2.prototype.neuter = function() {
          return new HDNode2(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
        };
        HDNode2.prototype._derive = function(index) {
          if (index > 4294967295) {
            throw new Error("invalid index - " + String(index));
          }
          var path = this.path;
          if (path) {
            path += "/" + (index & ~HardenedBit);
          }
          var data = new Uint8Array(37);
          if (index & HardenedBit) {
            if (!this.privateKey) {
              throw new Error("cannot derive child of neutered node");
            }
            data.set((0, bytes_1.arrayify)(this.privateKey), 1);
            if (path) {
              path += "'";
            }
          } else {
            data.set((0, bytes_1.arrayify)(this.publicKey));
          }
          for (var i = 24; i >= 0; i -= 8) {
            data[33 + (i >> 3)] = index >> 24 - i & 255;
          }
          var I = (0, bytes_1.arrayify)((0, sha2_1.computeHmac)(sha2_1.SupportedAlgorithm.sha512, this.chainCode, data));
          var IL = I.slice(0, 32);
          var IR = I.slice(32);
          var ki = null;
          var Ki = null;
          if (this.privateKey) {
            ki = bytes32(bignumber_1.BigNumber.from(IL).add(this.privateKey).mod(N));
          } else {
            var ek = new signing_key_1.SigningKey((0, bytes_1.hexlify)(IL));
            Ki = ek._addPoint(this.publicKey);
          }
          var mnemonicOrPath = path;
          var srcMnemonic = this.mnemonic;
          if (srcMnemonic) {
            mnemonicOrPath = Object.freeze({
              phrase: srcMnemonic.phrase,
              path,
              locale: srcMnemonic.locale || "en"
            });
          }
          return new HDNode2(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
        };
        HDNode2.prototype.derivePath = function(path) {
          var components = path.split("/");
          if (components.length === 0 || components[0] === "m" && this.depth !== 0) {
            throw new Error("invalid path - " + path);
          }
          if (components[0] === "m") {
            components.shift();
          }
          var result = this;
          for (var i = 0; i < components.length; i++) {
            var component = components[i];
            if (component.match(/^[0-9]+'$/)) {
              var index = parseInt(component.substring(0, component.length - 1));
              if (index >= HardenedBit) {
                throw new Error("invalid path index - " + component);
              }
              result = result._derive(HardenedBit + index);
            } else if (component.match(/^[0-9]+$/)) {
              var index = parseInt(component);
              if (index >= HardenedBit) {
                throw new Error("invalid path index - " + component);
              }
              result = result._derive(index);
            } else {
              throw new Error("invalid path component - " + component);
            }
          }
          return result;
        };
        HDNode2._fromSeed = function(seed, mnemonic) {
          var seedArray = (0, bytes_1.arrayify)(seed);
          if (seedArray.length < 16 || seedArray.length > 64) {
            throw new Error("invalid seed");
          }
          var I = (0, bytes_1.arrayify)((0, sha2_1.computeHmac)(sha2_1.SupportedAlgorithm.sha512, MasterSecret, seedArray));
          return new HDNode2(_constructorGuard, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
        };
        HDNode2.fromMnemonic = function(mnemonic, password, wordlist) {
          wordlist = getWordlist(wordlist);
          mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
          return HDNode2._fromSeed(mnemonicToSeed(mnemonic, password), {
            phrase: mnemonic,
            path: "m",
            locale: wordlist.locale
          });
        };
        HDNode2.fromSeed = function(seed) {
          return HDNode2._fromSeed(seed, null);
        };
        HDNode2.fromExtendedKey = function(extendedKey) {
          var bytes = basex_1.Base58.decode(extendedKey);
          if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
            logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
          }
          var depth = bytes[4];
          var parentFingerprint = (0, bytes_1.hexlify)(bytes.slice(5, 9));
          var index = parseInt((0, bytes_1.hexlify)(bytes.slice(9, 13)).substring(2), 16);
          var chainCode = (0, bytes_1.hexlify)(bytes.slice(13, 45));
          var key = bytes.slice(45, 78);
          switch ((0, bytes_1.hexlify)(bytes.slice(0, 4))) {
            case "0x0488b21e":
            case "0x043587cf":
              return new HDNode2(_constructorGuard, null, (0, bytes_1.hexlify)(key), parentFingerprint, chainCode, index, depth, null);
            case "0x0488ade4":
            case "0x04358394 ":
              if (key[0] !== 0) {
                break;
              }
              return new HDNode2(_constructorGuard, (0, bytes_1.hexlify)(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
          }
          return logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
        };
        return HDNode2;
      }()
    );
    exports.HDNode = HDNode;
    function mnemonicToSeed(mnemonic, password) {
      if (!password) {
        password = "";
      }
      var salt = (0, strings_1.toUtf8Bytes)("mnemonic" + password, strings_1.UnicodeNormalizationForm.NFKD);
      return (0, pbkdf2_1.pbkdf2)((0, strings_1.toUtf8Bytes)(mnemonic, strings_1.UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
    }
    exports.mnemonicToSeed = mnemonicToSeed;
    function mnemonicToEntropy(mnemonic, wordlist) {
      wordlist = getWordlist(wordlist);
      logger.checkNormalize();
      var words = wordlist.split(mnemonic);
      if (words.length % 3 !== 0) {
        throw new Error("invalid mnemonic");
      }
      var entropy = (0, bytes_1.arrayify)(new Uint8Array(Math.ceil(11 * words.length / 8)));
      var offset = 0;
      for (var i = 0; i < words.length; i++) {
        var index = wordlist.getWordIndex(words[i].normalize("NFKD"));
        if (index === -1) {
          throw new Error("invalid mnemonic");
        }
        for (var bit = 0; bit < 11; bit++) {
          if (index & 1 << 10 - bit) {
            entropy[offset >> 3] |= 1 << 7 - offset % 8;
          }
          offset++;
        }
      }
      var entropyBits = 32 * words.length / 3;
      var checksumBits = words.length / 3;
      var checksumMask = getUpperMask(checksumBits);
      var checksum = (0, bytes_1.arrayify)((0, sha2_1.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
      if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
        throw new Error("invalid checksum");
      }
      return (0, bytes_1.hexlify)(entropy.slice(0, entropyBits / 8));
    }
    exports.mnemonicToEntropy = mnemonicToEntropy;
    function entropyToMnemonic(entropy, wordlist) {
      wordlist = getWordlist(wordlist);
      entropy = (0, bytes_1.arrayify)(entropy);
      if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
        throw new Error("invalid entropy");
      }
      var indices = [0];
      var remainingBits = 11;
      for (var i = 0; i < entropy.length; i++) {
        if (remainingBits > 8) {
          indices[indices.length - 1] <<= 8;
          indices[indices.length - 1] |= entropy[i];
          remainingBits -= 8;
        } else {
          indices[indices.length - 1] <<= remainingBits;
          indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
          indices.push(entropy[i] & getLowerMask(8 - remainingBits));
          remainingBits += 3;
        }
      }
      var checksumBits = entropy.length / 4;
      var checksum = (0, bytes_1.arrayify)((0, sha2_1.sha256)(entropy))[0] & getUpperMask(checksumBits);
      indices[indices.length - 1] <<= checksumBits;
      indices[indices.length - 1] |= checksum >> 8 - checksumBits;
      return wordlist.join(indices.map(function(index) {
        return wordlist.getWord(index);
      }));
    }
    exports.entropyToMnemonic = entropyToMnemonic;
    function isValidMnemonic(mnemonic, wordlist) {
      try {
        mnemonicToEntropy(mnemonic, wordlist);
        return true;
      } catch (error) {
      }
      return false;
    }
    exports.isValidMnemonic = isValidMnemonic;
    function getAccountPath(index) {
      if (typeof index !== "number" || index < 0 || index >= HardenedBit || index % 1) {
        logger.throwArgumentError("invalid account index", "index", index);
      }
      return "m/44'/60'/" + index + "'/0/0";
    }
    exports.getAccountPath = getAccountPath;
  }
});

// node_modules/@ethersproject/random/lib/_version.js
var require_version18 = __commonJS({
  "node_modules/@ethersproject/random/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "random/5.7.0";
  }
});

// node_modules/@ethersproject/random/lib/browser-random.js
var require_browser_random = __commonJS({
  "node_modules/@ethersproject/random/lib/browser-random.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = void 0;
    var bytes_1 = require_lib2();
    var logger_1 = require_lib();
    var _version_1 = require_version18();
    var logger = new logger_1.Logger(_version_1.version);
    function getGlobal() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    }
    var anyGlobal = getGlobal();
    var crypto = anyGlobal.crypto || anyGlobal.msCrypto;
    if (!crypto || !crypto.getRandomValues) {
      logger.warn("WARNING: Missing strong random number source");
      crypto = {
        getRandomValues: function(buffer) {
          return logger.throwError("no secure random source avaialble", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "crypto.getRandomValues"
          });
        }
      };
    }
    function randomBytes(length) {
      if (length <= 0 || length > 1024 || length % 1 || length != length) {
        logger.throwArgumentError("invalid length", "length", length);
      }
      var result = new Uint8Array(length);
      crypto.getRandomValues(result);
      return (0, bytes_1.arrayify)(result);
    }
    exports.randomBytes = randomBytes;
  }
});

// node_modules/@ethersproject/random/lib/shuffle.js
var require_shuffle = __commonJS({
  "node_modules/@ethersproject/random/lib/shuffle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shuffled = void 0;
    function shuffled(array) {
      array = array.slice();
      for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var tmp = array[i];
        array[i] = array[j];
        array[j] = tmp;
      }
      return array;
    }
    exports.shuffled = shuffled;
  }
});

// node_modules/@ethersproject/random/lib/index.js
var require_lib24 = __commonJS({
  "node_modules/@ethersproject/random/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shuffled = exports.randomBytes = void 0;
    var random_1 = require_browser_random();
    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function() {
      return random_1.randomBytes;
    } });
    var shuffle_1 = require_shuffle();
    Object.defineProperty(exports, "shuffled", { enumerable: true, get: function() {
      return shuffle_1.shuffled;
    } });
  }
});

// node_modules/aes-js/index.js
var require_aes_js = __commonJS({
  "node_modules/aes-js/index.js"(exports, module) {
    "use strict";
    (function(root) {
      function checkInt(value) {
        return parseInt(value) === value;
      }
      function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) {
          return false;
        }
        for (var i = 0; i < arrayish.length; i++) {
          if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
            return false;
          }
        }
        return true;
      }
      function coerceArray(arg, copy) {
        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === "Uint8Array") {
          if (copy) {
            if (arg.slice) {
              arg = arg.slice();
            } else {
              arg = Array.prototype.slice.call(arg);
            }
          }
          return arg;
        }
        if (Array.isArray(arg)) {
          if (!checkInts(arg)) {
            throw new Error("Array contains invalid value: " + arg);
          }
          return new Uint8Array(arg);
        }
        if (checkInt(arg.length) && checkInts(arg)) {
          return new Uint8Array(arg);
        }
        throw new Error("unsupported array-like object");
      }
      function createArray(length) {
        return new Uint8Array(length);
      }
      function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
          if (sourceArray.slice) {
            sourceArray = sourceArray.slice(sourceStart, sourceEnd);
          } else {
            sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
          }
        }
        targetArray.set(sourceArray, targetStart);
      }
      var convertUtf8 = function() {
        function toBytes(text) {
          var result = [], i = 0;
          text = encodeURI(text);
          while (i < text.length) {
            var c = text.charCodeAt(i++);
            if (c === 37) {
              result.push(parseInt(text.substr(i, 2), 16));
              i += 2;
            } else {
              result.push(c);
            }
          }
          return coerceArray(result);
        }
        function fromBytes(bytes) {
          var result = [], i = 0;
          while (i < bytes.length) {
            var c = bytes[i];
            if (c < 128) {
              result.push(String.fromCharCode(c));
              i++;
            } else if (c > 191 && c < 224) {
              result.push(String.fromCharCode((c & 31) << 6 | bytes[i + 1] & 63));
              i += 2;
            } else {
              result.push(String.fromCharCode((c & 15) << 12 | (bytes[i + 1] & 63) << 6 | bytes[i + 2] & 63));
              i += 3;
            }
          }
          return result.join("");
        }
        return {
          toBytes,
          fromBytes
        };
      }();
      var convertHex = function() {
        function toBytes(text) {
          var result = [];
          for (var i = 0; i < text.length; i += 2) {
            result.push(parseInt(text.substr(i, 2), 16));
          }
          return result;
        }
        var Hex = "0123456789abcdef";
        function fromBytes(bytes) {
          var result = [];
          for (var i = 0; i < bytes.length; i++) {
            var v = bytes[i];
            result.push(Hex[(v & 240) >> 4] + Hex[v & 15]);
          }
          return result.join("");
        }
        return {
          toBytes,
          fromBytes
        };
      }();
      var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
      var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
      var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
      var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
      var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
      var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
      var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
      var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
      var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
      var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
      var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
      var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
      var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
      var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
      var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
      var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
      function convertToInt32(bytes) {
        var result = [];
        for (var i = 0; i < bytes.length; i += 4) {
          result.push(
            bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]
          );
        }
        return result;
      }
      var AES = function(key) {
        if (!(this instanceof AES)) {
          throw Error("AES must be instanitated with `new`");
        }
        Object.defineProperty(this, "key", {
          value: coerceArray(key, true)
        });
        this._prepare();
      };
      AES.prototype._prepare = function() {
        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
          throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
        }
        this._Ke = [];
        this._Kd = [];
        for (var i = 0; i <= rounds; i++) {
          this._Ke.push([0, 0, 0, 0]);
          this._Kd.push([0, 0, 0, 0]);
        }
        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;
        var tk = convertToInt32(this.key);
        var index;
        for (var i = 0; i < KC; i++) {
          index = i >> 2;
          this._Ke[index][i % 4] = tk[i];
          this._Kd[rounds - index][i % 4] = tk[i];
        }
        var rconpointer = 0;
        var t = KC, tt;
        while (t < roundKeyCount) {
          tt = tk[KC - 1];
          tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (KC != 8) {
            for (var i = 1; i < KC; i++) {
              tk[i] ^= tk[i - 1];
            }
          } else {
            for (var i = 1; i < KC / 2; i++) {
              tk[i] ^= tk[i - 1];
            }
            tt = tk[KC / 2 - 1];
            tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
            for (var i = KC / 2 + 1; i < KC; i++) {
              tk[i] ^= tk[i - 1];
            }
          }
          var i = 0, r, c;
          while (i < KC && t < roundKeyCount) {
            r = t >> 2;
            c = t % 4;
            this._Ke[r][c] = tk[i];
            this._Kd[rounds - r][c] = tk[i++];
            t++;
          }
        }
        for (var r = 1; r < rounds; r++) {
          for (var c = 0; c < 4; c++) {
            tt = this._Kd[r][c];
            this._Kd[r][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
          }
        }
      };
      AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
          throw new Error("invalid plaintext size (must be 16 bytes)");
        }
        var rounds = this._Ke.length - 1;
        var a = [0, 0, 0, 0];
        var t = convertToInt32(plaintext);
        for (var i = 0; i < 4; i++) {
          t[i] ^= this._Ke[0][i];
        }
        for (var r = 1; r < rounds; r++) {
          for (var i = 0; i < 4; i++) {
            a[i] = T1[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ this._Ke[r][i];
          }
          t = a.slice();
        }
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
          tt = this._Ke[rounds][i];
          result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
          throw new Error("invalid ciphertext size (must be 16 bytes)");
        }
        var rounds = this._Kd.length - 1;
        var a = [0, 0, 0, 0];
        var t = convertToInt32(ciphertext);
        for (var i = 0; i < 4; i++) {
          t[i] ^= this._Kd[0][i];
        }
        for (var r = 1; r < rounds; r++) {
          for (var i = 0; i < 4; i++) {
            a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ this._Kd[r][i];
          }
          t = a.slice();
        }
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
          tt = this._Kd[rounds][i];
          result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      var ModeOfOperationECB = function(key) {
        if (!(this instanceof ModeOfOperationECB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Electronic Code Block";
        this.name = "ecb";
        this._aes = new AES(key);
      };
      ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i = 0; i < plaintext.length; i += 16) {
          copyArray(plaintext, block, 0, i, i + 16);
          block = this._aes.encrypt(block);
          copyArray(block, ciphertext, i);
        }
        return ciphertext;
      };
      ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i = 0; i < ciphertext.length; i += 16) {
          copyArray(ciphertext, block, 0, i, i + 16);
          block = this._aes.decrypt(block);
          copyArray(block, plaintext, i);
        }
        return plaintext;
      };
      var ModeOfOperationCBC = function(key, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Block Chaining";
        this.name = "cbc";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastCipherblock = coerceArray(iv, true);
        this._aes = new AES(key);
      };
      ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i = 0; i < plaintext.length; i += 16) {
          copyArray(plaintext, block, 0, i, i + 16);
          for (var j = 0; j < 16; j++) {
            block[j] ^= this._lastCipherblock[j];
          }
          this._lastCipherblock = this._aes.encrypt(block);
          copyArray(this._lastCipherblock, ciphertext, i);
        }
        return ciphertext;
      };
      ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i = 0; i < ciphertext.length; i += 16) {
          copyArray(ciphertext, block, 0, i, i + 16);
          block = this._aes.decrypt(block);
          for (var j = 0; j < 16; j++) {
            plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
          }
          copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
        }
        return plaintext;
      };
      var ModeOfOperationCFB = function(key, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Feedback";
        this.name = "cfb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 size)");
        }
        if (!segmentSize) {
          segmentSize = 1;
        }
        this.segmentSize = segmentSize;
        this._shiftRegister = coerceArray(iv, true);
        this._aes = new AES(key);
      };
      ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if (plaintext.length % this.segmentSize != 0) {
          throw new Error("invalid plaintext size (must be segmentSize bytes)");
        }
        var encrypted = coerceArray(plaintext, true);
        var xorSegment;
        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j = 0; j < this.segmentSize; j++) {
            encrypted[i + j] ^= xorSegment[j];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return encrypted;
      };
      ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length % this.segmentSize != 0) {
          throw new Error("invalid ciphertext size (must be segmentSize bytes)");
        }
        var plaintext = coerceArray(ciphertext, true);
        var xorSegment;
        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j = 0; j < this.segmentSize; j++) {
            plaintext[i + j] ^= xorSegment[j];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return plaintext;
      };
      var ModeOfOperationOFB = function(key, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Output Feedback";
        this.name = "ofb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;
        this._aes = new AES(key);
      };
      ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i = 0; i < encrypted.length; i++) {
          if (this._lastPrecipherIndex === 16) {
            this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
            this._lastPrecipherIndex = 0;
          }
          encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }
        return encrypted;
      };
      ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
      var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
          throw Error("Counter must be instanitated with `new`");
        }
        if (initialValue !== 0 && !initialValue) {
          initialValue = 1;
        }
        if (typeof initialValue === "number") {
          this._counter = createArray(16);
          this.setValue(initialValue);
        } else {
          this.setBytes(initialValue);
        }
      };
      Counter.prototype.setValue = function(value) {
        if (typeof value !== "number" || parseInt(value) != value) {
          throw new Error("invalid counter value (must be an integer)");
        }
        for (var index = 15; index >= 0; --index) {
          this._counter[index] = value % 256;
          value = value >> 8;
        }
      };
      Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);
        if (bytes.length != 16) {
          throw new Error("invalid counter bytes size (must be 16 bytes)");
        }
        this._counter = bytes;
      };
      Counter.prototype.increment = function() {
        for (var i = 15; i >= 0; i--) {
          if (this._counter[i] === 255) {
            this._counter[i] = 0;
          } else {
            this._counter[i]++;
            break;
          }
        }
      };
      var ModeOfOperationCTR = function(key, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Counter";
        this.name = "ctr";
        if (!(counter instanceof Counter)) {
          counter = new Counter(counter);
        }
        this._counter = counter;
        this._remainingCounter = null;
        this._remainingCounterIndex = 16;
        this._aes = new AES(key);
      };
      ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i = 0; i < encrypted.length; i++) {
          if (this._remainingCounterIndex === 16) {
            this._remainingCounter = this._aes.encrypt(this._counter._counter);
            this._remainingCounterIndex = 0;
            this._counter.increment();
          }
          encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }
        return encrypted;
      };
      ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
      function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - data.length % 16;
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for (var i = data.length; i < result.length; i++) {
          result[i] = padder;
        }
        return result;
      }
      function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) {
          throw new Error("PKCS#7 invalid length");
        }
        var padder = data[data.length - 1];
        if (padder > 16) {
          throw new Error("PKCS#7 padding byte out of range");
        }
        var length = data.length - padder;
        for (var i = 0; i < padder; i++) {
          if (data[length + i] !== padder) {
            throw new Error("PKCS#7 invalid padding byte");
          }
        }
        var result = createArray(length);
        copyArray(data, result, 0, 0, length);
        return result;
      }
      var aesjs = {
        AES,
        Counter,
        ModeOfOperation: {
          ecb: ModeOfOperationECB,
          cbc: ModeOfOperationCBC,
          cfb: ModeOfOperationCFB,
          ofb: ModeOfOperationOFB,
          ctr: ModeOfOperationCTR
        },
        utils: {
          hex: convertHex,
          utf8: convertUtf8
        },
        padding: {
          pkcs7: {
            pad: pkcs7pad,
            strip: pkcs7strip
          }
        },
        _arrayTest: {
          coerceArray,
          createArray,
          copyArray
        }
      };
      if (typeof exports !== "undefined") {
        module.exports = aesjs;
      } else if (typeof define === "function" && define.amd) {
        define(aesjs);
      } else {
        if (root.aesjs) {
          aesjs._aesjs = root.aesjs;
        }
        root.aesjs = aesjs;
      }
    })(exports);
  }
});

// node_modules/@ethersproject/json-wallets/lib/_version.js
var require_version19 = __commonJS({
  "node_modules/@ethersproject/json-wallets/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "json-wallets/5.7.0";
  }
});

// node_modules/@ethersproject/json-wallets/lib/utils.js
var require_utils4 = __commonJS({
  "node_modules/@ethersproject/json-wallets/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uuidV4 = exports.searchPath = exports.getPassword = exports.zpad = exports.looseArrayify = void 0;
    var bytes_1 = require_lib2();
    var strings_1 = require_lib9();
    function looseArrayify(hexString) {
      if (typeof hexString === "string" && hexString.substring(0, 2) !== "0x") {
        hexString = "0x" + hexString;
      }
      return (0, bytes_1.arrayify)(hexString);
    }
    exports.looseArrayify = looseArrayify;
    function zpad(value, length) {
      value = String(value);
      while (value.length < length) {
        value = "0" + value;
      }
      return value;
    }
    exports.zpad = zpad;
    function getPassword(password) {
      if (typeof password === "string") {
        return (0, strings_1.toUtf8Bytes)(password, strings_1.UnicodeNormalizationForm.NFKC);
      }
      return (0, bytes_1.arrayify)(password);
    }
    exports.getPassword = getPassword;
    function searchPath(object, path) {
      var currentChild = object;
      var comps = path.toLowerCase().split("/");
      for (var i = 0; i < comps.length; i++) {
        var matchingChild = null;
        for (var key in currentChild) {
          if (key.toLowerCase() === comps[i]) {
            matchingChild = currentChild[key];
            break;
          }
        }
        if (matchingChild === null) {
          return null;
        }
        currentChild = matchingChild;
      }
      return currentChild;
    }
    exports.searchPath = searchPath;
    function uuidV4(randomBytes) {
      var bytes = (0, bytes_1.arrayify)(randomBytes);
      bytes[6] = bytes[6] & 15 | 64;
      bytes[8] = bytes[8] & 63 | 128;
      var value = (0, bytes_1.hexlify)(bytes);
      return [
        value.substring(2, 10),
        value.substring(10, 14),
        value.substring(14, 18),
        value.substring(18, 22),
        value.substring(22, 34)
      ].join("-");
    }
    exports.uuidV4 = uuidV4;
  }
});

// node_modules/@ethersproject/json-wallets/lib/crowdsale.js
var require_crowdsale = __commonJS({
  "node_modules/@ethersproject/json-wallets/lib/crowdsale.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decrypt = exports.CrowdsaleAccount = void 0;
    var aes_js_1 = __importDefault(require_aes_js());
    var address_1 = require_lib7();
    var bytes_1 = require_lib2();
    var keccak256_1 = require_lib5();
    var pbkdf2_1 = require_lib21();
    var strings_1 = require_lib9();
    var properties_1 = require_lib4();
    var logger_1 = require_lib();
    var _version_1 = require_version19();
    var logger = new logger_1.Logger(_version_1.version);
    var utils_1 = require_utils4();
    var CrowdsaleAccount = (
      /** @class */
      function(_super) {
        __extends(CrowdsaleAccount2, _super);
        function CrowdsaleAccount2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        CrowdsaleAccount2.prototype.isCrowdsaleAccount = function(value) {
          return !!(value && value._isCrowdsaleAccount);
        };
        return CrowdsaleAccount2;
      }(properties_1.Description)
    );
    exports.CrowdsaleAccount = CrowdsaleAccount;
    function decrypt(json, password) {
      var data = JSON.parse(json);
      password = (0, utils_1.getPassword)(password);
      var ethaddr = (0, address_1.getAddress)((0, utils_1.searchPath)(data, "ethaddr"));
      var encseed = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "encseed"));
      if (!encseed || encseed.length % 16 !== 0) {
        logger.throwArgumentError("invalid encseed", "json", json);
      }
      var key = (0, bytes_1.arrayify)((0, pbkdf2_1.pbkdf2)(password, password, 2e3, 32, "sha256")).slice(0, 16);
      var iv = encseed.slice(0, 16);
      var encryptedSeed = encseed.slice(16);
      var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);
      var seed = aes_js_1.default.padding.pkcs7.strip((0, bytes_1.arrayify)(aesCbc.decrypt(encryptedSeed)));
      var seedHex = "";
      for (var i = 0; i < seed.length; i++) {
        seedHex += String.fromCharCode(seed[i]);
      }
      var seedHexBytes = (0, strings_1.toUtf8Bytes)(seedHex);
      var privateKey = (0, keccak256_1.keccak256)(seedHexBytes);
      return new CrowdsaleAccount({
        _isCrowdsaleAccount: true,
        address: ethaddr,
        privateKey
      });
    }
    exports.decrypt = decrypt;
  }
});

// node_modules/@ethersproject/json-wallets/lib/inspect.js
var require_inspect = __commonJS({
  "node_modules/@ethersproject/json-wallets/lib/inspect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getJsonWalletAddress = exports.isKeystoreWallet = exports.isCrowdsaleWallet = void 0;
    var address_1 = require_lib7();
    function isCrowdsaleWallet(json) {
      var data = null;
      try {
        data = JSON.parse(json);
      } catch (error) {
        return false;
      }
      return data.encseed && data.ethaddr;
    }
    exports.isCrowdsaleWallet = isCrowdsaleWallet;
    function isKeystoreWallet(json) {
      var data = null;
      try {
        data = JSON.parse(json);
      } catch (error) {
        return false;
      }
      if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
        return false;
      }
      return true;
    }
    exports.isKeystoreWallet = isKeystoreWallet;
    function getJsonWalletAddress(json) {
      if (isCrowdsaleWallet(json)) {
        try {
          return (0, address_1.getAddress)(JSON.parse(json).ethaddr);
        } catch (error) {
          return null;
        }
      }
      if (isKeystoreWallet(json)) {
        try {
          return (0, address_1.getAddress)(JSON.parse(json).address);
        } catch (error) {
          return null;
        }
      }
      return null;
    }
    exports.getJsonWalletAddress = getJsonWalletAddress;
  }
});

// node_modules/scrypt-js/scrypt.js
var require_scrypt = __commonJS({
  "node_modules/scrypt-js/scrypt.js"(exports, module) {
    "use strict";
    (function(root) {
      const MAX_VALUE = 2147483647;
      function SHA256(m) {
        const K = new Uint32Array([
          1116352408,
          1899447441,
          3049323471,
          3921009573,
          961987163,
          1508970993,
          2453635748,
          2870763221,
          3624381080,
          310598401,
          607225278,
          1426881987,
          1925078388,
          2162078206,
          2614888103,
          3248222580,
          3835390401,
          4022224774,
          264347078,
          604807628,
          770255983,
          1249150122,
          1555081692,
          1996064986,
          2554220882,
          2821834349,
          2952996808,
          3210313671,
          3336571891,
          3584528711,
          113926993,
          338241895,
          666307205,
          773529912,
          1294757372,
          1396182291,
          1695183700,
          1986661051,
          2177026350,
          2456956037,
          2730485921,
          2820302411,
          3259730800,
          3345764771,
          3516065817,
          3600352804,
          4094571909,
          275423344,
          430227734,
          506948616,
          659060556,
          883997877,
          958139571,
          1322822218,
          1537002063,
          1747873779,
          1955562222,
          2024104815,
          2227730452,
          2361852424,
          2428436474,
          2756734187,
          3204031479,
          3329325298
        ]);
        let h0 = 1779033703, h1 = 3144134277, h2 = 1013904242, h3 = 2773480762;
        let h4 = 1359893119, h5 = 2600822924, h6 = 528734635, h7 = 1541459225;
        const w = new Uint32Array(64);
        function blocks(p2) {
          let off = 0, len = p2.length;
          while (len >= 64) {
            let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i2, j, t1, t2;
            for (i2 = 0; i2 < 16; i2++) {
              j = off + i2 * 4;
              w[i2] = (p2[j] & 255) << 24 | (p2[j + 1] & 255) << 16 | (p2[j + 2] & 255) << 8 | p2[j + 3] & 255;
            }
            for (i2 = 16; i2 < 64; i2++) {
              u = w[i2 - 2];
              t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;
              u = w[i2 - 15];
              t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;
              w[i2] = (t1 + w[i2 - 7] | 0) + (t2 + w[i2 - 16] | 0) | 0;
            }
            for (i2 = 0; i2 < 64; i2++) {
              t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i2] + w[i2] | 0) | 0) | 0;
              t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;
              h = g;
              g = f;
              f = e;
              e = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }
            h0 = h0 + a | 0;
            h1 = h1 + b | 0;
            h2 = h2 + c | 0;
            h3 = h3 + d | 0;
            h4 = h4 + e | 0;
            h5 = h5 + f | 0;
            h6 = h6 + g | 0;
            h7 = h7 + h | 0;
            off += 64;
            len -= 64;
          }
        }
        blocks(m);
        let i, bytesLeft = m.length % 64, bitLenHi = m.length / 536870912 | 0, bitLenLo = m.length << 3, numZeros = bytesLeft < 56 ? 56 : 120, p = m.slice(m.length - bytesLeft, m.length);
        p.push(128);
        for (i = bytesLeft + 1; i < numZeros; i++) {
          p.push(0);
        }
        p.push(bitLenHi >>> 24 & 255);
        p.push(bitLenHi >>> 16 & 255);
        p.push(bitLenHi >>> 8 & 255);
        p.push(bitLenHi >>> 0 & 255);
        p.push(bitLenLo >>> 24 & 255);
        p.push(bitLenLo >>> 16 & 255);
        p.push(bitLenLo >>> 8 & 255);
        p.push(bitLenLo >>> 0 & 255);
        blocks(p);
        return [
          h0 >>> 24 & 255,
          h0 >>> 16 & 255,
          h0 >>> 8 & 255,
          h0 >>> 0 & 255,
          h1 >>> 24 & 255,
          h1 >>> 16 & 255,
          h1 >>> 8 & 255,
          h1 >>> 0 & 255,
          h2 >>> 24 & 255,
          h2 >>> 16 & 255,
          h2 >>> 8 & 255,
          h2 >>> 0 & 255,
          h3 >>> 24 & 255,
          h3 >>> 16 & 255,
          h3 >>> 8 & 255,
          h3 >>> 0 & 255,
          h4 >>> 24 & 255,
          h4 >>> 16 & 255,
          h4 >>> 8 & 255,
          h4 >>> 0 & 255,
          h5 >>> 24 & 255,
          h5 >>> 16 & 255,
          h5 >>> 8 & 255,
          h5 >>> 0 & 255,
          h6 >>> 24 & 255,
          h6 >>> 16 & 255,
          h6 >>> 8 & 255,
          h6 >>> 0 & 255,
          h7 >>> 24 & 255,
          h7 >>> 16 & 255,
          h7 >>> 8 & 255,
          h7 >>> 0 & 255
        ];
      }
      function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
        password = password.length <= 64 ? password : SHA256(password);
        const innerLen = 64 + salt.length + 4;
        const inner = new Array(innerLen);
        const outerKey = new Array(64);
        let i;
        let dk = [];
        for (i = 0; i < 64; i++) {
          inner[i] = 54;
        }
        for (i = 0; i < password.length; i++) {
          inner[i] ^= password[i];
        }
        for (i = 0; i < salt.length; i++) {
          inner[64 + i] = salt[i];
        }
        for (i = innerLen - 4; i < innerLen; i++) {
          inner[i] = 0;
        }
        for (i = 0; i < 64; i++)
          outerKey[i] = 92;
        for (i = 0; i < password.length; i++)
          outerKey[i] ^= password[i];
        function incrementCounter() {
          for (let i2 = innerLen - 1; i2 >= innerLen - 4; i2--) {
            inner[i2]++;
            if (inner[i2] <= 255)
              return;
            inner[i2] = 0;
          }
        }
        while (dkLen >= 32) {
          incrementCounter();
          dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
          dkLen -= 32;
        }
        if (dkLen > 0) {
          incrementCounter();
          dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
        }
        return dk;
      }
      function blockmix_salsa8(BY, Yi, r, x, _X) {
        let i;
        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
        for (i = 0; i < 2 * r; i++) {
          blockxor(BY, i * 16, _X, 16);
          salsa20_8(_X, x);
          arraycopy(_X, 0, BY, Yi + i * 16, 16);
        }
        for (i = 0; i < r; i++) {
          arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);
        }
        for (i = 0; i < r; i++) {
          arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
        }
      }
      function R(a, b) {
        return a << b | a >>> 32 - b;
      }
      function salsa20_8(B, x) {
        arraycopy(B, 0, x, 0, 16);
        for (let i = 8; i > 0; i -= 2) {
          x[4] ^= R(x[0] + x[12], 7);
          x[8] ^= R(x[4] + x[0], 9);
          x[12] ^= R(x[8] + x[4], 13);
          x[0] ^= R(x[12] + x[8], 18);
          x[9] ^= R(x[5] + x[1], 7);
          x[13] ^= R(x[9] + x[5], 9);
          x[1] ^= R(x[13] + x[9], 13);
          x[5] ^= R(x[1] + x[13], 18);
          x[14] ^= R(x[10] + x[6], 7);
          x[2] ^= R(x[14] + x[10], 9);
          x[6] ^= R(x[2] + x[14], 13);
          x[10] ^= R(x[6] + x[2], 18);
          x[3] ^= R(x[15] + x[11], 7);
          x[7] ^= R(x[3] + x[15], 9);
          x[11] ^= R(x[7] + x[3], 13);
          x[15] ^= R(x[11] + x[7], 18);
          x[1] ^= R(x[0] + x[3], 7);
          x[2] ^= R(x[1] + x[0], 9);
          x[3] ^= R(x[2] + x[1], 13);
          x[0] ^= R(x[3] + x[2], 18);
          x[6] ^= R(x[5] + x[4], 7);
          x[7] ^= R(x[6] + x[5], 9);
          x[4] ^= R(x[7] + x[6], 13);
          x[5] ^= R(x[4] + x[7], 18);
          x[11] ^= R(x[10] + x[9], 7);
          x[8] ^= R(x[11] + x[10], 9);
          x[9] ^= R(x[8] + x[11], 13);
          x[10] ^= R(x[9] + x[8], 18);
          x[12] ^= R(x[15] + x[14], 7);
          x[13] ^= R(x[12] + x[15], 9);
          x[14] ^= R(x[13] + x[12], 13);
          x[15] ^= R(x[14] + x[13], 18);
        }
        for (let i = 0; i < 16; ++i) {
          B[i] += x[i];
        }
      }
      function blockxor(S, Si, D, len) {
        for (let i = 0; i < len; i++) {
          D[i] ^= S[Si + i];
        }
      }
      function arraycopy(src, srcPos, dest, destPos, length) {
        while (length--) {
          dest[destPos++] = src[srcPos++];
        }
      }
      function checkBufferish(o) {
        if (!o || typeof o.length !== "number") {
          return false;
        }
        for (let i = 0; i < o.length; i++) {
          const v = o[i];
          if (typeof v !== "number" || v % 1 || v < 0 || v >= 256) {
            return false;
          }
        }
        return true;
      }
      function ensureInteger(value, name) {
        if (typeof value !== "number" || value % 1) {
          throw new Error("invalid " + name);
        }
        return value;
      }
      function _scrypt(password, salt, N, r, p, dkLen, callback) {
        N = ensureInteger(N, "N");
        r = ensureInteger(r, "r");
        p = ensureInteger(p, "p");
        dkLen = ensureInteger(dkLen, "dkLen");
        if (N === 0 || (N & N - 1) !== 0) {
          throw new Error("N must be power of 2");
        }
        if (N > MAX_VALUE / 128 / r) {
          throw new Error("N too large");
        }
        if (r > MAX_VALUE / 128 / p) {
          throw new Error("r too large");
        }
        if (!checkBufferish(password)) {
          throw new Error("password must be an array or buffer");
        }
        password = Array.prototype.slice.call(password);
        if (!checkBufferish(salt)) {
          throw new Error("salt must be an array or buffer");
        }
        salt = Array.prototype.slice.call(salt);
        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
        const B = new Uint32Array(p * 32 * r);
        for (let i = 0; i < B.length; i++) {
          const j = i * 4;
          B[i] = (b[j + 3] & 255) << 24 | (b[j + 2] & 255) << 16 | (b[j + 1] & 255) << 8 | (b[j + 0] & 255) << 0;
        }
        const XY = new Uint32Array(64 * r);
        const V = new Uint32Array(32 * r * N);
        const Yi = 32 * r;
        const x = new Uint32Array(16);
        const _X = new Uint32Array(16);
        const totalOps = p * N * 2;
        let currentOp = 0;
        let lastPercent10 = null;
        let stop2 = false;
        let state = 0;
        let i0 = 0, i1;
        let Bi;
        const limit = callback ? parseInt(1e3 / r) : 4294967295;
        const nextTick = typeof setImmediate !== "undefined" ? setImmediate : setTimeout;
        const incrementalSMix = function() {
          if (stop2) {
            return callback(new Error("cancelled"), currentOp / totalOps);
          }
          let steps;
          switch (state) {
            case 0:
              Bi = i0 * 32 * r;
              arraycopy(B, Bi, XY, 0, Yi);
              state = 1;
              i1 = 0;
            case 1:
              steps = N - i1;
              if (steps > limit) {
                steps = limit;
              }
              for (let i = 0; i < steps; i++) {
                arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);
                blockmix_salsa8(XY, Yi, r, x, _X);
              }
              i1 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop2 = callback(null, currentOp / totalOps);
                  if (stop2) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i1 < N) {
                break;
              }
              i1 = 0;
              state = 2;
            case 2:
              steps = N - i1;
              if (steps > limit) {
                steps = limit;
              }
              for (let i = 0; i < steps; i++) {
                const offset = (2 * r - 1) * 16;
                const j = XY[offset] & N - 1;
                blockxor(V, j * Yi, XY, Yi);
                blockmix_salsa8(XY, Yi, r, x, _X);
              }
              i1 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop2 = callback(null, currentOp / totalOps);
                  if (stop2) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i1 < N) {
                break;
              }
              arraycopy(XY, 0, B, Bi, Yi);
              i0++;
              if (i0 < p) {
                state = 0;
                break;
              }
              b = [];
              for (let i = 0; i < B.length; i++) {
                b.push(B[i] >> 0 & 255);
                b.push(B[i] >> 8 & 255);
                b.push(B[i] >> 16 & 255);
                b.push(B[i] >> 24 & 255);
              }
              const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);
              if (callback) {
                callback(null, 1, derivedKey);
              }
              return derivedKey;
          }
          if (callback) {
            nextTick(incrementalSMix);
          }
        };
        if (!callback) {
          while (true) {
            const derivedKey = incrementalSMix();
            if (derivedKey != void 0) {
              return derivedKey;
            }
          }
        }
        incrementalSMix();
      }
      const lib = {
        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
          return new Promise(function(resolve, reject) {
            let lastProgress = 0;
            if (progressCallback) {
              progressCallback(0);
            }
            _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
              if (error) {
                reject(error);
              } else if (key) {
                if (progressCallback && lastProgress !== 1) {
                  progressCallback(1);
                }
                resolve(new Uint8Array(key));
              } else if (progressCallback && progress !== lastProgress) {
                lastProgress = progress;
                return progressCallback(progress);
              }
            });
          });
        },
        syncScrypt: function(password, salt, N, r, p, dkLen) {
          return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
        }
      };
      if (typeof exports !== "undefined") {
        module.exports = lib;
      } else if (typeof define === "function" && define.amd) {
        define(lib);
      } else if (root) {
        if (root.scrypt) {
          root._scrypt = root.scrypt;
        }
        root.scrypt = lib;
      }
    })(exports);
  }
});

// node_modules/@ethersproject/json-wallets/lib/keystore.js
var require_keystore = __commonJS({
  "node_modules/@ethersproject/json-wallets/lib/keystore.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encrypt = exports.decrypt = exports.decryptSync = exports.KeystoreAccount = void 0;
    var aes_js_1 = __importDefault(require_aes_js());
    var scrypt_js_1 = __importDefault(require_scrypt());
    var address_1 = require_lib7();
    var bytes_1 = require_lib2();
    var hdnode_1 = require_lib23();
    var keccak256_1 = require_lib5();
    var pbkdf2_1 = require_lib21();
    var random_1 = require_lib24();
    var properties_1 = require_lib4();
    var transactions_1 = require_lib17();
    var utils_1 = require_utils4();
    var logger_1 = require_lib();
    var _version_1 = require_version19();
    var logger = new logger_1.Logger(_version_1.version);
    function hasMnemonic(value) {
      return value != null && value.mnemonic && value.mnemonic.phrase;
    }
    var KeystoreAccount = (
      /** @class */
      function(_super) {
        __extends(KeystoreAccount2, _super);
        function KeystoreAccount2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        KeystoreAccount2.prototype.isKeystoreAccount = function(value) {
          return !!(value && value._isKeystoreAccount);
        };
        return KeystoreAccount2;
      }(properties_1.Description)
    );
    exports.KeystoreAccount = KeystoreAccount;
    function _decrypt(data, key, ciphertext) {
      var cipher = (0, utils_1.searchPath)(data, "crypto/cipher");
      if (cipher === "aes-128-ctr") {
        var iv = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/cipherparams/iv"));
        var counter = new aes_js_1.default.Counter(iv);
        var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(key, counter);
        return (0, bytes_1.arrayify)(aesCtr.decrypt(ciphertext));
      }
      return null;
    }
    function _getAccount(data, key) {
      var ciphertext = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/ciphertext"));
      var computedMAC = (0, bytes_1.hexlify)((0, keccak256_1.keccak256)((0, bytes_1.concat)([key.slice(16, 32), ciphertext]))).substring(2);
      if (computedMAC !== (0, utils_1.searchPath)(data, "crypto/mac").toLowerCase()) {
        throw new Error("invalid password");
      }
      var privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
      if (!privateKey) {
        logger.throwError("unsupported cipher", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "decrypt"
        });
      }
      var mnemonicKey = key.slice(32, 64);
      var address = (0, transactions_1.computeAddress)(privateKey);
      if (data.address) {
        var check = data.address.toLowerCase();
        if (check.substring(0, 2) !== "0x") {
          check = "0x" + check;
        }
        if ((0, address_1.getAddress)(check) !== address) {
          throw new Error("address mismatch");
        }
      }
      var account = {
        _isKeystoreAccount: true,
        address,
        privateKey: (0, bytes_1.hexlify)(privateKey)
      };
      if ((0, utils_1.searchPath)(data, "x-ethers/version") === "0.1") {
        var mnemonicCiphertext = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "x-ethers/mnemonicCiphertext"));
        var mnemonicIv = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "x-ethers/mnemonicCounter"));
        var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
        var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
        var path = (0, utils_1.searchPath)(data, "x-ethers/path") || hdnode_1.defaultPath;
        var locale = (0, utils_1.searchPath)(data, "x-ethers/locale") || "en";
        var entropy = (0, bytes_1.arrayify)(mnemonicAesCtr.decrypt(mnemonicCiphertext));
        try {
          var mnemonic = (0, hdnode_1.entropyToMnemonic)(entropy, locale);
          var node = hdnode_1.HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
          if (node.privateKey != account.privateKey) {
            throw new Error("mnemonic mismatch");
          }
          account.mnemonic = node.mnemonic;
        } catch (error) {
          if (error.code !== logger_1.Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
            throw error;
          }
        }
      }
      return new KeystoreAccount(account);
    }
    function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
      return (0, bytes_1.arrayify)((0, pbkdf2_1.pbkdf2)(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
      return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
      var passwordBytes = (0, utils_1.getPassword)(password);
      var kdf = (0, utils_1.searchPath)(data, "crypto/kdf");
      if (kdf && typeof kdf === "string") {
        var throwError = function(name, value) {
          return logger.throwArgumentError("invalid key-derivation function parameters", name, value);
        };
        if (kdf.toLowerCase() === "scrypt") {
          var salt = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/kdfparams/salt"));
          var N = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/n"));
          var r = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/r"));
          var p = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/p"));
          if (!N || !r || !p) {
            throwError("kdf", kdf);
          }
          if ((N & N - 1) !== 0) {
            throwError("N", N);
          }
          var dkLen = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/dklen"));
          if (dkLen !== 32) {
            throwError("dklen", dkLen);
          }
          return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
        } else if (kdf.toLowerCase() === "pbkdf2") {
          var salt = (0, utils_1.looseArrayify)((0, utils_1.searchPath)(data, "crypto/kdfparams/salt"));
          var prfFunc = null;
          var prf = (0, utils_1.searchPath)(data, "crypto/kdfparams/prf");
          if (prf === "hmac-sha256") {
            prfFunc = "sha256";
          } else if (prf === "hmac-sha512") {
            prfFunc = "sha512";
          } else {
            throwError("prf", prf);
          }
          var count = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/c"));
          var dkLen = parseInt((0, utils_1.searchPath)(data, "crypto/kdfparams/dklen"));
          if (dkLen !== 32) {
            throwError("dklen", dkLen);
          }
          return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
        }
      }
      return logger.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
    }
    function decryptSync(json, password) {
      var data = JSON.parse(json);
      var key = _computeKdfKey(data, password, pbkdf2Sync, scrypt_js_1.default.syncScrypt);
      return _getAccount(data, key);
    }
    exports.decryptSync = decryptSync;
    function decrypt(json, password, progressCallback) {
      return __awaiter(this, void 0, void 0, function() {
        var data, key;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              data = JSON.parse(json);
              return [4, _computeKdfKey(data, password, pbkdf2, scrypt_js_1.default.scrypt, progressCallback)];
            case 1:
              key = _a.sent();
              return [2, _getAccount(data, key)];
          }
        });
      });
    }
    exports.decrypt = decrypt;
    function encrypt(account, password, options, progressCallback) {
      try {
        if ((0, address_1.getAddress)(account.address) !== (0, transactions_1.computeAddress)(account.privateKey)) {
          throw new Error("address/privateKey mismatch");
        }
        if (hasMnemonic(account)) {
          var mnemonic = account.mnemonic;
          var node = hdnode_1.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || hdnode_1.defaultPath);
          if (node.privateKey != account.privateKey) {
            throw new Error("mnemonic mismatch");
          }
        }
      } catch (e) {
        return Promise.reject(e);
      }
      if (typeof options === "function" && !progressCallback) {
        progressCallback = options;
        options = {};
      }
      if (!options) {
        options = {};
      }
      var privateKey = (0, bytes_1.arrayify)(account.privateKey);
      var passwordBytes = (0, utils_1.getPassword)(password);
      var entropy = null;
      var path = null;
      var locale = null;
      if (hasMnemonic(account)) {
        var srcMnemonic = account.mnemonic;
        entropy = (0, bytes_1.arrayify)((0, hdnode_1.mnemonicToEntropy)(srcMnemonic.phrase, srcMnemonic.locale || "en"));
        path = srcMnemonic.path || hdnode_1.defaultPath;
        locale = srcMnemonic.locale || "en";
      }
      var client = options.client;
      if (!client) {
        client = "ethers.js";
      }
      var salt = null;
      if (options.salt) {
        salt = (0, bytes_1.arrayify)(options.salt);
      } else {
        salt = (0, random_1.randomBytes)(32);
        ;
      }
      var iv = null;
      if (options.iv) {
        iv = (0, bytes_1.arrayify)(options.iv);
        if (iv.length !== 16) {
          throw new Error("invalid iv");
        }
      } else {
        iv = (0, random_1.randomBytes)(16);
      }
      var uuidRandom = null;
      if (options.uuid) {
        uuidRandom = (0, bytes_1.arrayify)(options.uuid);
        if (uuidRandom.length !== 16) {
          throw new Error("invalid uuid");
        }
      } else {
        uuidRandom = (0, random_1.randomBytes)(16);
      }
      var N = 1 << 17, r = 8, p = 1;
      if (options.scrypt) {
        if (options.scrypt.N) {
          N = options.scrypt.N;
        }
        if (options.scrypt.r) {
          r = options.scrypt.r;
        }
        if (options.scrypt.p) {
          p = options.scrypt.p;
        }
      }
      return scrypt_js_1.default.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(function(key) {
        key = (0, bytes_1.arrayify)(key);
        var derivedKey = key.slice(0, 16);
        var macPrefix = key.slice(16, 32);
        var mnemonicKey = key.slice(32, 64);
        var counter = new aes_js_1.default.Counter(iv);
        var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);
        var ciphertext = (0, bytes_1.arrayify)(aesCtr.encrypt(privateKey));
        var mac = (0, keccak256_1.keccak256)((0, bytes_1.concat)([macPrefix, ciphertext]));
        var data = {
          address: account.address.substring(2).toLowerCase(),
          id: (0, utils_1.uuidV4)(uuidRandom),
          version: 3,
          crypto: {
            cipher: "aes-128-ctr",
            cipherparams: {
              iv: (0, bytes_1.hexlify)(iv).substring(2)
            },
            ciphertext: (0, bytes_1.hexlify)(ciphertext).substring(2),
            kdf: "scrypt",
            kdfparams: {
              salt: (0, bytes_1.hexlify)(salt).substring(2),
              n: N,
              dklen: 32,
              p,
              r
            },
            mac: mac.substring(2)
          }
        };
        if (entropy) {
          var mnemonicIv = (0, random_1.randomBytes)(16);
          var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
          var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
          var mnemonicCiphertext = (0, bytes_1.arrayify)(mnemonicAesCtr.encrypt(entropy));
          var now = /* @__PURE__ */ new Date();
          var timestamp = now.getUTCFullYear() + "-" + (0, utils_1.zpad)(now.getUTCMonth() + 1, 2) + "-" + (0, utils_1.zpad)(now.getUTCDate(), 2) + "T" + (0, utils_1.zpad)(now.getUTCHours(), 2) + "-" + (0, utils_1.zpad)(now.getUTCMinutes(), 2) + "-" + (0, utils_1.zpad)(now.getUTCSeconds(), 2) + ".0Z";
          data["x-ethers"] = {
            client,
            gethFilename: "UTC--" + timestamp + "--" + data.address,
            mnemonicCounter: (0, bytes_1.hexlify)(mnemonicIv).substring(2),
            mnemonicCiphertext: (0, bytes_1.hexlify)(mnemonicCiphertext).substring(2),
            path,
            locale,
            version: "0.1"
          };
        }
        return JSON.stringify(data);
      });
    }
    exports.encrypt = encrypt;
  }
});

// node_modules/@ethersproject/json-wallets/lib/index.js
var require_lib25 = __commonJS({
  "node_modules/@ethersproject/json-wallets/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decryptJsonWalletSync = exports.decryptJsonWallet = exports.getJsonWalletAddress = exports.isKeystoreWallet = exports.isCrowdsaleWallet = exports.encryptKeystore = exports.decryptKeystoreSync = exports.decryptKeystore = exports.decryptCrowdsale = void 0;
    var crowdsale_1 = require_crowdsale();
    Object.defineProperty(exports, "decryptCrowdsale", { enumerable: true, get: function() {
      return crowdsale_1.decrypt;
    } });
    var inspect_1 = require_inspect();
    Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function() {
      return inspect_1.getJsonWalletAddress;
    } });
    Object.defineProperty(exports, "isCrowdsaleWallet", { enumerable: true, get: function() {
      return inspect_1.isCrowdsaleWallet;
    } });
    Object.defineProperty(exports, "isKeystoreWallet", { enumerable: true, get: function() {
      return inspect_1.isKeystoreWallet;
    } });
    var keystore_1 = require_keystore();
    Object.defineProperty(exports, "decryptKeystore", { enumerable: true, get: function() {
      return keystore_1.decrypt;
    } });
    Object.defineProperty(exports, "decryptKeystoreSync", { enumerable: true, get: function() {
      return keystore_1.decryptSync;
    } });
    Object.defineProperty(exports, "encryptKeystore", { enumerable: true, get: function() {
      return keystore_1.encrypt;
    } });
    function decryptJsonWallet(json, password, progressCallback) {
      if ((0, inspect_1.isCrowdsaleWallet)(json)) {
        if (progressCallback) {
          progressCallback(0);
        }
        var account = (0, crowdsale_1.decrypt)(json, password);
        if (progressCallback) {
          progressCallback(1);
        }
        return Promise.resolve(account);
      }
      if ((0, inspect_1.isKeystoreWallet)(json)) {
        return (0, keystore_1.decrypt)(json, password, progressCallback);
      }
      return Promise.reject(new Error("invalid JSON wallet"));
    }
    exports.decryptJsonWallet = decryptJsonWallet;
    function decryptJsonWalletSync(json, password) {
      if ((0, inspect_1.isCrowdsaleWallet)(json)) {
        return (0, crowdsale_1.decrypt)(json, password);
      }
      if ((0, inspect_1.isKeystoreWallet)(json)) {
        return (0, keystore_1.decryptSync)(json, password);
      }
      throw new Error("invalid JSON wallet");
    }
    exports.decryptJsonWalletSync = decryptJsonWalletSync;
  }
});

// node_modules/@ethersproject/wallet/lib/_version.js
var require_version20 = __commonJS({
  "node_modules/@ethersproject/wallet/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "wallet/5.7.0";
  }
});

// node_modules/@ethersproject/wallet/lib/index.js
var require_lib26 = __commonJS({
  "node_modules/@ethersproject/wallet/lib/index.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.verifyTypedData = exports.verifyMessage = exports.Wallet = void 0;
    var address_1 = require_lib7();
    var abstract_provider_1 = require_lib14();
    var abstract_signer_1 = require_lib15();
    var bytes_1 = require_lib2();
    var hash_1 = require_lib12();
    var hdnode_1 = require_lib23();
    var keccak256_1 = require_lib5();
    var properties_1 = require_lib4();
    var random_1 = require_lib24();
    var signing_key_1 = require_lib16();
    var json_wallets_1 = require_lib25();
    var transactions_1 = require_lib17();
    var logger_1 = require_lib();
    var _version_1 = require_version20();
    var logger = new logger_1.Logger(_version_1.version);
    function isAccount(value) {
      return value != null && (0, bytes_1.isHexString)(value.privateKey, 32) && value.address != null;
    }
    function hasMnemonic(value) {
      var mnemonic = value.mnemonic;
      return mnemonic && mnemonic.phrase;
    }
    var Wallet = (
      /** @class */
      function(_super) {
        __extends(Wallet2, _super);
        function Wallet2(privateKey, provider) {
          var _this = _super.call(this) || this;
          if (isAccount(privateKey)) {
            var signingKey_1 = new signing_key_1.SigningKey(privateKey.privateKey);
            (0, properties_1.defineReadOnly)(_this, "_signingKey", function() {
              return signingKey_1;
            });
            (0, properties_1.defineReadOnly)(_this, "address", (0, transactions_1.computeAddress)(_this.publicKey));
            if (_this.address !== (0, address_1.getAddress)(privateKey.address)) {
              logger.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
            }
            if (hasMnemonic(privateKey)) {
              var srcMnemonic_1 = privateKey.mnemonic;
              (0, properties_1.defineReadOnly)(_this, "_mnemonic", function() {
                return {
                  phrase: srcMnemonic_1.phrase,
                  path: srcMnemonic_1.path || hdnode_1.defaultPath,
                  locale: srcMnemonic_1.locale || "en"
                };
              });
              var mnemonic = _this.mnemonic;
              var node = hdnode_1.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
              if ((0, transactions_1.computeAddress)(node.privateKey) !== _this.address) {
                logger.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
              }
            } else {
              (0, properties_1.defineReadOnly)(_this, "_mnemonic", function() {
                return null;
              });
            }
          } else {
            if (signing_key_1.SigningKey.isSigningKey(privateKey)) {
              if (privateKey.curve !== "secp256k1") {
                logger.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
              }
              (0, properties_1.defineReadOnly)(_this, "_signingKey", function() {
                return privateKey;
              });
            } else {
              if (typeof privateKey === "string") {
                if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                  privateKey = "0x" + privateKey;
                }
              }
              var signingKey_2 = new signing_key_1.SigningKey(privateKey);
              (0, properties_1.defineReadOnly)(_this, "_signingKey", function() {
                return signingKey_2;
              });
            }
            (0, properties_1.defineReadOnly)(_this, "_mnemonic", function() {
              return null;
            });
            (0, properties_1.defineReadOnly)(_this, "address", (0, transactions_1.computeAddress)(_this.publicKey));
          }
          if (provider && !abstract_provider_1.Provider.isProvider(provider)) {
            logger.throwArgumentError("invalid provider", "provider", provider);
          }
          (0, properties_1.defineReadOnly)(_this, "provider", provider || null);
          return _this;
        }
        Object.defineProperty(Wallet2.prototype, "mnemonic", {
          get: function() {
            return this._mnemonic();
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Wallet2.prototype, "privateKey", {
          get: function() {
            return this._signingKey().privateKey;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Wallet2.prototype, "publicKey", {
          get: function() {
            return this._signingKey().publicKey;
          },
          enumerable: false,
          configurable: true
        });
        Wallet2.prototype.getAddress = function() {
          return Promise.resolve(this.address);
        };
        Wallet2.prototype.connect = function(provider) {
          return new Wallet2(this, provider);
        };
        Wallet2.prototype.signTransaction = function(transaction) {
          var _this = this;
          return (0, properties_1.resolveProperties)(transaction).then(function(tx) {
            if (tx.from != null) {
              if ((0, address_1.getAddress)(tx.from) !== _this.address) {
                logger.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
              }
              delete tx.from;
            }
            var signature = _this._signingKey().signDigest((0, keccak256_1.keccak256)((0, transactions_1.serialize)(tx)));
            return (0, transactions_1.serialize)(tx, signature);
          });
        };
        Wallet2.prototype.signMessage = function(message) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, (0, bytes_1.joinSignature)(this._signingKey().signDigest((0, hash_1.hashMessage)(message)))];
            });
          });
        };
        Wallet2.prototype._signTypedData = function(domain, types, value) {
          return __awaiter(this, void 0, void 0, function() {
            var populated;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, hash_1._TypedDataEncoder.resolveNames(domain, types, value, function(name) {
                    if (_this.provider == null) {
                      logger.throwError("cannot resolve ENS names without a provider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "resolveName",
                        value: name
                      });
                    }
                    return _this.provider.resolveName(name);
                  })];
                case 1:
                  populated = _a.sent();
                  return [2, (0, bytes_1.joinSignature)(this._signingKey().signDigest(hash_1._TypedDataEncoder.hash(populated.domain, types, populated.value)))];
              }
            });
          });
        };
        Wallet2.prototype.encrypt = function(password, options, progressCallback) {
          if (typeof options === "function" && !progressCallback) {
            progressCallback = options;
            options = {};
          }
          if (progressCallback && typeof progressCallback !== "function") {
            throw new Error("invalid callback");
          }
          if (!options) {
            options = {};
          }
          return (0, json_wallets_1.encryptKeystore)(this, password, options, progressCallback);
        };
        Wallet2.createRandom = function(options) {
          var entropy = (0, random_1.randomBytes)(16);
          if (!options) {
            options = {};
          }
          if (options.extraEntropy) {
            entropy = (0, bytes_1.arrayify)((0, bytes_1.hexDataSlice)((0, keccak256_1.keccak256)((0, bytes_1.concat)([entropy, options.extraEntropy])), 0, 16));
          }
          var mnemonic = (0, hdnode_1.entropyToMnemonic)(entropy, options.locale);
          return Wallet2.fromMnemonic(mnemonic, options.path, options.locale);
        };
        Wallet2.fromEncryptedJson = function(json, password, progressCallback) {
          return (0, json_wallets_1.decryptJsonWallet)(json, password, progressCallback).then(function(account) {
            return new Wallet2(account);
          });
        };
        Wallet2.fromEncryptedJsonSync = function(json, password) {
          return new Wallet2((0, json_wallets_1.decryptJsonWalletSync)(json, password));
        };
        Wallet2.fromMnemonic = function(mnemonic, path, wordlist) {
          if (!path) {
            path = hdnode_1.defaultPath;
          }
          return new Wallet2(hdnode_1.HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
        };
        return Wallet2;
      }(abstract_signer_1.Signer)
    );
    exports.Wallet = Wallet;
    function verifyMessage(message, signature) {
      return (0, transactions_1.recoverAddress)((0, hash_1.hashMessage)(message), signature);
    }
    exports.verifyMessage = verifyMessage;
    function verifyTypedData(domain, types, value, signature) {
      return (0, transactions_1.recoverAddress)(hash_1._TypedDataEncoder.hash(domain, types, value), signature);
    }
    exports.verifyTypedData = verifyTypedData;
  }
});

// node_modules/@ethersproject/networks/lib/_version.js
var require_version21 = __commonJS({
  "node_modules/@ethersproject/networks/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "networks/5.7.1";
  }
});

// node_modules/@ethersproject/networks/lib/index.js
var require_lib27 = __commonJS({
  "node_modules/@ethersproject/networks/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getNetwork = void 0;
    var logger_1 = require_lib();
    var _version_1 = require_version21();
    var logger = new logger_1.Logger(_version_1.version);
    function isRenetworkable(value) {
      return value && typeof value.renetwork === "function";
    }
    function ethDefaultProvider(network) {
      var func = function(providers, options) {
        if (options == null) {
          options = {};
        }
        var providerList = [];
        if (providers.InfuraProvider && options.infura !== "-") {
          try {
            providerList.push(new providers.InfuraProvider(network, options.infura));
          } catch (error) {
          }
        }
        if (providers.EtherscanProvider && options.etherscan !== "-") {
          try {
            providerList.push(new providers.EtherscanProvider(network, options.etherscan));
          } catch (error) {
          }
        }
        if (providers.AlchemyProvider && options.alchemy !== "-") {
          try {
            providerList.push(new providers.AlchemyProvider(network, options.alchemy));
          } catch (error) {
          }
        }
        if (providers.PocketProvider && options.pocket !== "-") {
          var skip = ["goerli", "ropsten", "rinkeby", "sepolia"];
          try {
            var provider = new providers.PocketProvider(network, options.pocket);
            if (provider.network && skip.indexOf(provider.network.name) === -1) {
              providerList.push(provider);
            }
          } catch (error) {
          }
        }
        if (providers.CloudflareProvider && options.cloudflare !== "-") {
          try {
            providerList.push(new providers.CloudflareProvider(network));
          } catch (error) {
          }
        }
        if (providers.AnkrProvider && options.ankr !== "-") {
          try {
            var skip = ["ropsten"];
            var provider = new providers.AnkrProvider(network, options.ankr);
            if (provider.network && skip.indexOf(provider.network.name) === -1) {
              providerList.push(provider);
            }
          } catch (error) {
          }
        }
        if (providerList.length === 0) {
          return null;
        }
        if (providers.FallbackProvider) {
          var quorum = 1;
          if (options.quorum != null) {
            quorum = options.quorum;
          } else if (network === "homestead") {
            quorum = 2;
          }
          return new providers.FallbackProvider(providerList, quorum);
        }
        return providerList[0];
      };
      func.renetwork = function(network2) {
        return ethDefaultProvider(network2);
      };
      return func;
    }
    function etcDefaultProvider(url, network) {
      var func = function(providers, options) {
        if (providers.JsonRpcProvider) {
          return new providers.JsonRpcProvider(url, network);
        }
        return null;
      };
      func.renetwork = function(network2) {
        return etcDefaultProvider(url, network2);
      };
      return func;
    }
    var homestead = {
      chainId: 1,
      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
      name: "homestead",
      _defaultProvider: ethDefaultProvider("homestead")
    };
    var ropsten = {
      chainId: 3,
      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
      name: "ropsten",
      _defaultProvider: ethDefaultProvider("ropsten")
    };
    var classicMordor = {
      chainId: 63,
      name: "classicMordor",
      _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
    };
    var networks = {
      unspecified: { chainId: 0, name: "unspecified" },
      homestead,
      mainnet: homestead,
      morden: { chainId: 2, name: "morden" },
      ropsten,
      testnet: ropsten,
      rinkeby: {
        chainId: 4,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "rinkeby",
        _defaultProvider: ethDefaultProvider("rinkeby")
      },
      kovan: {
        chainId: 42,
        name: "kovan",
        _defaultProvider: ethDefaultProvider("kovan")
      },
      goerli: {
        chainId: 5,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "goerli",
        _defaultProvider: ethDefaultProvider("goerli")
      },
      kintsugi: { chainId: 1337702, name: "kintsugi" },
      sepolia: {
        chainId: 11155111,
        name: "sepolia",
        _defaultProvider: ethDefaultProvider("sepolia")
      },
      // ETC (See: #351)
      classic: {
        chainId: 61,
        name: "classic",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic")
      },
      classicMorden: { chainId: 62, name: "classicMorden" },
      classicMordor,
      classicTestnet: classicMordor,
      classicKotti: {
        chainId: 6,
        name: "classicKotti",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti")
      },
      xdai: { chainId: 100, name: "xdai" },
      matic: {
        chainId: 137,
        name: "matic",
        _defaultProvider: ethDefaultProvider("matic")
      },
      maticmum: { chainId: 80001, name: "maticmum" },
      optimism: {
        chainId: 10,
        name: "optimism",
        _defaultProvider: ethDefaultProvider("optimism")
      },
      "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
      "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
      arbitrum: { chainId: 42161, name: "arbitrum" },
      "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
      "arbitrum-goerli": { chainId: 421613, name: "arbitrum-goerli" },
      bnb: { chainId: 56, name: "bnb" },
      bnbt: { chainId: 97, name: "bnbt" }
    };
    function getNetwork(network) {
      if (network == null) {
        return null;
      }
      if (typeof network === "number") {
        for (var name_1 in networks) {
          var standard_1 = networks[name_1];
          if (standard_1.chainId === network) {
            return {
              name: standard_1.name,
              chainId: standard_1.chainId,
              ensAddress: standard_1.ensAddress || null,
              _defaultProvider: standard_1._defaultProvider || null
            };
          }
        }
        return {
          chainId: network,
          name: "unknown"
        };
      }
      if (typeof network === "string") {
        var standard_2 = networks[network];
        if (standard_2 == null) {
          return null;
        }
        return {
          name: standard_2.name,
          chainId: standard_2.chainId,
          ensAddress: standard_2.ensAddress,
          _defaultProvider: standard_2._defaultProvider || null
        };
      }
      var standard = networks[network.name];
      if (!standard) {
        if (typeof network.chainId !== "number") {
          logger.throwArgumentError("invalid network chainId", "network", network);
        }
        return network;
      }
      if (network.chainId !== 0 && network.chainId !== standard.chainId) {
        logger.throwArgumentError("network chainId mismatch", "network", network);
      }
      var defaultProvider = network._defaultProvider || null;
      if (defaultProvider == null && standard._defaultProvider) {
        if (isRenetworkable(standard._defaultProvider)) {
          defaultProvider = standard._defaultProvider.renetwork(network);
        } else {
          defaultProvider = standard._defaultProvider;
        }
      }
      return {
        name: network.name,
        chainId: standard.chainId,
        ensAddress: network.ensAddress || standard.ensAddress || null,
        _defaultProvider: defaultProvider
      };
    }
    exports.getNetwork = getNetwork;
  }
});

// node_modules/@ethersproject/web/lib/_version.js
var require_version22 = __commonJS({
  "node_modules/@ethersproject/web/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "web/5.7.1";
  }
});

// node_modules/@ethersproject/web/lib/browser-geturl.js
var require_browser_geturl = __commonJS({
  "node_modules/@ethersproject/web/lib/browser-geturl.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUrl = void 0;
    var bytes_1 = require_lib2();
    function getUrl(href, options) {
      return __awaiter(this, void 0, void 0, function() {
        var request, opts, response, body, headers;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (options == null) {
                options = {};
              }
              request = {
                method: options.method || "GET",
                headers: options.headers || {},
                body: options.body || void 0
              };
              if (options.skipFetchSetup !== true) {
                request.mode = "cors";
                request.cache = "no-cache";
                request.credentials = "same-origin";
                request.redirect = "follow";
                request.referrer = "client";
              }
              ;
              if (options.fetchOptions != null) {
                opts = options.fetchOptions;
                if (opts.mode) {
                  request.mode = opts.mode;
                }
                if (opts.cache) {
                  request.cache = opts.cache;
                }
                if (opts.credentials) {
                  request.credentials = opts.credentials;
                }
                if (opts.redirect) {
                  request.redirect = opts.redirect;
                }
                if (opts.referrer) {
                  request.referrer = opts.referrer;
                }
              }
              return [4, fetch(href, request)];
            case 1:
              response = _a.sent();
              return [4, response.arrayBuffer()];
            case 2:
              body = _a.sent();
              headers = {};
              if (response.headers.forEach) {
                response.headers.forEach(function(value, key) {
                  headers[key.toLowerCase()] = value;
                });
              } else {
                response.headers.keys().forEach(function(key) {
                  headers[key.toLowerCase()] = response.headers.get(key);
                });
              }
              return [2, {
                headers,
                statusCode: response.status,
                statusMessage: response.statusText,
                body: (0, bytes_1.arrayify)(new Uint8Array(body))
              }];
          }
        });
      });
    }
    exports.getUrl = getUrl;
  }
});

// node_modules/@ethersproject/web/lib/index.js
var require_lib28 = __commonJS({
  "node_modules/@ethersproject/web/lib/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.poll = exports.fetchJson = exports._fetchData = void 0;
    var base64_1 = require_lib10();
    var bytes_1 = require_lib2();
    var properties_1 = require_lib4();
    var strings_1 = require_lib9();
    var logger_1 = require_lib();
    var _version_1 = require_version22();
    var logger = new logger_1.Logger(_version_1.version);
    var geturl_1 = require_browser_geturl();
    function staller(duration) {
      return new Promise(function(resolve) {
        setTimeout(resolve, duration);
      });
    }
    function bodyify(value, type) {
      if (value == null) {
        return null;
      }
      if (typeof value === "string") {
        return value;
      }
      if ((0, bytes_1.isBytesLike)(value)) {
        if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
          try {
            return (0, strings_1.toUtf8String)(value);
          } catch (error) {
          }
          ;
        }
        return (0, bytes_1.hexlify)(value);
      }
      return value;
    }
    function unpercent(value) {
      return (0, strings_1.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, function(all, code) {
        return String.fromCharCode(parseInt(code, 16));
      }));
    }
    function _fetchData(connection, body, processFunc) {
      var attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
      logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
      var throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
      var throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
      logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
      var errorPassThrough = typeof connection === "object" ? !!connection.errorPassThrough : false;
      var headers = {};
      var url = null;
      var options = {
        method: "GET"
      };
      var allow304 = false;
      var timeout2 = 2 * 60 * 1e3;
      if (typeof connection === "string") {
        url = connection;
      } else if (typeof connection === "object") {
        if (connection == null || connection.url == null) {
          logger.throwArgumentError("missing URL", "connection.url", connection);
        }
        url = connection.url;
        if (typeof connection.timeout === "number" && connection.timeout > 0) {
          timeout2 = connection.timeout;
        }
        if (connection.headers) {
          for (var key in connection.headers) {
            headers[key.toLowerCase()] = { key, value: String(connection.headers[key]) };
            if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
              allow304 = true;
            }
          }
        }
        options.allowGzip = !!connection.allowGzip;
        if (connection.user != null && connection.password != null) {
          if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
            logger.throwError("basic authentication requires a secure https url", logger_1.Logger.errors.INVALID_ARGUMENT, { argument: "url", url, user: connection.user, password: "[REDACTED]" });
          }
          var authorization = connection.user + ":" + connection.password;
          headers["authorization"] = {
            key: "Authorization",
            value: "Basic " + (0, base64_1.encode)((0, strings_1.toUtf8Bytes)(authorization))
          };
        }
        if (connection.skipFetchSetup != null) {
          options.skipFetchSetup = !!connection.skipFetchSetup;
        }
        if (connection.fetchOptions != null) {
          options.fetchOptions = (0, properties_1.shallowCopy)(connection.fetchOptions);
        }
      }
      var reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
      var dataMatch = url ? url.match(reData) : null;
      if (dataMatch) {
        try {
          var response = {
            statusCode: 200,
            statusMessage: "OK",
            headers: { "content-type": dataMatch[1] || "text/plain" },
            body: dataMatch[2] ? (0, base64_1.decode)(dataMatch[3]) : unpercent(dataMatch[3])
          };
          var result = response.body;
          if (processFunc) {
            result = processFunc(response.body, response);
          }
          return Promise.resolve(result);
        } catch (error) {
          logger.throwError("processing response error", logger_1.Logger.errors.SERVER_ERROR, {
            body: bodyify(dataMatch[1], dataMatch[2]),
            error,
            requestBody: null,
            requestMethod: "GET",
            url
          });
        }
      }
      if (body) {
        options.method = "POST";
        options.body = body;
        if (headers["content-type"] == null) {
          headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
        }
        if (headers["content-length"] == null) {
          headers["content-length"] = { key: "Content-Length", value: String(body.length) };
        }
      }
      var flatHeaders = {};
      Object.keys(headers).forEach(function(key2) {
        var header = headers[key2];
        flatHeaders[header.key] = header.value;
      });
      options.headers = flatHeaders;
      var runningTimeout = function() {
        var timer = null;
        var promise = new Promise(function(resolve, reject) {
          if (timeout2) {
            timer = setTimeout(function() {
              if (timer == null) {
                return;
              }
              timer = null;
              reject(logger.makeError("timeout", logger_1.Logger.errors.TIMEOUT, {
                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                requestMethod: options.method,
                timeout: timeout2,
                url
              }));
            }, timeout2);
          }
        });
        var cancel = function() {
          if (timer == null) {
            return;
          }
          clearTimeout(timer);
          timer = null;
        };
        return { promise, cancel };
      }();
      var runningFetch = function() {
        return __awaiter(this, void 0, void 0, function() {
          var attempt, response2, location_1, tryAgain, stall, retryAfter, error_1, body_1, result2, error_2, tryAgain, timeout_1;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                attempt = 0;
                _a.label = 1;
              case 1:
                if (!(attempt < attemptLimit))
                  return [3, 20];
                response2 = null;
                _a.label = 2;
              case 2:
                _a.trys.push([2, 9, , 10]);
                return [4, (0, geturl_1.getUrl)(url, options)];
              case 3:
                response2 = _a.sent();
                if (!(attempt < attemptLimit))
                  return [3, 8];
                if (!(response2.statusCode === 301 || response2.statusCode === 302))
                  return [3, 4];
                location_1 = response2.headers.location || "";
                if (options.method === "GET" && location_1.match(/^https:/)) {
                  url = response2.headers.location;
                  return [3, 19];
                }
                return [3, 8];
              case 4:
                if (!(response2.statusCode === 429))
                  return [3, 8];
                tryAgain = true;
                if (!throttleCallback)
                  return [3, 6];
                return [4, throttleCallback(attempt, url)];
              case 5:
                tryAgain = _a.sent();
                _a.label = 6;
              case 6:
                if (!tryAgain)
                  return [3, 8];
                stall = 0;
                retryAfter = response2.headers["retry-after"];
                if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                  stall = parseInt(retryAfter) * 1e3;
                } else {
                  stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                }
                return [4, staller(stall)];
              case 7:
                _a.sent();
                return [3, 19];
              case 8:
                return [3, 10];
              case 9:
                error_1 = _a.sent();
                response2 = error_1.response;
                if (response2 == null) {
                  runningTimeout.cancel();
                  logger.throwError("missing response", logger_1.Logger.errors.SERVER_ERROR, {
                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                    requestMethod: options.method,
                    serverError: error_1,
                    url
                  });
                }
                return [3, 10];
              case 10:
                body_1 = response2.body;
                if (allow304 && response2.statusCode === 304) {
                  body_1 = null;
                } else if (!errorPassThrough && (response2.statusCode < 200 || response2.statusCode >= 300)) {
                  runningTimeout.cancel();
                  logger.throwError("bad response", logger_1.Logger.errors.SERVER_ERROR, {
                    status: response2.statusCode,
                    headers: response2.headers,
                    body: bodyify(body_1, response2.headers ? response2.headers["content-type"] : null),
                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                    requestMethod: options.method,
                    url
                  });
                }
                if (!processFunc)
                  return [3, 18];
                _a.label = 11;
              case 11:
                _a.trys.push([11, 13, , 18]);
                return [4, processFunc(body_1, response2)];
              case 12:
                result2 = _a.sent();
                runningTimeout.cancel();
                return [2, result2];
              case 13:
                error_2 = _a.sent();
                if (!(error_2.throttleRetry && attempt < attemptLimit))
                  return [3, 17];
                tryAgain = true;
                if (!throttleCallback)
                  return [3, 15];
                return [4, throttleCallback(attempt, url)];
              case 14:
                tryAgain = _a.sent();
                _a.label = 15;
              case 15:
                if (!tryAgain)
                  return [3, 17];
                timeout_1 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                return [4, staller(timeout_1)];
              case 16:
                _a.sent();
                return [3, 19];
              case 17:
                runningTimeout.cancel();
                logger.throwError("processing response error", logger_1.Logger.errors.SERVER_ERROR, {
                  body: bodyify(body_1, response2.headers ? response2.headers["content-type"] : null),
                  error: error_2,
                  requestBody: bodyify(options.body, flatHeaders["content-type"]),
                  requestMethod: options.method,
                  url
                });
                return [3, 18];
              case 18:
                runningTimeout.cancel();
                return [2, body_1];
              case 19:
                attempt++;
                return [3, 1];
              case 20:
                return [2, logger.throwError("failed response", logger_1.Logger.errors.SERVER_ERROR, {
                  requestBody: bodyify(options.body, flatHeaders["content-type"]),
                  requestMethod: options.method,
                  url
                })];
            }
          });
        });
      }();
      return Promise.race([runningTimeout.promise, runningFetch]);
    }
    exports._fetchData = _fetchData;
    function fetchJson(connection, json, processFunc) {
      var processJsonFunc = function(value, response) {
        var result = null;
        if (value != null) {
          try {
            result = JSON.parse((0, strings_1.toUtf8String)(value));
          } catch (error) {
            logger.throwError("invalid JSON", logger_1.Logger.errors.SERVER_ERROR, {
              body: value,
              error
            });
          }
        }
        if (processFunc) {
          result = processFunc(result, response);
        }
        return result;
      };
      var body = null;
      if (json != null) {
        body = (0, strings_1.toUtf8Bytes)(json);
        var updated = typeof connection === "string" ? { url: connection } : (0, properties_1.shallowCopy)(connection);
        if (updated.headers) {
          var hasContentType = Object.keys(updated.headers).filter(function(k) {
            return k.toLowerCase() === "content-type";
          }).length !== 0;
          if (!hasContentType) {
            updated.headers = (0, properties_1.shallowCopy)(updated.headers);
            updated.headers["content-type"] = "application/json";
          }
        } else {
          updated.headers = { "content-type": "application/json" };
        }
        connection = updated;
      }
      return _fetchData(connection, body, processJsonFunc);
    }
    exports.fetchJson = fetchJson;
    function poll(func, options) {
      if (!options) {
        options = {};
      }
      options = (0, properties_1.shallowCopy)(options);
      if (options.floor == null) {
        options.floor = 0;
      }
      if (options.ceiling == null) {
        options.ceiling = 1e4;
      }
      if (options.interval == null) {
        options.interval = 250;
      }
      return new Promise(function(resolve, reject) {
        var timer = null;
        var done = false;
        var cancel = function() {
          if (done) {
            return false;
          }
          done = true;
          if (timer) {
            clearTimeout(timer);
          }
          return true;
        };
        if (options.timeout) {
          timer = setTimeout(function() {
            if (cancel()) {
              reject(new Error("timeout"));
            }
          }, options.timeout);
        }
        var retryLimit = options.retryLimit;
        var attempt = 0;
        function check() {
          return func().then(function(result) {
            if (result !== void 0) {
              if (cancel()) {
                resolve(result);
              }
            } else if (options.oncePoll) {
              options.oncePoll.once("poll", check);
            } else if (options.onceBlock) {
              options.onceBlock.once("block", check);
            } else if (!done) {
              attempt++;
              if (attempt > retryLimit) {
                if (cancel()) {
                  reject(new Error("retry limit reached"));
                }
                return;
              }
              var timeout2 = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
              if (timeout2 < options.floor) {
                timeout2 = options.floor;
              }
              if (timeout2 > options.ceiling) {
                timeout2 = options.ceiling;
              }
              setTimeout(check, timeout2);
            }
            return null;
          }, function(error) {
            if (cancel()) {
              reject(error);
            }
          });
        }
        check();
      });
    }
    exports.poll = poll;
  }
});

// node_modules/bech32/index.js
var require_bech32 = __commonJS({
  "node_modules/bech32/index.js"(exports, module) {
    "use strict";
    var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
    var ALPHABET_MAP = {};
    for (z = 0; z < ALPHABET.length; z++) {
      x = ALPHABET.charAt(z);
      if (ALPHABET_MAP[x] !== void 0)
        throw new TypeError(x + " is ambiguous");
      ALPHABET_MAP[x] = z;
    }
    var x;
    var z;
    function polymodStep(pre) {
      var b = pre >> 25;
      return (pre & 33554431) << 5 ^ -(b >> 0 & 1) & 996825010 ^ -(b >> 1 & 1) & 642813549 ^ -(b >> 2 & 1) & 513874426 ^ -(b >> 3 & 1) & 1027748829 ^ -(b >> 4 & 1) & 705979059;
    }
    function prefixChk(prefix) {
      var chk = 1;
      for (var i = 0; i < prefix.length; ++i) {
        var c = prefix.charCodeAt(i);
        if (c < 33 || c > 126)
          return "Invalid prefix (" + prefix + ")";
        chk = polymodStep(chk) ^ c >> 5;
      }
      chk = polymodStep(chk);
      for (i = 0; i < prefix.length; ++i) {
        var v = prefix.charCodeAt(i);
        chk = polymodStep(chk) ^ v & 31;
      }
      return chk;
    }
    function encode(prefix, words, LIMIT) {
      LIMIT = LIMIT || 90;
      if (prefix.length + 7 + words.length > LIMIT)
        throw new TypeError("Exceeds length limit");
      prefix = prefix.toLowerCase();
      var chk = prefixChk(prefix);
      if (typeof chk === "string")
        throw new Error(chk);
      var result = prefix + "1";
      for (var i = 0; i < words.length; ++i) {
        var x2 = words[i];
        if (x2 >> 5 !== 0)
          throw new Error("Non 5-bit word");
        chk = polymodStep(chk) ^ x2;
        result += ALPHABET.charAt(x2);
      }
      for (i = 0; i < 6; ++i) {
        chk = polymodStep(chk);
      }
      chk ^= 1;
      for (i = 0; i < 6; ++i) {
        var v = chk >> (5 - i) * 5 & 31;
        result += ALPHABET.charAt(v);
      }
      return result;
    }
    function __decode(str, LIMIT) {
      LIMIT = LIMIT || 90;
      if (str.length < 8)
        return str + " too short";
      if (str.length > LIMIT)
        return "Exceeds length limit";
      var lowered = str.toLowerCase();
      var uppered = str.toUpperCase();
      if (str !== lowered && str !== uppered)
        return "Mixed-case string " + str;
      str = lowered;
      var split = str.lastIndexOf("1");
      if (split === -1)
        return "No separator character for " + str;
      if (split === 0)
        return "Missing prefix for " + str;
      var prefix = str.slice(0, split);
      var wordChars = str.slice(split + 1);
      if (wordChars.length < 6)
        return "Data too short";
      var chk = prefixChk(prefix);
      if (typeof chk === "string")
        return chk;
      var words = [];
      for (var i = 0; i < wordChars.length; ++i) {
        var c = wordChars.charAt(i);
        var v = ALPHABET_MAP[c];
        if (v === void 0)
          return "Unknown character " + c;
        chk = polymodStep(chk) ^ v;
        if (i + 6 >= wordChars.length)
          continue;
        words.push(v);
      }
      if (chk !== 1)
        return "Invalid checksum for " + str;
      return { prefix, words };
    }
    function decodeUnsafe() {
      var res = __decode.apply(null, arguments);
      if (typeof res === "object")
        return res;
    }
    function decode(str) {
      var res = __decode.apply(null, arguments);
      if (typeof res === "object")
        return res;
      throw new Error(res);
    }
    function convert(data, inBits, outBits, pad) {
      var value = 0;
      var bits = 0;
      var maxV = (1 << outBits) - 1;
      var result = [];
      for (var i = 0; i < data.length; ++i) {
        value = value << inBits | data[i];
        bits += inBits;
        while (bits >= outBits) {
          bits -= outBits;
          result.push(value >> bits & maxV);
        }
      }
      if (pad) {
        if (bits > 0) {
          result.push(value << outBits - bits & maxV);
        }
      } else {
        if (bits >= inBits)
          return "Excess padding";
        if (value << outBits - bits & maxV)
          return "Non-zero padding";
      }
      return result;
    }
    function toWordsUnsafe(bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res))
        return res;
    }
    function toWords(bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res))
        return res;
      throw new Error(res);
    }
    function fromWordsUnsafe(words) {
      var res = convert(words, 5, 8, false);
      if (Array.isArray(res))
        return res;
    }
    function fromWords(words) {
      var res = convert(words, 5, 8, false);
      if (Array.isArray(res))
        return res;
      throw new Error(res);
    }
    module.exports = {
      decodeUnsafe,
      decode,
      encode,
      toWordsUnsafe,
      toWords,
      fromWordsUnsafe,
      fromWords
    };
  }
});

// node_modules/@ethersproject/providers/lib/_version.js
var require_version23 = __commonJS({
  "node_modules/@ethersproject/providers/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "providers/5.7.2";
  }
});

// node_modules/@ethersproject/providers/lib/formatter.js
var require_formatter = __commonJS({
  "node_modules/@ethersproject/providers/lib/formatter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.showThrottleMessage = exports.isCommunityResource = exports.isCommunityResourcable = exports.Formatter = void 0;
    var address_1 = require_lib7();
    var bignumber_1 = require_lib3();
    var bytes_1 = require_lib2();
    var constants_1 = require_lib8();
    var properties_1 = require_lib4();
    var transactions_1 = require_lib17();
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    var Formatter = (
      /** @class */
      function() {
        function Formatter2() {
          this.formats = this.getDefaultFormats();
        }
        Formatter2.prototype.getDefaultFormats = function() {
          var _this = this;
          var formats = {};
          var address = this.address.bind(this);
          var bigNumber = this.bigNumber.bind(this);
          var blockTag = this.blockTag.bind(this);
          var data = this.data.bind(this);
          var hash = this.hash.bind(this);
          var hex = this.hex.bind(this);
          var number = this.number.bind(this);
          var type = this.type.bind(this);
          var strictData = function(v) {
            return _this.data(v, true);
          };
          formats.transaction = {
            hash,
            type,
            accessList: Formatter2.allowNull(this.accessList.bind(this), null),
            blockHash: Formatter2.allowNull(hash, null),
            blockNumber: Formatter2.allowNull(number, null),
            transactionIndex: Formatter2.allowNull(number, null),
            confirmations: Formatter2.allowNull(number, null),
            from: address,
            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
            // must be set
            gasPrice: Formatter2.allowNull(bigNumber),
            maxPriorityFeePerGas: Formatter2.allowNull(bigNumber),
            maxFeePerGas: Formatter2.allowNull(bigNumber),
            gasLimit: bigNumber,
            to: Formatter2.allowNull(address, null),
            value: bigNumber,
            nonce: number,
            data,
            r: Formatter2.allowNull(this.uint256),
            s: Formatter2.allowNull(this.uint256),
            v: Formatter2.allowNull(number),
            creates: Formatter2.allowNull(address, null),
            raw: Formatter2.allowNull(data)
          };
          formats.transactionRequest = {
            from: Formatter2.allowNull(address),
            nonce: Formatter2.allowNull(number),
            gasLimit: Formatter2.allowNull(bigNumber),
            gasPrice: Formatter2.allowNull(bigNumber),
            maxPriorityFeePerGas: Formatter2.allowNull(bigNumber),
            maxFeePerGas: Formatter2.allowNull(bigNumber),
            to: Formatter2.allowNull(address),
            value: Formatter2.allowNull(bigNumber),
            data: Formatter2.allowNull(strictData),
            type: Formatter2.allowNull(number),
            accessList: Formatter2.allowNull(this.accessList.bind(this), null)
          };
          formats.receiptLog = {
            transactionIndex: number,
            blockNumber: number,
            transactionHash: hash,
            address,
            topics: Formatter2.arrayOf(hash),
            data,
            logIndex: number,
            blockHash: hash
          };
          formats.receipt = {
            to: Formatter2.allowNull(this.address, null),
            from: Formatter2.allowNull(this.address, null),
            contractAddress: Formatter2.allowNull(address, null),
            transactionIndex: number,
            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
            root: Formatter2.allowNull(hex),
            gasUsed: bigNumber,
            logsBloom: Formatter2.allowNull(data),
            blockHash: hash,
            transactionHash: hash,
            logs: Formatter2.arrayOf(this.receiptLog.bind(this)),
            blockNumber: number,
            confirmations: Formatter2.allowNull(number, null),
            cumulativeGasUsed: bigNumber,
            effectiveGasPrice: Formatter2.allowNull(bigNumber),
            status: Formatter2.allowNull(number),
            type
          };
          formats.block = {
            hash: Formatter2.allowNull(hash),
            parentHash: hash,
            number,
            timestamp: number,
            nonce: Formatter2.allowNull(hex),
            difficulty: this.difficulty.bind(this),
            gasLimit: bigNumber,
            gasUsed: bigNumber,
            miner: Formatter2.allowNull(address),
            extraData: data,
            transactions: Formatter2.allowNull(Formatter2.arrayOf(hash)),
            baseFeePerGas: Formatter2.allowNull(bigNumber)
          };
          formats.blockWithTransactions = (0, properties_1.shallowCopy)(formats.block);
          formats.blockWithTransactions.transactions = Formatter2.allowNull(Formatter2.arrayOf(this.transactionResponse.bind(this)));
          formats.filter = {
            fromBlock: Formatter2.allowNull(blockTag, void 0),
            toBlock: Formatter2.allowNull(blockTag, void 0),
            blockHash: Formatter2.allowNull(hash, void 0),
            address: Formatter2.allowNull(address, void 0),
            topics: Formatter2.allowNull(this.topics.bind(this), void 0)
          };
          formats.filterLog = {
            blockNumber: Formatter2.allowNull(number),
            blockHash: Formatter2.allowNull(hash),
            transactionIndex: number,
            removed: Formatter2.allowNull(this.boolean.bind(this)),
            address,
            data: Formatter2.allowFalsish(data, "0x"),
            topics: Formatter2.arrayOf(hash),
            transactionHash: hash,
            logIndex: number
          };
          return formats;
        };
        Formatter2.prototype.accessList = function(accessList) {
          return (0, transactions_1.accessListify)(accessList || []);
        };
        Formatter2.prototype.number = function(number) {
          if (number === "0x") {
            return 0;
          }
          return bignumber_1.BigNumber.from(number).toNumber();
        };
        Formatter2.prototype.type = function(number) {
          if (number === "0x" || number == null) {
            return 0;
          }
          return bignumber_1.BigNumber.from(number).toNumber();
        };
        Formatter2.prototype.bigNumber = function(value) {
          return bignumber_1.BigNumber.from(value);
        };
        Formatter2.prototype.boolean = function(value) {
          if (typeof value === "boolean") {
            return value;
          }
          if (typeof value === "string") {
            value = value.toLowerCase();
            if (value === "true") {
              return true;
            }
            if (value === "false") {
              return false;
            }
          }
          throw new Error("invalid boolean - " + value);
        };
        Formatter2.prototype.hex = function(value, strict) {
          if (typeof value === "string") {
            if (!strict && value.substring(0, 2) !== "0x") {
              value = "0x" + value;
            }
            if ((0, bytes_1.isHexString)(value)) {
              return value.toLowerCase();
            }
          }
          return logger.throwArgumentError("invalid hash", "value", value);
        };
        Formatter2.prototype.data = function(value, strict) {
          var result = this.hex(value, strict);
          if (result.length % 2 !== 0) {
            throw new Error("invalid data; odd-length - " + value);
          }
          return result;
        };
        Formatter2.prototype.address = function(value) {
          return (0, address_1.getAddress)(value);
        };
        Formatter2.prototype.callAddress = function(value) {
          if (!(0, bytes_1.isHexString)(value, 32)) {
            return null;
          }
          var address = (0, address_1.getAddress)((0, bytes_1.hexDataSlice)(value, 12));
          return address === constants_1.AddressZero ? null : address;
        };
        Formatter2.prototype.contractAddress = function(value) {
          return (0, address_1.getContractAddress)(value);
        };
        Formatter2.prototype.blockTag = function(blockTag) {
          if (blockTag == null) {
            return "latest";
          }
          if (blockTag === "earliest") {
            return "0x0";
          }
          switch (blockTag) {
            case "earliest":
              return "0x0";
            case "latest":
            case "pending":
            case "safe":
            case "finalized":
              return blockTag;
          }
          if (typeof blockTag === "number" || (0, bytes_1.isHexString)(blockTag)) {
            return (0, bytes_1.hexValue)(blockTag);
          }
          throw new Error("invalid blockTag");
        };
        Formatter2.prototype.hash = function(value, strict) {
          var result = this.hex(value, strict);
          if ((0, bytes_1.hexDataLength)(result) !== 32) {
            return logger.throwArgumentError("invalid hash", "value", value);
          }
          return result;
        };
        Formatter2.prototype.difficulty = function(value) {
          if (value == null) {
            return null;
          }
          var v = bignumber_1.BigNumber.from(value);
          try {
            return v.toNumber();
          } catch (error) {
          }
          return null;
        };
        Formatter2.prototype.uint256 = function(value) {
          if (!(0, bytes_1.isHexString)(value)) {
            throw new Error("invalid uint256");
          }
          return (0, bytes_1.hexZeroPad)(value, 32);
        };
        Formatter2.prototype._block = function(value, format) {
          if (value.author != null && value.miner == null) {
            value.miner = value.author;
          }
          var difficulty = value._difficulty != null ? value._difficulty : value.difficulty;
          var result = Formatter2.check(format, value);
          result._difficulty = difficulty == null ? null : bignumber_1.BigNumber.from(difficulty);
          return result;
        };
        Formatter2.prototype.block = function(value) {
          return this._block(value, this.formats.block);
        };
        Formatter2.prototype.blockWithTransactions = function(value) {
          return this._block(value, this.formats.blockWithTransactions);
        };
        Formatter2.prototype.transactionRequest = function(value) {
          return Formatter2.check(this.formats.transactionRequest, value);
        };
        Formatter2.prototype.transactionResponse = function(transaction) {
          if (transaction.gas != null && transaction.gasLimit == null) {
            transaction.gasLimit = transaction.gas;
          }
          if (transaction.to && bignumber_1.BigNumber.from(transaction.to).isZero()) {
            transaction.to = "0x0000000000000000000000000000000000000000";
          }
          if (transaction.input != null && transaction.data == null) {
            transaction.data = transaction.input;
          }
          if (transaction.to == null && transaction.creates == null) {
            transaction.creates = this.contractAddress(transaction);
          }
          if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
            transaction.accessList = [];
          }
          var result = Formatter2.check(this.formats.transaction, transaction);
          if (transaction.chainId != null) {
            var chainId = transaction.chainId;
            if ((0, bytes_1.isHexString)(chainId)) {
              chainId = bignumber_1.BigNumber.from(chainId).toNumber();
            }
            result.chainId = chainId;
          } else {
            var chainId = transaction.networkId;
            if (chainId == null && result.v == null) {
              chainId = transaction.chainId;
            }
            if ((0, bytes_1.isHexString)(chainId)) {
              chainId = bignumber_1.BigNumber.from(chainId).toNumber();
            }
            if (typeof chainId !== "number" && result.v != null) {
              chainId = (result.v - 35) / 2;
              if (chainId < 0) {
                chainId = 0;
              }
              chainId = parseInt(chainId);
            }
            if (typeof chainId !== "number") {
              chainId = 0;
            }
            result.chainId = chainId;
          }
          if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
            result.blockHash = null;
          }
          return result;
        };
        Formatter2.prototype.transaction = function(value) {
          return (0, transactions_1.parse)(value);
        };
        Formatter2.prototype.receiptLog = function(value) {
          return Formatter2.check(this.formats.receiptLog, value);
        };
        Formatter2.prototype.receipt = function(value) {
          var result = Formatter2.check(this.formats.receipt, value);
          if (result.root != null) {
            if (result.root.length <= 4) {
              var value_1 = bignumber_1.BigNumber.from(result.root).toNumber();
              if (value_1 === 0 || value_1 === 1) {
                if (result.status != null && result.status !== value_1) {
                  logger.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
                }
                result.status = value_1;
                delete result.root;
              } else {
                logger.throwArgumentError("invalid alt-root-status", "value.root", result.root);
              }
            } else if (result.root.length !== 66) {
              logger.throwArgumentError("invalid root hash", "value.root", result.root);
            }
          }
          if (result.status != null) {
            result.byzantium = true;
          }
          return result;
        };
        Formatter2.prototype.topics = function(value) {
          var _this = this;
          if (Array.isArray(value)) {
            return value.map(function(v) {
              return _this.topics(v);
            });
          } else if (value != null) {
            return this.hash(value, true);
          }
          return null;
        };
        Formatter2.prototype.filter = function(value) {
          return Formatter2.check(this.formats.filter, value);
        };
        Formatter2.prototype.filterLog = function(value) {
          return Formatter2.check(this.formats.filterLog, value);
        };
        Formatter2.check = function(format, object) {
          var result = {};
          for (var key in format) {
            try {
              var value = format[key](object[key]);
              if (value !== void 0) {
                result[key] = value;
              }
            } catch (error) {
              error.checkKey = key;
              error.checkValue = object[key];
              throw error;
            }
          }
          return result;
        };
        Formatter2.allowNull = function(format, nullValue) {
          return function(value) {
            if (value == null) {
              return nullValue;
            }
            return format(value);
          };
        };
        Formatter2.allowFalsish = function(format, replaceValue) {
          return function(value) {
            if (!value) {
              return replaceValue;
            }
            return format(value);
          };
        };
        Formatter2.arrayOf = function(format) {
          return function(array) {
            if (!Array.isArray(array)) {
              throw new Error("not an array");
            }
            var result = [];
            array.forEach(function(value) {
              result.push(format(value));
            });
            return result;
          };
        };
        return Formatter2;
      }()
    );
    exports.Formatter = Formatter;
    function isCommunityResourcable(value) {
      return value && typeof value.isCommunityResource === "function";
    }
    exports.isCommunityResourcable = isCommunityResourcable;
    function isCommunityResource(value) {
      return isCommunityResourcable(value) && value.isCommunityResource();
    }
    exports.isCommunityResource = isCommunityResource;
    var throttleMessage = false;
    function showThrottleMessage() {
      if (throttleMessage) {
        return;
      }
      throttleMessage = true;
      console.log("========= NOTICE =========");
      console.log("Request-Rate Exceeded  (this message will not be repeated)");
      console.log("");
      console.log("The default API keys for each service are provided as a highly-throttled,");
      console.log("community resource for low-traffic projects and early prototyping.");
      console.log("");
      console.log("While your application will continue to function, we highly recommended");
      console.log("signing up for your own API keys to improve performance, increase your");
      console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
      console.log("");
      console.log("For more details: https://docs.ethers.io/api-keys/");
      console.log("==========================");
    }
    exports.showThrottleMessage = showThrottleMessage;
  }
});

// node_modules/@ethersproject/providers/lib/base-provider.js
var require_base_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/base-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseProvider = exports.Resolver = exports.Event = void 0;
    var abstract_provider_1 = require_lib14();
    var base64_1 = require_lib10();
    var basex_1 = require_lib19();
    var bignumber_1 = require_lib3();
    var bytes_1 = require_lib2();
    var constants_1 = require_lib8();
    var hash_1 = require_lib12();
    var networks_1 = require_lib27();
    var properties_1 = require_lib4();
    var sha2_1 = require_lib20();
    var strings_1 = require_lib9();
    var web_1 = require_lib28();
    var bech32_1 = __importDefault(require_bech32());
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    var formatter_1 = require_formatter();
    var MAX_CCIP_REDIRECTS = 10;
    function checkTopic(topic) {
      if (topic == null) {
        return "null";
      }
      if ((0, bytes_1.hexDataLength)(topic) !== 32) {
        logger.throwArgumentError("invalid topic", "topic", topic);
      }
      return topic.toLowerCase();
    }
    function serializeTopics(topics) {
      topics = topics.slice();
      while (topics.length > 0 && topics[topics.length - 1] == null) {
        topics.pop();
      }
      return topics.map(function(topic) {
        if (Array.isArray(topic)) {
          var unique_1 = {};
          topic.forEach(function(topic2) {
            unique_1[checkTopic(topic2)] = true;
          });
          var sorted = Object.keys(unique_1);
          sorted.sort();
          return sorted.join("|");
        } else {
          return checkTopic(topic);
        }
      }).join("&");
    }
    function deserializeTopics(data) {
      if (data === "") {
        return [];
      }
      return data.split(/&/g).map(function(topic) {
        if (topic === "") {
          return [];
        }
        var comps = topic.split("|").map(function(topic2) {
          return topic2 === "null" ? null : topic2;
        });
        return comps.length === 1 ? comps[0] : comps;
      });
    }
    function getEventTag(eventName) {
      if (typeof eventName === "string") {
        eventName = eventName.toLowerCase();
        if ((0, bytes_1.hexDataLength)(eventName) === 32) {
          return "tx:" + eventName;
        }
        if (eventName.indexOf(":") === -1) {
          return eventName;
        }
      } else if (Array.isArray(eventName)) {
        return "filter:*:" + serializeTopics(eventName);
      } else if (abstract_provider_1.ForkEvent.isForkEvent(eventName)) {
        logger.warn("not implemented");
        throw new Error("not implemented");
      } else if (eventName && typeof eventName === "object") {
        return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
      }
      throw new Error("invalid event - " + eventName);
    }
    function getTime() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    function stall(duration) {
      return new Promise(function(resolve) {
        setTimeout(resolve, duration);
      });
    }
    var PollableEvents = ["block", "network", "pending", "poll"];
    var Event2 = (
      /** @class */
      function() {
        function Event3(tag, listener, once) {
          (0, properties_1.defineReadOnly)(this, "tag", tag);
          (0, properties_1.defineReadOnly)(this, "listener", listener);
          (0, properties_1.defineReadOnly)(this, "once", once);
          this._lastBlockNumber = -2;
          this._inflight = false;
        }
        Object.defineProperty(Event3.prototype, "event", {
          get: function() {
            switch (this.type) {
              case "tx":
                return this.hash;
              case "filter":
                return this.filter;
            }
            return this.tag;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Event3.prototype, "type", {
          get: function() {
            return this.tag.split(":")[0];
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Event3.prototype, "hash", {
          get: function() {
            var comps = this.tag.split(":");
            if (comps[0] !== "tx") {
              return null;
            }
            return comps[1];
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Event3.prototype, "filter", {
          get: function() {
            var comps = this.tag.split(":");
            if (comps[0] !== "filter") {
              return null;
            }
            var address = comps[1];
            var topics = deserializeTopics(comps[2]);
            var filter = {};
            if (topics.length > 0) {
              filter.topics = topics;
            }
            if (address && address !== "*") {
              filter.address = address;
            }
            return filter;
          },
          enumerable: false,
          configurable: true
        });
        Event3.prototype.pollable = function() {
          return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
        };
        return Event3;
      }()
    );
    exports.Event = Event2;
    var coinInfos = {
      "0": { symbol: "btc", p2pkh: 0, p2sh: 5, prefix: "bc" },
      "2": { symbol: "ltc", p2pkh: 48, p2sh: 50, prefix: "ltc" },
      "3": { symbol: "doge", p2pkh: 30, p2sh: 22 },
      "60": { symbol: "eth", ilk: "eth" },
      "61": { symbol: "etc", ilk: "eth" },
      "700": { symbol: "xdai", ilk: "eth" }
    };
    function bytes32ify(value) {
      return (0, bytes_1.hexZeroPad)(bignumber_1.BigNumber.from(value).toHexString(), 32);
    }
    function base58Encode(data) {
      return basex_1.Base58.encode((0, bytes_1.concat)([data, (0, bytes_1.hexDataSlice)((0, sha2_1.sha256)((0, sha2_1.sha256)(data)), 0, 4)]));
    }
    var matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
    var matchers = [
      new RegExp("^(https)://(.*)$", "i"),
      new RegExp("^(data):(.*)$", "i"),
      matcherIpfs,
      new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
    ];
    function _parseString(result, start) {
      try {
        return (0, strings_1.toUtf8String)(_parseBytes(result, start));
      } catch (error) {
      }
      return null;
    }
    function _parseBytes(result, start) {
      if (result === "0x") {
        return null;
      }
      var offset = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(result, start, start + 32)).toNumber();
      var length = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(result, offset, offset + 32)).toNumber();
      return (0, bytes_1.hexDataSlice)(result, offset + 32, offset + 32 + length);
    }
    function getIpfsLink(link) {
      if (link.match(/^ipfs:\/\/ipfs\//i)) {
        link = link.substring(12);
      } else if (link.match(/^ipfs:\/\//i)) {
        link = link.substring(7);
      } else {
        logger.throwArgumentError("unsupported IPFS format", "link", link);
      }
      return "https://gateway.ipfs.io/ipfs/" + link;
    }
    function numPad(value) {
      var result = (0, bytes_1.arrayify)(value);
      if (result.length > 32) {
        throw new Error("internal; should not happen");
      }
      var padded = new Uint8Array(32);
      padded.set(result, 32 - result.length);
      return padded;
    }
    function bytesPad(value) {
      if (value.length % 32 === 0) {
        return value;
      }
      var result = new Uint8Array(Math.ceil(value.length / 32) * 32);
      result.set(value);
      return result;
    }
    function encodeBytes(datas) {
      var result = [];
      var byteCount = 0;
      for (var i = 0; i < datas.length; i++) {
        result.push(null);
        byteCount += 32;
      }
      for (var i = 0; i < datas.length; i++) {
        var data = (0, bytes_1.arrayify)(datas[i]);
        result[i] = numPad(byteCount);
        result.push(numPad(data.length));
        result.push(bytesPad(data));
        byteCount += 32 + Math.ceil(data.length / 32) * 32;
      }
      return (0, bytes_1.hexConcat)(result);
    }
    var Resolver = (
      /** @class */
      function() {
        function Resolver2(provider, address, name, resolvedAddress) {
          (0, properties_1.defineReadOnly)(this, "provider", provider);
          (0, properties_1.defineReadOnly)(this, "name", name);
          (0, properties_1.defineReadOnly)(this, "address", provider.formatter.address(address));
          (0, properties_1.defineReadOnly)(this, "_resolvedAddress", resolvedAddress);
        }
        Resolver2.prototype.supportsWildcard = function() {
          var _this = this;
          if (!this._supportsEip2544) {
            this._supportsEip2544 = this.provider.call({
              to: this.address,
              data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
            }).then(function(result) {
              return bignumber_1.BigNumber.from(result).eq(1);
            }).catch(function(error) {
              if (error.code === logger_1.Logger.errors.CALL_EXCEPTION) {
                return false;
              }
              _this._supportsEip2544 = null;
              throw error;
            });
          }
          return this._supportsEip2544;
        };
        Resolver2.prototype._fetch = function(selector, parameters) {
          return __awaiter(this, void 0, void 0, function() {
            var tx, parseBytes, result, error_1;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  tx = {
                    to: this.address,
                    ccipReadEnabled: true,
                    data: (0, bytes_1.hexConcat)([selector, (0, hash_1.namehash)(this.name), parameters || "0x"])
                  };
                  parseBytes = false;
                  return [4, this.supportsWildcard()];
                case 1:
                  if (_a.sent()) {
                    parseBytes = true;
                    tx.data = (0, bytes_1.hexConcat)(["0x9061b923", encodeBytes([(0, hash_1.dnsEncode)(this.name), tx.data])]);
                  }
                  _a.label = 2;
                case 2:
                  _a.trys.push([2, 4, , 5]);
                  return [4, this.provider.call(tx)];
                case 3:
                  result = _a.sent();
                  if ((0, bytes_1.arrayify)(result).length % 32 === 4) {
                    logger.throwError("resolver threw error", logger_1.Logger.errors.CALL_EXCEPTION, {
                      transaction: tx,
                      data: result
                    });
                  }
                  if (parseBytes) {
                    result = _parseBytes(result, 0);
                  }
                  return [2, result];
                case 4:
                  error_1 = _a.sent();
                  if (error_1.code === logger_1.Logger.errors.CALL_EXCEPTION) {
                    return [2, null];
                  }
                  throw error_1;
                case 5:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Resolver2.prototype._fetchBytes = function(selector, parameters) {
          return __awaiter(this, void 0, void 0, function() {
            var result;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this._fetch(selector, parameters)];
                case 1:
                  result = _a.sent();
                  if (result != null) {
                    return [2, _parseBytes(result, 0)];
                  }
                  return [2, null];
              }
            });
          });
        };
        Resolver2.prototype._getAddress = function(coinType, hexBytes) {
          var coinInfo = coinInfos[String(coinType)];
          if (coinInfo == null) {
            logger.throwError("unsupported coin type: " + coinType, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "getAddress(" + coinType + ")"
            });
          }
          if (coinInfo.ilk === "eth") {
            return this.provider.formatter.address(hexBytes);
          }
          var bytes = (0, bytes_1.arrayify)(hexBytes);
          if (coinInfo.p2pkh != null) {
            var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
            if (p2pkh) {
              var length_1 = parseInt(p2pkh[1], 16);
              if (p2pkh[2].length === length_1 * 2 && length_1 >= 1 && length_1 <= 75) {
                return base58Encode((0, bytes_1.concat)([[coinInfo.p2pkh], "0x" + p2pkh[2]]));
              }
            }
          }
          if (coinInfo.p2sh != null) {
            var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
            if (p2sh) {
              var length_2 = parseInt(p2sh[1], 16);
              if (p2sh[2].length === length_2 * 2 && length_2 >= 1 && length_2 <= 75) {
                return base58Encode((0, bytes_1.concat)([[coinInfo.p2sh], "0x" + p2sh[2]]));
              }
            }
          }
          if (coinInfo.prefix != null) {
            var length_3 = bytes[1];
            var version_1 = bytes[0];
            if (version_1 === 0) {
              if (length_3 !== 20 && length_3 !== 32) {
                version_1 = -1;
              }
            } else {
              version_1 = -1;
            }
            if (version_1 >= 0 && bytes.length === 2 + length_3 && length_3 >= 1 && length_3 <= 75) {
              var words = bech32_1.default.toWords(bytes.slice(2));
              words.unshift(version_1);
              return bech32_1.default.encode(coinInfo.prefix, words);
            }
          }
          return null;
        };
        Resolver2.prototype.getAddress = function(coinType) {
          return __awaiter(this, void 0, void 0, function() {
            var result, error_2, hexBytes, address;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (coinType == null) {
                    coinType = 60;
                  }
                  if (!(coinType === 60))
                    return [3, 4];
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  return [4, this._fetch("0x3b3b57de")];
                case 2:
                  result = _a.sent();
                  if (result === "0x" || result === constants_1.HashZero) {
                    return [2, null];
                  }
                  return [2, this.provider.formatter.callAddress(result)];
                case 3:
                  error_2 = _a.sent();
                  if (error_2.code === logger_1.Logger.errors.CALL_EXCEPTION) {
                    return [2, null];
                  }
                  throw error_2;
                case 4:
                  return [4, this._fetchBytes("0xf1cb7e06", bytes32ify(coinType))];
                case 5:
                  hexBytes = _a.sent();
                  if (hexBytes == null || hexBytes === "0x") {
                    return [2, null];
                  }
                  address = this._getAddress(coinType, hexBytes);
                  if (address == null) {
                    logger.throwError("invalid or unsupported coin data", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                      operation: "getAddress(" + coinType + ")",
                      coinType,
                      data: hexBytes
                    });
                  }
                  return [2, address];
              }
            });
          });
        };
        Resolver2.prototype.getAvatar = function() {
          return __awaiter(this, void 0, void 0, function() {
            var linkage, avatar, i, match, scheme, _a, selector, owner, _b, comps, addr, tokenId, tokenOwner, _c, _d, balance, _e, _f, tx, metadataUrl, _g, metadata, imageUrl, ipfs, error_3;
            return __generator(this, function(_h) {
              switch (_h.label) {
                case 0:
                  linkage = [{ type: "name", content: this.name }];
                  _h.label = 1;
                case 1:
                  _h.trys.push([1, 19, , 20]);
                  return [4, this.getText("avatar")];
                case 2:
                  avatar = _h.sent();
                  if (avatar == null) {
                    return [2, null];
                  }
                  i = 0;
                  _h.label = 3;
                case 3:
                  if (!(i < matchers.length))
                    return [3, 18];
                  match = avatar.match(matchers[i]);
                  if (match == null) {
                    return [3, 17];
                  }
                  scheme = match[1].toLowerCase();
                  _a = scheme;
                  switch (_a) {
                    case "https":
                      return [3, 4];
                    case "data":
                      return [3, 5];
                    case "ipfs":
                      return [3, 6];
                    case "erc721":
                      return [3, 7];
                    case "erc1155":
                      return [3, 7];
                  }
                  return [3, 17];
                case 4:
                  linkage.push({ type: "url", content: avatar });
                  return [2, { linkage, url: avatar }];
                case 5:
                  linkage.push({ type: "data", content: avatar });
                  return [2, { linkage, url: avatar }];
                case 6:
                  linkage.push({ type: "ipfs", content: avatar });
                  return [2, { linkage, url: getIpfsLink(avatar) }];
                case 7:
                  selector = scheme === "erc721" ? "0xc87b56dd" : "0x0e89341c";
                  linkage.push({ type: scheme, content: avatar });
                  _b = this._resolvedAddress;
                  if (_b)
                    return [3, 9];
                  return [4, this.getAddress()];
                case 8:
                  _b = _h.sent();
                  _h.label = 9;
                case 9:
                  owner = _b;
                  comps = (match[2] || "").split("/");
                  if (comps.length !== 2) {
                    return [2, null];
                  }
                  return [4, this.provider.formatter.address(comps[0])];
                case 10:
                  addr = _h.sent();
                  tokenId = (0, bytes_1.hexZeroPad)(bignumber_1.BigNumber.from(comps[1]).toHexString(), 32);
                  if (!(scheme === "erc721"))
                    return [3, 12];
                  _d = (_c = this.provider.formatter).callAddress;
                  return [4, this.provider.call({
                    to: addr,
                    data: (0, bytes_1.hexConcat)(["0x6352211e", tokenId])
                  })];
                case 11:
                  tokenOwner = _d.apply(_c, [_h.sent()]);
                  if (owner !== tokenOwner) {
                    return [2, null];
                  }
                  linkage.push({ type: "owner", content: tokenOwner });
                  return [3, 14];
                case 12:
                  if (!(scheme === "erc1155"))
                    return [3, 14];
                  _f = (_e = bignumber_1.BigNumber).from;
                  return [4, this.provider.call({
                    to: addr,
                    data: (0, bytes_1.hexConcat)(["0x00fdd58e", (0, bytes_1.hexZeroPad)(owner, 32), tokenId])
                  })];
                case 13:
                  balance = _f.apply(_e, [_h.sent()]);
                  if (balance.isZero()) {
                    return [2, null];
                  }
                  linkage.push({ type: "balance", content: balance.toString() });
                  _h.label = 14;
                case 14:
                  tx = {
                    to: this.provider.formatter.address(comps[0]),
                    data: (0, bytes_1.hexConcat)([selector, tokenId])
                  };
                  _g = _parseString;
                  return [4, this.provider.call(tx)];
                case 15:
                  metadataUrl = _g.apply(void 0, [_h.sent(), 0]);
                  if (metadataUrl == null) {
                    return [2, null];
                  }
                  linkage.push({ type: "metadata-url-base", content: metadataUrl });
                  if (scheme === "erc1155") {
                    metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                    linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
                  }
                  if (metadataUrl.match(/^ipfs:/i)) {
                    metadataUrl = getIpfsLink(metadataUrl);
                  }
                  linkage.push({ type: "metadata-url", content: metadataUrl });
                  return [4, (0, web_1.fetchJson)(metadataUrl)];
                case 16:
                  metadata = _h.sent();
                  if (!metadata) {
                    return [2, null];
                  }
                  linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
                  imageUrl = metadata.image;
                  if (typeof imageUrl !== "string") {
                    return [2, null];
                  }
                  if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                  } else {
                    ipfs = imageUrl.match(matcherIpfs);
                    if (ipfs == null) {
                      return [2, null];
                    }
                    linkage.push({ type: "url-ipfs", content: imageUrl });
                    imageUrl = getIpfsLink(imageUrl);
                  }
                  linkage.push({ type: "url", content: imageUrl });
                  return [2, { linkage, url: imageUrl }];
                case 17:
                  i++;
                  return [3, 3];
                case 18:
                  return [3, 20];
                case 19:
                  error_3 = _h.sent();
                  return [3, 20];
                case 20:
                  return [2, null];
              }
            });
          });
        };
        Resolver2.prototype.getContentHash = function() {
          return __awaiter(this, void 0, void 0, function() {
            var hexBytes, ipfs, length_4, ipns, length_5, swarm, skynet, urlSafe_1, hash;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this._fetchBytes("0xbc1c58d1")];
                case 1:
                  hexBytes = _a.sent();
                  if (hexBytes == null || hexBytes === "0x") {
                    return [2, null];
                  }
                  ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                  if (ipfs) {
                    length_4 = parseInt(ipfs[3], 16);
                    if (ipfs[4].length === length_4 * 2) {
                      return [2, "ipfs://" + basex_1.Base58.encode("0x" + ipfs[1])];
                    }
                  }
                  ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                  if (ipns) {
                    length_5 = parseInt(ipns[3], 16);
                    if (ipns[4].length === length_5 * 2) {
                      return [2, "ipns://" + basex_1.Base58.encode("0x" + ipns[1])];
                    }
                  }
                  swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
                  if (swarm) {
                    if (swarm[1].length === 32 * 2) {
                      return [2, "bzz://" + swarm[1]];
                    }
                  }
                  skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
                  if (skynet) {
                    if (skynet[1].length === 34 * 2) {
                      urlSafe_1 = { "=": "", "+": "-", "/": "_" };
                      hash = (0, base64_1.encode)("0x" + skynet[1]).replace(/[=+\/]/g, function(a) {
                        return urlSafe_1[a];
                      });
                      return [2, "sia://" + hash];
                    }
                  }
                  return [2, logger.throwError("invalid or unsupported content hash data", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "getContentHash()",
                    data: hexBytes
                  })];
              }
            });
          });
        };
        Resolver2.prototype.getText = function(key) {
          return __awaiter(this, void 0, void 0, function() {
            var keyBytes, hexBytes;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  keyBytes = (0, strings_1.toUtf8Bytes)(key);
                  keyBytes = (0, bytes_1.concat)([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
                  if (keyBytes.length % 32 !== 0) {
                    keyBytes = (0, bytes_1.concat)([keyBytes, (0, bytes_1.hexZeroPad)("0x", 32 - key.length % 32)]);
                  }
                  return [4, this._fetchBytes("0x59d1d43c", (0, bytes_1.hexlify)(keyBytes))];
                case 1:
                  hexBytes = _a.sent();
                  if (hexBytes == null || hexBytes === "0x") {
                    return [2, null];
                  }
                  return [2, (0, strings_1.toUtf8String)(hexBytes)];
              }
            });
          });
        };
        return Resolver2;
      }()
    );
    exports.Resolver = Resolver;
    var defaultFormatter = null;
    var nextPollId = 1;
    var BaseProvider = (
      /** @class */
      function(_super) {
        __extends(BaseProvider2, _super);
        function BaseProvider2(network) {
          var _newTarget = this.constructor;
          var _this = _super.call(this) || this;
          _this._events = [];
          _this._emitted = { block: -2 };
          _this.disableCcipRead = false;
          _this.formatter = _newTarget.getFormatter();
          (0, properties_1.defineReadOnly)(_this, "anyNetwork", network === "any");
          if (_this.anyNetwork) {
            network = _this.detectNetwork();
          }
          if (network instanceof Promise) {
            _this._networkPromise = network;
            network.catch(function(error) {
            });
            _this._ready().catch(function(error) {
            });
          } else {
            var knownNetwork = (0, properties_1.getStatic)(_newTarget, "getNetwork")(network);
            if (knownNetwork) {
              (0, properties_1.defineReadOnly)(_this, "_network", knownNetwork);
              _this.emit("network", knownNetwork, null);
            } else {
              logger.throwArgumentError("invalid network", "network", network);
            }
          }
          _this._maxInternalBlockNumber = -1024;
          _this._lastBlockNumber = -2;
          _this._maxFilterBlockRange = 10;
          _this._pollingInterval = 4e3;
          _this._fastQueryDate = 0;
          return _this;
        }
        BaseProvider2.prototype._ready = function() {
          return __awaiter(this, void 0, void 0, function() {
            var network, error_4;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!(this._network == null))
                    return [3, 7];
                  network = null;
                  if (!this._networkPromise)
                    return [3, 4];
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  return [4, this._networkPromise];
                case 2:
                  network = _a.sent();
                  return [3, 4];
                case 3:
                  error_4 = _a.sent();
                  return [3, 4];
                case 4:
                  if (!(network == null))
                    return [3, 6];
                  return [4, this.detectNetwork()];
                case 5:
                  network = _a.sent();
                  _a.label = 6;
                case 6:
                  if (!network) {
                    logger.throwError("no network detected", logger_1.Logger.errors.UNKNOWN_ERROR, {});
                  }
                  if (this._network == null) {
                    if (this.anyNetwork) {
                      this._network = network;
                    } else {
                      (0, properties_1.defineReadOnly)(this, "_network", network);
                    }
                    this.emit("network", network, null);
                  }
                  _a.label = 7;
                case 7:
                  return [2, this._network];
              }
            });
          });
        };
        Object.defineProperty(BaseProvider2.prototype, "ready", {
          // This will always return the most recently established network.
          // For "any", this can change (a "network" event is emitted before
          // any change is reflected); otherwise this cannot change
          get: function() {
            var _this = this;
            return (0, web_1.poll)(function() {
              return _this._ready().then(function(network) {
                return network;
              }, function(error) {
                if (error.code === logger_1.Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
                  return void 0;
                }
                throw error;
              });
            });
          },
          enumerable: false,
          configurable: true
        });
        BaseProvider2.getFormatter = function() {
          if (defaultFormatter == null) {
            defaultFormatter = new formatter_1.Formatter();
          }
          return defaultFormatter;
        };
        BaseProvider2.getNetwork = function(network) {
          return (0, networks_1.getNetwork)(network == null ? "homestead" : network);
        };
        BaseProvider2.prototype.ccipReadFetch = function(tx, calldata, urls) {
          return __awaiter(this, void 0, void 0, function() {
            var sender, data, errorMessages, i, url, href, json, result, errorMessage;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (this.disableCcipRead || urls.length === 0) {
                    return [2, null];
                  }
                  sender = tx.to.toLowerCase();
                  data = calldata.toLowerCase();
                  errorMessages = [];
                  i = 0;
                  _a.label = 1;
                case 1:
                  if (!(i < urls.length))
                    return [3, 4];
                  url = urls[i];
                  href = url.replace("{sender}", sender).replace("{data}", data);
                  json = url.indexOf("{data}") >= 0 ? null : JSON.stringify({ data, sender });
                  return [4, (0, web_1.fetchJson)({ url: href, errorPassThrough: true }, json, function(value, response) {
                    value.status = response.statusCode;
                    return value;
                  })];
                case 2:
                  result = _a.sent();
                  if (result.data) {
                    return [2, result.data];
                  }
                  errorMessage = result.message || "unknown error";
                  if (result.status >= 400 && result.status < 500) {
                    return [2, logger.throwError("response not found during CCIP fetch: " + errorMessage, logger_1.Logger.errors.SERVER_ERROR, { url, errorMessage })];
                  }
                  errorMessages.push(errorMessage);
                  _a.label = 3;
                case 3:
                  i++;
                  return [3, 1];
                case 4:
                  return [2, logger.throwError("error encountered during CCIP fetch: " + errorMessages.map(function(m) {
                    return JSON.stringify(m);
                  }).join(", "), logger_1.Logger.errors.SERVER_ERROR, {
                    urls,
                    errorMessages
                  })];
              }
            });
          });
        };
        BaseProvider2.prototype._getInternalBlockNumber = function(maxAge) {
          return __awaiter(this, void 0, void 0, function() {
            var internalBlockNumber, result, error_5, reqTime, checkInternalBlockNumber;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this._ready()];
                case 1:
                  _a.sent();
                  if (!(maxAge > 0))
                    return [3, 7];
                  _a.label = 2;
                case 2:
                  if (!this._internalBlockNumber)
                    return [3, 7];
                  internalBlockNumber = this._internalBlockNumber;
                  _a.label = 3;
                case 3:
                  _a.trys.push([3, 5, , 6]);
                  return [4, internalBlockNumber];
                case 4:
                  result = _a.sent();
                  if (getTime() - result.respTime <= maxAge) {
                    return [2, result.blockNumber];
                  }
                  return [3, 7];
                case 5:
                  error_5 = _a.sent();
                  if (this._internalBlockNumber === internalBlockNumber) {
                    return [3, 7];
                  }
                  return [3, 6];
                case 6:
                  return [3, 2];
                case 7:
                  reqTime = getTime();
                  checkInternalBlockNumber = (0, properties_1.resolveProperties)({
                    blockNumber: this.perform("getBlockNumber", {}),
                    networkError: this.getNetwork().then(function(network) {
                      return null;
                    }, function(error) {
                      return error;
                    })
                  }).then(function(_a2) {
                    var blockNumber = _a2.blockNumber, networkError = _a2.networkError;
                    if (networkError) {
                      if (_this._internalBlockNumber === checkInternalBlockNumber) {
                        _this._internalBlockNumber = null;
                      }
                      throw networkError;
                    }
                    var respTime = getTime();
                    blockNumber = bignumber_1.BigNumber.from(blockNumber).toNumber();
                    if (blockNumber < _this._maxInternalBlockNumber) {
                      blockNumber = _this._maxInternalBlockNumber;
                    }
                    _this._maxInternalBlockNumber = blockNumber;
                    _this._setFastBlockNumber(blockNumber);
                    return { blockNumber, reqTime, respTime };
                  });
                  this._internalBlockNumber = checkInternalBlockNumber;
                  checkInternalBlockNumber.catch(function(error) {
                    if (_this._internalBlockNumber === checkInternalBlockNumber) {
                      _this._internalBlockNumber = null;
                    }
                  });
                  return [4, checkInternalBlockNumber];
                case 8:
                  return [2, _a.sent().blockNumber];
              }
            });
          });
        };
        BaseProvider2.prototype.poll = function() {
          return __awaiter(this, void 0, void 0, function() {
            var pollId, runners, blockNumber, error_6, i;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  pollId = nextPollId++;
                  runners = [];
                  blockNumber = null;
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  return [4, this._getInternalBlockNumber(100 + this.pollingInterval / 2)];
                case 2:
                  blockNumber = _a.sent();
                  return [3, 4];
                case 3:
                  error_6 = _a.sent();
                  this.emit("error", error_6);
                  return [
                    2
                    /*return*/
                  ];
                case 4:
                  this._setFastBlockNumber(blockNumber);
                  this.emit("poll", pollId, blockNumber);
                  if (blockNumber === this._lastBlockNumber) {
                    this.emit("didPoll", pollId);
                    return [
                      2
                      /*return*/
                    ];
                  }
                  if (this._emitted.block === -2) {
                    this._emitted.block = blockNumber - 1;
                  }
                  if (Math.abs(this._emitted.block - blockNumber) > 1e3) {
                    logger.warn("network block skew detected; skipping block events (emitted=" + this._emitted.block + " blockNumber" + blockNumber + ")");
                    this.emit("error", logger.makeError("network block skew detected", logger_1.Logger.errors.NETWORK_ERROR, {
                      blockNumber,
                      event: "blockSkew",
                      previousBlockNumber: this._emitted.block
                    }));
                    this.emit("block", blockNumber);
                  } else {
                    for (i = this._emitted.block + 1; i <= blockNumber; i++) {
                      this.emit("block", i);
                    }
                  }
                  if (this._emitted.block !== blockNumber) {
                    this._emitted.block = blockNumber;
                    Object.keys(this._emitted).forEach(function(key) {
                      if (key === "block") {
                        return;
                      }
                      var eventBlockNumber = _this._emitted[key];
                      if (eventBlockNumber === "pending") {
                        return;
                      }
                      if (blockNumber - eventBlockNumber > 12) {
                        delete _this._emitted[key];
                      }
                    });
                  }
                  if (this._lastBlockNumber === -2) {
                    this._lastBlockNumber = blockNumber - 1;
                  }
                  this._events.forEach(function(event) {
                    switch (event.type) {
                      case "tx": {
                        var hash_2 = event.hash;
                        var runner = _this.getTransactionReceipt(hash_2).then(function(receipt) {
                          if (!receipt || receipt.blockNumber == null) {
                            return null;
                          }
                          _this._emitted["t:" + hash_2] = receipt.blockNumber;
                          _this.emit(hash_2, receipt);
                          return null;
                        }).catch(function(error) {
                          _this.emit("error", error);
                        });
                        runners.push(runner);
                        break;
                      }
                      case "filter": {
                        if (!event._inflight) {
                          event._inflight = true;
                          if (event._lastBlockNumber === -2) {
                            event._lastBlockNumber = blockNumber - 1;
                          }
                          var filter_1 = event.filter;
                          filter_1.fromBlock = event._lastBlockNumber + 1;
                          filter_1.toBlock = blockNumber;
                          var minFromBlock = filter_1.toBlock - _this._maxFilterBlockRange;
                          if (minFromBlock > filter_1.fromBlock) {
                            filter_1.fromBlock = minFromBlock;
                          }
                          if (filter_1.fromBlock < 0) {
                            filter_1.fromBlock = 0;
                          }
                          var runner = _this.getLogs(filter_1).then(function(logs) {
                            event._inflight = false;
                            if (logs.length === 0) {
                              return;
                            }
                            logs.forEach(function(log) {
                              if (log.blockNumber > event._lastBlockNumber) {
                                event._lastBlockNumber = log.blockNumber;
                              }
                              _this._emitted["b:" + log.blockHash] = log.blockNumber;
                              _this._emitted["t:" + log.transactionHash] = log.blockNumber;
                              _this.emit(filter_1, log);
                            });
                          }).catch(function(error) {
                            _this.emit("error", error);
                            event._inflight = false;
                          });
                          runners.push(runner);
                        }
                        break;
                      }
                    }
                  });
                  this._lastBlockNumber = blockNumber;
                  Promise.all(runners).then(function() {
                    _this.emit("didPoll", pollId);
                  }).catch(function(error) {
                    _this.emit("error", error);
                  });
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        BaseProvider2.prototype.resetEventsBlock = function(blockNumber) {
          this._lastBlockNumber = blockNumber - 1;
          if (this.polling) {
            this.poll();
          }
        };
        Object.defineProperty(BaseProvider2.prototype, "network", {
          get: function() {
            return this._network;
          },
          enumerable: false,
          configurable: true
        });
        BaseProvider2.prototype.detectNetwork = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, logger.throwError("provider does not support network detection", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "provider.detectNetwork"
              })];
            });
          });
        };
        BaseProvider2.prototype.getNetwork = function() {
          return __awaiter(this, void 0, void 0, function() {
            var network, currentNetwork, error;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this._ready()];
                case 1:
                  network = _a.sent();
                  return [4, this.detectNetwork()];
                case 2:
                  currentNetwork = _a.sent();
                  if (!(network.chainId !== currentNetwork.chainId))
                    return [3, 5];
                  if (!this.anyNetwork)
                    return [3, 4];
                  this._network = currentNetwork;
                  this._lastBlockNumber = -2;
                  this._fastBlockNumber = null;
                  this._fastBlockNumberPromise = null;
                  this._fastQueryDate = 0;
                  this._emitted.block = -2;
                  this._maxInternalBlockNumber = -1024;
                  this._internalBlockNumber = null;
                  this.emit("network", currentNetwork, network);
                  return [4, stall(0)];
                case 3:
                  _a.sent();
                  return [2, this._network];
                case 4:
                  error = logger.makeError("underlying network changed", logger_1.Logger.errors.NETWORK_ERROR, {
                    event: "changed",
                    network,
                    detectedNetwork: currentNetwork
                  });
                  this.emit("error", error);
                  throw error;
                case 5:
                  return [2, network];
              }
            });
          });
        };
        Object.defineProperty(BaseProvider2.prototype, "blockNumber", {
          get: function() {
            var _this = this;
            this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function(blockNumber) {
              _this._setFastBlockNumber(blockNumber);
            }, function(error) {
            });
            return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BaseProvider2.prototype, "polling", {
          get: function() {
            return this._poller != null;
          },
          set: function(value) {
            var _this = this;
            if (value && !this._poller) {
              this._poller = setInterval(function() {
                _this.poll();
              }, this.pollingInterval);
              if (!this._bootstrapPoll) {
                this._bootstrapPoll = setTimeout(function() {
                  _this.poll();
                  _this._bootstrapPoll = setTimeout(function() {
                    if (!_this._poller) {
                      _this.poll();
                    }
                    _this._bootstrapPoll = null;
                  }, _this.pollingInterval);
                }, 0);
              }
            } else if (!value && this._poller) {
              clearInterval(this._poller);
              this._poller = null;
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(BaseProvider2.prototype, "pollingInterval", {
          get: function() {
            return this._pollingInterval;
          },
          set: function(value) {
            var _this = this;
            if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) {
              throw new Error("invalid polling interval");
            }
            this._pollingInterval = value;
            if (this._poller) {
              clearInterval(this._poller);
              this._poller = setInterval(function() {
                _this.poll();
              }, this._pollingInterval);
            }
          },
          enumerable: false,
          configurable: true
        });
        BaseProvider2.prototype._getFastBlockNumber = function() {
          var _this = this;
          var now = getTime();
          if (now - this._fastQueryDate > 2 * this._pollingInterval) {
            this._fastQueryDate = now;
            this._fastBlockNumberPromise = this.getBlockNumber().then(function(blockNumber) {
              if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {
                _this._fastBlockNumber = blockNumber;
              }
              return _this._fastBlockNumber;
            });
          }
          return this._fastBlockNumberPromise;
        };
        BaseProvider2.prototype._setFastBlockNumber = function(blockNumber) {
          if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
            return;
          }
          this._fastQueryDate = getTime();
          if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
            this._fastBlockNumber = blockNumber;
            this._fastBlockNumberPromise = Promise.resolve(blockNumber);
          }
        };
        BaseProvider2.prototype.waitForTransaction = function(transactionHash, confirmations, timeout2) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout2 || 0, null)];
            });
          });
        };
        BaseProvider2.prototype._waitForTransaction = function(transactionHash, confirmations, timeout2, replaceable) {
          return __awaiter(this, void 0, void 0, function() {
            var receipt;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getTransactionReceipt(transactionHash)];
                case 1:
                  receipt = _a.sent();
                  if ((receipt ? receipt.confirmations : 0) >= confirmations) {
                    return [2, receipt];
                  }
                  return [2, new Promise(function(resolve, reject) {
                    var cancelFuncs = [];
                    var done = false;
                    var alreadyDone = function() {
                      if (done) {
                        return true;
                      }
                      done = true;
                      cancelFuncs.forEach(function(func) {
                        func();
                      });
                      return false;
                    };
                    var minedHandler = function(receipt2) {
                      if (receipt2.confirmations < confirmations) {
                        return;
                      }
                      if (alreadyDone()) {
                        return;
                      }
                      resolve(receipt2);
                    };
                    _this.on(transactionHash, minedHandler);
                    cancelFuncs.push(function() {
                      _this.removeListener(transactionHash, minedHandler);
                    });
                    if (replaceable) {
                      var lastBlockNumber_1 = replaceable.startBlock;
                      var scannedBlock_1 = null;
                      var replaceHandler_1 = function(blockNumber) {
                        return __awaiter(_this, void 0, void 0, function() {
                          var _this2 = this;
                          return __generator(this, function(_a2) {
                            switch (_a2.label) {
                              case 0:
                                if (done) {
                                  return [
                                    2
                                    /*return*/
                                  ];
                                }
                                return [4, stall(1e3)];
                              case 1:
                                _a2.sent();
                                this.getTransactionCount(replaceable.from).then(function(nonce) {
                                  return __awaiter(_this2, void 0, void 0, function() {
                                    var mined, block, ti, tx, receipt_1, reason;
                                    return __generator(this, function(_a3) {
                                      switch (_a3.label) {
                                        case 0:
                                          if (done) {
                                            return [
                                              2
                                              /*return*/
                                            ];
                                          }
                                          if (!(nonce <= replaceable.nonce))
                                            return [3, 1];
                                          lastBlockNumber_1 = blockNumber;
                                          return [3, 9];
                                        case 1:
                                          return [4, this.getTransaction(transactionHash)];
                                        case 2:
                                          mined = _a3.sent();
                                          if (mined && mined.blockNumber != null) {
                                            return [
                                              2
                                              /*return*/
                                            ];
                                          }
                                          if (scannedBlock_1 == null) {
                                            scannedBlock_1 = lastBlockNumber_1 - 3;
                                            if (scannedBlock_1 < replaceable.startBlock) {
                                              scannedBlock_1 = replaceable.startBlock;
                                            }
                                          }
                                          _a3.label = 3;
                                        case 3:
                                          if (!(scannedBlock_1 <= blockNumber))
                                            return [3, 9];
                                          if (done) {
                                            return [
                                              2
                                              /*return*/
                                            ];
                                          }
                                          return [4, this.getBlockWithTransactions(scannedBlock_1)];
                                        case 4:
                                          block = _a3.sent();
                                          ti = 0;
                                          _a3.label = 5;
                                        case 5:
                                          if (!(ti < block.transactions.length))
                                            return [3, 8];
                                          tx = block.transactions[ti];
                                          if (tx.hash === transactionHash) {
                                            return [
                                              2
                                              /*return*/
                                            ];
                                          }
                                          if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce))
                                            return [3, 7];
                                          if (done) {
                                            return [
                                              2
                                              /*return*/
                                            ];
                                          }
                                          return [4, this.waitForTransaction(tx.hash, confirmations)];
                                        case 6:
                                          receipt_1 = _a3.sent();
                                          if (alreadyDone()) {
                                            return [
                                              2
                                              /*return*/
                                            ];
                                          }
                                          reason = "replaced";
                                          if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                                            reason = "repriced";
                                          } else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                                            reason = "cancelled";
                                          }
                                          reject(logger.makeError("transaction was replaced", logger_1.Logger.errors.TRANSACTION_REPLACED, {
                                            cancelled: reason === "replaced" || reason === "cancelled",
                                            reason,
                                            replacement: this._wrapTransaction(tx),
                                            hash: transactionHash,
                                            receipt: receipt_1
                                          }));
                                          return [
                                            2
                                            /*return*/
                                          ];
                                        case 7:
                                          ti++;
                                          return [3, 5];
                                        case 8:
                                          scannedBlock_1++;
                                          return [3, 3];
                                        case 9:
                                          if (done) {
                                            return [
                                              2
                                              /*return*/
                                            ];
                                          }
                                          this.once("block", replaceHandler_1);
                                          return [
                                            2
                                            /*return*/
                                          ];
                                      }
                                    });
                                  });
                                }, function(error) {
                                  if (done) {
                                    return;
                                  }
                                  _this2.once("block", replaceHandler_1);
                                });
                                return [
                                  2
                                  /*return*/
                                ];
                            }
                          });
                        });
                      };
                      if (done) {
                        return;
                      }
                      _this.once("block", replaceHandler_1);
                      cancelFuncs.push(function() {
                        _this.removeListener("block", replaceHandler_1);
                      });
                    }
                    if (typeof timeout2 === "number" && timeout2 > 0) {
                      var timer_1 = setTimeout(function() {
                        if (alreadyDone()) {
                          return;
                        }
                        reject(logger.makeError("timeout exceeded", logger_1.Logger.errors.TIMEOUT, { timeout: timeout2 }));
                      }, timeout2);
                      if (timer_1.unref) {
                        timer_1.unref();
                      }
                      cancelFuncs.push(function() {
                        clearTimeout(timer_1);
                      });
                    }
                  })];
              }
            });
          });
        };
        BaseProvider2.prototype.getBlockNumber = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, this._getInternalBlockNumber(0)];
            });
          });
        };
        BaseProvider2.prototype.getGasPrice = function() {
          return __awaiter(this, void 0, void 0, function() {
            var result;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getNetwork()];
                case 1:
                  _a.sent();
                  return [4, this.perform("getGasPrice", {})];
                case 2:
                  result = _a.sent();
                  try {
                    return [2, bignumber_1.BigNumber.from(result)];
                  } catch (error) {
                    return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                      method: "getGasPrice",
                      result,
                      error
                    })];
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        BaseProvider2.prototype.getBalance = function(addressOrName, blockTag) {
          return __awaiter(this, void 0, void 0, function() {
            var params, result;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getNetwork()];
                case 1:
                  _a.sent();
                  return [4, (0, properties_1.resolveProperties)({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                  })];
                case 2:
                  params = _a.sent();
                  return [4, this.perform("getBalance", params)];
                case 3:
                  result = _a.sent();
                  try {
                    return [2, bignumber_1.BigNumber.from(result)];
                  } catch (error) {
                    return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                      method: "getBalance",
                      params,
                      result,
                      error
                    })];
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        BaseProvider2.prototype.getTransactionCount = function(addressOrName, blockTag) {
          return __awaiter(this, void 0, void 0, function() {
            var params, result;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getNetwork()];
                case 1:
                  _a.sent();
                  return [4, (0, properties_1.resolveProperties)({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                  })];
                case 2:
                  params = _a.sent();
                  return [4, this.perform("getTransactionCount", params)];
                case 3:
                  result = _a.sent();
                  try {
                    return [2, bignumber_1.BigNumber.from(result).toNumber()];
                  } catch (error) {
                    return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                      method: "getTransactionCount",
                      params,
                      result,
                      error
                    })];
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        BaseProvider2.prototype.getCode = function(addressOrName, blockTag) {
          return __awaiter(this, void 0, void 0, function() {
            var params, result;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getNetwork()];
                case 1:
                  _a.sent();
                  return [4, (0, properties_1.resolveProperties)({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                  })];
                case 2:
                  params = _a.sent();
                  return [4, this.perform("getCode", params)];
                case 3:
                  result = _a.sent();
                  try {
                    return [2, (0, bytes_1.hexlify)(result)];
                  } catch (error) {
                    return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                      method: "getCode",
                      params,
                      result,
                      error
                    })];
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        BaseProvider2.prototype.getStorageAt = function(addressOrName, position, blockTag) {
          return __awaiter(this, void 0, void 0, function() {
            var params, result;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getNetwork()];
                case 1:
                  _a.sent();
                  return [4, (0, properties_1.resolveProperties)({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag),
                    position: Promise.resolve(position).then(function(p) {
                      return (0, bytes_1.hexValue)(p);
                    })
                  })];
                case 2:
                  params = _a.sent();
                  return [4, this.perform("getStorageAt", params)];
                case 3:
                  result = _a.sent();
                  try {
                    return [2, (0, bytes_1.hexlify)(result)];
                  } catch (error) {
                    return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                      method: "getStorageAt",
                      params,
                      result,
                      error
                    })];
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        BaseProvider2.prototype._wrapTransaction = function(tx, hash, startBlock) {
          var _this = this;
          if (hash != null && (0, bytes_1.hexDataLength)(hash) !== 32) {
            throw new Error("invalid response - sendTransaction");
          }
          var result = tx;
          if (hash != null && tx.hash !== hash) {
            logger.throwError("Transaction hash mismatch from Provider.sendTransaction.", logger_1.Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
          }
          result.wait = function(confirms, timeout2) {
            return __awaiter(_this, void 0, void 0, function() {
              var replacement, receipt;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (confirms == null) {
                      confirms = 1;
                    }
                    if (timeout2 == null) {
                      timeout2 = 0;
                    }
                    replacement = void 0;
                    if (confirms !== 0 && startBlock != null) {
                      replacement = {
                        data: tx.data,
                        from: tx.from,
                        nonce: tx.nonce,
                        to: tx.to,
                        value: tx.value,
                        startBlock
                      };
                    }
                    return [4, this._waitForTransaction(tx.hash, confirms, timeout2, replacement)];
                  case 1:
                    receipt = _a.sent();
                    if (receipt == null && confirms === 0) {
                      return [2, null];
                    }
                    this._emitted["t:" + tx.hash] = receipt.blockNumber;
                    if (receipt.status === 0) {
                      logger.throwError("transaction failed", logger_1.Logger.errors.CALL_EXCEPTION, {
                        transactionHash: tx.hash,
                        transaction: tx,
                        receipt
                      });
                    }
                    return [2, receipt];
                }
              });
            });
          };
          return result;
        };
        BaseProvider2.prototype.sendTransaction = function(signedTransaction) {
          return __awaiter(this, void 0, void 0, function() {
            var hexTx, tx, blockNumber, hash, error_7;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getNetwork()];
                case 1:
                  _a.sent();
                  return [4, Promise.resolve(signedTransaction).then(function(t) {
                    return (0, bytes_1.hexlify)(t);
                  })];
                case 2:
                  hexTx = _a.sent();
                  tx = this.formatter.transaction(signedTransaction);
                  if (tx.confirmations == null) {
                    tx.confirmations = 0;
                  }
                  return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                case 3:
                  blockNumber = _a.sent();
                  _a.label = 4;
                case 4:
                  _a.trys.push([4, 6, , 7]);
                  return [4, this.perform("sendTransaction", { signedTransaction: hexTx })];
                case 5:
                  hash = _a.sent();
                  return [2, this._wrapTransaction(tx, hash, blockNumber)];
                case 6:
                  error_7 = _a.sent();
                  error_7.transaction = tx;
                  error_7.transactionHash = tx.hash;
                  throw error_7;
                case 7:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        BaseProvider2.prototype._getTransactionRequest = function(transaction) {
          return __awaiter(this, void 0, void 0, function() {
            var values, tx, _a, _b;
            var _this = this;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  return [4, transaction];
                case 1:
                  values = _c.sent();
                  tx = {};
                  ["from", "to"].forEach(function(key) {
                    if (values[key] == null) {
                      return;
                    }
                    tx[key] = Promise.resolve(values[key]).then(function(v) {
                      return v ? _this._getAddress(v) : null;
                    });
                  });
                  ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach(function(key) {
                    if (values[key] == null) {
                      return;
                    }
                    tx[key] = Promise.resolve(values[key]).then(function(v) {
                      return v ? bignumber_1.BigNumber.from(v) : null;
                    });
                  });
                  ["type"].forEach(function(key) {
                    if (values[key] == null) {
                      return;
                    }
                    tx[key] = Promise.resolve(values[key]).then(function(v) {
                      return v != null ? v : null;
                    });
                  });
                  if (values.accessList) {
                    tx.accessList = this.formatter.accessList(values.accessList);
                  }
                  ["data"].forEach(function(key) {
                    if (values[key] == null) {
                      return;
                    }
                    tx[key] = Promise.resolve(values[key]).then(function(v) {
                      return v ? (0, bytes_1.hexlify)(v) : null;
                    });
                  });
                  _b = (_a = this.formatter).transactionRequest;
                  return [4, (0, properties_1.resolveProperties)(tx)];
                case 2:
                  return [2, _b.apply(_a, [_c.sent()])];
              }
            });
          });
        };
        BaseProvider2.prototype._getFilter = function(filter) {
          return __awaiter(this, void 0, void 0, function() {
            var result, _a, _b;
            var _this = this;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  return [4, filter];
                case 1:
                  filter = _c.sent();
                  result = {};
                  if (filter.address != null) {
                    result.address = this._getAddress(filter.address);
                  }
                  ["blockHash", "topics"].forEach(function(key) {
                    if (filter[key] == null) {
                      return;
                    }
                    result[key] = filter[key];
                  });
                  ["fromBlock", "toBlock"].forEach(function(key) {
                    if (filter[key] == null) {
                      return;
                    }
                    result[key] = _this._getBlockTag(filter[key]);
                  });
                  _b = (_a = this.formatter).filter;
                  return [4, (0, properties_1.resolveProperties)(result)];
                case 2:
                  return [2, _b.apply(_a, [_c.sent()])];
              }
            });
          });
        };
        BaseProvider2.prototype._call = function(transaction, blockTag, attempt) {
          return __awaiter(this, void 0, void 0, function() {
            var txSender, result, data, sender, urls, urlsOffset, urlsLength, urlsData, u, url, calldata, callbackSelector, extraData, ccipResult, tx, error_8;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (attempt >= MAX_CCIP_REDIRECTS) {
                    logger.throwError("CCIP read exceeded maximum redirections", logger_1.Logger.errors.SERVER_ERROR, {
                      redirects: attempt,
                      transaction
                    });
                  }
                  txSender = transaction.to;
                  return [4, this.perform("call", { transaction, blockTag })];
                case 1:
                  result = _a.sent();
                  if (!(attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && (0, bytes_1.hexDataLength)(result) % 32 === 4))
                    return [3, 5];
                  _a.label = 2;
                case 2:
                  _a.trys.push([2, 4, , 5]);
                  data = (0, bytes_1.hexDataSlice)(result, 4);
                  sender = (0, bytes_1.hexDataSlice)(data, 0, 32);
                  if (!bignumber_1.BigNumber.from(sender).eq(txSender)) {
                    logger.throwError("CCIP Read sender did not match", logger_1.Logger.errors.CALL_EXCEPTION, {
                      name: "OffchainLookup",
                      signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                      transaction,
                      data: result
                    });
                  }
                  urls = [];
                  urlsOffset = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(data, 32, 64)).toNumber();
                  urlsLength = bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(data, urlsOffset, urlsOffset + 32)).toNumber();
                  urlsData = (0, bytes_1.hexDataSlice)(data, urlsOffset + 32);
                  for (u = 0; u < urlsLength; u++) {
                    url = _parseString(urlsData, u * 32);
                    if (url == null) {
                      logger.throwError("CCIP Read contained corrupt URL string", logger_1.Logger.errors.CALL_EXCEPTION, {
                        name: "OffchainLookup",
                        signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                        transaction,
                        data: result
                      });
                    }
                    urls.push(url);
                  }
                  calldata = _parseBytes(data, 64);
                  if (!bignumber_1.BigNumber.from((0, bytes_1.hexDataSlice)(data, 100, 128)).isZero()) {
                    logger.throwError("CCIP Read callback selector included junk", logger_1.Logger.errors.CALL_EXCEPTION, {
                      name: "OffchainLookup",
                      signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                      transaction,
                      data: result
                    });
                  }
                  callbackSelector = (0, bytes_1.hexDataSlice)(data, 96, 100);
                  extraData = _parseBytes(data, 128);
                  return [4, this.ccipReadFetch(transaction, calldata, urls)];
                case 3:
                  ccipResult = _a.sent();
                  if (ccipResult == null) {
                    logger.throwError("CCIP Read disabled or provided no URLs", logger_1.Logger.errors.CALL_EXCEPTION, {
                      name: "OffchainLookup",
                      signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                      transaction,
                      data: result
                    });
                  }
                  tx = {
                    to: txSender,
                    data: (0, bytes_1.hexConcat)([callbackSelector, encodeBytes([ccipResult, extraData])])
                  };
                  return [2, this._call(tx, blockTag, attempt + 1)];
                case 4:
                  error_8 = _a.sent();
                  if (error_8.code === logger_1.Logger.errors.SERVER_ERROR) {
                    throw error_8;
                  }
                  return [3, 5];
                case 5:
                  try {
                    return [2, (0, bytes_1.hexlify)(result)];
                  } catch (error) {
                    return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                      method: "call",
                      params: { transaction, blockTag },
                      result,
                      error
                    })];
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        BaseProvider2.prototype.call = function(transaction, blockTag) {
          return __awaiter(this, void 0, void 0, function() {
            var resolved;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getNetwork()];
                case 1:
                  _a.sent();
                  return [4, (0, properties_1.resolveProperties)({
                    transaction: this._getTransactionRequest(transaction),
                    blockTag: this._getBlockTag(blockTag),
                    ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
                  })];
                case 2:
                  resolved = _a.sent();
                  return [2, this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1)];
              }
            });
          });
        };
        BaseProvider2.prototype.estimateGas = function(transaction) {
          return __awaiter(this, void 0, void 0, function() {
            var params, result;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getNetwork()];
                case 1:
                  _a.sent();
                  return [4, (0, properties_1.resolveProperties)({
                    transaction: this._getTransactionRequest(transaction)
                  })];
                case 2:
                  params = _a.sent();
                  return [4, this.perform("estimateGas", params)];
                case 3:
                  result = _a.sent();
                  try {
                    return [2, bignumber_1.BigNumber.from(result)];
                  } catch (error) {
                    return [2, logger.throwError("bad result from backend", logger_1.Logger.errors.SERVER_ERROR, {
                      method: "estimateGas",
                      params,
                      result,
                      error
                    })];
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        BaseProvider2.prototype._getAddress = function(addressOrName) {
          return __awaiter(this, void 0, void 0, function() {
            var address;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, addressOrName];
                case 1:
                  addressOrName = _a.sent();
                  if (typeof addressOrName !== "string") {
                    logger.throwArgumentError("invalid address or ENS name", "name", addressOrName);
                  }
                  return [4, this.resolveName(addressOrName)];
                case 2:
                  address = _a.sent();
                  if (address == null) {
                    logger.throwError("ENS name not configured", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                      operation: "resolveName(" + JSON.stringify(addressOrName) + ")"
                    });
                  }
                  return [2, address];
              }
            });
          });
        };
        BaseProvider2.prototype._getBlock = function(blockHashOrBlockTag, includeTransactions) {
          return __awaiter(this, void 0, void 0, function() {
            var blockNumber, params, _a, error_9;
            var _this = this;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  return [4, this.getNetwork()];
                case 1:
                  _b.sent();
                  return [4, blockHashOrBlockTag];
                case 2:
                  blockHashOrBlockTag = _b.sent();
                  blockNumber = -128;
                  params = {
                    includeTransactions: !!includeTransactions
                  };
                  if (!(0, bytes_1.isHexString)(blockHashOrBlockTag, 32))
                    return [3, 3];
                  params.blockHash = blockHashOrBlockTag;
                  return [3, 6];
                case 3:
                  _b.trys.push([3, 5, , 6]);
                  _a = params;
                  return [4, this._getBlockTag(blockHashOrBlockTag)];
                case 4:
                  _a.blockTag = _b.sent();
                  if ((0, bytes_1.isHexString)(params.blockTag)) {
                    blockNumber = parseInt(params.blockTag.substring(2), 16);
                  }
                  return [3, 6];
                case 5:
                  error_9 = _b.sent();
                  logger.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
                  return [3, 6];
                case 6:
                  return [2, (0, web_1.poll)(function() {
                    return __awaiter(_this, void 0, void 0, function() {
                      var block, blockNumber_1, i, tx, confirmations, blockWithTxs;
                      var _this2 = this;
                      return __generator(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            return [4, this.perform("getBlock", params)];
                          case 1:
                            block = _a2.sent();
                            if (block == null) {
                              if (params.blockHash != null) {
                                if (this._emitted["b:" + params.blockHash] == null) {
                                  return [2, null];
                                }
                              }
                              if (params.blockTag != null) {
                                if (blockNumber > this._emitted.block) {
                                  return [2, null];
                                }
                              }
                              return [2, void 0];
                            }
                            if (!includeTransactions)
                              return [3, 8];
                            blockNumber_1 = null;
                            i = 0;
                            _a2.label = 2;
                          case 2:
                            if (!(i < block.transactions.length))
                              return [3, 7];
                            tx = block.transactions[i];
                            if (!(tx.blockNumber == null))
                              return [3, 3];
                            tx.confirmations = 0;
                            return [3, 6];
                          case 3:
                            if (!(tx.confirmations == null))
                              return [3, 6];
                            if (!(blockNumber_1 == null))
                              return [3, 5];
                            return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                          case 4:
                            blockNumber_1 = _a2.sent();
                            _a2.label = 5;
                          case 5:
                            confirmations = blockNumber_1 - tx.blockNumber + 1;
                            if (confirmations <= 0) {
                              confirmations = 1;
                            }
                            tx.confirmations = confirmations;
                            _a2.label = 6;
                          case 6:
                            i++;
                            return [3, 2];
                          case 7:
                            blockWithTxs = this.formatter.blockWithTransactions(block);
                            blockWithTxs.transactions = blockWithTxs.transactions.map(function(tx2) {
                              return _this2._wrapTransaction(tx2);
                            });
                            return [2, blockWithTxs];
                          case 8:
                            return [2, this.formatter.block(block)];
                        }
                      });
                    });
                  }, { oncePoll: this })];
              }
            });
          });
        };
        BaseProvider2.prototype.getBlock = function(blockHashOrBlockTag) {
          return this._getBlock(blockHashOrBlockTag, false);
        };
        BaseProvider2.prototype.getBlockWithTransactions = function(blockHashOrBlockTag) {
          return this._getBlock(blockHashOrBlockTag, true);
        };
        BaseProvider2.prototype.getTransaction = function(transactionHash) {
          return __awaiter(this, void 0, void 0, function() {
            var params;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getNetwork()];
                case 1:
                  _a.sent();
                  return [4, transactionHash];
                case 2:
                  transactionHash = _a.sent();
                  params = { transactionHash: this.formatter.hash(transactionHash, true) };
                  return [2, (0, web_1.poll)(function() {
                    return __awaiter(_this, void 0, void 0, function() {
                      var result, tx, blockNumber, confirmations;
                      return __generator(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            return [4, this.perform("getTransaction", params)];
                          case 1:
                            result = _a2.sent();
                            if (result == null) {
                              if (this._emitted["t:" + transactionHash] == null) {
                                return [2, null];
                              }
                              return [2, void 0];
                            }
                            tx = this.formatter.transactionResponse(result);
                            if (!(tx.blockNumber == null))
                              return [3, 2];
                            tx.confirmations = 0;
                            return [3, 4];
                          case 2:
                            if (!(tx.confirmations == null))
                              return [3, 4];
                            return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                          case 3:
                            blockNumber = _a2.sent();
                            confirmations = blockNumber - tx.blockNumber + 1;
                            if (confirmations <= 0) {
                              confirmations = 1;
                            }
                            tx.confirmations = confirmations;
                            _a2.label = 4;
                          case 4:
                            return [2, this._wrapTransaction(tx)];
                        }
                      });
                    });
                  }, { oncePoll: this })];
              }
            });
          });
        };
        BaseProvider2.prototype.getTransactionReceipt = function(transactionHash) {
          return __awaiter(this, void 0, void 0, function() {
            var params;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getNetwork()];
                case 1:
                  _a.sent();
                  return [4, transactionHash];
                case 2:
                  transactionHash = _a.sent();
                  params = { transactionHash: this.formatter.hash(transactionHash, true) };
                  return [2, (0, web_1.poll)(function() {
                    return __awaiter(_this, void 0, void 0, function() {
                      var result, receipt, blockNumber, confirmations;
                      return __generator(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            return [4, this.perform("getTransactionReceipt", params)];
                          case 1:
                            result = _a2.sent();
                            if (result == null) {
                              if (this._emitted["t:" + transactionHash] == null) {
                                return [2, null];
                              }
                              return [2, void 0];
                            }
                            if (result.blockHash == null) {
                              return [2, void 0];
                            }
                            receipt = this.formatter.receipt(result);
                            if (!(receipt.blockNumber == null))
                              return [3, 2];
                            receipt.confirmations = 0;
                            return [3, 4];
                          case 2:
                            if (!(receipt.confirmations == null))
                              return [3, 4];
                            return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                          case 3:
                            blockNumber = _a2.sent();
                            confirmations = blockNumber - receipt.blockNumber + 1;
                            if (confirmations <= 0) {
                              confirmations = 1;
                            }
                            receipt.confirmations = confirmations;
                            _a2.label = 4;
                          case 4:
                            return [2, receipt];
                        }
                      });
                    });
                  }, { oncePoll: this })];
              }
            });
          });
        };
        BaseProvider2.prototype.getLogs = function(filter) {
          return __awaiter(this, void 0, void 0, function() {
            var params, logs;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getNetwork()];
                case 1:
                  _a.sent();
                  return [4, (0, properties_1.resolveProperties)({ filter: this._getFilter(filter) })];
                case 2:
                  params = _a.sent();
                  return [4, this.perform("getLogs", params)];
                case 3:
                  logs = _a.sent();
                  logs.forEach(function(log) {
                    if (log.removed == null) {
                      log.removed = false;
                    }
                  });
                  return [2, formatter_1.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs)];
              }
            });
          });
        };
        BaseProvider2.prototype.getEtherPrice = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getNetwork()];
                case 1:
                  _a.sent();
                  return [2, this.perform("getEtherPrice", {})];
              }
            });
          });
        };
        BaseProvider2.prototype._getBlockTag = function(blockTag) {
          return __awaiter(this, void 0, void 0, function() {
            var blockNumber;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, blockTag];
                case 1:
                  blockTag = _a.sent();
                  if (!(typeof blockTag === "number" && blockTag < 0))
                    return [3, 3];
                  if (blockTag % 1) {
                    logger.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                  }
                  return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                case 2:
                  blockNumber = _a.sent();
                  blockNumber += blockTag;
                  if (blockNumber < 0) {
                    blockNumber = 0;
                  }
                  return [2, this.formatter.blockTag(blockNumber)];
                case 3:
                  return [2, this.formatter.blockTag(blockTag)];
              }
            });
          });
        };
        BaseProvider2.prototype.getResolver = function(name) {
          return __awaiter(this, void 0, void 0, function() {
            var currentName, addr, resolver, _a;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  currentName = name;
                  _b.label = 1;
                case 1:
                  if (false)
                    return [3, 6];
                  if (currentName === "" || currentName === ".") {
                    return [2, null];
                  }
                  if (name !== "eth" && currentName === "eth") {
                    return [2, null];
                  }
                  return [4, this._getResolver(currentName, "getResolver")];
                case 2:
                  addr = _b.sent();
                  if (!(addr != null))
                    return [3, 5];
                  resolver = new Resolver(this, addr, name);
                  _a = currentName !== name;
                  if (!_a)
                    return [3, 4];
                  return [4, resolver.supportsWildcard()];
                case 3:
                  _a = !_b.sent();
                  _b.label = 4;
                case 4:
                  if (_a) {
                    return [2, null];
                  }
                  return [2, resolver];
                case 5:
                  currentName = currentName.split(".").slice(1).join(".");
                  return [3, 1];
                case 6:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        BaseProvider2.prototype._getResolver = function(name, operation) {
          return __awaiter(this, void 0, void 0, function() {
            var network, addrData, error_10;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (operation == null) {
                    operation = "ENS";
                  }
                  return [4, this.getNetwork()];
                case 1:
                  network = _a.sent();
                  if (!network.ensAddress) {
                    logger.throwError("network does not support ENS", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });
                  }
                  _a.label = 2;
                case 2:
                  _a.trys.push([2, 4, , 5]);
                  return [4, this.call({
                    to: network.ensAddress,
                    data: "0x0178b8bf" + (0, hash_1.namehash)(name).substring(2)
                  })];
                case 3:
                  addrData = _a.sent();
                  return [2, this.formatter.callAddress(addrData)];
                case 4:
                  error_10 = _a.sent();
                  return [3, 5];
                case 5:
                  return [2, null];
              }
            });
          });
        };
        BaseProvider2.prototype.resolveName = function(name) {
          return __awaiter(this, void 0, void 0, function() {
            var resolver;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, name];
                case 1:
                  name = _a.sent();
                  try {
                    return [2, Promise.resolve(this.formatter.address(name))];
                  } catch (error) {
                    if ((0, bytes_1.isHexString)(name)) {
                      throw error;
                    }
                  }
                  if (typeof name !== "string") {
                    logger.throwArgumentError("invalid ENS name", "name", name);
                  }
                  return [4, this.getResolver(name)];
                case 2:
                  resolver = _a.sent();
                  if (!resolver) {
                    return [2, null];
                  }
                  return [4, resolver.getAddress()];
                case 3:
                  return [2, _a.sent()];
              }
            });
          });
        };
        BaseProvider2.prototype.lookupAddress = function(address) {
          return __awaiter(this, void 0, void 0, function() {
            var node, resolverAddr, name, _a, addr;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  return [4, address];
                case 1:
                  address = _b.sent();
                  address = this.formatter.address(address);
                  node = address.substring(2).toLowerCase() + ".addr.reverse";
                  return [4, this._getResolver(node, "lookupAddress")];
                case 2:
                  resolverAddr = _b.sent();
                  if (resolverAddr == null) {
                    return [2, null];
                  }
                  _a = _parseString;
                  return [4, this.call({
                    to: resolverAddr,
                    data: "0x691f3431" + (0, hash_1.namehash)(node).substring(2)
                  })];
                case 3:
                  name = _a.apply(void 0, [_b.sent(), 0]);
                  return [4, this.resolveName(name)];
                case 4:
                  addr = _b.sent();
                  if (addr != address) {
                    return [2, null];
                  }
                  return [2, name];
              }
            });
          });
        };
        BaseProvider2.prototype.getAvatar = function(nameOrAddress) {
          return __awaiter(this, void 0, void 0, function() {
            var resolver, address, node, resolverAddress, avatar_1, error_11, name_1, _a, error_12, avatar;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  resolver = null;
                  if (!(0, bytes_1.isHexString)(nameOrAddress))
                    return [3, 10];
                  address = this.formatter.address(nameOrAddress);
                  node = address.substring(2).toLowerCase() + ".addr.reverse";
                  return [4, this._getResolver(node, "getAvatar")];
                case 1:
                  resolverAddress = _b.sent();
                  if (!resolverAddress) {
                    return [2, null];
                  }
                  resolver = new Resolver(this, resolverAddress, node);
                  _b.label = 2;
                case 2:
                  _b.trys.push([2, 4, , 5]);
                  return [4, resolver.getAvatar()];
                case 3:
                  avatar_1 = _b.sent();
                  if (avatar_1) {
                    return [2, avatar_1.url];
                  }
                  return [3, 5];
                case 4:
                  error_11 = _b.sent();
                  if (error_11.code !== logger_1.Logger.errors.CALL_EXCEPTION) {
                    throw error_11;
                  }
                  return [3, 5];
                case 5:
                  _b.trys.push([5, 8, , 9]);
                  _a = _parseString;
                  return [4, this.call({
                    to: resolverAddress,
                    data: "0x691f3431" + (0, hash_1.namehash)(node).substring(2)
                  })];
                case 6:
                  name_1 = _a.apply(void 0, [_b.sent(), 0]);
                  return [4, this.getResolver(name_1)];
                case 7:
                  resolver = _b.sent();
                  return [3, 9];
                case 8:
                  error_12 = _b.sent();
                  if (error_12.code !== logger_1.Logger.errors.CALL_EXCEPTION) {
                    throw error_12;
                  }
                  return [2, null];
                case 9:
                  return [3, 12];
                case 10:
                  return [4, this.getResolver(nameOrAddress)];
                case 11:
                  resolver = _b.sent();
                  if (!resolver) {
                    return [2, null];
                  }
                  _b.label = 12;
                case 12:
                  return [4, resolver.getAvatar()];
                case 13:
                  avatar = _b.sent();
                  if (avatar == null) {
                    return [2, null];
                  }
                  return [2, avatar.url];
              }
            });
          });
        };
        BaseProvider2.prototype.perform = function(method, params) {
          return logger.throwError(method + " not implemented", logger_1.Logger.errors.NOT_IMPLEMENTED, { operation: method });
        };
        BaseProvider2.prototype._startEvent = function(event) {
          this.polling = this._events.filter(function(e) {
            return e.pollable();
          }).length > 0;
        };
        BaseProvider2.prototype._stopEvent = function(event) {
          this.polling = this._events.filter(function(e) {
            return e.pollable();
          }).length > 0;
        };
        BaseProvider2.prototype._addEventListener = function(eventName, listener, once) {
          var event = new Event2(getEventTag(eventName), listener, once);
          this._events.push(event);
          this._startEvent(event);
          return this;
        };
        BaseProvider2.prototype.on = function(eventName, listener) {
          return this._addEventListener(eventName, listener, false);
        };
        BaseProvider2.prototype.once = function(eventName, listener) {
          return this._addEventListener(eventName, listener, true);
        };
        BaseProvider2.prototype.emit = function(eventName) {
          var _this = this;
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }
          var result = false;
          var stopped = [];
          var eventTag = getEventTag(eventName);
          this._events = this._events.filter(function(event) {
            if (event.tag !== eventTag) {
              return true;
            }
            setTimeout(function() {
              event.listener.apply(_this, args);
            }, 0);
            result = true;
            if (event.once) {
              stopped.push(event);
              return false;
            }
            return true;
          });
          stopped.forEach(function(event) {
            _this._stopEvent(event);
          });
          return result;
        };
        BaseProvider2.prototype.listenerCount = function(eventName) {
          if (!eventName) {
            return this._events.length;
          }
          var eventTag = getEventTag(eventName);
          return this._events.filter(function(event) {
            return event.tag === eventTag;
          }).length;
        };
        BaseProvider2.prototype.listeners = function(eventName) {
          if (eventName == null) {
            return this._events.map(function(event) {
              return event.listener;
            });
          }
          var eventTag = getEventTag(eventName);
          return this._events.filter(function(event) {
            return event.tag === eventTag;
          }).map(function(event) {
            return event.listener;
          });
        };
        BaseProvider2.prototype.off = function(eventName, listener) {
          var _this = this;
          if (listener == null) {
            return this.removeAllListeners(eventName);
          }
          var stopped = [];
          var found = false;
          var eventTag = getEventTag(eventName);
          this._events = this._events.filter(function(event) {
            if (event.tag !== eventTag || event.listener != listener) {
              return true;
            }
            if (found) {
              return true;
            }
            found = true;
            stopped.push(event);
            return false;
          });
          stopped.forEach(function(event) {
            _this._stopEvent(event);
          });
          return this;
        };
        BaseProvider2.prototype.removeAllListeners = function(eventName) {
          var _this = this;
          var stopped = [];
          if (eventName == null) {
            stopped = this._events;
            this._events = [];
          } else {
            var eventTag_1 = getEventTag(eventName);
            this._events = this._events.filter(function(event) {
              if (event.tag !== eventTag_1) {
                return true;
              }
              stopped.push(event);
              return false;
            });
          }
          stopped.forEach(function(event) {
            _this._stopEvent(event);
          });
          return this;
        };
        return BaseProvider2;
      }(abstract_provider_1.Provider)
    );
    exports.BaseProvider = BaseProvider;
  }
});

// node_modules/@ethersproject/providers/lib/json-rpc-provider.js
var require_json_rpc_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/json-rpc-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonRpcProvider = exports.JsonRpcSigner = void 0;
    var abstract_signer_1 = require_lib15();
    var bignumber_1 = require_lib3();
    var bytes_1 = require_lib2();
    var hash_1 = require_lib12();
    var properties_1 = require_lib4();
    var strings_1 = require_lib9();
    var transactions_1 = require_lib17();
    var web_1 = require_lib28();
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    var base_provider_1 = require_base_provider();
    var errorGas = ["call", "estimateGas"];
    function spelunk(value, requireData) {
      if (value == null) {
        return null;
      }
      if (typeof value.message === "string" && value.message.match("reverted")) {
        var data = (0, bytes_1.isHexString)(value.data) ? value.data : null;
        if (!requireData || data) {
          return { message: value.message, data };
        }
      }
      if (typeof value === "object") {
        for (var key in value) {
          var result = spelunk(value[key], requireData);
          if (result) {
            return result;
          }
        }
        return null;
      }
      if (typeof value === "string") {
        try {
          return spelunk(JSON.parse(value), requireData);
        } catch (error) {
        }
      }
      return null;
    }
    function checkError(method, error, params) {
      var transaction = params.transaction || params.signedTransaction;
      if (method === "call") {
        var result = spelunk(error, true);
        if (result) {
          return result.data;
        }
        logger.throwError("missing revert data in call exception; Transaction reverted without a reason string", logger_1.Logger.errors.CALL_EXCEPTION, {
          data: "0x",
          transaction,
          error
        });
      }
      if (method === "estimateGas") {
        var result = spelunk(error.body, false);
        if (result == null) {
          result = spelunk(error, false);
        }
        if (result) {
          logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
            reason: result.message,
            method,
            transaction,
            error
          });
        }
      }
      var message = error.message;
      if (error.code === logger_1.Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === "string") {
        message = error.error.message;
      } else if (typeof error.body === "string") {
        message = error.body;
      } else if (typeof error.responseText === "string") {
        message = error.responseText;
      }
      message = (message || "").toLowerCase();
      if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {
        logger.throwError("insufficient funds for intrinsic transaction cost", logger_1.Logger.errors.INSUFFICIENT_FUNDS, {
          error,
          method,
          transaction
        });
      }
      if (message.match(/nonce (is )?too low/i)) {
        logger.throwError("nonce has already been used", logger_1.Logger.errors.NONCE_EXPIRED, {
          error,
          method,
          transaction
        });
      }
      if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {
        logger.throwError("replacement fee too low", logger_1.Logger.errors.REPLACEMENT_UNDERPRICED, {
          error,
          method,
          transaction
        });
      }
      if (message.match(/only replay-protected/i)) {
        logger.throwError("legacy pre-eip-155 transactions not supported", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          error,
          method,
          transaction
        });
      }
      if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {
        logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
          error,
          method,
          transaction
        });
      }
      throw error;
    }
    function timer(timeout2) {
      return new Promise(function(resolve) {
        setTimeout(resolve, timeout2);
      });
    }
    function getResult(payload) {
      if (payload.error) {
        var error = new Error(payload.error.message);
        error.code = payload.error.code;
        error.data = payload.error.data;
        throw error;
      }
      return payload.result;
    }
    function getLowerCase(value) {
      if (value) {
        return value.toLowerCase();
      }
      return value;
    }
    var _constructorGuard = {};
    var JsonRpcSigner = (
      /** @class */
      function(_super) {
        __extends(JsonRpcSigner2, _super);
        function JsonRpcSigner2(constructorGuard, provider, addressOrIndex) {
          var _this = _super.call(this) || this;
          if (constructorGuard !== _constructorGuard) {
            throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
          }
          (0, properties_1.defineReadOnly)(_this, "provider", provider);
          if (addressOrIndex == null) {
            addressOrIndex = 0;
          }
          if (typeof addressOrIndex === "string") {
            (0, properties_1.defineReadOnly)(_this, "_address", _this.provider.formatter.address(addressOrIndex));
            (0, properties_1.defineReadOnly)(_this, "_index", null);
          } else if (typeof addressOrIndex === "number") {
            (0, properties_1.defineReadOnly)(_this, "_index", addressOrIndex);
            (0, properties_1.defineReadOnly)(_this, "_address", null);
          } else {
            logger.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
          }
          return _this;
        }
        JsonRpcSigner2.prototype.connect = function(provider) {
          return logger.throwError("cannot alter JSON-RPC Signer connection", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "connect"
          });
        };
        JsonRpcSigner2.prototype.connectUnchecked = function() {
          return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
        };
        JsonRpcSigner2.prototype.getAddress = function() {
          var _this = this;
          if (this._address) {
            return Promise.resolve(this._address);
          }
          return this.provider.send("eth_accounts", []).then(function(accounts) {
            if (accounts.length <= _this._index) {
              logger.throwError("unknown account #" + _this._index, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "getAddress"
              });
            }
            return _this.provider.formatter.address(accounts[_this._index]);
          });
        };
        JsonRpcSigner2.prototype.sendUncheckedTransaction = function(transaction) {
          var _this = this;
          transaction = (0, properties_1.shallowCopy)(transaction);
          var fromAddress = this.getAddress().then(function(address) {
            if (address) {
              address = address.toLowerCase();
            }
            return address;
          });
          if (transaction.gasLimit == null) {
            var estimate = (0, properties_1.shallowCopy)(transaction);
            estimate.from = fromAddress;
            transaction.gasLimit = this.provider.estimateGas(estimate);
          }
          if (transaction.to != null) {
            transaction.to = Promise.resolve(transaction.to).then(function(to) {
              return __awaiter(_this, void 0, void 0, function() {
                var address;
                return __generator(this, function(_a) {
                  switch (_a.label) {
                    case 0:
                      if (to == null) {
                        return [2, null];
                      }
                      return [4, this.provider.resolveName(to)];
                    case 1:
                      address = _a.sent();
                      if (address == null) {
                        logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                      }
                      return [2, address];
                  }
                });
              });
            });
          }
          return (0, properties_1.resolveProperties)({
            tx: (0, properties_1.resolveProperties)(transaction),
            sender: fromAddress
          }).then(function(_a) {
            var tx = _a.tx, sender = _a.sender;
            if (tx.from != null) {
              if (tx.from.toLowerCase() !== sender) {
                logger.throwArgumentError("from address mismatch", "transaction", transaction);
              }
            } else {
              tx.from = sender;
            }
            var hexTx = _this.provider.constructor.hexlifyTransaction(tx, { from: true });
            return _this.provider.send("eth_sendTransaction", [hexTx]).then(function(hash) {
              return hash;
            }, function(error) {
              if (typeof error.message === "string" && error.message.match(/user denied/i)) {
                logger.throwError("user rejected transaction", logger_1.Logger.errors.ACTION_REJECTED, {
                  action: "sendTransaction",
                  transaction: tx
                });
              }
              return checkError("sendTransaction", error, hexTx);
            });
          });
        };
        JsonRpcSigner2.prototype.signTransaction = function(transaction) {
          return logger.throwError("signing transactions is unsupported", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "signTransaction"
          });
        };
        JsonRpcSigner2.prototype.sendTransaction = function(transaction) {
          return __awaiter(this, void 0, void 0, function() {
            var blockNumber, hash, error_1;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval)];
                case 1:
                  blockNumber = _a.sent();
                  return [4, this.sendUncheckedTransaction(transaction)];
                case 2:
                  hash = _a.sent();
                  _a.label = 3;
                case 3:
                  _a.trys.push([3, 5, , 6]);
                  return [4, (0, web_1.poll)(function() {
                    return __awaiter(_this, void 0, void 0, function() {
                      var tx;
                      return __generator(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            return [4, this.provider.getTransaction(hash)];
                          case 1:
                            tx = _a2.sent();
                            if (tx === null) {
                              return [2, void 0];
                            }
                            return [2, this.provider._wrapTransaction(tx, hash, blockNumber)];
                        }
                      });
                    });
                  }, { oncePoll: this.provider })];
                case 4:
                  return [2, _a.sent()];
                case 5:
                  error_1 = _a.sent();
                  error_1.transactionHash = hash;
                  throw error_1;
                case 6:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        JsonRpcSigner2.prototype.signMessage = function(message) {
          return __awaiter(this, void 0, void 0, function() {
            var data, address, error_2;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  data = typeof message === "string" ? (0, strings_1.toUtf8Bytes)(message) : message;
                  return [4, this.getAddress()];
                case 1:
                  address = _a.sent();
                  _a.label = 2;
                case 2:
                  _a.trys.push([2, 4, , 5]);
                  return [4, this.provider.send("personal_sign", [(0, bytes_1.hexlify)(data), address.toLowerCase()])];
                case 3:
                  return [2, _a.sent()];
                case 4:
                  error_2 = _a.sent();
                  if (typeof error_2.message === "string" && error_2.message.match(/user denied/i)) {
                    logger.throwError("user rejected signing", logger_1.Logger.errors.ACTION_REJECTED, {
                      action: "signMessage",
                      from: address,
                      messageData: message
                    });
                  }
                  throw error_2;
                case 5:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        JsonRpcSigner2.prototype._legacySignMessage = function(message) {
          return __awaiter(this, void 0, void 0, function() {
            var data, address, error_3;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  data = typeof message === "string" ? (0, strings_1.toUtf8Bytes)(message) : message;
                  return [4, this.getAddress()];
                case 1:
                  address = _a.sent();
                  _a.label = 2;
                case 2:
                  _a.trys.push([2, 4, , 5]);
                  return [4, this.provider.send("eth_sign", [address.toLowerCase(), (0, bytes_1.hexlify)(data)])];
                case 3:
                  return [2, _a.sent()];
                case 4:
                  error_3 = _a.sent();
                  if (typeof error_3.message === "string" && error_3.message.match(/user denied/i)) {
                    logger.throwError("user rejected signing", logger_1.Logger.errors.ACTION_REJECTED, {
                      action: "_legacySignMessage",
                      from: address,
                      messageData: message
                    });
                  }
                  throw error_3;
                case 5:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        JsonRpcSigner2.prototype._signTypedData = function(domain, types, value) {
          return __awaiter(this, void 0, void 0, function() {
            var populated, address, error_4;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, hash_1._TypedDataEncoder.resolveNames(domain, types, value, function(name) {
                    return _this.provider.resolveName(name);
                  })];
                case 1:
                  populated = _a.sent();
                  return [4, this.getAddress()];
                case 2:
                  address = _a.sent();
                  _a.label = 3;
                case 3:
                  _a.trys.push([3, 5, , 6]);
                  return [4, this.provider.send("eth_signTypedData_v4", [
                    address.toLowerCase(),
                    JSON.stringify(hash_1._TypedDataEncoder.getPayload(populated.domain, types, populated.value))
                  ])];
                case 4:
                  return [2, _a.sent()];
                case 5:
                  error_4 = _a.sent();
                  if (typeof error_4.message === "string" && error_4.message.match(/user denied/i)) {
                    logger.throwError("user rejected signing", logger_1.Logger.errors.ACTION_REJECTED, {
                      action: "_signTypedData",
                      from: address,
                      messageData: { domain: populated.domain, types, value: populated.value }
                    });
                  }
                  throw error_4;
                case 6:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        JsonRpcSigner2.prototype.unlock = function(password) {
          return __awaiter(this, void 0, void 0, function() {
            var provider, address;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  provider = this.provider;
                  return [4, this.getAddress()];
                case 1:
                  address = _a.sent();
                  return [2, provider.send("personal_unlockAccount", [address.toLowerCase(), password, null])];
              }
            });
          });
        };
        return JsonRpcSigner2;
      }(abstract_signer_1.Signer)
    );
    exports.JsonRpcSigner = JsonRpcSigner;
    var UncheckedJsonRpcSigner = (
      /** @class */
      function(_super) {
        __extends(UncheckedJsonRpcSigner2, _super);
        function UncheckedJsonRpcSigner2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        UncheckedJsonRpcSigner2.prototype.sendTransaction = function(transaction) {
          var _this = this;
          return this.sendUncheckedTransaction(transaction).then(function(hash) {
            return {
              hash,
              nonce: null,
              gasLimit: null,
              gasPrice: null,
              data: null,
              value: null,
              chainId: null,
              confirmations: 0,
              from: null,
              wait: function(confirmations) {
                return _this.provider.waitForTransaction(hash, confirmations);
              }
            };
          });
        };
        return UncheckedJsonRpcSigner2;
      }(JsonRpcSigner)
    );
    var allowedTransactionKeys = {
      chainId: true,
      data: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      value: true,
      type: true,
      accessList: true,
      maxFeePerGas: true,
      maxPriorityFeePerGas: true
    };
    var JsonRpcProvider = (
      /** @class */
      function(_super) {
        __extends(JsonRpcProvider2, _super);
        function JsonRpcProvider2(url, network) {
          var _this = this;
          var networkOrReady = network;
          if (networkOrReady == null) {
            networkOrReady = new Promise(function(resolve, reject) {
              setTimeout(function() {
                _this.detectNetwork().then(function(network2) {
                  resolve(network2);
                }, function(error) {
                  reject(error);
                });
              }, 0);
            });
          }
          _this = _super.call(this, networkOrReady) || this;
          if (!url) {
            url = (0, properties_1.getStatic)(_this.constructor, "defaultUrl")();
          }
          if (typeof url === "string") {
            (0, properties_1.defineReadOnly)(_this, "connection", Object.freeze({
              url
            }));
          } else {
            (0, properties_1.defineReadOnly)(_this, "connection", Object.freeze((0, properties_1.shallowCopy)(url)));
          }
          _this._nextId = 42;
          return _this;
        }
        Object.defineProperty(JsonRpcProvider2.prototype, "_cache", {
          get: function() {
            if (this._eventLoopCache == null) {
              this._eventLoopCache = {};
            }
            return this._eventLoopCache;
          },
          enumerable: false,
          configurable: true
        });
        JsonRpcProvider2.defaultUrl = function() {
          return "http://localhost:8545";
        };
        JsonRpcProvider2.prototype.detectNetwork = function() {
          var _this = this;
          if (!this._cache["detectNetwork"]) {
            this._cache["detectNetwork"] = this._uncachedDetectNetwork();
            setTimeout(function() {
              _this._cache["detectNetwork"] = null;
            }, 0);
          }
          return this._cache["detectNetwork"];
        };
        JsonRpcProvider2.prototype._uncachedDetectNetwork = function() {
          return __awaiter(this, void 0, void 0, function() {
            var chainId, error_5, error_6, getNetwork;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, timer(0)];
                case 1:
                  _a.sent();
                  chainId = null;
                  _a.label = 2;
                case 2:
                  _a.trys.push([2, 4, , 9]);
                  return [4, this.send("eth_chainId", [])];
                case 3:
                  chainId = _a.sent();
                  return [3, 9];
                case 4:
                  error_5 = _a.sent();
                  _a.label = 5;
                case 5:
                  _a.trys.push([5, 7, , 8]);
                  return [4, this.send("net_version", [])];
                case 6:
                  chainId = _a.sent();
                  return [3, 8];
                case 7:
                  error_6 = _a.sent();
                  return [3, 8];
                case 8:
                  return [3, 9];
                case 9:
                  if (chainId != null) {
                    getNetwork = (0, properties_1.getStatic)(this.constructor, "getNetwork");
                    try {
                      return [2, getNetwork(bignumber_1.BigNumber.from(chainId).toNumber())];
                    } catch (error) {
                      return [2, logger.throwError("could not detect network", logger_1.Logger.errors.NETWORK_ERROR, {
                        chainId,
                        event: "invalidNetwork",
                        serverError: error
                      })];
                    }
                  }
                  return [2, logger.throwError("could not detect network", logger_1.Logger.errors.NETWORK_ERROR, {
                    event: "noNetwork"
                  })];
              }
            });
          });
        };
        JsonRpcProvider2.prototype.getSigner = function(addressOrIndex) {
          return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
        };
        JsonRpcProvider2.prototype.getUncheckedSigner = function(addressOrIndex) {
          return this.getSigner(addressOrIndex).connectUnchecked();
        };
        JsonRpcProvider2.prototype.listAccounts = function() {
          var _this = this;
          return this.send("eth_accounts", []).then(function(accounts) {
            return accounts.map(function(a) {
              return _this.formatter.address(a);
            });
          });
        };
        JsonRpcProvider2.prototype.send = function(method, params) {
          var _this = this;
          var request = {
            method,
            params,
            id: this._nextId++,
            jsonrpc: "2.0"
          };
          this.emit("debug", {
            action: "request",
            request: (0, properties_1.deepCopy)(request),
            provider: this
          });
          var cache = ["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0;
          if (cache && this._cache[method]) {
            return this._cache[method];
          }
          var result = (0, web_1.fetchJson)(this.connection, JSON.stringify(request), getResult).then(function(result2) {
            _this.emit("debug", {
              action: "response",
              request,
              response: result2,
              provider: _this
            });
            return result2;
          }, function(error) {
            _this.emit("debug", {
              action: "response",
              error,
              request,
              provider: _this
            });
            throw error;
          });
          if (cache) {
            this._cache[method] = result;
            setTimeout(function() {
              _this._cache[method] = null;
            }, 0);
          }
          return result;
        };
        JsonRpcProvider2.prototype.prepareRequest = function(method, params) {
          switch (method) {
            case "getBlockNumber":
              return ["eth_blockNumber", []];
            case "getGasPrice":
              return ["eth_gasPrice", []];
            case "getBalance":
              return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
            case "getTransactionCount":
              return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
            case "getCode":
              return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
            case "getStorageAt":
              return ["eth_getStorageAt", [getLowerCase(params.address), (0, bytes_1.hexZeroPad)(params.position, 32), params.blockTag]];
            case "sendTransaction":
              return ["eth_sendRawTransaction", [params.signedTransaction]];
            case "getBlock":
              if (params.blockTag) {
                return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
              } else if (params.blockHash) {
                return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
              }
              return null;
            case "getTransaction":
              return ["eth_getTransactionByHash", [params.transactionHash]];
            case "getTransactionReceipt":
              return ["eth_getTransactionReceipt", [params.transactionHash]];
            case "call": {
              var hexlifyTransaction = (0, properties_1.getStatic)(this.constructor, "hexlifyTransaction");
              return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
            }
            case "estimateGas": {
              var hexlifyTransaction = (0, properties_1.getStatic)(this.constructor, "hexlifyTransaction");
              return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
            }
            case "getLogs":
              if (params.filter && params.filter.address != null) {
                params.filter.address = getLowerCase(params.filter.address);
              }
              return ["eth_getLogs", [params.filter]];
            default:
              break;
          }
          return null;
        };
        JsonRpcProvider2.prototype.perform = function(method, params) {
          return __awaiter(this, void 0, void 0, function() {
            var tx, feeData, args, error_7;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!(method === "call" || method === "estimateGas"))
                    return [3, 2];
                  tx = params.transaction;
                  if (!(tx && tx.type != null && bignumber_1.BigNumber.from(tx.type).isZero()))
                    return [3, 2];
                  if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null))
                    return [3, 2];
                  return [4, this.getFeeData()];
                case 1:
                  feeData = _a.sent();
                  if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                    params = (0, properties_1.shallowCopy)(params);
                    params.transaction = (0, properties_1.shallowCopy)(tx);
                    delete params.transaction.type;
                  }
                  _a.label = 2;
                case 2:
                  args = this.prepareRequest(method, params);
                  if (args == null) {
                    logger.throwError(method + " not implemented", logger_1.Logger.errors.NOT_IMPLEMENTED, { operation: method });
                  }
                  _a.label = 3;
                case 3:
                  _a.trys.push([3, 5, , 6]);
                  return [4, this.send(args[0], args[1])];
                case 4:
                  return [2, _a.sent()];
                case 5:
                  error_7 = _a.sent();
                  return [2, checkError(method, error_7, params)];
                case 6:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        JsonRpcProvider2.prototype._startEvent = function(event) {
          if (event.tag === "pending") {
            this._startPending();
          }
          _super.prototype._startEvent.call(this, event);
        };
        JsonRpcProvider2.prototype._startPending = function() {
          if (this._pendingFilter != null) {
            return;
          }
          var self2 = this;
          var pendingFilter = this.send("eth_newPendingTransactionFilter", []);
          this._pendingFilter = pendingFilter;
          pendingFilter.then(function(filterId) {
            function poll() {
              self2.send("eth_getFilterChanges", [filterId]).then(function(hashes) {
                if (self2._pendingFilter != pendingFilter) {
                  return null;
                }
                var seq = Promise.resolve();
                hashes.forEach(function(hash) {
                  self2._emitted["t:" + hash.toLowerCase()] = "pending";
                  seq = seq.then(function() {
                    return self2.getTransaction(hash).then(function(tx) {
                      self2.emit("pending", tx);
                      return null;
                    });
                  });
                });
                return seq.then(function() {
                  return timer(1e3);
                });
              }).then(function() {
                if (self2._pendingFilter != pendingFilter) {
                  self2.send("eth_uninstallFilter", [filterId]);
                  return;
                }
                setTimeout(function() {
                  poll();
                }, 0);
                return null;
              }).catch(function(error) {
              });
            }
            poll();
            return filterId;
          }).catch(function(error) {
          });
        };
        JsonRpcProvider2.prototype._stopEvent = function(event) {
          if (event.tag === "pending" && this.listenerCount("pending") === 0) {
            this._pendingFilter = null;
          }
          _super.prototype._stopEvent.call(this, event);
        };
        JsonRpcProvider2.hexlifyTransaction = function(transaction, allowExtra) {
          var allowed = (0, properties_1.shallowCopy)(allowedTransactionKeys);
          if (allowExtra) {
            for (var key in allowExtra) {
              if (allowExtra[key]) {
                allowed[key] = true;
              }
            }
          }
          (0, properties_1.checkProperties)(transaction, allowed);
          var result = {};
          ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function(key2) {
            if (transaction[key2] == null) {
              return;
            }
            var value = (0, bytes_1.hexValue)(bignumber_1.BigNumber.from(transaction[key2]));
            if (key2 === "gasLimit") {
              key2 = "gas";
            }
            result[key2] = value;
          });
          ["from", "to", "data"].forEach(function(key2) {
            if (transaction[key2] == null) {
              return;
            }
            result[key2] = (0, bytes_1.hexlify)(transaction[key2]);
          });
          if (transaction.accessList) {
            result["accessList"] = (0, transactions_1.accessListify)(transaction.accessList);
          }
          return result;
        };
        return JsonRpcProvider2;
      }(base_provider_1.BaseProvider)
    );
    exports.JsonRpcProvider = JsonRpcProvider;
  }
});

// node_modules/@ethersproject/providers/lib/browser-ws.js
var require_browser_ws = __commonJS({
  "node_modules/@ethersproject/providers/lib/browser-ws.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebSocket = void 0;
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var WS = null;
    exports.WebSocket = WS;
    try {
      exports.WebSocket = WS = WebSocket;
      if (WS == null) {
        throw new Error("inject please");
      }
    } catch (error) {
      logger_2 = new logger_1.Logger(_version_1.version);
      exports.WebSocket = WS = function() {
        logger_2.throwError("WebSockets not supported in this environment", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new WebSocket()"
        });
      };
    }
    var logger_2;
  }
});

// node_modules/@ethersproject/providers/lib/websocket-provider.js
var require_websocket_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/websocket-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebSocketProvider = void 0;
    var bignumber_1 = require_lib3();
    var properties_1 = require_lib4();
    var json_rpc_provider_1 = require_json_rpc_provider();
    var ws_1 = require_browser_ws();
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    var NextId = 1;
    var WebSocketProvider = (
      /** @class */
      function(_super) {
        __extends(WebSocketProvider2, _super);
        function WebSocketProvider2(url, network) {
          var _this = this;
          if (network === "any") {
            logger.throwError("WebSocketProvider does not support 'any' network yet", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "network:any"
            });
          }
          if (typeof url === "string") {
            _this = _super.call(this, url, network) || this;
          } else {
            _this = _super.call(this, "_websocket", network) || this;
          }
          _this._pollingInterval = -1;
          _this._wsReady = false;
          if (typeof url === "string") {
            (0, properties_1.defineReadOnly)(_this, "_websocket", new ws_1.WebSocket(_this.connection.url));
          } else {
            (0, properties_1.defineReadOnly)(_this, "_websocket", url);
          }
          (0, properties_1.defineReadOnly)(_this, "_requests", {});
          (0, properties_1.defineReadOnly)(_this, "_subs", {});
          (0, properties_1.defineReadOnly)(_this, "_subIds", {});
          (0, properties_1.defineReadOnly)(_this, "_detectNetwork", _super.prototype.detectNetwork.call(_this));
          _this.websocket.onopen = function() {
            _this._wsReady = true;
            Object.keys(_this._requests).forEach(function(id) {
              _this.websocket.send(_this._requests[id].payload);
            });
          };
          _this.websocket.onmessage = function(messageEvent) {
            var data = messageEvent.data;
            var result = JSON.parse(data);
            if (result.id != null) {
              var id = String(result.id);
              var request = _this._requests[id];
              delete _this._requests[id];
              if (result.result !== void 0) {
                request.callback(null, result.result);
                _this.emit("debug", {
                  action: "response",
                  request: JSON.parse(request.payload),
                  response: result.result,
                  provider: _this
                });
              } else {
                var error = null;
                if (result.error) {
                  error = new Error(result.error.message || "unknown error");
                  (0, properties_1.defineReadOnly)(error, "code", result.error.code || null);
                  (0, properties_1.defineReadOnly)(error, "response", data);
                } else {
                  error = new Error("unknown error");
                }
                request.callback(error, void 0);
                _this.emit("debug", {
                  action: "response",
                  error,
                  request: JSON.parse(request.payload),
                  provider: _this
                });
              }
            } else if (result.method === "eth_subscription") {
              var sub = _this._subs[result.params.subscription];
              if (sub) {
                sub.processFunc(result.params.result);
              }
            } else {
              console.warn("this should not happen");
            }
          };
          var fauxPoll = setInterval(function() {
            _this.emit("poll");
          }, 1e3);
          if (fauxPoll.unref) {
            fauxPoll.unref();
          }
          return _this;
        }
        Object.defineProperty(WebSocketProvider2.prototype, "websocket", {
          // Cannot narrow the type of _websocket, as that is not backwards compatible
          // so we add a getter and let the WebSocket be a public API.
          get: function() {
            return this._websocket;
          },
          enumerable: false,
          configurable: true
        });
        WebSocketProvider2.prototype.detectNetwork = function() {
          return this._detectNetwork;
        };
        Object.defineProperty(WebSocketProvider2.prototype, "pollingInterval", {
          get: function() {
            return 0;
          },
          set: function(value) {
            logger.throwError("cannot set polling interval on WebSocketProvider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "setPollingInterval"
            });
          },
          enumerable: false,
          configurable: true
        });
        WebSocketProvider2.prototype.resetEventsBlock = function(blockNumber) {
          logger.throwError("cannot reset events block on WebSocketProvider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "resetEventBlock"
          });
        };
        WebSocketProvider2.prototype.poll = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, null];
            });
          });
        };
        Object.defineProperty(WebSocketProvider2.prototype, "polling", {
          set: function(value) {
            if (!value) {
              return;
            }
            logger.throwError("cannot set polling on WebSocketProvider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "setPolling"
            });
          },
          enumerable: false,
          configurable: true
        });
        WebSocketProvider2.prototype.send = function(method, params) {
          var _this = this;
          var rid = NextId++;
          return new Promise(function(resolve, reject) {
            function callback(error, result) {
              if (error) {
                return reject(error);
              }
              return resolve(result);
            }
            var payload = JSON.stringify({
              method,
              params,
              id: rid,
              jsonrpc: "2.0"
            });
            _this.emit("debug", {
              action: "request",
              request: JSON.parse(payload),
              provider: _this
            });
            _this._requests[String(rid)] = { callback, payload };
            if (_this._wsReady) {
              _this.websocket.send(payload);
            }
          });
        };
        WebSocketProvider2.defaultUrl = function() {
          return "ws://localhost:8546";
        };
        WebSocketProvider2.prototype._subscribe = function(tag, param, processFunc) {
          return __awaiter(this, void 0, void 0, function() {
            var subIdPromise, subId;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  subIdPromise = this._subIds[tag];
                  if (subIdPromise == null) {
                    subIdPromise = Promise.all(param).then(function(param2) {
                      return _this.send("eth_subscribe", param2);
                    });
                    this._subIds[tag] = subIdPromise;
                  }
                  return [4, subIdPromise];
                case 1:
                  subId = _a.sent();
                  this._subs[subId] = { tag, processFunc };
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebSocketProvider2.prototype._startEvent = function(event) {
          var _this = this;
          switch (event.type) {
            case "block":
              this._subscribe("block", ["newHeads"], function(result) {
                var blockNumber = bignumber_1.BigNumber.from(result.number).toNumber();
                _this._emitted.block = blockNumber;
                _this.emit("block", blockNumber);
              });
              break;
            case "pending":
              this._subscribe("pending", ["newPendingTransactions"], function(result) {
                _this.emit("pending", result);
              });
              break;
            case "filter":
              this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], function(result) {
                if (result.removed == null) {
                  result.removed = false;
                }
                _this.emit(event.filter, _this.formatter.filterLog(result));
              });
              break;
            case "tx": {
              var emitReceipt_1 = function(event2) {
                var hash = event2.hash;
                _this.getTransactionReceipt(hash).then(function(receipt) {
                  if (!receipt) {
                    return;
                  }
                  _this.emit(hash, receipt);
                });
              };
              emitReceipt_1(event);
              this._subscribe("tx", ["newHeads"], function(result) {
                _this._events.filter(function(e) {
                  return e.type === "tx";
                }).forEach(emitReceipt_1);
              });
              break;
            }
            case "debug":
            case "poll":
            case "willPoll":
            case "didPoll":
            case "error":
              break;
            default:
              console.log("unhandled:", event);
              break;
          }
        };
        WebSocketProvider2.prototype._stopEvent = function(event) {
          var _this = this;
          var tag = event.tag;
          if (event.type === "tx") {
            if (this._events.filter(function(e) {
              return e.type === "tx";
            }).length) {
              return;
            }
            tag = "tx";
          } else if (this.listenerCount(event.event)) {
            return;
          }
          var subId = this._subIds[tag];
          if (!subId) {
            return;
          }
          delete this._subIds[tag];
          subId.then(function(subId2) {
            if (!_this._subs[subId2]) {
              return;
            }
            delete _this._subs[subId2];
            _this.send("eth_unsubscribe", [subId2]);
          });
        };
        WebSocketProvider2.prototype.destroy = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!(this.websocket.readyState === ws_1.WebSocket.CONNECTING))
                    return [3, 2];
                  return [4, new Promise(function(resolve) {
                    _this.websocket.onopen = function() {
                      resolve(true);
                    };
                    _this.websocket.onerror = function() {
                      resolve(false);
                    };
                  })];
                case 1:
                  _a.sent();
                  _a.label = 2;
                case 2:
                  this.websocket.close(1e3);
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        return WebSocketProvider2;
      }(json_rpc_provider_1.JsonRpcProvider)
    );
    exports.WebSocketProvider = WebSocketProvider;
  }
});

// node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js
var require_url_json_rpc_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/url-json-rpc-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UrlJsonRpcProvider = exports.StaticJsonRpcProvider = void 0;
    var properties_1 = require_lib4();
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    var json_rpc_provider_1 = require_json_rpc_provider();
    var StaticJsonRpcProvider = (
      /** @class */
      function(_super) {
        __extends(StaticJsonRpcProvider2, _super);
        function StaticJsonRpcProvider2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        StaticJsonRpcProvider2.prototype.detectNetwork = function() {
          return __awaiter(this, void 0, void 0, function() {
            var network;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  network = this.network;
                  if (!(network == null))
                    return [3, 2];
                  return [4, _super.prototype.detectNetwork.call(this)];
                case 1:
                  network = _a.sent();
                  if (!network) {
                    logger.throwError("no network detected", logger_1.Logger.errors.UNKNOWN_ERROR, {});
                  }
                  if (this._network == null) {
                    (0, properties_1.defineReadOnly)(this, "_network", network);
                    this.emit("network", network, null);
                  }
                  _a.label = 2;
                case 2:
                  return [2, network];
              }
            });
          });
        };
        return StaticJsonRpcProvider2;
      }(json_rpc_provider_1.JsonRpcProvider)
    );
    exports.StaticJsonRpcProvider = StaticJsonRpcProvider;
    var UrlJsonRpcProvider = (
      /** @class */
      function(_super) {
        __extends(UrlJsonRpcProvider2, _super);
        function UrlJsonRpcProvider2(network, apiKey) {
          var _newTarget = this.constructor;
          var _this = this;
          logger.checkAbstract(_newTarget, UrlJsonRpcProvider2);
          network = (0, properties_1.getStatic)(_newTarget, "getNetwork")(network);
          apiKey = (0, properties_1.getStatic)(_newTarget, "getApiKey")(apiKey);
          var connection = (0, properties_1.getStatic)(_newTarget, "getUrl")(network, apiKey);
          _this = _super.call(this, connection, network) || this;
          if (typeof apiKey === "string") {
            (0, properties_1.defineReadOnly)(_this, "apiKey", apiKey);
          } else if (apiKey != null) {
            Object.keys(apiKey).forEach(function(key) {
              (0, properties_1.defineReadOnly)(_this, key, apiKey[key]);
            });
          }
          return _this;
        }
        UrlJsonRpcProvider2.prototype._startPending = function() {
          logger.warn("WARNING: API provider does not support pending filters");
        };
        UrlJsonRpcProvider2.prototype.isCommunityResource = function() {
          return false;
        };
        UrlJsonRpcProvider2.prototype.getSigner = function(address) {
          return logger.throwError("API provider does not support signing", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
        };
        UrlJsonRpcProvider2.prototype.listAccounts = function() {
          return Promise.resolve([]);
        };
        UrlJsonRpcProvider2.getApiKey = function(apiKey) {
          return apiKey;
        };
        UrlJsonRpcProvider2.getUrl = function(network, apiKey) {
          return logger.throwError("not implemented; sub-classes must override getUrl", logger_1.Logger.errors.NOT_IMPLEMENTED, {
            operation: "getUrl"
          });
        };
        return UrlJsonRpcProvider2;
      }(StaticJsonRpcProvider)
    );
    exports.UrlJsonRpcProvider = UrlJsonRpcProvider;
  }
});

// node_modules/@ethersproject/providers/lib/alchemy-provider.js
var require_alchemy_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/alchemy-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AlchemyProvider = exports.AlchemyWebSocketProvider = void 0;
    var properties_1 = require_lib4();
    var formatter_1 = require_formatter();
    var websocket_provider_1 = require_websocket_provider();
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    var url_json_rpc_provider_1 = require_url_json_rpc_provider();
    var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    var AlchemyWebSocketProvider = (
      /** @class */
      function(_super) {
        __extends(AlchemyWebSocketProvider2, _super);
        function AlchemyWebSocketProvider2(network, apiKey) {
          var _this = this;
          var provider = new AlchemyProvider(network, apiKey);
          var url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
          _this = _super.call(this, url, provider.network) || this;
          (0, properties_1.defineReadOnly)(_this, "apiKey", provider.apiKey);
          return _this;
        }
        AlchemyWebSocketProvider2.prototype.isCommunityResource = function() {
          return this.apiKey === defaultApiKey;
        };
        return AlchemyWebSocketProvider2;
      }(websocket_provider_1.WebSocketProvider)
    );
    exports.AlchemyWebSocketProvider = AlchemyWebSocketProvider;
    var AlchemyProvider = (
      /** @class */
      function(_super) {
        __extends(AlchemyProvider2, _super);
        function AlchemyProvider2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        AlchemyProvider2.getWebSocketProvider = function(network, apiKey) {
          return new AlchemyWebSocketProvider(network, apiKey);
        };
        AlchemyProvider2.getApiKey = function(apiKey) {
          if (apiKey == null) {
            return defaultApiKey;
          }
          if (apiKey && typeof apiKey !== "string") {
            logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
          }
          return apiKey;
        };
        AlchemyProvider2.getUrl = function(network, apiKey) {
          var host = null;
          switch (network.name) {
            case "homestead":
              host = "eth-mainnet.alchemyapi.io/v2/";
              break;
            case "goerli":
              host = "eth-goerli.g.alchemy.com/v2/";
              break;
            case "matic":
              host = "polygon-mainnet.g.alchemy.com/v2/";
              break;
            case "maticmum":
              host = "polygon-mumbai.g.alchemy.com/v2/";
              break;
            case "arbitrum":
              host = "arb-mainnet.g.alchemy.com/v2/";
              break;
            case "arbitrum-goerli":
              host = "arb-goerli.g.alchemy.com/v2/";
              break;
            case "optimism":
              host = "opt-mainnet.g.alchemy.com/v2/";
              break;
            case "optimism-goerli":
              host = "opt-goerli.g.alchemy.com/v2/";
              break;
            default:
              logger.throwArgumentError("unsupported network", "network", arguments[0]);
          }
          return {
            allowGzip: true,
            url: "https://" + host + apiKey,
            throttleCallback: function(attempt, url) {
              if (apiKey === defaultApiKey) {
                (0, formatter_1.showThrottleMessage)();
              }
              return Promise.resolve(true);
            }
          };
        };
        AlchemyProvider2.prototype.isCommunityResource = function() {
          return this.apiKey === defaultApiKey;
        };
        return AlchemyProvider2;
      }(url_json_rpc_provider_1.UrlJsonRpcProvider)
    );
    exports.AlchemyProvider = AlchemyProvider;
  }
});

// node_modules/@ethersproject/providers/lib/ankr-provider.js
var require_ankr_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/ankr-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnkrProvider = void 0;
    var formatter_1 = require_formatter();
    var url_json_rpc_provider_1 = require_url_json_rpc_provider();
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    var defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
    function getHost(name) {
      switch (name) {
        case "homestead":
          return "rpc.ankr.com/eth/";
        case "ropsten":
          return "rpc.ankr.com/eth_ropsten/";
        case "rinkeby":
          return "rpc.ankr.com/eth_rinkeby/";
        case "goerli":
          return "rpc.ankr.com/eth_goerli/";
        case "matic":
          return "rpc.ankr.com/polygon/";
        case "arbitrum":
          return "rpc.ankr.com/arbitrum/";
      }
      return logger.throwArgumentError("unsupported network", "name", name);
    }
    var AnkrProvider = (
      /** @class */
      function(_super) {
        __extends(AnkrProvider2, _super);
        function AnkrProvider2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        AnkrProvider2.prototype.isCommunityResource = function() {
          return this.apiKey === defaultApiKey;
        };
        AnkrProvider2.getApiKey = function(apiKey) {
          if (apiKey == null) {
            return defaultApiKey;
          }
          return apiKey;
        };
        AnkrProvider2.getUrl = function(network, apiKey) {
          if (apiKey == null) {
            apiKey = defaultApiKey;
          }
          var connection = {
            allowGzip: true,
            url: "https://" + getHost(network.name) + apiKey,
            throttleCallback: function(attempt, url) {
              if (apiKey.apiKey === defaultApiKey) {
                (0, formatter_1.showThrottleMessage)();
              }
              return Promise.resolve(true);
            }
          };
          if (apiKey.projectSecret != null) {
            connection.user = "";
            connection.password = apiKey.projectSecret;
          }
          return connection;
        };
        return AnkrProvider2;
      }(url_json_rpc_provider_1.UrlJsonRpcProvider)
    );
    exports.AnkrProvider = AnkrProvider;
  }
});

// node_modules/@ethersproject/providers/lib/cloudflare-provider.js
var require_cloudflare_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/cloudflare-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CloudflareProvider = void 0;
    var url_json_rpc_provider_1 = require_url_json_rpc_provider();
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    var CloudflareProvider = (
      /** @class */
      function(_super) {
        __extends(CloudflareProvider2, _super);
        function CloudflareProvider2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        CloudflareProvider2.getApiKey = function(apiKey) {
          if (apiKey != null) {
            logger.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
          }
          return null;
        };
        CloudflareProvider2.getUrl = function(network, apiKey) {
          var host = null;
          switch (network.name) {
            case "homestead":
              host = "https://cloudflare-eth.com/";
              break;
            default:
              logger.throwArgumentError("unsupported network", "network", arguments[0]);
          }
          return host;
        };
        CloudflareProvider2.prototype.perform = function(method, params) {
          return __awaiter(this, void 0, void 0, function() {
            var block;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!(method === "getBlockNumber"))
                    return [3, 2];
                  return [4, _super.prototype.perform.call(this, "getBlock", { blockTag: "latest" })];
                case 1:
                  block = _a.sent();
                  return [2, block.number];
                case 2:
                  return [2, _super.prototype.perform.call(this, method, params)];
              }
            });
          });
        };
        return CloudflareProvider2;
      }(url_json_rpc_provider_1.UrlJsonRpcProvider)
    );
    exports.CloudflareProvider = CloudflareProvider;
  }
});

// node_modules/@ethersproject/providers/lib/etherscan-provider.js
var require_etherscan_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/etherscan-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EtherscanProvider = void 0;
    var bytes_1 = require_lib2();
    var properties_1 = require_lib4();
    var transactions_1 = require_lib17();
    var web_1 = require_lib28();
    var formatter_1 = require_formatter();
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    var base_provider_1 = require_base_provider();
    function getTransactionPostData(transaction) {
      var result = {};
      for (var key in transaction) {
        if (transaction[key] == null) {
          continue;
        }
        var value = transaction[key];
        if (key === "type" && value === 0) {
          continue;
        }
        if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
          value = (0, bytes_1.hexValue)((0, bytes_1.hexlify)(value));
        } else if (key === "accessList") {
          value = "[" + (0, transactions_1.accessListify)(value).map(function(set) {
            return '{address:"' + set.address + '",storageKeys:["' + set.storageKeys.join('","') + '"]}';
          }).join(",") + "]";
        } else {
          value = (0, bytes_1.hexlify)(value);
        }
        result[key] = value;
      }
      return result;
    }
    function getResult(result) {
      if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
        return result.result;
      }
      if (result.status != 1 || typeof result.message !== "string" || !result.message.match(/^OK/)) {
        var error = new Error("invalid response");
        error.result = JSON.stringify(result);
        if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
          error.throttleRetry = true;
        }
        throw error;
      }
      return result.result;
    }
    function getJsonResult(result) {
      if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
        var error = new Error("throttled response");
        error.result = JSON.stringify(result);
        error.throttleRetry = true;
        throw error;
      }
      if (result.jsonrpc != "2.0") {
        var error = new Error("invalid response");
        error.result = JSON.stringify(result);
        throw error;
      }
      if (result.error) {
        var error = new Error(result.error.message || "unknown error");
        if (result.error.code) {
          error.code = result.error.code;
        }
        if (result.error.data) {
          error.data = result.error.data;
        }
        throw error;
      }
      return result.result;
    }
    function checkLogTag(blockTag) {
      if (blockTag === "pending") {
        throw new Error("pending not supported");
      }
      if (blockTag === "latest") {
        return blockTag;
      }
      return parseInt(blockTag.substring(2), 16);
    }
    function checkError(method, error, transaction) {
      if (method === "call" && error.code === logger_1.Logger.errors.SERVER_ERROR) {
        var e = error.error;
        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
          var data = e.data;
          if (data) {
            data = "0x" + data.replace(/^.*0x/i, "");
          }
          if ((0, bytes_1.isHexString)(data)) {
            return data;
          }
          logger.throwError("missing revert data in call exception", logger_1.Logger.errors.CALL_EXCEPTION, {
            error,
            data: "0x"
          });
        }
      }
      var message = error.message;
      if (error.code === logger_1.Logger.errors.SERVER_ERROR) {
        if (error.error && typeof error.error.message === "string") {
          message = error.error.message;
        } else if (typeof error.body === "string") {
          message = error.body;
        } else if (typeof error.responseText === "string") {
          message = error.responseText;
        }
      }
      message = (message || "").toLowerCase();
      if (message.match(/insufficient funds/)) {
        logger.throwError("insufficient funds for intrinsic transaction cost", logger_1.Logger.errors.INSUFFICIENT_FUNDS, {
          error,
          method,
          transaction
        });
      }
      if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
        logger.throwError("nonce has already been used", logger_1.Logger.errors.NONCE_EXPIRED, {
          error,
          method,
          transaction
        });
      }
      if (message.match(/another transaction with same nonce/)) {
        logger.throwError("replacement fee too low", logger_1.Logger.errors.REPLACEMENT_UNDERPRICED, {
          error,
          method,
          transaction
        });
      }
      if (message.match(/execution failed due to an exception|execution reverted/)) {
        logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
          error,
          method,
          transaction
        });
      }
      throw error;
    }
    var EtherscanProvider = (
      /** @class */
      function(_super) {
        __extends(EtherscanProvider2, _super);
        function EtherscanProvider2(network, apiKey) {
          var _this = _super.call(this, network) || this;
          (0, properties_1.defineReadOnly)(_this, "baseUrl", _this.getBaseUrl());
          (0, properties_1.defineReadOnly)(_this, "apiKey", apiKey || null);
          return _this;
        }
        EtherscanProvider2.prototype.getBaseUrl = function() {
          switch (this.network ? this.network.name : "invalid") {
            case "homestead":
              return "https://api.etherscan.io";
            case "goerli":
              return "https://api-goerli.etherscan.io";
            case "sepolia":
              return "https://api-sepolia.etherscan.io";
            case "matic":
              return "https://api.polygonscan.com";
            case "maticmum":
              return "https://api-testnet.polygonscan.com";
            case "arbitrum":
              return "https://api.arbiscan.io";
            case "arbitrum-goerli":
              return "https://api-goerli.arbiscan.io";
            case "optimism":
              return "https://api-optimistic.etherscan.io";
            case "optimism-goerli":
              return "https://api-goerli-optimistic.etherscan.io";
            default:
          }
          return logger.throwArgumentError("unsupported network", "network", this.network.name);
        };
        EtherscanProvider2.prototype.getUrl = function(module2, params) {
          var query = Object.keys(params).reduce(function(accum, key) {
            var value = params[key];
            if (value != null) {
              accum += "&" + key + "=" + value;
            }
            return accum;
          }, "");
          var apiKey = this.apiKey ? "&apikey=" + this.apiKey : "";
          return this.baseUrl + "/api?module=" + module2 + query + apiKey;
        };
        EtherscanProvider2.prototype.getPostUrl = function() {
          return this.baseUrl + "/api";
        };
        EtherscanProvider2.prototype.getPostData = function(module2, params) {
          params.module = module2;
          params.apikey = this.apiKey;
          return params;
        };
        EtherscanProvider2.prototype.fetch = function(module2, params, post) {
          return __awaiter(this, void 0, void 0, function() {
            var url, payload, procFunc, connection, payloadStr, result;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  url = post ? this.getPostUrl() : this.getUrl(module2, params);
                  payload = post ? this.getPostData(module2, params) : null;
                  procFunc = module2 === "proxy" ? getJsonResult : getResult;
                  this.emit("debug", {
                    action: "request",
                    request: url,
                    provider: this
                  });
                  connection = {
                    url,
                    throttleSlotInterval: 1e3,
                    throttleCallback: function(attempt, url2) {
                      if (_this.isCommunityResource()) {
                        (0, formatter_1.showThrottleMessage)();
                      }
                      return Promise.resolve(true);
                    }
                  };
                  payloadStr = null;
                  if (payload) {
                    connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
                    payloadStr = Object.keys(payload).map(function(key) {
                      return key + "=" + payload[key];
                    }).join("&");
                  }
                  return [4, (0, web_1.fetchJson)(connection, payloadStr, procFunc || getJsonResult)];
                case 1:
                  result = _a.sent();
                  this.emit("debug", {
                    action: "response",
                    request: url,
                    response: (0, properties_1.deepCopy)(result),
                    provider: this
                  });
                  return [2, result];
              }
            });
          });
        };
        EtherscanProvider2.prototype.detectNetwork = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, this.network];
            });
          });
        };
        EtherscanProvider2.prototype.perform = function(method, params) {
          return __awaiter(this, void 0, void 0, function() {
            var _a, postData, error_1, postData, error_2, args, topic0, logs, blocks, i, log, block, _b;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  _a = method;
                  switch (_a) {
                    case "getBlockNumber":
                      return [3, 1];
                    case "getGasPrice":
                      return [3, 2];
                    case "getBalance":
                      return [3, 3];
                    case "getTransactionCount":
                      return [3, 4];
                    case "getCode":
                      return [3, 5];
                    case "getStorageAt":
                      return [3, 6];
                    case "sendTransaction":
                      return [3, 7];
                    case "getBlock":
                      return [3, 8];
                    case "getTransaction":
                      return [3, 9];
                    case "getTransactionReceipt":
                      return [3, 10];
                    case "call":
                      return [3, 11];
                    case "estimateGas":
                      return [3, 15];
                    case "getLogs":
                      return [3, 19];
                    case "getEtherPrice":
                      return [3, 26];
                  }
                  return [3, 28];
                case 1:
                  return [2, this.fetch("proxy", { action: "eth_blockNumber" })];
                case 2:
                  return [2, this.fetch("proxy", { action: "eth_gasPrice" })];
                case 3:
                  return [2, this.fetch("account", {
                    action: "balance",
                    address: params.address,
                    tag: params.blockTag
                  })];
                case 4:
                  return [2, this.fetch("proxy", {
                    action: "eth_getTransactionCount",
                    address: params.address,
                    tag: params.blockTag
                  })];
                case 5:
                  return [2, this.fetch("proxy", {
                    action: "eth_getCode",
                    address: params.address,
                    tag: params.blockTag
                  })];
                case 6:
                  return [2, this.fetch("proxy", {
                    action: "eth_getStorageAt",
                    address: params.address,
                    position: params.position,
                    tag: params.blockTag
                  })];
                case 7:
                  return [2, this.fetch("proxy", {
                    action: "eth_sendRawTransaction",
                    hex: params.signedTransaction
                  }, true).catch(function(error) {
                    return checkError("sendTransaction", error, params.signedTransaction);
                  })];
                case 8:
                  if (params.blockTag) {
                    return [2, this.fetch("proxy", {
                      action: "eth_getBlockByNumber",
                      tag: params.blockTag,
                      boolean: params.includeTransactions ? "true" : "false"
                    })];
                  }
                  throw new Error("getBlock by blockHash not implemented");
                case 9:
                  return [2, this.fetch("proxy", {
                    action: "eth_getTransactionByHash",
                    txhash: params.transactionHash
                  })];
                case 10:
                  return [2, this.fetch("proxy", {
                    action: "eth_getTransactionReceipt",
                    txhash: params.transactionHash
                  })];
                case 11:
                  if (params.blockTag !== "latest") {
                    throw new Error("EtherscanProvider does not support blockTag for call");
                  }
                  postData = getTransactionPostData(params.transaction);
                  postData.module = "proxy";
                  postData.action = "eth_call";
                  _c.label = 12;
                case 12:
                  _c.trys.push([12, 14, , 15]);
                  return [4, this.fetch("proxy", postData, true)];
                case 13:
                  return [2, _c.sent()];
                case 14:
                  error_1 = _c.sent();
                  return [2, checkError("call", error_1, params.transaction)];
                case 15:
                  postData = getTransactionPostData(params.transaction);
                  postData.module = "proxy";
                  postData.action = "eth_estimateGas";
                  _c.label = 16;
                case 16:
                  _c.trys.push([16, 18, , 19]);
                  return [4, this.fetch("proxy", postData, true)];
                case 17:
                  return [2, _c.sent()];
                case 18:
                  error_2 = _c.sent();
                  return [2, checkError("estimateGas", error_2, params.transaction)];
                case 19:
                  args = { action: "getLogs" };
                  if (params.filter.fromBlock) {
                    args.fromBlock = checkLogTag(params.filter.fromBlock);
                  }
                  if (params.filter.toBlock) {
                    args.toBlock = checkLogTag(params.filter.toBlock);
                  }
                  if (params.filter.address) {
                    args.address = params.filter.address;
                  }
                  if (params.filter.topics && params.filter.topics.length > 0) {
                    if (params.filter.topics.length > 1) {
                      logger.throwError("unsupported topic count", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                    }
                    if (params.filter.topics.length === 1) {
                      topic0 = params.filter.topics[0];
                      if (typeof topic0 !== "string" || topic0.length !== 66) {
                        logger.throwError("unsupported topic format", logger_1.Logger.errors.UNSUPPORTED_OPERATION, { topic0 });
                      }
                      args.topic0 = topic0;
                    }
                  }
                  return [4, this.fetch("logs", args)];
                case 20:
                  logs = _c.sent();
                  blocks = {};
                  i = 0;
                  _c.label = 21;
                case 21:
                  if (!(i < logs.length))
                    return [3, 25];
                  log = logs[i];
                  if (log.blockHash != null) {
                    return [3, 24];
                  }
                  if (!(blocks[log.blockNumber] == null))
                    return [3, 23];
                  return [4, this.getBlock(log.blockNumber)];
                case 22:
                  block = _c.sent();
                  if (block) {
                    blocks[log.blockNumber] = block.hash;
                  }
                  _c.label = 23;
                case 23:
                  log.blockHash = blocks[log.blockNumber];
                  _c.label = 24;
                case 24:
                  i++;
                  return [3, 21];
                case 25:
                  return [2, logs];
                case 26:
                  if (this.network.name !== "homestead") {
                    return [2, 0];
                  }
                  _b = parseFloat;
                  return [4, this.fetch("stats", { action: "ethprice" })];
                case 27:
                  return [2, _b.apply(void 0, [_c.sent().ethusd])];
                case 28:
                  return [3, 29];
                case 29:
                  return [2, _super.prototype.perform.call(this, method, params)];
              }
            });
          });
        };
        EtherscanProvider2.prototype.getHistory = function(addressOrName, startBlock, endBlock) {
          return __awaiter(this, void 0, void 0, function() {
            var params, result;
            var _a;
            var _this = this;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  _a = {
                    action: "txlist"
                  };
                  return [4, this.resolveName(addressOrName)];
                case 1:
                  params = (_a.address = _b.sent(), _a.startblock = startBlock == null ? 0 : startBlock, _a.endblock = endBlock == null ? 99999999 : endBlock, _a.sort = "asc", _a);
                  return [4, this.fetch("account", params)];
                case 2:
                  result = _b.sent();
                  return [2, result.map(function(tx) {
                    ["contractAddress", "to"].forEach(function(key) {
                      if (tx[key] == "") {
                        delete tx[key];
                      }
                    });
                    if (tx.creates == null && tx.contractAddress != null) {
                      tx.creates = tx.contractAddress;
                    }
                    var item = _this.formatter.transactionResponse(tx);
                    if (tx.timeStamp) {
                      item.timestamp = parseInt(tx.timeStamp);
                    }
                    return item;
                  })];
              }
            });
          });
        };
        EtherscanProvider2.prototype.isCommunityResource = function() {
          return this.apiKey == null;
        };
        return EtherscanProvider2;
      }(base_provider_1.BaseProvider)
    );
    exports.EtherscanProvider = EtherscanProvider;
  }
});

// node_modules/@ethersproject/providers/lib/fallback-provider.js
var require_fallback_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/fallback-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FallbackProvider = void 0;
    var abstract_provider_1 = require_lib14();
    var bignumber_1 = require_lib3();
    var bytes_1 = require_lib2();
    var properties_1 = require_lib4();
    var random_1 = require_lib24();
    var web_1 = require_lib28();
    var base_provider_1 = require_base_provider();
    var formatter_1 = require_formatter();
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    function now() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    function checkNetworks(networks) {
      var result = null;
      for (var i = 0; i < networks.length; i++) {
        var network = networks[i];
        if (network == null) {
          return null;
        }
        if (result) {
          if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
            logger.throwArgumentError("provider mismatch", "networks", networks);
          }
        } else {
          result = network;
        }
      }
      return result;
    }
    function median(values, maxDelta) {
      values = values.slice().sort();
      var middle = Math.floor(values.length / 2);
      if (values.length % 2) {
        return values[middle];
      }
      var a = values[middle - 1], b = values[middle];
      if (maxDelta != null && Math.abs(a - b) > maxDelta) {
        return null;
      }
      return (a + b) / 2;
    }
    function serialize(value) {
      if (value === null) {
        return "null";
      } else if (typeof value === "number" || typeof value === "boolean") {
        return JSON.stringify(value);
      } else if (typeof value === "string") {
        return value;
      } else if (bignumber_1.BigNumber.isBigNumber(value)) {
        return value.toString();
      } else if (Array.isArray(value)) {
        return JSON.stringify(value.map(function(i) {
          return serialize(i);
        }));
      } else if (typeof value === "object") {
        var keys = Object.keys(value);
        keys.sort();
        return "{" + keys.map(function(key) {
          var v = value[key];
          if (typeof v === "function") {
            v = "[function]";
          } else {
            v = serialize(v);
          }
          return JSON.stringify(key) + ":" + v;
        }).join(",") + "}";
      }
      throw new Error("unknown value type: " + typeof value);
    }
    var nextRid = 1;
    function stall(duration) {
      var cancel = null;
      var timer = null;
      var promise = new Promise(function(resolve) {
        cancel = function() {
          if (timer) {
            clearTimeout(timer);
            timer = null;
          }
          resolve();
        };
        timer = setTimeout(cancel, duration);
      });
      var wait = function(func) {
        promise = promise.then(func);
        return promise;
      };
      function getPromise() {
        return promise;
      }
      return { cancel, getPromise, wait };
    }
    var ForwardErrors = [
      logger_1.Logger.errors.CALL_EXCEPTION,
      logger_1.Logger.errors.INSUFFICIENT_FUNDS,
      logger_1.Logger.errors.NONCE_EXPIRED,
      logger_1.Logger.errors.REPLACEMENT_UNDERPRICED,
      logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT
    ];
    var ForwardProperties = [
      "address",
      "args",
      "errorArgs",
      "errorSignature",
      "method",
      "transaction"
    ];
    function exposeDebugConfig(config, now2) {
      var result = {
        weight: config.weight
      };
      Object.defineProperty(result, "provider", { get: function() {
        return config.provider;
      } });
      if (config.start) {
        result.start = config.start;
      }
      if (now2) {
        result.duration = now2 - config.start;
      }
      if (config.done) {
        if (config.error) {
          result.error = config.error;
        } else {
          result.result = config.result || null;
        }
      }
      return result;
    }
    function normalizedTally(normalize, quorum) {
      return function(configs) {
        var tally = {};
        configs.forEach(function(c) {
          var value = normalize(c.result);
          if (!tally[value]) {
            tally[value] = { count: 0, result: c.result };
          }
          tally[value].count++;
        });
        var keys = Object.keys(tally);
        for (var i = 0; i < keys.length; i++) {
          var check = tally[keys[i]];
          if (check.count >= quorum) {
            return check.result;
          }
        }
        return void 0;
      };
    }
    function getProcessFunc(provider, method, params) {
      var normalize = serialize;
      switch (method) {
        case "getBlockNumber":
          return function(configs) {
            var values = configs.map(function(c) {
              return c.result;
            });
            var blockNumber = median(configs.map(function(c) {
              return c.result;
            }), 2);
            if (blockNumber == null) {
              return void 0;
            }
            blockNumber = Math.ceil(blockNumber);
            if (values.indexOf(blockNumber + 1) >= 0) {
              blockNumber++;
            }
            if (blockNumber >= provider._highestBlockNumber) {
              provider._highestBlockNumber = blockNumber;
            }
            return provider._highestBlockNumber;
          };
        case "getGasPrice":
          return function(configs) {
            var values = configs.map(function(c) {
              return c.result;
            });
            values.sort();
            return values[Math.floor(values.length / 2)];
          };
        case "getEtherPrice":
          return function(configs) {
            return median(configs.map(function(c) {
              return c.result;
            }));
          };
        case "getBalance":
        case "getTransactionCount":
        case "getCode":
        case "getStorageAt":
        case "call":
        case "estimateGas":
        case "getLogs":
          break;
        case "getTransaction":
        case "getTransactionReceipt":
          normalize = function(tx) {
            if (tx == null) {
              return null;
            }
            tx = (0, properties_1.shallowCopy)(tx);
            tx.confirmations = -1;
            return serialize(tx);
          };
          break;
        case "getBlock":
          if (params.includeTransactions) {
            normalize = function(block) {
              if (block == null) {
                return null;
              }
              block = (0, properties_1.shallowCopy)(block);
              block.transactions = block.transactions.map(function(tx) {
                tx = (0, properties_1.shallowCopy)(tx);
                tx.confirmations = -1;
                return tx;
              });
              return serialize(block);
            };
          } else {
            normalize = function(block) {
              if (block == null) {
                return null;
              }
              return serialize(block);
            };
          }
          break;
        default:
          throw new Error("unknown method: " + method);
      }
      return normalizedTally(normalize, provider.quorum);
    }
    function waitForSync(config, blockNumber) {
      return __awaiter(this, void 0, void 0, function() {
        var provider;
        return __generator(this, function(_a) {
          provider = config.provider;
          if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {
            return [2, provider];
          }
          return [2, (0, web_1.poll)(function() {
            return new Promise(function(resolve, reject) {
              setTimeout(function() {
                if (provider.blockNumber >= blockNumber) {
                  return resolve(provider);
                }
                if (config.cancelled) {
                  return resolve(null);
                }
                return resolve(void 0);
              }, 0);
            });
          }, { oncePoll: provider })];
        });
      });
    }
    function getRunner(config, currentBlockNumber, method, params) {
      return __awaiter(this, void 0, void 0, function() {
        var provider, _a, filter;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              provider = config.provider;
              _a = method;
              switch (_a) {
                case "getBlockNumber":
                  return [3, 1];
                case "getGasPrice":
                  return [3, 1];
                case "getEtherPrice":
                  return [3, 2];
                case "getBalance":
                  return [3, 3];
                case "getTransactionCount":
                  return [3, 3];
                case "getCode":
                  return [3, 3];
                case "getStorageAt":
                  return [3, 6];
                case "getBlock":
                  return [3, 9];
                case "call":
                  return [3, 12];
                case "estimateGas":
                  return [3, 12];
                case "getTransaction":
                  return [3, 15];
                case "getTransactionReceipt":
                  return [3, 15];
                case "getLogs":
                  return [3, 16];
              }
              return [3, 19];
            case 1:
              return [2, provider[method]()];
            case 2:
              if (provider.getEtherPrice) {
                return [2, provider.getEtherPrice()];
              }
              return [3, 19];
            case 3:
              if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag)))
                return [3, 5];
              return [4, waitForSync(config, currentBlockNumber)];
            case 4:
              provider = _b.sent();
              _b.label = 5;
            case 5:
              return [2, provider[method](params.address, params.blockTag || "latest")];
            case 6:
              if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag)))
                return [3, 8];
              return [4, waitForSync(config, currentBlockNumber)];
            case 7:
              provider = _b.sent();
              _b.label = 8;
            case 8:
              return [2, provider.getStorageAt(params.address, params.position, params.blockTag || "latest")];
            case 9:
              if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag)))
                return [3, 11];
              return [4, waitForSync(config, currentBlockNumber)];
            case 10:
              provider = _b.sent();
              _b.label = 11;
            case 11:
              return [2, provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash)];
            case 12:
              if (!(params.blockTag && (0, bytes_1.isHexString)(params.blockTag)))
                return [3, 14];
              return [4, waitForSync(config, currentBlockNumber)];
            case 13:
              provider = _b.sent();
              _b.label = 14;
            case 14:
              if (method === "call" && params.blockTag) {
                return [2, provider[method](params.transaction, params.blockTag)];
              }
              return [2, provider[method](params.transaction)];
            case 15:
              return [2, provider[method](params.transactionHash)];
            case 16:
              filter = params.filter;
              if (!(filter.fromBlock && (0, bytes_1.isHexString)(filter.fromBlock) || filter.toBlock && (0, bytes_1.isHexString)(filter.toBlock)))
                return [3, 18];
              return [4, waitForSync(config, currentBlockNumber)];
            case 17:
              provider = _b.sent();
              _b.label = 18;
            case 18:
              return [2, provider.getLogs(filter)];
            case 19:
              return [2, logger.throwError("unknown method error", logger_1.Logger.errors.UNKNOWN_ERROR, {
                method,
                params
              })];
          }
        });
      });
    }
    var FallbackProvider = (
      /** @class */
      function(_super) {
        __extends(FallbackProvider2, _super);
        function FallbackProvider2(providers, quorum) {
          var _this = this;
          if (providers.length === 0) {
            logger.throwArgumentError("missing providers", "providers", providers);
          }
          var providerConfigs = providers.map(function(configOrProvider, index) {
            if (abstract_provider_1.Provider.isProvider(configOrProvider)) {
              var stallTimeout = (0, formatter_1.isCommunityResource)(configOrProvider) ? 2e3 : 750;
              var priority = 1;
              return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });
            }
            var config = (0, properties_1.shallowCopy)(configOrProvider);
            if (config.priority == null) {
              config.priority = 1;
            }
            if (config.stallTimeout == null) {
              config.stallTimeout = (0, formatter_1.isCommunityResource)(configOrProvider) ? 2e3 : 750;
            }
            if (config.weight == null) {
              config.weight = 1;
            }
            var weight = config.weight;
            if (weight % 1 || weight > 512 || weight < 1) {
              logger.throwArgumentError("invalid weight; must be integer in [1, 512]", "providers[" + index + "].weight", weight);
            }
            return Object.freeze(config);
          });
          var total = providerConfigs.reduce(function(accum, c) {
            return accum + c.weight;
          }, 0);
          if (quorum == null) {
            quorum = total / 2;
          } else if (quorum > total) {
            logger.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
          }
          var networkOrReady = checkNetworks(providerConfigs.map(function(c) {
            return c.provider.network;
          }));
          if (networkOrReady == null) {
            networkOrReady = new Promise(function(resolve, reject) {
              setTimeout(function() {
                _this.detectNetwork().then(resolve, reject);
              }, 0);
            });
          }
          _this = _super.call(this, networkOrReady) || this;
          (0, properties_1.defineReadOnly)(_this, "providerConfigs", Object.freeze(providerConfigs));
          (0, properties_1.defineReadOnly)(_this, "quorum", quorum);
          _this._highestBlockNumber = -1;
          return _this;
        }
        FallbackProvider2.prototype.detectNetwork = function() {
          return __awaiter(this, void 0, void 0, function() {
            var networks;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, Promise.all(this.providerConfigs.map(function(c) {
                    return c.provider.getNetwork();
                  }))];
                case 1:
                  networks = _a.sent();
                  return [2, checkNetworks(networks)];
              }
            });
          });
        };
        FallbackProvider2.prototype.perform = function(method, params) {
          return __awaiter(this, void 0, void 0, function() {
            var results, i_1, result, processFunc, configs, currentBlockNumber, i, first, _loop_1, this_1, state_1;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!(method === "sendTransaction"))
                    return [3, 2];
                  return [4, Promise.all(this.providerConfigs.map(function(c) {
                    return c.provider.sendTransaction(params.signedTransaction).then(function(result2) {
                      return result2.hash;
                    }, function(error) {
                      return error;
                    });
                  }))];
                case 1:
                  results = _a.sent();
                  for (i_1 = 0; i_1 < results.length; i_1++) {
                    result = results[i_1];
                    if (typeof result === "string") {
                      return [2, result];
                    }
                  }
                  throw results[0];
                case 2:
                  if (!(this._highestBlockNumber === -1 && method !== "getBlockNumber"))
                    return [3, 4];
                  return [4, this.getBlockNumber()];
                case 3:
                  _a.sent();
                  _a.label = 4;
                case 4:
                  processFunc = getProcessFunc(this, method, params);
                  configs = (0, random_1.shuffled)(this.providerConfigs.map(properties_1.shallowCopy));
                  configs.sort(function(a, b) {
                    return a.priority - b.priority;
                  });
                  currentBlockNumber = this._highestBlockNumber;
                  i = 0;
                  first = true;
                  _loop_1 = function() {
                    var t0, inflightWeight, _loop_2, waiting, results2, result2, errors;
                    return __generator(this, function(_b) {
                      switch (_b.label) {
                        case 0:
                          t0 = now();
                          inflightWeight = configs.filter(function(c) {
                            return c.runner && t0 - c.start < c.stallTimeout;
                          }).reduce(function(accum, c) {
                            return accum + c.weight;
                          }, 0);
                          _loop_2 = function() {
                            var config = configs[i++];
                            var rid = nextRid++;
                            config.start = now();
                            config.staller = stall(config.stallTimeout);
                            config.staller.wait(function() {
                              config.staller = null;
                            });
                            config.runner = getRunner(config, currentBlockNumber, method, params).then(function(result3) {
                              config.done = true;
                              config.result = result3;
                              if (_this.listenerCount("debug")) {
                                _this.emit("debug", {
                                  action: "request",
                                  rid,
                                  backend: exposeDebugConfig(config, now()),
                                  request: { method, params: (0, properties_1.deepCopy)(params) },
                                  provider: _this
                                });
                              }
                            }, function(error) {
                              config.done = true;
                              config.error = error;
                              if (_this.listenerCount("debug")) {
                                _this.emit("debug", {
                                  action: "request",
                                  rid,
                                  backend: exposeDebugConfig(config, now()),
                                  request: { method, params: (0, properties_1.deepCopy)(params) },
                                  provider: _this
                                });
                              }
                            });
                            if (this_1.listenerCount("debug")) {
                              this_1.emit("debug", {
                                action: "request",
                                rid,
                                backend: exposeDebugConfig(config, null),
                                request: { method, params: (0, properties_1.deepCopy)(params) },
                                provider: this_1
                              });
                            }
                            inflightWeight += config.weight;
                          };
                          while (inflightWeight < this_1.quorum && i < configs.length) {
                            _loop_2();
                          }
                          waiting = [];
                          configs.forEach(function(c) {
                            if (c.done || !c.runner) {
                              return;
                            }
                            waiting.push(c.runner);
                            if (c.staller) {
                              waiting.push(c.staller.getPromise());
                            }
                          });
                          if (!waiting.length)
                            return [3, 2];
                          return [4, Promise.race(waiting)];
                        case 1:
                          _b.sent();
                          _b.label = 2;
                        case 2:
                          results2 = configs.filter(function(c) {
                            return c.done && c.error == null;
                          });
                          if (!(results2.length >= this_1.quorum))
                            return [3, 5];
                          result2 = processFunc(results2);
                          if (result2 !== void 0) {
                            configs.forEach(function(c) {
                              if (c.staller) {
                                c.staller.cancel();
                              }
                              c.cancelled = true;
                            });
                            return [2, { value: result2 }];
                          }
                          if (!!first)
                            return [3, 4];
                          return [4, stall(100).getPromise()];
                        case 3:
                          _b.sent();
                          _b.label = 4;
                        case 4:
                          first = false;
                          _b.label = 5;
                        case 5:
                          errors = configs.reduce(function(accum, c) {
                            if (!c.done || c.error == null) {
                              return accum;
                            }
                            var code = c.error.code;
                            if (ForwardErrors.indexOf(code) >= 0) {
                              if (!accum[code]) {
                                accum[code] = { error: c.error, weight: 0 };
                              }
                              accum[code].weight += c.weight;
                            }
                            return accum;
                          }, {});
                          Object.keys(errors).forEach(function(errorCode) {
                            var tally = errors[errorCode];
                            if (tally.weight < _this.quorum) {
                              return;
                            }
                            configs.forEach(function(c) {
                              if (c.staller) {
                                c.staller.cancel();
                              }
                              c.cancelled = true;
                            });
                            var e = tally.error;
                            var props = {};
                            ForwardProperties.forEach(function(name) {
                              if (e[name] == null) {
                                return;
                              }
                              props[name] = e[name];
                            });
                            logger.throwError(e.reason || e.message, errorCode, props);
                          });
                          if (configs.filter(function(c) {
                            return !c.done;
                          }).length === 0) {
                            return [2, "break"];
                          }
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  };
                  this_1 = this;
                  _a.label = 5;
                case 5:
                  if (false)
                    return [3, 7];
                  return [5, _loop_1()];
                case 6:
                  state_1 = _a.sent();
                  if (typeof state_1 === "object")
                    return [2, state_1.value];
                  if (state_1 === "break")
                    return [3, 7];
                  return [3, 5];
                case 7:
                  configs.forEach(function(c) {
                    if (c.staller) {
                      c.staller.cancel();
                    }
                    c.cancelled = true;
                  });
                  return [2, logger.throwError("failed to meet quorum", logger_1.Logger.errors.SERVER_ERROR, {
                    method,
                    params,
                    //results: configs.map((c) => c.result),
                    //errors: configs.map((c) => c.error),
                    results: configs.map(function(c) {
                      return exposeDebugConfig(c);
                    }),
                    provider: this
                  })];
              }
            });
          });
        };
        return FallbackProvider2;
      }(base_provider_1.BaseProvider)
    );
    exports.FallbackProvider = FallbackProvider;
  }
});

// node_modules/@ethersproject/providers/lib/browser-ipc-provider.js
var require_browser_ipc_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/browser-ipc-provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IpcProvider = void 0;
    var IpcProvider = null;
    exports.IpcProvider = IpcProvider;
  }
});

// node_modules/@ethersproject/providers/lib/infura-provider.js
var require_infura_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/infura-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InfuraProvider = exports.InfuraWebSocketProvider = void 0;
    var properties_1 = require_lib4();
    var websocket_provider_1 = require_websocket_provider();
    var formatter_1 = require_formatter();
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    var url_json_rpc_provider_1 = require_url_json_rpc_provider();
    var defaultProjectId = "84842078b09946638c03157f83405213";
    var InfuraWebSocketProvider = (
      /** @class */
      function(_super) {
        __extends(InfuraWebSocketProvider2, _super);
        function InfuraWebSocketProvider2(network, apiKey) {
          var _this = this;
          var provider = new InfuraProvider(network, apiKey);
          var connection = provider.connection;
          if (connection.password) {
            logger.throwError("INFURA WebSocket project secrets unsupported", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "InfuraProvider.getWebSocketProvider()"
            });
          }
          var url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
          _this = _super.call(this, url, network) || this;
          (0, properties_1.defineReadOnly)(_this, "apiKey", provider.projectId);
          (0, properties_1.defineReadOnly)(_this, "projectId", provider.projectId);
          (0, properties_1.defineReadOnly)(_this, "projectSecret", provider.projectSecret);
          return _this;
        }
        InfuraWebSocketProvider2.prototype.isCommunityResource = function() {
          return this.projectId === defaultProjectId;
        };
        return InfuraWebSocketProvider2;
      }(websocket_provider_1.WebSocketProvider)
    );
    exports.InfuraWebSocketProvider = InfuraWebSocketProvider;
    var InfuraProvider = (
      /** @class */
      function(_super) {
        __extends(InfuraProvider2, _super);
        function InfuraProvider2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        InfuraProvider2.getWebSocketProvider = function(network, apiKey) {
          return new InfuraWebSocketProvider(network, apiKey);
        };
        InfuraProvider2.getApiKey = function(apiKey) {
          var apiKeyObj = {
            apiKey: defaultProjectId,
            projectId: defaultProjectId,
            projectSecret: null
          };
          if (apiKey == null) {
            return apiKeyObj;
          }
          if (typeof apiKey === "string") {
            apiKeyObj.projectId = apiKey;
          } else if (apiKey.projectSecret != null) {
            logger.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
            logger.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
            apiKeyObj.projectId = apiKey.projectId;
            apiKeyObj.projectSecret = apiKey.projectSecret;
          } else if (apiKey.projectId) {
            apiKeyObj.projectId = apiKey.projectId;
          }
          apiKeyObj.apiKey = apiKeyObj.projectId;
          return apiKeyObj;
        };
        InfuraProvider2.getUrl = function(network, apiKey) {
          var host = null;
          switch (network ? network.name : "unknown") {
            case "homestead":
              host = "mainnet.infura.io";
              break;
            case "goerli":
              host = "goerli.infura.io";
              break;
            case "sepolia":
              host = "sepolia.infura.io";
              break;
            case "matic":
              host = "polygon-mainnet.infura.io";
              break;
            case "maticmum":
              host = "polygon-mumbai.infura.io";
              break;
            case "optimism":
              host = "optimism-mainnet.infura.io";
              break;
            case "optimism-goerli":
              host = "optimism-goerli.infura.io";
              break;
            case "arbitrum":
              host = "arbitrum-mainnet.infura.io";
              break;
            case "arbitrum-goerli":
              host = "arbitrum-goerli.infura.io";
              break;
            default:
              logger.throwError("unsupported network", logger_1.Logger.errors.INVALID_ARGUMENT, {
                argument: "network",
                value: network
              });
          }
          var connection = {
            allowGzip: true,
            url: "https://" + host + "/v3/" + apiKey.projectId,
            throttleCallback: function(attempt, url) {
              if (apiKey.projectId === defaultProjectId) {
                (0, formatter_1.showThrottleMessage)();
              }
              return Promise.resolve(true);
            }
          };
          if (apiKey.projectSecret != null) {
            connection.user = "";
            connection.password = apiKey.projectSecret;
          }
          return connection;
        };
        InfuraProvider2.prototype.isCommunityResource = function() {
          return this.projectId === defaultProjectId;
        };
        return InfuraProvider2;
      }(url_json_rpc_provider_1.UrlJsonRpcProvider)
    );
    exports.InfuraProvider = InfuraProvider;
  }
});

// node_modules/@ethersproject/providers/lib/json-rpc-batch-provider.js
var require_json_rpc_batch_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/json-rpc-batch-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonRpcBatchProvider = void 0;
    var properties_1 = require_lib4();
    var web_1 = require_lib28();
    var json_rpc_provider_1 = require_json_rpc_provider();
    var JsonRpcBatchProvider = (
      /** @class */
      function(_super) {
        __extends(JsonRpcBatchProvider2, _super);
        function JsonRpcBatchProvider2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        JsonRpcBatchProvider2.prototype.send = function(method, params) {
          var _this = this;
          var request = {
            method,
            params,
            id: this._nextId++,
            jsonrpc: "2.0"
          };
          if (this._pendingBatch == null) {
            this._pendingBatch = [];
          }
          var inflightRequest = { request, resolve: null, reject: null };
          var promise = new Promise(function(resolve, reject) {
            inflightRequest.resolve = resolve;
            inflightRequest.reject = reject;
          });
          this._pendingBatch.push(inflightRequest);
          if (!this._pendingBatchAggregator) {
            this._pendingBatchAggregator = setTimeout(function() {
              var batch = _this._pendingBatch;
              _this._pendingBatch = null;
              _this._pendingBatchAggregator = null;
              var request2 = batch.map(function(inflight) {
                return inflight.request;
              });
              _this.emit("debug", {
                action: "requestBatch",
                request: (0, properties_1.deepCopy)(request2),
                provider: _this
              });
              return (0, web_1.fetchJson)(_this.connection, JSON.stringify(request2)).then(function(result) {
                _this.emit("debug", {
                  action: "response",
                  request: request2,
                  response: result,
                  provider: _this
                });
                batch.forEach(function(inflightRequest2, index) {
                  var payload = result[index];
                  if (payload.error) {
                    var error = new Error(payload.error.message);
                    error.code = payload.error.code;
                    error.data = payload.error.data;
                    inflightRequest2.reject(error);
                  } else {
                    inflightRequest2.resolve(payload.result);
                  }
                });
              }, function(error) {
                _this.emit("debug", {
                  action: "response",
                  error,
                  request: request2,
                  provider: _this
                });
                batch.forEach(function(inflightRequest2) {
                  inflightRequest2.reject(error);
                });
              });
            }, 10);
          }
          return promise;
        };
        return JsonRpcBatchProvider2;
      }(json_rpc_provider_1.JsonRpcProvider)
    );
    exports.JsonRpcBatchProvider = JsonRpcBatchProvider;
  }
});

// node_modules/@ethersproject/providers/lib/nodesmith-provider.js
var require_nodesmith_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/nodesmith-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodesmithProvider = void 0;
    var url_json_rpc_provider_1 = require_url_json_rpc_provider();
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    var defaultApiKey = "ETHERS_JS_SHARED";
    var NodesmithProvider = (
      /** @class */
      function(_super) {
        __extends(NodesmithProvider2, _super);
        function NodesmithProvider2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        NodesmithProvider2.getApiKey = function(apiKey) {
          if (apiKey && typeof apiKey !== "string") {
            logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
          }
          return apiKey || defaultApiKey;
        };
        NodesmithProvider2.getUrl = function(network, apiKey) {
          logger.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
          var host = null;
          switch (network.name) {
            case "homestead":
              host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
              break;
            case "ropsten":
              host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
              break;
            case "rinkeby":
              host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
              break;
            case "goerli":
              host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
              break;
            case "kovan":
              host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
              break;
            default:
              logger.throwArgumentError("unsupported network", "network", arguments[0]);
          }
          return host + "?apiKey=" + apiKey;
        };
        return NodesmithProvider2;
      }(url_json_rpc_provider_1.UrlJsonRpcProvider)
    );
    exports.NodesmithProvider = NodesmithProvider;
  }
});

// node_modules/@ethersproject/providers/lib/pocket-provider.js
var require_pocket_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/pocket-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PocketProvider = void 0;
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    var url_json_rpc_provider_1 = require_url_json_rpc_provider();
    var defaultApplicationId = "62e1ad51b37b8e00394bda3b";
    var PocketProvider = (
      /** @class */
      function(_super) {
        __extends(PocketProvider2, _super);
        function PocketProvider2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        PocketProvider2.getApiKey = function(apiKey) {
          var apiKeyObj = {
            applicationId: null,
            loadBalancer: true,
            applicationSecretKey: null
          };
          if (apiKey == null) {
            apiKeyObj.applicationId = defaultApplicationId;
          } else if (typeof apiKey === "string") {
            apiKeyObj.applicationId = apiKey;
          } else if (apiKey.applicationSecretKey != null) {
            apiKeyObj.applicationId = apiKey.applicationId;
            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
          } else if (apiKey.applicationId) {
            apiKeyObj.applicationId = apiKey.applicationId;
          } else {
            logger.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
          }
          return apiKeyObj;
        };
        PocketProvider2.getUrl = function(network, apiKey) {
          var host = null;
          switch (network ? network.name : "unknown") {
            case "goerli":
              host = "eth-goerli.gateway.pokt.network";
              break;
            case "homestead":
              host = "eth-mainnet.gateway.pokt.network";
              break;
            case "kovan":
              host = "poa-kovan.gateway.pokt.network";
              break;
            case "matic":
              host = "poly-mainnet.gateway.pokt.network";
              break;
            case "maticmum":
              host = "polygon-mumbai-rpc.gateway.pokt.network";
              break;
            case "rinkeby":
              host = "eth-rinkeby.gateway.pokt.network";
              break;
            case "ropsten":
              host = "eth-ropsten.gateway.pokt.network";
              break;
            default:
              logger.throwError("unsupported network", logger_1.Logger.errors.INVALID_ARGUMENT, {
                argument: "network",
                value: network
              });
          }
          var url = "https://" + host + "/v1/lb/" + apiKey.applicationId;
          var connection = { headers: {}, url };
          if (apiKey.applicationSecretKey != null) {
            connection.user = "";
            connection.password = apiKey.applicationSecretKey;
          }
          return connection;
        };
        PocketProvider2.prototype.isCommunityResource = function() {
          return this.applicationId === defaultApplicationId;
        };
        return PocketProvider2;
      }(url_json_rpc_provider_1.UrlJsonRpcProvider)
    );
    exports.PocketProvider = PocketProvider;
  }
});

// node_modules/@ethersproject/providers/lib/web3-provider.js
var require_web3_provider = __commonJS({
  "node_modules/@ethersproject/providers/lib/web3-provider.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Web3Provider = void 0;
    var properties_1 = require_lib4();
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    var json_rpc_provider_1 = require_json_rpc_provider();
    var _nextId = 1;
    function buildWeb3LegacyFetcher(provider, sendFunc) {
      var fetcher = "Web3LegacyFetcher";
      return function(method, params) {
        var _this = this;
        var request = {
          method,
          params,
          id: _nextId++,
          jsonrpc: "2.0"
        };
        return new Promise(function(resolve, reject) {
          _this.emit("debug", {
            action: "request",
            fetcher,
            request: (0, properties_1.deepCopy)(request),
            provider: _this
          });
          sendFunc(request, function(error, response) {
            if (error) {
              _this.emit("debug", {
                action: "response",
                fetcher,
                error,
                request,
                provider: _this
              });
              return reject(error);
            }
            _this.emit("debug", {
              action: "response",
              fetcher,
              request,
              response,
              provider: _this
            });
            if (response.error) {
              var error_1 = new Error(response.error.message);
              error_1.code = response.error.code;
              error_1.data = response.error.data;
              return reject(error_1);
            }
            resolve(response.result);
          });
        });
      };
    }
    function buildEip1193Fetcher(provider) {
      return function(method, params) {
        var _this = this;
        if (params == null) {
          params = [];
        }
        var request = { method, params };
        this.emit("debug", {
          action: "request",
          fetcher: "Eip1193Fetcher",
          request: (0, properties_1.deepCopy)(request),
          provider: this
        });
        return provider.request(request).then(function(response) {
          _this.emit("debug", {
            action: "response",
            fetcher: "Eip1193Fetcher",
            request,
            response,
            provider: _this
          });
          return response;
        }, function(error) {
          _this.emit("debug", {
            action: "response",
            fetcher: "Eip1193Fetcher",
            request,
            error,
            provider: _this
          });
          throw error;
        });
      };
    }
    var Web3Provider = (
      /** @class */
      function(_super) {
        __extends(Web3Provider2, _super);
        function Web3Provider2(provider, network) {
          var _this = this;
          if (provider == null) {
            logger.throwArgumentError("missing provider", "provider", provider);
          }
          var path = null;
          var jsonRpcFetchFunc = null;
          var subprovider = null;
          if (typeof provider === "function") {
            path = "unknown:";
            jsonRpcFetchFunc = provider;
          } else {
            path = provider.host || provider.path || "";
            if (!path && provider.isMetaMask) {
              path = "metamask";
            }
            subprovider = provider;
            if (provider.request) {
              if (path === "") {
                path = "eip-1193:";
              }
              jsonRpcFetchFunc = buildEip1193Fetcher(provider);
            } else if (provider.sendAsync) {
              jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
            } else if (provider.send) {
              jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
            } else {
              logger.throwArgumentError("unsupported provider", "provider", provider);
            }
            if (!path) {
              path = "unknown:";
            }
          }
          _this = _super.call(this, path, network) || this;
          (0, properties_1.defineReadOnly)(_this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
          (0, properties_1.defineReadOnly)(_this, "provider", subprovider);
          return _this;
        }
        Web3Provider2.prototype.send = function(method, params) {
          return this.jsonRpcFetchFunc(method, params);
        };
        return Web3Provider2;
      }(json_rpc_provider_1.JsonRpcProvider)
    );
    exports.Web3Provider = Web3Provider;
  }
});

// node_modules/@ethersproject/providers/lib/index.js
var require_lib29 = __commonJS({
  "node_modules/@ethersproject/providers/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Formatter = exports.showThrottleMessage = exports.isCommunityResourcable = exports.isCommunityResource = exports.getNetwork = exports.getDefaultProvider = exports.JsonRpcSigner = exports.IpcProvider = exports.WebSocketProvider = exports.Web3Provider = exports.StaticJsonRpcProvider = exports.PocketProvider = exports.NodesmithProvider = exports.JsonRpcBatchProvider = exports.JsonRpcProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanProvider = exports.CloudflareProvider = exports.AnkrProvider = exports.AlchemyWebSocketProvider = exports.AlchemyProvider = exports.FallbackProvider = exports.UrlJsonRpcProvider = exports.Resolver = exports.BaseProvider = exports.Provider = void 0;
    var abstract_provider_1 = require_lib14();
    Object.defineProperty(exports, "Provider", { enumerable: true, get: function() {
      return abstract_provider_1.Provider;
    } });
    var networks_1 = require_lib27();
    Object.defineProperty(exports, "getNetwork", { enumerable: true, get: function() {
      return networks_1.getNetwork;
    } });
    var base_provider_1 = require_base_provider();
    Object.defineProperty(exports, "BaseProvider", { enumerable: true, get: function() {
      return base_provider_1.BaseProvider;
    } });
    Object.defineProperty(exports, "Resolver", { enumerable: true, get: function() {
      return base_provider_1.Resolver;
    } });
    var alchemy_provider_1 = require_alchemy_provider();
    Object.defineProperty(exports, "AlchemyProvider", { enumerable: true, get: function() {
      return alchemy_provider_1.AlchemyProvider;
    } });
    Object.defineProperty(exports, "AlchemyWebSocketProvider", { enumerable: true, get: function() {
      return alchemy_provider_1.AlchemyWebSocketProvider;
    } });
    var ankr_provider_1 = require_ankr_provider();
    Object.defineProperty(exports, "AnkrProvider", { enumerable: true, get: function() {
      return ankr_provider_1.AnkrProvider;
    } });
    var cloudflare_provider_1 = require_cloudflare_provider();
    Object.defineProperty(exports, "CloudflareProvider", { enumerable: true, get: function() {
      return cloudflare_provider_1.CloudflareProvider;
    } });
    var etherscan_provider_1 = require_etherscan_provider();
    Object.defineProperty(exports, "EtherscanProvider", { enumerable: true, get: function() {
      return etherscan_provider_1.EtherscanProvider;
    } });
    var fallback_provider_1 = require_fallback_provider();
    Object.defineProperty(exports, "FallbackProvider", { enumerable: true, get: function() {
      return fallback_provider_1.FallbackProvider;
    } });
    var ipc_provider_1 = require_browser_ipc_provider();
    Object.defineProperty(exports, "IpcProvider", { enumerable: true, get: function() {
      return ipc_provider_1.IpcProvider;
    } });
    var infura_provider_1 = require_infura_provider();
    Object.defineProperty(exports, "InfuraProvider", { enumerable: true, get: function() {
      return infura_provider_1.InfuraProvider;
    } });
    Object.defineProperty(exports, "InfuraWebSocketProvider", { enumerable: true, get: function() {
      return infura_provider_1.InfuraWebSocketProvider;
    } });
    var json_rpc_provider_1 = require_json_rpc_provider();
    Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function() {
      return json_rpc_provider_1.JsonRpcProvider;
    } });
    Object.defineProperty(exports, "JsonRpcSigner", { enumerable: true, get: function() {
      return json_rpc_provider_1.JsonRpcSigner;
    } });
    var json_rpc_batch_provider_1 = require_json_rpc_batch_provider();
    Object.defineProperty(exports, "JsonRpcBatchProvider", { enumerable: true, get: function() {
      return json_rpc_batch_provider_1.JsonRpcBatchProvider;
    } });
    var nodesmith_provider_1 = require_nodesmith_provider();
    Object.defineProperty(exports, "NodesmithProvider", { enumerable: true, get: function() {
      return nodesmith_provider_1.NodesmithProvider;
    } });
    var pocket_provider_1 = require_pocket_provider();
    Object.defineProperty(exports, "PocketProvider", { enumerable: true, get: function() {
      return pocket_provider_1.PocketProvider;
    } });
    var url_json_rpc_provider_1 = require_url_json_rpc_provider();
    Object.defineProperty(exports, "StaticJsonRpcProvider", { enumerable: true, get: function() {
      return url_json_rpc_provider_1.StaticJsonRpcProvider;
    } });
    Object.defineProperty(exports, "UrlJsonRpcProvider", { enumerable: true, get: function() {
      return url_json_rpc_provider_1.UrlJsonRpcProvider;
    } });
    var web3_provider_1 = require_web3_provider();
    Object.defineProperty(exports, "Web3Provider", { enumerable: true, get: function() {
      return web3_provider_1.Web3Provider;
    } });
    var websocket_provider_1 = require_websocket_provider();
    Object.defineProperty(exports, "WebSocketProvider", { enumerable: true, get: function() {
      return websocket_provider_1.WebSocketProvider;
    } });
    var formatter_1 = require_formatter();
    Object.defineProperty(exports, "Formatter", { enumerable: true, get: function() {
      return formatter_1.Formatter;
    } });
    Object.defineProperty(exports, "isCommunityResourcable", { enumerable: true, get: function() {
      return formatter_1.isCommunityResourcable;
    } });
    Object.defineProperty(exports, "isCommunityResource", { enumerable: true, get: function() {
      return formatter_1.isCommunityResource;
    } });
    Object.defineProperty(exports, "showThrottleMessage", { enumerable: true, get: function() {
      return formatter_1.showThrottleMessage;
    } });
    var logger_1 = require_lib();
    var _version_1 = require_version23();
    var logger = new logger_1.Logger(_version_1.version);
    function getDefaultProvider(network, options) {
      if (network == null) {
        network = "homestead";
      }
      if (typeof network === "string") {
        var match = network.match(/^(ws|http)s?:/i);
        if (match) {
          switch (match[1].toLowerCase()) {
            case "http":
            case "https":
              return new json_rpc_provider_1.JsonRpcProvider(network);
            case "ws":
            case "wss":
              return new websocket_provider_1.WebSocketProvider(network);
            default:
              logger.throwArgumentError("unsupported URL scheme", "network", network);
          }
        }
      }
      var n = (0, networks_1.getNetwork)(network);
      if (!n || !n._defaultProvider) {
        logger.throwError("unsupported getDefaultProvider network", logger_1.Logger.errors.NETWORK_ERROR, {
          operation: "getDefaultProvider",
          network
        });
      }
      return n._defaultProvider({
        FallbackProvider: fallback_provider_1.FallbackProvider,
        AlchemyProvider: alchemy_provider_1.AlchemyProvider,
        AnkrProvider: ankr_provider_1.AnkrProvider,
        CloudflareProvider: cloudflare_provider_1.CloudflareProvider,
        EtherscanProvider: etherscan_provider_1.EtherscanProvider,
        InfuraProvider: infura_provider_1.InfuraProvider,
        JsonRpcProvider: json_rpc_provider_1.JsonRpcProvider,
        NodesmithProvider: nodesmith_provider_1.NodesmithProvider,
        PocketProvider: pocket_provider_1.PocketProvider,
        Web3Provider: web3_provider_1.Web3Provider,
        IpcProvider: ipc_provider_1.IpcProvider
      }, options);
    }
    exports.getDefaultProvider = getDefaultProvider;
  }
});

// node_modules/@ethersproject/solidity/lib/_version.js
var require_version24 = __commonJS({
  "node_modules/@ethersproject/solidity/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "solidity/5.7.0";
  }
});

// node_modules/@ethersproject/solidity/lib/index.js
var require_lib30 = __commonJS({
  "node_modules/@ethersproject/solidity/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha256 = exports.keccak256 = exports.pack = void 0;
    var bignumber_1 = require_lib3();
    var bytes_1 = require_lib2();
    var keccak256_1 = require_lib5();
    var sha2_1 = require_lib20();
    var strings_1 = require_lib9();
    var regexBytes = new RegExp("^bytes([0-9]+)$");
    var regexNumber = new RegExp("^(u?int)([0-9]*)$");
    var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    var Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
    var logger_1 = require_lib();
    var _version_1 = require_version24();
    var logger = new logger_1.Logger(_version_1.version);
    function _pack(type, value, isArray) {
      switch (type) {
        case "address":
          if (isArray) {
            return (0, bytes_1.zeroPad)(value, 32);
          }
          return (0, bytes_1.arrayify)(value);
        case "string":
          return (0, strings_1.toUtf8Bytes)(value);
        case "bytes":
          return (0, bytes_1.arrayify)(value);
        case "bool":
          value = value ? "0x01" : "0x00";
          if (isArray) {
            return (0, bytes_1.zeroPad)(value, 32);
          }
          return (0, bytes_1.arrayify)(value);
      }
      var match = type.match(regexNumber);
      if (match) {
        var size = parseInt(match[2] || "256");
        if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {
          logger.throwArgumentError("invalid number type", "type", type);
        }
        if (isArray) {
          size = 256;
        }
        value = bignumber_1.BigNumber.from(value).toTwos(size);
        return (0, bytes_1.zeroPad)(value, size / 8);
      }
      match = type.match(regexBytes);
      if (match) {
        var size = parseInt(match[1]);
        if (String(size) !== match[1] || size === 0 || size > 32) {
          logger.throwArgumentError("invalid bytes type", "type", type);
        }
        if ((0, bytes_1.arrayify)(value).byteLength !== size) {
          logger.throwArgumentError("invalid value for " + type, "value", value);
        }
        if (isArray) {
          return (0, bytes_1.arrayify)((value + Zeros).substring(0, 66));
        }
        return value;
      }
      match = type.match(regexArray);
      if (match && Array.isArray(value)) {
        var baseType_1 = match[1];
        var count = parseInt(match[2] || String(value.length));
        if (count != value.length) {
          logger.throwArgumentError("invalid array length for " + type, "value", value);
        }
        var result_1 = [];
        value.forEach(function(value2) {
          result_1.push(_pack(baseType_1, value2, true));
        });
        return (0, bytes_1.concat)(result_1);
      }
      return logger.throwArgumentError("invalid type", "type", type);
    }
    function pack(types, values) {
      if (types.length != values.length) {
        logger.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
      }
      var tight = [];
      types.forEach(function(type, index) {
        tight.push(_pack(type, values[index]));
      });
      return (0, bytes_1.hexlify)((0, bytes_1.concat)(tight));
    }
    exports.pack = pack;
    function keccak256(types, values) {
      return (0, keccak256_1.keccak256)(pack(types, values));
    }
    exports.keccak256 = keccak256;
    function sha256(types, values) {
      return (0, sha2_1.sha256)(pack(types, values));
    }
    exports.sha256 = sha256;
  }
});

// node_modules/@ethersproject/units/lib/_version.js
var require_version25 = __commonJS({
  "node_modules/@ethersproject/units/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "units/5.7.0";
  }
});

// node_modules/@ethersproject/units/lib/index.js
var require_lib31 = __commonJS({
  "node_modules/@ethersproject/units/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEther = exports.formatEther = exports.parseUnits = exports.formatUnits = exports.commify = void 0;
    var bignumber_1 = require_lib3();
    var logger_1 = require_lib();
    var _version_1 = require_version25();
    var logger = new logger_1.Logger(_version_1.version);
    var names = [
      "wei",
      "kwei",
      "mwei",
      "gwei",
      "szabo",
      "finney",
      "ether"
    ];
    function commify(value) {
      var comps = String(value).split(".");
      if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === "." || value === "-.") {
        logger.throwArgumentError("invalid value", "value", value);
      }
      var whole = comps[0];
      var negative = "";
      if (whole.substring(0, 1) === "-") {
        negative = "-";
        whole = whole.substring(1);
      }
      while (whole.substring(0, 1) === "0") {
        whole = whole.substring(1);
      }
      if (whole === "") {
        whole = "0";
      }
      var suffix = "";
      if (comps.length === 2) {
        suffix = "." + (comps[1] || "0");
      }
      while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
        suffix = suffix.substring(0, suffix.length - 1);
      }
      var formatted = [];
      while (whole.length) {
        if (whole.length <= 3) {
          formatted.unshift(whole);
          break;
        } else {
          var index = whole.length - 3;
          formatted.unshift(whole.substring(index));
          whole = whole.substring(0, index);
        }
      }
      return negative + formatted.join(",") + suffix;
    }
    exports.commify = commify;
    function formatUnits(value, unitName) {
      if (typeof unitName === "string") {
        var index = names.indexOf(unitName);
        if (index !== -1) {
          unitName = 3 * index;
        }
      }
      return (0, bignumber_1.formatFixed)(value, unitName != null ? unitName : 18);
    }
    exports.formatUnits = formatUnits;
    function parseUnits(value, unitName) {
      if (typeof value !== "string") {
        logger.throwArgumentError("value must be a string", "value", value);
      }
      if (typeof unitName === "string") {
        var index = names.indexOf(unitName);
        if (index !== -1) {
          unitName = 3 * index;
        }
      }
      return (0, bignumber_1.parseFixed)(value, unitName != null ? unitName : 18);
    }
    exports.parseUnits = parseUnits;
    function formatEther(wei) {
      return formatUnits(wei, 18);
    }
    exports.formatEther = formatEther;
    function parseEther(ether) {
      return parseUnits(ether, 18);
    }
    exports.parseEther = parseEther;
  }
});

// node_modules/ethers/lib/utils.js
var require_utils5 = __commonJS({
  "node_modules/ethers/lib/utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatBytes32String = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = exports.nameprep = exports.hexDataSlice = exports.hexDataLength = exports.hexZeroPad = exports.hexValue = exports.hexStripZeros = exports.hexConcat = exports.isHexString = exports.hexlify = exports.base64 = exports.base58 = exports.TransactionDescription = exports.LogDescription = exports.Interface = exports.SigningKey = exports.HDNode = exports.defaultPath = exports.isBytesLike = exports.isBytes = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.shallowCopy = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = exports.deepCopy = exports.checkProperties = exports.poll = exports.fetchJson = exports._fetchData = exports.RLP = exports.Logger = exports.checkResultErrors = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.Fragment = exports.defaultAbiCoder = exports.AbiCoder = void 0;
    exports.Indexed = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = exports.SupportedAlgorithm = exports.mnemonicToSeed = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.getAccountPath = exports.verifyTypedData = exports.verifyMessage = exports.recoverPublicKey = exports.computePublicKey = exports.recoverAddress = exports.computeAddress = exports.getJsonWalletAddress = exports.TransactionTypes = exports.serializeTransaction = exports.parseTransaction = exports.accessListify = exports.joinSignature = exports.splitSignature = exports.soliditySha256 = exports.solidityKeccak256 = exports.solidityPack = exports.shuffled = exports.randomBytes = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.computeHmac = exports.commify = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.isAddress = exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.getAddress = exports._TypedDataEncoder = exports.id = exports.isValidName = exports.namehash = exports.hashMessage = exports.dnsEncode = exports.parseBytes32String = void 0;
    var abi_1 = require_lib13();
    Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function() {
      return abi_1.AbiCoder;
    } });
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function() {
      return abi_1.checkResultErrors;
    } });
    Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function() {
      return abi_1.ConstructorFragment;
    } });
    Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function() {
      return abi_1.defaultAbiCoder;
    } });
    Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function() {
      return abi_1.ErrorFragment;
    } });
    Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function() {
      return abi_1.EventFragment;
    } });
    Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function() {
      return abi_1.FormatTypes;
    } });
    Object.defineProperty(exports, "Fragment", { enumerable: true, get: function() {
      return abi_1.Fragment;
    } });
    Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function() {
      return abi_1.FunctionFragment;
    } });
    Object.defineProperty(exports, "Indexed", { enumerable: true, get: function() {
      return abi_1.Indexed;
    } });
    Object.defineProperty(exports, "Interface", { enumerable: true, get: function() {
      return abi_1.Interface;
    } });
    Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function() {
      return abi_1.LogDescription;
    } });
    Object.defineProperty(exports, "ParamType", { enumerable: true, get: function() {
      return abi_1.ParamType;
    } });
    Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function() {
      return abi_1.TransactionDescription;
    } });
    var address_1 = require_lib7();
    Object.defineProperty(exports, "getAddress", { enumerable: true, get: function() {
      return address_1.getAddress;
    } });
    Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function() {
      return address_1.getCreate2Address;
    } });
    Object.defineProperty(exports, "getContractAddress", { enumerable: true, get: function() {
      return address_1.getContractAddress;
    } });
    Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function() {
      return address_1.getIcapAddress;
    } });
    Object.defineProperty(exports, "isAddress", { enumerable: true, get: function() {
      return address_1.isAddress;
    } });
    var base64 = __importStar(require_lib10());
    exports.base64 = base64;
    var basex_1 = require_lib19();
    Object.defineProperty(exports, "base58", { enumerable: true, get: function() {
      return basex_1.Base58;
    } });
    var bytes_1 = require_lib2();
    Object.defineProperty(exports, "arrayify", { enumerable: true, get: function() {
      return bytes_1.arrayify;
    } });
    Object.defineProperty(exports, "concat", { enumerable: true, get: function() {
      return bytes_1.concat;
    } });
    Object.defineProperty(exports, "hexConcat", { enumerable: true, get: function() {
      return bytes_1.hexConcat;
    } });
    Object.defineProperty(exports, "hexDataSlice", { enumerable: true, get: function() {
      return bytes_1.hexDataSlice;
    } });
    Object.defineProperty(exports, "hexDataLength", { enumerable: true, get: function() {
      return bytes_1.hexDataLength;
    } });
    Object.defineProperty(exports, "hexlify", { enumerable: true, get: function() {
      return bytes_1.hexlify;
    } });
    Object.defineProperty(exports, "hexStripZeros", { enumerable: true, get: function() {
      return bytes_1.hexStripZeros;
    } });
    Object.defineProperty(exports, "hexValue", { enumerable: true, get: function() {
      return bytes_1.hexValue;
    } });
    Object.defineProperty(exports, "hexZeroPad", { enumerable: true, get: function() {
      return bytes_1.hexZeroPad;
    } });
    Object.defineProperty(exports, "isBytes", { enumerable: true, get: function() {
      return bytes_1.isBytes;
    } });
    Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function() {
      return bytes_1.isBytesLike;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return bytes_1.isHexString;
    } });
    Object.defineProperty(exports, "joinSignature", { enumerable: true, get: function() {
      return bytes_1.joinSignature;
    } });
    Object.defineProperty(exports, "zeroPad", { enumerable: true, get: function() {
      return bytes_1.zeroPad;
    } });
    Object.defineProperty(exports, "splitSignature", { enumerable: true, get: function() {
      return bytes_1.splitSignature;
    } });
    Object.defineProperty(exports, "stripZeros", { enumerable: true, get: function() {
      return bytes_1.stripZeros;
    } });
    var hash_1 = require_lib12();
    Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function() {
      return hash_1._TypedDataEncoder;
    } });
    Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function() {
      return hash_1.dnsEncode;
    } });
    Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function() {
      return hash_1.hashMessage;
    } });
    Object.defineProperty(exports, "id", { enumerable: true, get: function() {
      return hash_1.id;
    } });
    Object.defineProperty(exports, "isValidName", { enumerable: true, get: function() {
      return hash_1.isValidName;
    } });
    Object.defineProperty(exports, "namehash", { enumerable: true, get: function() {
      return hash_1.namehash;
    } });
    var hdnode_1 = require_lib23();
    Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function() {
      return hdnode_1.defaultPath;
    } });
    Object.defineProperty(exports, "entropyToMnemonic", { enumerable: true, get: function() {
      return hdnode_1.entropyToMnemonic;
    } });
    Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function() {
      return hdnode_1.getAccountPath;
    } });
    Object.defineProperty(exports, "HDNode", { enumerable: true, get: function() {
      return hdnode_1.HDNode;
    } });
    Object.defineProperty(exports, "isValidMnemonic", { enumerable: true, get: function() {
      return hdnode_1.isValidMnemonic;
    } });
    Object.defineProperty(exports, "mnemonicToEntropy", { enumerable: true, get: function() {
      return hdnode_1.mnemonicToEntropy;
    } });
    Object.defineProperty(exports, "mnemonicToSeed", { enumerable: true, get: function() {
      return hdnode_1.mnemonicToSeed;
    } });
    var json_wallets_1 = require_lib25();
    Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function() {
      return json_wallets_1.getJsonWalletAddress;
    } });
    var keccak256_1 = require_lib5();
    Object.defineProperty(exports, "keccak256", { enumerable: true, get: function() {
      return keccak256_1.keccak256;
    } });
    var logger_1 = require_lib();
    Object.defineProperty(exports, "Logger", { enumerable: true, get: function() {
      return logger_1.Logger;
    } });
    var sha2_1 = require_lib20();
    Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function() {
      return sha2_1.computeHmac;
    } });
    Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function() {
      return sha2_1.ripemd160;
    } });
    Object.defineProperty(exports, "sha256", { enumerable: true, get: function() {
      return sha2_1.sha256;
    } });
    Object.defineProperty(exports, "sha512", { enumerable: true, get: function() {
      return sha2_1.sha512;
    } });
    var solidity_1 = require_lib30();
    Object.defineProperty(exports, "solidityKeccak256", { enumerable: true, get: function() {
      return solidity_1.keccak256;
    } });
    Object.defineProperty(exports, "solidityPack", { enumerable: true, get: function() {
      return solidity_1.pack;
    } });
    Object.defineProperty(exports, "soliditySha256", { enumerable: true, get: function() {
      return solidity_1.sha256;
    } });
    var random_1 = require_lib24();
    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function() {
      return random_1.randomBytes;
    } });
    Object.defineProperty(exports, "shuffled", { enumerable: true, get: function() {
      return random_1.shuffled;
    } });
    var properties_1 = require_lib4();
    Object.defineProperty(exports, "checkProperties", { enumerable: true, get: function() {
      return properties_1.checkProperties;
    } });
    Object.defineProperty(exports, "deepCopy", { enumerable: true, get: function() {
      return properties_1.deepCopy;
    } });
    Object.defineProperty(exports, "defineReadOnly", { enumerable: true, get: function() {
      return properties_1.defineReadOnly;
    } });
    Object.defineProperty(exports, "getStatic", { enumerable: true, get: function() {
      return properties_1.getStatic;
    } });
    Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function() {
      return properties_1.resolveProperties;
    } });
    Object.defineProperty(exports, "shallowCopy", { enumerable: true, get: function() {
      return properties_1.shallowCopy;
    } });
    var RLP = __importStar(require_lib6());
    exports.RLP = RLP;
    var signing_key_1 = require_lib16();
    Object.defineProperty(exports, "computePublicKey", { enumerable: true, get: function() {
      return signing_key_1.computePublicKey;
    } });
    Object.defineProperty(exports, "recoverPublicKey", { enumerable: true, get: function() {
      return signing_key_1.recoverPublicKey;
    } });
    Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function() {
      return signing_key_1.SigningKey;
    } });
    var strings_1 = require_lib9();
    Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function() {
      return strings_1.formatBytes32String;
    } });
    Object.defineProperty(exports, "nameprep", { enumerable: true, get: function() {
      return strings_1.nameprep;
    } });
    Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function() {
      return strings_1.parseBytes32String;
    } });
    Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function() {
      return strings_1._toEscapedUtf8String;
    } });
    Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function() {
      return strings_1.toUtf8Bytes;
    } });
    Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function() {
      return strings_1.toUtf8CodePoints;
    } });
    Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function() {
      return strings_1.toUtf8String;
    } });
    Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function() {
      return strings_1.Utf8ErrorFuncs;
    } });
    var transactions_1 = require_lib17();
    Object.defineProperty(exports, "accessListify", { enumerable: true, get: function() {
      return transactions_1.accessListify;
    } });
    Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function() {
      return transactions_1.computeAddress;
    } });
    Object.defineProperty(exports, "parseTransaction", { enumerable: true, get: function() {
      return transactions_1.parse;
    } });
    Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function() {
      return transactions_1.recoverAddress;
    } });
    Object.defineProperty(exports, "serializeTransaction", { enumerable: true, get: function() {
      return transactions_1.serialize;
    } });
    Object.defineProperty(exports, "TransactionTypes", { enumerable: true, get: function() {
      return transactions_1.TransactionTypes;
    } });
    var units_1 = require_lib31();
    Object.defineProperty(exports, "commify", { enumerable: true, get: function() {
      return units_1.commify;
    } });
    Object.defineProperty(exports, "formatEther", { enumerable: true, get: function() {
      return units_1.formatEther;
    } });
    Object.defineProperty(exports, "parseEther", { enumerable: true, get: function() {
      return units_1.parseEther;
    } });
    Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function() {
      return units_1.formatUnits;
    } });
    Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function() {
      return units_1.parseUnits;
    } });
    var wallet_1 = require_lib26();
    Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function() {
      return wallet_1.verifyMessage;
    } });
    Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function() {
      return wallet_1.verifyTypedData;
    } });
    var web_1 = require_lib28();
    Object.defineProperty(exports, "_fetchData", { enumerable: true, get: function() {
      return web_1._fetchData;
    } });
    Object.defineProperty(exports, "fetchJson", { enumerable: true, get: function() {
      return web_1.fetchJson;
    } });
    Object.defineProperty(exports, "poll", { enumerable: true, get: function() {
      return web_1.poll;
    } });
    var sha2_2 = require_lib20();
    Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function() {
      return sha2_2.SupportedAlgorithm;
    } });
    var strings_2 = require_lib9();
    Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function() {
      return strings_2.UnicodeNormalizationForm;
    } });
    Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function() {
      return strings_2.Utf8ErrorReason;
    } });
  }
});

// node_modules/ethers/lib/_version.js
var require_version26 = __commonJS({
  "node_modules/ethers/lib/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "ethers/5.7.2";
  }
});

// node_modules/ethers/lib/ethers.js
var require_ethers = __commonJS({
  "node_modules/ethers/lib/ethers.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = void 0;
    var contracts_1 = require_lib18();
    Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function() {
      return contracts_1.BaseContract;
    } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function() {
      return contracts_1.Contract;
    } });
    Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function() {
      return contracts_1.ContractFactory;
    } });
    var bignumber_1 = require_lib3();
    Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function() {
      return bignumber_1.BigNumber;
    } });
    Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function() {
      return bignumber_1.FixedNumber;
    } });
    var abstract_signer_1 = require_lib15();
    Object.defineProperty(exports, "Signer", { enumerable: true, get: function() {
      return abstract_signer_1.Signer;
    } });
    Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function() {
      return abstract_signer_1.VoidSigner;
    } });
    var wallet_1 = require_lib26();
    Object.defineProperty(exports, "Wallet", { enumerable: true, get: function() {
      return wallet_1.Wallet;
    } });
    var constants = __importStar(require_lib8());
    exports.constants = constants;
    var providers = __importStar(require_lib29());
    exports.providers = providers;
    var providers_1 = require_lib29();
    Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function() {
      return providers_1.getDefaultProvider;
    } });
    var wordlists_1 = require_lib22();
    Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function() {
      return wordlists_1.Wordlist;
    } });
    Object.defineProperty(exports, "wordlists", { enumerable: true, get: function() {
      return wordlists_1.wordlists;
    } });
    var utils2 = __importStar(require_utils5());
    exports.utils = utils2;
    var logger_1 = require_lib();
    Object.defineProperty(exports, "errors", { enumerable: true, get: function() {
      return logger_1.ErrorCode;
    } });
    var _version_1 = require_version26();
    Object.defineProperty(exports, "version", { enumerable: true, get: function() {
      return _version_1.version;
    } });
    var logger = new logger_1.Logger(_version_1.version);
    exports.logger = logger;
  }
});

// node_modules/ethers/lib/index.js
var require_lib32 = __commonJS({
  "node_modules/ethers/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = exports.ethers = void 0;
    var ethers = __importStar(require_ethers());
    exports.ethers = ethers;
    try {
      anyGlobal = window;
      if (anyGlobal._ethers == null) {
        anyGlobal._ethers = ethers;
      }
    } catch (error) {
    }
    var anyGlobal;
    var ethers_1 = require_ethers();
    Object.defineProperty(exports, "Signer", { enumerable: true, get: function() {
      return ethers_1.Signer;
    } });
    Object.defineProperty(exports, "Wallet", { enumerable: true, get: function() {
      return ethers_1.Wallet;
    } });
    Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function() {
      return ethers_1.VoidSigner;
    } });
    Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function() {
      return ethers_1.getDefaultProvider;
    } });
    Object.defineProperty(exports, "providers", { enumerable: true, get: function() {
      return ethers_1.providers;
    } });
    Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function() {
      return ethers_1.BaseContract;
    } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function() {
      return ethers_1.Contract;
    } });
    Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function() {
      return ethers_1.ContractFactory;
    } });
    Object.defineProperty(exports, "BigNumber", { enumerable: true, get: function() {
      return ethers_1.BigNumber;
    } });
    Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function() {
      return ethers_1.FixedNumber;
    } });
    Object.defineProperty(exports, "constants", { enumerable: true, get: function() {
      return ethers_1.constants;
    } });
    Object.defineProperty(exports, "errors", { enumerable: true, get: function() {
      return ethers_1.errors;
    } });
    Object.defineProperty(exports, "logger", { enumerable: true, get: function() {
      return ethers_1.logger;
    } });
    Object.defineProperty(exports, "utils", { enumerable: true, get: function() {
      return ethers_1.utils;
    } });
    Object.defineProperty(exports, "wordlists", { enumerable: true, get: function() {
      return ethers_1.wordlists;
    } });
    Object.defineProperty(exports, "version", { enumerable: true, get: function() {
      return ethers_1.version;
    } });
    Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function() {
      return ethers_1.Wordlist;
    } });
  }
});

// node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/net/Web3FunctionHttpServer.js
var require_Web3FunctionHttpServer = __commonJS({
  "node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/net/Web3FunctionHttpServer.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Web3FunctionHttpServer = void 0;
    var Web3FunctionHttpServer = class {
      constructor(port, debug, eventHandler) {
        this._debug = debug;
        this._port = port;
        this._eventHandler = eventHandler;
        this._server = Deno.serve({
          port,
          hostname: "0.0.0.0",
          onListen: ({ port: port2, hostname }) => {
            this._log(`Listening on http://${hostname}:${port2}`);
          },
          handler: this._onRequest.bind(this)
        });
      }
      _onRequest(req) {
        return __awaiter(this, void 0, void 0, function* () {
          switch (req.method) {
            case "GET":
              return new Response("ok");
            case "POST": {
              const event = yield req.json();
              const res = yield this._eventHandler(event);
              return new Response(JSON.stringify(res));
            }
            default:
              return new Response(`unsupported method: ${req.method}`, {
                status: 500
              });
          }
        });
      }
      _log(message) {
        if (this._debug)
          console.log(`Web3FunctionHttpServer: ${message}`);
      }
      close() {
      }
    };
    exports.Web3FunctionHttpServer = Web3FunctionHttpServer;
  }
});

// node_modules/object-hash/dist/object_hash.js
var require_object_hash = __commonJS({
  "node_modules/object-hash/dist/object_hash.js"(exports, module) {
    !function(e) {
      var t;
      "object" == typeof exports ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : ("undefined" != typeof window ? t = window : "undefined" != typeof global ? t = global : "undefined" != typeof self && (t = self), t.objectHash = e());
    }(function() {
      return function r(o, i, u) {
        function s(n, e2) {
          if (!i[n]) {
            if (!o[n]) {
              var t = "function" == typeof __require && __require;
              if (!e2 && t)
                return t(n, true);
              if (a)
                return a(n, true);
              throw new Error("Cannot find module '" + n + "'");
            }
            e2 = i[n] = { exports: {} };
            o[n][0].call(e2.exports, function(e3) {
              var t2 = o[n][1][e3];
              return s(t2 || e3);
            }, e2, e2.exports, r, o, i, u);
          }
          return i[n].exports;
        }
        for (var a = "function" == typeof __require && __require, e = 0; e < u.length; e++)
          s(u[e]);
        return s;
      }({ 1: [function(w, b, m) {
        !function(e, n, s, c, d, h, p, g, y) {
          "use strict";
          var r = w("crypto");
          function t(e2, t2) {
            t2 = u(e2, t2);
            var n2;
            return void 0 === (n2 = "passthrough" !== t2.algorithm ? r.createHash(t2.algorithm) : new l()).write && (n2.write = n2.update, n2.end = n2.update), f(t2, n2).dispatch(e2), n2.update || n2.end(""), n2.digest ? n2.digest("buffer" === t2.encoding ? void 0 : t2.encoding) : (e2 = n2.read(), "buffer" !== t2.encoding ? e2.toString(t2.encoding) : e2);
          }
          (m = b.exports = t).sha1 = function(e2) {
            return t(e2);
          }, m.keys = function(e2) {
            return t(e2, { excludeValues: true, algorithm: "sha1", encoding: "hex" });
          }, m.MD5 = function(e2) {
            return t(e2, { algorithm: "md5", encoding: "hex" });
          }, m.keysMD5 = function(e2) {
            return t(e2, { algorithm: "md5", encoding: "hex", excludeValues: true });
          };
          var o = r.getHashes ? r.getHashes().slice() : ["sha1", "md5"], i = (o.push("passthrough"), ["buffer", "hex", "binary", "base64"]);
          function u(e2, t2) {
            var n2 = {};
            if (n2.algorithm = (t2 = t2 || {}).algorithm || "sha1", n2.encoding = t2.encoding || "hex", n2.excludeValues = !!t2.excludeValues, n2.algorithm = n2.algorithm.toLowerCase(), n2.encoding = n2.encoding.toLowerCase(), n2.ignoreUnknown = true === t2.ignoreUnknown, n2.respectType = false !== t2.respectType, n2.respectFunctionNames = false !== t2.respectFunctionNames, n2.respectFunctionProperties = false !== t2.respectFunctionProperties, n2.unorderedArrays = true === t2.unorderedArrays, n2.unorderedSets = false !== t2.unorderedSets, n2.unorderedObjects = false !== t2.unorderedObjects, n2.replacer = t2.replacer || void 0, n2.excludeKeys = t2.excludeKeys || void 0, void 0 === e2)
              throw new Error("Object argument required.");
            for (var r2 = 0; r2 < o.length; ++r2)
              o[r2].toLowerCase() === n2.algorithm.toLowerCase() && (n2.algorithm = o[r2]);
            if (-1 === o.indexOf(n2.algorithm))
              throw new Error('Algorithm "' + n2.algorithm + '"  not supported. supported values: ' + o.join(", "));
            if (-1 === i.indexOf(n2.encoding) && "passthrough" !== n2.algorithm)
              throw new Error('Encoding "' + n2.encoding + '"  not supported. supported values: ' + i.join(", "));
            return n2;
          }
          function a(e2) {
            if ("function" == typeof e2)
              return null != /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(e2));
          }
          function f(o2, t2, i2) {
            i2 = i2 || [];
            function u2(e2) {
              return t2.update ? t2.update(e2, "utf8") : t2.write(e2, "utf8");
            }
            return { dispatch: function(e2) {
              return this["_" + (null === (e2 = o2.replacer ? o2.replacer(e2) : e2) ? "null" : typeof e2)](e2);
            }, _object: function(t3) {
              var n2, e2 = Object.prototype.toString.call(t3), r2 = /\[object (.*)\]/i.exec(e2);
              r2 = (r2 = r2 ? r2[1] : "unknown:[" + e2 + "]").toLowerCase();
              if (0 <= (e2 = i2.indexOf(t3)))
                return this.dispatch("[CIRCULAR:" + e2 + "]");
              if (i2.push(t3), void 0 !== s && s.isBuffer && s.isBuffer(t3))
                return u2("buffer:"), u2(t3);
              if ("object" === r2 || "function" === r2 || "asyncfunction" === r2)
                return e2 = Object.keys(t3), o2.unorderedObjects && (e2 = e2.sort()), false === o2.respectType || a(t3) || e2.splice(0, 0, "prototype", "__proto__", "constructor"), o2.excludeKeys && (e2 = e2.filter(function(e3) {
                  return !o2.excludeKeys(e3);
                })), u2("object:" + e2.length + ":"), n2 = this, e2.forEach(function(e3) {
                  n2.dispatch(e3), u2(":"), o2.excludeValues || n2.dispatch(t3[e3]), u2(",");
                });
              if (!this["_" + r2]) {
                if (o2.ignoreUnknown)
                  return u2("[" + r2 + "]");
                throw new Error('Unknown object type "' + r2 + '"');
              }
              this["_" + r2](t3);
            }, _array: function(e2, t3) {
              t3 = void 0 !== t3 ? t3 : false !== o2.unorderedArrays;
              var n2 = this;
              if (u2("array:" + e2.length + ":"), !t3 || e2.length <= 1)
                return e2.forEach(function(e3) {
                  return n2.dispatch(e3);
                });
              var r2 = [], t3 = e2.map(function(e3) {
                var t4 = new l(), n3 = i2.slice();
                return f(o2, t4, n3).dispatch(e3), r2 = r2.concat(n3.slice(i2.length)), t4.read().toString();
              });
              return i2 = i2.concat(r2), t3.sort(), this._array(t3, false);
            }, _date: function(e2) {
              return u2("date:" + e2.toJSON());
            }, _symbol: function(e2) {
              return u2("symbol:" + e2.toString());
            }, _error: function(e2) {
              return u2("error:" + e2.toString());
            }, _boolean: function(e2) {
              return u2("bool:" + e2.toString());
            }, _string: function(e2) {
              u2("string:" + e2.length + ":"), u2(e2.toString());
            }, _function: function(e2) {
              u2("fn:"), a(e2) ? this.dispatch("[native]") : this.dispatch(e2.toString()), false !== o2.respectFunctionNames && this.dispatch("function-name:" + String(e2.name)), o2.respectFunctionProperties && this._object(e2);
            }, _number: function(e2) {
              return u2("number:" + e2.toString());
            }, _xml: function(e2) {
              return u2("xml:" + e2.toString());
            }, _null: function() {
              return u2("Null");
            }, _undefined: function() {
              return u2("Undefined");
            }, _regexp: function(e2) {
              return u2("regex:" + e2.toString());
            }, _uint8array: function(e2) {
              return u2("uint8array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _uint8clampedarray: function(e2) {
              return u2("uint8clampedarray:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _int8array: function(e2) {
              return u2("int8array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _uint16array: function(e2) {
              return u2("uint16array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _int16array: function(e2) {
              return u2("int16array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _uint32array: function(e2) {
              return u2("uint32array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _int32array: function(e2) {
              return u2("int32array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _float32array: function(e2) {
              return u2("float32array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _float64array: function(e2) {
              return u2("float64array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _arraybuffer: function(e2) {
              return u2("arraybuffer:"), this.dispatch(new Uint8Array(e2));
            }, _url: function(e2) {
              return u2("url:" + e2.toString());
            }, _map: function(e2) {
              u2("map:");
              e2 = Array.from(e2);
              return this._array(e2, false !== o2.unorderedSets);
            }, _set: function(e2) {
              u2("set:");
              e2 = Array.from(e2);
              return this._array(e2, false !== o2.unorderedSets);
            }, _file: function(e2) {
              return u2("file:"), this.dispatch([e2.name, e2.size, e2.type, e2.lastModfied]);
            }, _blob: function() {
              if (o2.ignoreUnknown)
                return u2("[blob]");
              throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n');
            }, _domwindow: function() {
              return u2("domwindow");
            }, _bigint: function(e2) {
              return u2("bigint:" + e2.toString());
            }, _process: function() {
              return u2("process");
            }, _timer: function() {
              return u2("timer");
            }, _pipe: function() {
              return u2("pipe");
            }, _tcp: function() {
              return u2("tcp");
            }, _udp: function() {
              return u2("udp");
            }, _tty: function() {
              return u2("tty");
            }, _statwatcher: function() {
              return u2("statwatcher");
            }, _securecontext: function() {
              return u2("securecontext");
            }, _connection: function() {
              return u2("connection");
            }, _zlib: function() {
              return u2("zlib");
            }, _context: function() {
              return u2("context");
            }, _nodescript: function() {
              return u2("nodescript");
            }, _httpparser: function() {
              return u2("httpparser");
            }, _dataview: function() {
              return u2("dataview");
            }, _signal: function() {
              return u2("signal");
            }, _fsevent: function() {
              return u2("fsevent");
            }, _tlswrap: function() {
              return u2("tlswrap");
            } };
          }
          function l() {
            return { buf: "", write: function(e2) {
              this.buf += e2;
            }, end: function(e2) {
              this.buf += e2;
            }, read: function() {
              return this.buf;
            } };
          }
          m.writeToStream = function(e2, t2, n2) {
            return void 0 === n2 && (n2 = t2, t2 = {}), f(t2 = u(e2, t2), n2).dispatch(e2);
          };
        }.call(this, w("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, w("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/fake_9a5aa49d.js", "/");
      }, { buffer: 3, crypto: 5, lYpoI2: 11 }], 2: [function(e, t, f) {
        !function(e2, t2, n, r, o, i, u, s, a) {
          !function(e3) {
            "use strict";
            var a2 = "undefined" != typeof Uint8Array ? Uint8Array : Array, t3 = "+".charCodeAt(0), n2 = "/".charCodeAt(0), r2 = "0".charCodeAt(0), o2 = "a".charCodeAt(0), i2 = "A".charCodeAt(0), u2 = "-".charCodeAt(0), s2 = "_".charCodeAt(0);
            function f2(e4) {
              e4 = e4.charCodeAt(0);
              return e4 === t3 || e4 === u2 ? 62 : e4 === n2 || e4 === s2 ? 63 : e4 < r2 ? -1 : e4 < r2 + 10 ? e4 - r2 + 26 + 26 : e4 < i2 + 26 ? e4 - i2 : e4 < o2 + 26 ? e4 - o2 + 26 : void 0;
            }
            e3.toByteArray = function(e4) {
              var t4, n3;
              if (0 < e4.length % 4)
                throw new Error("Invalid string. Length must be a multiple of 4");
              var r3 = e4.length, r3 = "=" === e4.charAt(r3 - 2) ? 2 : "=" === e4.charAt(r3 - 1) ? 1 : 0, o3 = new a2(3 * e4.length / 4 - r3), i3 = 0 < r3 ? e4.length - 4 : e4.length, u3 = 0;
              function s3(e5) {
                o3[u3++] = e5;
              }
              for (t4 = 0; t4 < i3; t4 += 4, 0)
                s3((16711680 & (n3 = f2(e4.charAt(t4)) << 18 | f2(e4.charAt(t4 + 1)) << 12 | f2(e4.charAt(t4 + 2)) << 6 | f2(e4.charAt(t4 + 3)))) >> 16), s3((65280 & n3) >> 8), s3(255 & n3);
              return 2 == r3 ? s3(255 & (n3 = f2(e4.charAt(t4)) << 2 | f2(e4.charAt(t4 + 1)) >> 4)) : 1 == r3 && (s3((n3 = f2(e4.charAt(t4)) << 10 | f2(e4.charAt(t4 + 1)) << 4 | f2(e4.charAt(t4 + 2)) >> 2) >> 8 & 255), s3(255 & n3)), o3;
            }, e3.fromByteArray = function(e4) {
              var t4, n3, r3, o3, i3 = e4.length % 3, u3 = "";
              function s3(e5) {
                return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e5);
              }
              for (t4 = 0, r3 = e4.length - i3; t4 < r3; t4 += 3)
                n3 = (e4[t4] << 16) + (e4[t4 + 1] << 8) + e4[t4 + 2], u3 += s3((o3 = n3) >> 18 & 63) + s3(o3 >> 12 & 63) + s3(o3 >> 6 & 63) + s3(63 & o3);
              switch (i3) {
                case 1:
                  u3 = (u3 += s3((n3 = e4[e4.length - 1]) >> 2)) + s3(n3 << 4 & 63) + "==";
                  break;
                case 2:
                  u3 = (u3 = (u3 += s3((n3 = (e4[e4.length - 2] << 8) + e4[e4.length - 1]) >> 10)) + s3(n3 >> 4 & 63)) + s3(n3 << 2 & 63) + "=";
              }
              return u3;
            };
          }(void 0 === f ? this.base64js = {} : f);
        }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js", "/node_modules/gulp-browserify/node_modules/base64-js/lib");
      }, { buffer: 3, lYpoI2: 11 }], 3: [function(O, e, H) {
        !function(e2, n, f, r, h, p, g, y, w) {
          var a = O("base64-js"), i = O("ieee754");
          function f(e3, t2, n2) {
            if (!(this instanceof f))
              return new f(e3, t2, n2);
            var r2, o2, i2, u2, s2 = typeof e3;
            if ("base64" === t2 && "string" == s2)
              for (e3 = (u2 = e3).trim ? u2.trim() : u2.replace(/^\s+|\s+$/g, ""); e3.length % 4 != 0; )
                e3 += "=";
            if ("number" == s2)
              r2 = j(e3);
            else if ("string" == s2)
              r2 = f.byteLength(e3, t2);
            else {
              if ("object" != s2)
                throw new Error("First argument needs to be a number, array or string.");
              r2 = j(e3.length);
            }
            if (f._useTypedArrays ? o2 = f._augment(new Uint8Array(r2)) : ((o2 = this).length = r2, o2._isBuffer = true), f._useTypedArrays && "number" == typeof e3.byteLength)
              o2._set(e3);
            else if (C(u2 = e3) || f.isBuffer(u2) || u2 && "object" == typeof u2 && "number" == typeof u2.length)
              for (i2 = 0; i2 < r2; i2++)
                f.isBuffer(e3) ? o2[i2] = e3.readUInt8(i2) : o2[i2] = e3[i2];
            else if ("string" == s2)
              o2.write(e3, 0, t2);
            else if ("number" == s2 && !f._useTypedArrays && !n2)
              for (i2 = 0; i2 < r2; i2++)
                o2[i2] = 0;
            return o2;
          }
          function b(e3, t2, n2, r2) {
            return f._charsWritten = c(function(e4) {
              for (var t3 = [], n3 = 0; n3 < e4.length; n3++)
                t3.push(255 & e4.charCodeAt(n3));
              return t3;
            }(t2), e3, n2, r2);
          }
          function m(e3, t2, n2, r2) {
            return f._charsWritten = c(function(e4) {
              for (var t3, n3, r3 = [], o2 = 0; o2 < e4.length; o2++)
                n3 = e4.charCodeAt(o2), t3 = n3 >> 8, n3 = n3 % 256, r3.push(n3), r3.push(t3);
              return r3;
            }(t2), e3, n2, r2);
          }
          function v(e3, t2, n2) {
            var r2 = "";
            n2 = Math.min(e3.length, n2);
            for (var o2 = t2; o2 < n2; o2++)
              r2 += String.fromCharCode(e3[o2]);
            return r2;
          }
          function o(e3, t2, n2, r2) {
            r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 1 < e3.length, "Trying to read beyond buffer length"));
            var o2, r2 = e3.length;
            if (!(r2 <= t2))
              return n2 ? (o2 = e3[t2], t2 + 1 < r2 && (o2 |= e3[t2 + 1] << 8)) : (o2 = e3[t2] << 8, t2 + 1 < r2 && (o2 |= e3[t2 + 1])), o2;
          }
          function u(e3, t2, n2, r2) {
            r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 3 < e3.length, "Trying to read beyond buffer length"));
            var o2, r2 = e3.length;
            if (!(r2 <= t2))
              return n2 ? (t2 + 2 < r2 && (o2 = e3[t2 + 2] << 16), t2 + 1 < r2 && (o2 |= e3[t2 + 1] << 8), o2 |= e3[t2], t2 + 3 < r2 && (o2 += e3[t2 + 3] << 24 >>> 0)) : (t2 + 1 < r2 && (o2 = e3[t2 + 1] << 16), t2 + 2 < r2 && (o2 |= e3[t2 + 2] << 8), t2 + 3 < r2 && (o2 |= e3[t2 + 3]), o2 += e3[t2] << 24 >>> 0), o2;
          }
          function _(e3, t2, n2, r2) {
            if (r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 1 < e3.length, "Trying to read beyond buffer length")), !(e3.length <= t2))
              return r2 = o(e3, t2, n2, true), 32768 & r2 ? -1 * (65535 - r2 + 1) : r2;
          }
          function E(e3, t2, n2, r2) {
            if (r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 3 < e3.length, "Trying to read beyond buffer length")), !(e3.length <= t2))
              return r2 = u(e3, t2, n2, true), 2147483648 & r2 ? -1 * (4294967295 - r2 + 1) : r2;
          }
          function I(e3, t2, n2, r2) {
            return r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(t2 + 3 < e3.length, "Trying to read beyond buffer length")), i.read(e3, t2, n2, 23, 4);
          }
          function A(e3, t2, n2, r2) {
            return r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(t2 + 7 < e3.length, "Trying to read beyond buffer length")), i.read(e3, t2, n2, 52, 8);
          }
          function s(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 1 < e3.length, "trying to write beyond buffer length"), Y(t2, 65535));
            o2 = e3.length;
            if (!(o2 <= n2))
              for (var i2 = 0, u2 = Math.min(o2 - n2, 2); i2 < u2; i2++)
                e3[n2 + i2] = (t2 & 255 << 8 * (r2 ? i2 : 1 - i2)) >>> 8 * (r2 ? i2 : 1 - i2);
          }
          function l(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 3 < e3.length, "trying to write beyond buffer length"), Y(t2, 4294967295));
            o2 = e3.length;
            if (!(o2 <= n2))
              for (var i2 = 0, u2 = Math.min(o2 - n2, 4); i2 < u2; i2++)
                e3[n2 + i2] = t2 >>> 8 * (r2 ? i2 : 3 - i2) & 255;
          }
          function B(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 1 < e3.length, "Trying to write beyond buffer length"), F(t2, 32767, -32768)), e3.length <= n2 || s(e3, 0 <= t2 ? t2 : 65535 + t2 + 1, n2, r2, o2);
          }
          function L(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 3 < e3.length, "Trying to write beyond buffer length"), F(t2, 2147483647, -2147483648)), e3.length <= n2 || l(e3, 0 <= t2 ? t2 : 4294967295 + t2 + 1, n2, r2, o2);
          }
          function U(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 3 < e3.length, "Trying to write beyond buffer length"), D(t2, 34028234663852886e22, -34028234663852886e22)), e3.length <= n2 || i.write(e3, t2, n2, r2, 23, 4);
          }
          function x(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 7 < e3.length, "Trying to write beyond buffer length"), D(t2, 17976931348623157e292, -17976931348623157e292)), e3.length <= n2 || i.write(e3, t2, n2, r2, 52, 8);
          }
          H.Buffer = f, H.SlowBuffer = f, H.INSPECT_MAX_BYTES = 50, f.poolSize = 8192, f._useTypedArrays = function() {
            try {
              var e3 = new ArrayBuffer(0), t2 = new Uint8Array(e3);
              return t2.foo = function() {
                return 42;
              }, 42 === t2.foo() && "function" == typeof t2.subarray;
            } catch (e4) {
              return false;
            }
          }(), f.isEncoding = function(e3) {
            switch (String(e3).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "binary":
              case "base64":
              case "raw":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          }, f.isBuffer = function(e3) {
            return !(null == e3 || !e3._isBuffer);
          }, f.byteLength = function(e3, t2) {
            var n2;
            switch (e3 += "", t2 || "utf8") {
              case "hex":
                n2 = e3.length / 2;
                break;
              case "utf8":
              case "utf-8":
                n2 = T(e3).length;
                break;
              case "ascii":
              case "binary":
              case "raw":
                n2 = e3.length;
                break;
              case "base64":
                n2 = M(e3).length;
                break;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                n2 = 2 * e3.length;
                break;
              default:
                throw new Error("Unknown encoding");
            }
            return n2;
          }, f.concat = function(e3, t2) {
            if (d(C(e3), "Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."), 0 === e3.length)
              return new f(0);
            if (1 === e3.length)
              return e3[0];
            if ("number" != typeof t2)
              for (o2 = t2 = 0; o2 < e3.length; o2++)
                t2 += e3[o2].length;
            for (var n2 = new f(t2), r2 = 0, o2 = 0; o2 < e3.length; o2++) {
              var i2 = e3[o2];
              i2.copy(n2, r2), r2 += i2.length;
            }
            return n2;
          }, f.prototype.write = function(e3, t2, n2, r2) {
            isFinite(t2) ? isFinite(n2) || (r2 = n2, n2 = void 0) : (a2 = r2, r2 = t2, t2 = n2, n2 = a2), t2 = Number(t2) || 0;
            var o2, i2, u2, s2, a2 = this.length - t2;
            switch ((!n2 || a2 < (n2 = Number(n2))) && (n2 = a2), r2 = String(r2 || "utf8").toLowerCase()) {
              case "hex":
                o2 = function(e4, t3, n3, r3) {
                  n3 = Number(n3) || 0;
                  var o3 = e4.length - n3;
                  (!r3 || o3 < (r3 = Number(r3))) && (r3 = o3), d((o3 = t3.length) % 2 == 0, "Invalid hex string"), o3 / 2 < r3 && (r3 = o3 / 2);
                  for (var i3 = 0; i3 < r3; i3++) {
                    var u3 = parseInt(t3.substr(2 * i3, 2), 16);
                    d(!isNaN(u3), "Invalid hex string"), e4[n3 + i3] = u3;
                  }
                  return f._charsWritten = 2 * i3, i3;
                }(this, e3, t2, n2);
                break;
              case "utf8":
              case "utf-8":
                i2 = this, u2 = t2, s2 = n2, o2 = f._charsWritten = c(T(e3), i2, u2, s2);
                break;
              case "ascii":
              case "binary":
                o2 = b(this, e3, t2, n2);
                break;
              case "base64":
                i2 = this, u2 = t2, s2 = n2, o2 = f._charsWritten = c(M(e3), i2, u2, s2);
                break;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                o2 = m(this, e3, t2, n2);
                break;
              default:
                throw new Error("Unknown encoding");
            }
            return o2;
          }, f.prototype.toString = function(e3, t2, n2) {
            var r2, o2, i2, u2, s2 = this;
            if (e3 = String(e3 || "utf8").toLowerCase(), t2 = Number(t2) || 0, (n2 = void 0 !== n2 ? Number(n2) : s2.length) === t2)
              return "";
            switch (e3) {
              case "hex":
                r2 = function(e4, t3, n3) {
                  var r3 = e4.length;
                  (!t3 || t3 < 0) && (t3 = 0);
                  (!n3 || n3 < 0 || r3 < n3) && (n3 = r3);
                  for (var o3 = "", i3 = t3; i3 < n3; i3++)
                    o3 += k(e4[i3]);
                  return o3;
                }(s2, t2, n2);
                break;
              case "utf8":
              case "utf-8":
                r2 = function(e4, t3, n3) {
                  var r3 = "", o3 = "";
                  n3 = Math.min(e4.length, n3);
                  for (var i3 = t3; i3 < n3; i3++)
                    e4[i3] <= 127 ? (r3 += N(o3) + String.fromCharCode(e4[i3]), o3 = "") : o3 += "%" + e4[i3].toString(16);
                  return r3 + N(o3);
                }(s2, t2, n2);
                break;
              case "ascii":
              case "binary":
                r2 = v(s2, t2, n2);
                break;
              case "base64":
                o2 = s2, u2 = n2, r2 = 0 === (i2 = t2) && u2 === o2.length ? a.fromByteArray(o2) : a.fromByteArray(o2.slice(i2, u2));
                break;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                r2 = function(e4, t3, n3) {
                  for (var r3 = e4.slice(t3, n3), o3 = "", i3 = 0; i3 < r3.length; i3 += 2)
                    o3 += String.fromCharCode(r3[i3] + 256 * r3[i3 + 1]);
                  return o3;
                }(s2, t2, n2);
                break;
              default:
                throw new Error("Unknown encoding");
            }
            return r2;
          }, f.prototype.toJSON = function() {
            return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
          }, f.prototype.copy = function(e3, t2, n2, r2) {
            if (t2 = t2 || 0, (r2 = r2 || 0 === r2 ? r2 : this.length) !== (n2 = n2 || 0) && 0 !== e3.length && 0 !== this.length) {
              d(n2 <= r2, "sourceEnd < sourceStart"), d(0 <= t2 && t2 < e3.length, "targetStart out of bounds"), d(0 <= n2 && n2 < this.length, "sourceStart out of bounds"), d(0 <= r2 && r2 <= this.length, "sourceEnd out of bounds"), r2 > this.length && (r2 = this.length);
              var o2 = (r2 = e3.length - t2 < r2 - n2 ? e3.length - t2 + n2 : r2) - n2;
              if (o2 < 100 || !f._useTypedArrays)
                for (var i2 = 0; i2 < o2; i2++)
                  e3[i2 + t2] = this[i2 + n2];
              else
                e3._set(this.subarray(n2, n2 + o2), t2);
            }
          }, f.prototype.slice = function(e3, t2) {
            var n2 = this.length;
            if (e3 = S(e3, n2, 0), t2 = S(t2, n2, n2), f._useTypedArrays)
              return f._augment(this.subarray(e3, t2));
            for (var r2 = t2 - e3, o2 = new f(r2, void 0, true), i2 = 0; i2 < r2; i2++)
              o2[i2] = this[i2 + e3];
            return o2;
          }, f.prototype.get = function(e3) {
            return console.log(".get() is deprecated. Access using array indexes instead."), this.readUInt8(e3);
          }, f.prototype.set = function(e3, t2) {
            return console.log(".set() is deprecated. Access using array indexes instead."), this.writeUInt8(e3, t2);
          }, f.prototype.readUInt8 = function(e3, t2) {
            if (t2 || (d(null != e3, "missing offset"), d(e3 < this.length, "Trying to read beyond buffer length")), !(e3 >= this.length))
              return this[e3];
          }, f.prototype.readUInt16LE = function(e3, t2) {
            return o(this, e3, true, t2);
          }, f.prototype.readUInt16BE = function(e3, t2) {
            return o(this, e3, false, t2);
          }, f.prototype.readUInt32LE = function(e3, t2) {
            return u(this, e3, true, t2);
          }, f.prototype.readUInt32BE = function(e3, t2) {
            return u(this, e3, false, t2);
          }, f.prototype.readInt8 = function(e3, t2) {
            if (t2 || (d(null != e3, "missing offset"), d(e3 < this.length, "Trying to read beyond buffer length")), !(e3 >= this.length))
              return 128 & this[e3] ? -1 * (255 - this[e3] + 1) : this[e3];
          }, f.prototype.readInt16LE = function(e3, t2) {
            return _(this, e3, true, t2);
          }, f.prototype.readInt16BE = function(e3, t2) {
            return _(this, e3, false, t2);
          }, f.prototype.readInt32LE = function(e3, t2) {
            return E(this, e3, true, t2);
          }, f.prototype.readInt32BE = function(e3, t2) {
            return E(this, e3, false, t2);
          }, f.prototype.readFloatLE = function(e3, t2) {
            return I(this, e3, true, t2);
          }, f.prototype.readFloatBE = function(e3, t2) {
            return I(this, e3, false, t2);
          }, f.prototype.readDoubleLE = function(e3, t2) {
            return A(this, e3, true, t2);
          }, f.prototype.readDoubleBE = function(e3, t2) {
            return A(this, e3, false, t2);
          }, f.prototype.writeUInt8 = function(e3, t2, n2) {
            n2 || (d(null != e3, "missing value"), d(null != t2, "missing offset"), d(t2 < this.length, "trying to write beyond buffer length"), Y(e3, 255)), t2 >= this.length || (this[t2] = e3);
          }, f.prototype.writeUInt16LE = function(e3, t2, n2) {
            s(this, e3, t2, true, n2);
          }, f.prototype.writeUInt16BE = function(e3, t2, n2) {
            s(this, e3, t2, false, n2);
          }, f.prototype.writeUInt32LE = function(e3, t2, n2) {
            l(this, e3, t2, true, n2);
          }, f.prototype.writeUInt32BE = function(e3, t2, n2) {
            l(this, e3, t2, false, n2);
          }, f.prototype.writeInt8 = function(e3, t2, n2) {
            n2 || (d(null != e3, "missing value"), d(null != t2, "missing offset"), d(t2 < this.length, "Trying to write beyond buffer length"), F(e3, 127, -128)), t2 >= this.length || (0 <= e3 ? this.writeUInt8(e3, t2, n2) : this.writeUInt8(255 + e3 + 1, t2, n2));
          }, f.prototype.writeInt16LE = function(e3, t2, n2) {
            B(this, e3, t2, true, n2);
          }, f.prototype.writeInt16BE = function(e3, t2, n2) {
            B(this, e3, t2, false, n2);
          }, f.prototype.writeInt32LE = function(e3, t2, n2) {
            L(this, e3, t2, true, n2);
          }, f.prototype.writeInt32BE = function(e3, t2, n2) {
            L(this, e3, t2, false, n2);
          }, f.prototype.writeFloatLE = function(e3, t2, n2) {
            U(this, e3, t2, true, n2);
          }, f.prototype.writeFloatBE = function(e3, t2, n2) {
            U(this, e3, t2, false, n2);
          }, f.prototype.writeDoubleLE = function(e3, t2, n2) {
            x(this, e3, t2, true, n2);
          }, f.prototype.writeDoubleBE = function(e3, t2, n2) {
            x(this, e3, t2, false, n2);
          }, f.prototype.fill = function(e3, t2, n2) {
            if (t2 = t2 || 0, n2 = n2 || this.length, d("number" == typeof (e3 = "string" == typeof (e3 = e3 || 0) ? e3.charCodeAt(0) : e3) && !isNaN(e3), "value is not a number"), d(t2 <= n2, "end < start"), n2 !== t2 && 0 !== this.length) {
              d(0 <= t2 && t2 < this.length, "start out of bounds"), d(0 <= n2 && n2 <= this.length, "end out of bounds");
              for (var r2 = t2; r2 < n2; r2++)
                this[r2] = e3;
            }
          }, f.prototype.inspect = function() {
            for (var e3 = [], t2 = this.length, n2 = 0; n2 < t2; n2++)
              if (e3[n2] = k(this[n2]), n2 === H.INSPECT_MAX_BYTES) {
                e3[n2 + 1] = "...";
                break;
              }
            return "<Buffer " + e3.join(" ") + ">";
          }, f.prototype.toArrayBuffer = function() {
            if ("undefined" == typeof Uint8Array)
              throw new Error("Buffer.toArrayBuffer not supported in this browser");
            if (f._useTypedArrays)
              return new f(this).buffer;
            for (var e3 = new Uint8Array(this.length), t2 = 0, n2 = e3.length; t2 < n2; t2 += 1)
              e3[t2] = this[t2];
            return e3.buffer;
          };
          var t = f.prototype;
          function S(e3, t2, n2) {
            return "number" != typeof e3 ? n2 : t2 <= (e3 = ~~e3) ? t2 : 0 <= e3 || 0 <= (e3 += t2) ? e3 : 0;
          }
          function j(e3) {
            return (e3 = ~~Math.ceil(+e3)) < 0 ? 0 : e3;
          }
          function C(e3) {
            return (Array.isArray || function(e4) {
              return "[object Array]" === Object.prototype.toString.call(e4);
            })(e3);
          }
          function k(e3) {
            return e3 < 16 ? "0" + e3.toString(16) : e3.toString(16);
          }
          function T(e3) {
            for (var t2 = [], n2 = 0; n2 < e3.length; n2++) {
              var r2 = e3.charCodeAt(n2);
              if (r2 <= 127)
                t2.push(e3.charCodeAt(n2));
              else
                for (var o2 = n2, i2 = (55296 <= r2 && r2 <= 57343 && n2++, encodeURIComponent(e3.slice(o2, n2 + 1)).substr(1).split("%")), u2 = 0; u2 < i2.length; u2++)
                  t2.push(parseInt(i2[u2], 16));
            }
            return t2;
          }
          function M(e3) {
            return a.toByteArray(e3);
          }
          function c(e3, t2, n2, r2) {
            for (var o2 = 0; o2 < r2 && !(o2 + n2 >= t2.length || o2 >= e3.length); o2++)
              t2[o2 + n2] = e3[o2];
            return o2;
          }
          function N(e3) {
            try {
              return decodeURIComponent(e3);
            } catch (e4) {
              return String.fromCharCode(65533);
            }
          }
          function Y(e3, t2) {
            d("number" == typeof e3, "cannot write a non-number as a number"), d(0 <= e3, "specified a negative value for writing an unsigned value"), d(e3 <= t2, "value is larger than maximum value for type"), d(Math.floor(e3) === e3, "value has a fractional component");
          }
          function F(e3, t2, n2) {
            d("number" == typeof e3, "cannot write a non-number as a number"), d(e3 <= t2, "value larger than maximum allowed value"), d(n2 <= e3, "value smaller than minimum allowed value"), d(Math.floor(e3) === e3, "value has a fractional component");
          }
          function D(e3, t2, n2) {
            d("number" == typeof e3, "cannot write a non-number as a number"), d(e3 <= t2, "value larger than maximum allowed value"), d(n2 <= e3, "value smaller than minimum allowed value");
          }
          function d(e3, t2) {
            if (!e3)
              throw new Error(t2 || "Failed assertion");
          }
          f._augment = function(e3) {
            return e3._isBuffer = true, e3._get = e3.get, e3._set = e3.set, e3.get = t.get, e3.set = t.set, e3.write = t.write, e3.toString = t.toString, e3.toLocaleString = t.toString, e3.toJSON = t.toJSON, e3.copy = t.copy, e3.slice = t.slice, e3.readUInt8 = t.readUInt8, e3.readUInt16LE = t.readUInt16LE, e3.readUInt16BE = t.readUInt16BE, e3.readUInt32LE = t.readUInt32LE, e3.readUInt32BE = t.readUInt32BE, e3.readInt8 = t.readInt8, e3.readInt16LE = t.readInt16LE, e3.readInt16BE = t.readInt16BE, e3.readInt32LE = t.readInt32LE, e3.readInt32BE = t.readInt32BE, e3.readFloatLE = t.readFloatLE, e3.readFloatBE = t.readFloatBE, e3.readDoubleLE = t.readDoubleLE, e3.readDoubleBE = t.readDoubleBE, e3.writeUInt8 = t.writeUInt8, e3.writeUInt16LE = t.writeUInt16LE, e3.writeUInt16BE = t.writeUInt16BE, e3.writeUInt32LE = t.writeUInt32LE, e3.writeUInt32BE = t.writeUInt32BE, e3.writeInt8 = t.writeInt8, e3.writeInt16LE = t.writeInt16LE, e3.writeInt16BE = t.writeInt16BE, e3.writeInt32LE = t.writeInt32LE, e3.writeInt32BE = t.writeInt32BE, e3.writeFloatLE = t.writeFloatLE, e3.writeFloatBE = t.writeFloatBE, e3.writeDoubleLE = t.writeDoubleLE, e3.writeDoubleBE = t.writeDoubleBE, e3.fill = t.fill, e3.inspect = t.inspect, e3.toArrayBuffer = t.toArrayBuffer, e3;
          };
        }.call(this, O("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, O("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/buffer/index.js", "/node_modules/gulp-browserify/node_modules/buffer");
      }, { "base64-js": 2, buffer: 3, ieee754: 10, lYpoI2: 11 }], 4: [function(c, d, e) {
        !function(e2, t, a, n, r, o, i, u, s) {
          var a = c("buffer").Buffer, f = 4, l = new a(f);
          l.fill(0);
          d.exports = { hash: function(e3, t2, n2, r2) {
            for (var o2 = t2(function(e4, t3) {
              e4.length % f != 0 && (n3 = e4.length + (f - e4.length % f), e4 = a.concat([e4, l], n3));
              for (var n3, r3 = [], o3 = t3 ? e4.readInt32BE : e4.readInt32LE, i3 = 0; i3 < e4.length; i3 += f)
                r3.push(o3.call(e4, i3));
              return r3;
            }(e3 = a.isBuffer(e3) ? e3 : new a(e3), r2), 8 * e3.length), t2 = r2, i2 = new a(n2), u2 = t2 ? i2.writeInt32BE : i2.writeInt32LE, s2 = 0; s2 < o2.length; s2++)
              u2.call(i2, o2[s2], 4 * s2, true);
            return i2;
          } };
        }.call(this, c("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/helpers.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { buffer: 3, lYpoI2: 11 }], 5: [function(v, e, _) {
        !function(l, c, u, d, h, p, g, y, w) {
          var u = v("buffer").Buffer, e2 = v("./sha"), t = v("./sha256"), n = v("./rng"), b = { sha1: e2, sha256: t, md5: v("./md5") }, s = 64, a = new u(s);
          function r(e3, n2) {
            var r2 = b[e3 = e3 || "sha1"], o2 = [];
            return r2 || i("algorithm:", e3, "is not yet supported"), { update: function(e4) {
              return u.isBuffer(e4) || (e4 = new u(e4)), o2.push(e4), e4.length, this;
            }, digest: function(e4) {
              var t2 = u.concat(o2), t2 = n2 ? function(e5, t3, n3) {
                u.isBuffer(t3) || (t3 = new u(t3)), u.isBuffer(n3) || (n3 = new u(n3)), t3.length > s ? t3 = e5(t3) : t3.length < s && (t3 = u.concat([t3, a], s));
                for (var r3 = new u(s), o3 = new u(s), i2 = 0; i2 < s; i2++)
                  r3[i2] = 54 ^ t3[i2], o3[i2] = 92 ^ t3[i2];
                return n3 = e5(u.concat([r3, n3])), e5(u.concat([o3, n3]));
              }(r2, n2, t2) : r2(t2);
              return o2 = null, e4 ? t2.toString(e4) : t2;
            } };
          }
          function i() {
            var e3 = [].slice.call(arguments).join(" ");
            throw new Error([e3, "we accept pull requests", "http://github.com/dominictarr/crypto-browserify"].join("\n"));
          }
          a.fill(0), _.createHash = function(e3) {
            return r(e3);
          }, _.createHmac = r, _.randomBytes = function(e3, t2) {
            if (!t2 || !t2.call)
              return new u(n(e3));
            try {
              t2.call(this, void 0, new u(n(e3)));
            } catch (e4) {
              t2(e4);
            }
          };
          var o, f = ["createCredentials", "createCipher", "createCipheriv", "createDecipher", "createDecipheriv", "createSign", "createVerify", "createDiffieHellman", "pbkdf2"], m = function(e3) {
            _[e3] = function() {
              i("sorry,", e3, "is not implemented yet");
            };
          };
          for (o in f)
            m(f[o], o);
        }.call(this, v("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, v("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/index.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./md5": 6, "./rng": 7, "./sha": 8, "./sha256": 9, buffer: 3, lYpoI2: 11 }], 6: [function(w, b, e) {
        !function(e2, r, o, i, u, a, f, l, y) {
          var t = w("./helpers");
          function n(e3, t2) {
            e3[t2 >> 5] |= 128 << t2 % 32, e3[14 + (t2 + 64 >>> 9 << 4)] = t2;
            for (var n2 = 1732584193, r2 = -271733879, o2 = -1732584194, i2 = 271733878, u2 = 0; u2 < e3.length; u2 += 16) {
              var s2 = n2, a2 = r2, f2 = o2, l2 = i2, n2 = c(n2, r2, o2, i2, e3[u2 + 0], 7, -680876936), i2 = c(i2, n2, r2, o2, e3[u2 + 1], 12, -389564586), o2 = c(o2, i2, n2, r2, e3[u2 + 2], 17, 606105819), r2 = c(r2, o2, i2, n2, e3[u2 + 3], 22, -1044525330);
              n2 = c(n2, r2, o2, i2, e3[u2 + 4], 7, -176418897), i2 = c(i2, n2, r2, o2, e3[u2 + 5], 12, 1200080426), o2 = c(o2, i2, n2, r2, e3[u2 + 6], 17, -1473231341), r2 = c(r2, o2, i2, n2, e3[u2 + 7], 22, -45705983), n2 = c(n2, r2, o2, i2, e3[u2 + 8], 7, 1770035416), i2 = c(i2, n2, r2, o2, e3[u2 + 9], 12, -1958414417), o2 = c(o2, i2, n2, r2, e3[u2 + 10], 17, -42063), r2 = c(r2, o2, i2, n2, e3[u2 + 11], 22, -1990404162), n2 = c(n2, r2, o2, i2, e3[u2 + 12], 7, 1804603682), i2 = c(i2, n2, r2, o2, e3[u2 + 13], 12, -40341101), o2 = c(o2, i2, n2, r2, e3[u2 + 14], 17, -1502002290), n2 = d(n2, r2 = c(r2, o2, i2, n2, e3[u2 + 15], 22, 1236535329), o2, i2, e3[u2 + 1], 5, -165796510), i2 = d(i2, n2, r2, o2, e3[u2 + 6], 9, -1069501632), o2 = d(o2, i2, n2, r2, e3[u2 + 11], 14, 643717713), r2 = d(r2, o2, i2, n2, e3[u2 + 0], 20, -373897302), n2 = d(n2, r2, o2, i2, e3[u2 + 5], 5, -701558691), i2 = d(i2, n2, r2, o2, e3[u2 + 10], 9, 38016083), o2 = d(o2, i2, n2, r2, e3[u2 + 15], 14, -660478335), r2 = d(r2, o2, i2, n2, e3[u2 + 4], 20, -405537848), n2 = d(n2, r2, o2, i2, e3[u2 + 9], 5, 568446438), i2 = d(i2, n2, r2, o2, e3[u2 + 14], 9, -1019803690), o2 = d(o2, i2, n2, r2, e3[u2 + 3], 14, -187363961), r2 = d(r2, o2, i2, n2, e3[u2 + 8], 20, 1163531501), n2 = d(n2, r2, o2, i2, e3[u2 + 13], 5, -1444681467), i2 = d(i2, n2, r2, o2, e3[u2 + 2], 9, -51403784), o2 = d(o2, i2, n2, r2, e3[u2 + 7], 14, 1735328473), n2 = h(n2, r2 = d(r2, o2, i2, n2, e3[u2 + 12], 20, -1926607734), o2, i2, e3[u2 + 5], 4, -378558), i2 = h(i2, n2, r2, o2, e3[u2 + 8], 11, -2022574463), o2 = h(o2, i2, n2, r2, e3[u2 + 11], 16, 1839030562), r2 = h(r2, o2, i2, n2, e3[u2 + 14], 23, -35309556), n2 = h(n2, r2, o2, i2, e3[u2 + 1], 4, -1530992060), i2 = h(i2, n2, r2, o2, e3[u2 + 4], 11, 1272893353), o2 = h(o2, i2, n2, r2, e3[u2 + 7], 16, -155497632), r2 = h(r2, o2, i2, n2, e3[u2 + 10], 23, -1094730640), n2 = h(n2, r2, o2, i2, e3[u2 + 13], 4, 681279174), i2 = h(i2, n2, r2, o2, e3[u2 + 0], 11, -358537222), o2 = h(o2, i2, n2, r2, e3[u2 + 3], 16, -722521979), r2 = h(r2, o2, i2, n2, e3[u2 + 6], 23, 76029189), n2 = h(n2, r2, o2, i2, e3[u2 + 9], 4, -640364487), i2 = h(i2, n2, r2, o2, e3[u2 + 12], 11, -421815835), o2 = h(o2, i2, n2, r2, e3[u2 + 15], 16, 530742520), n2 = p(n2, r2 = h(r2, o2, i2, n2, e3[u2 + 2], 23, -995338651), o2, i2, e3[u2 + 0], 6, -198630844), i2 = p(i2, n2, r2, o2, e3[u2 + 7], 10, 1126891415), o2 = p(o2, i2, n2, r2, e3[u2 + 14], 15, -1416354905), r2 = p(r2, o2, i2, n2, e3[u2 + 5], 21, -57434055), n2 = p(n2, r2, o2, i2, e3[u2 + 12], 6, 1700485571), i2 = p(i2, n2, r2, o2, e3[u2 + 3], 10, -1894986606), o2 = p(o2, i2, n2, r2, e3[u2 + 10], 15, -1051523), r2 = p(r2, o2, i2, n2, e3[u2 + 1], 21, -2054922799), n2 = p(n2, r2, o2, i2, e3[u2 + 8], 6, 1873313359), i2 = p(i2, n2, r2, o2, e3[u2 + 15], 10, -30611744), o2 = p(o2, i2, n2, r2, e3[u2 + 6], 15, -1560198380), r2 = p(r2, o2, i2, n2, e3[u2 + 13], 21, 1309151649), n2 = p(n2, r2, o2, i2, e3[u2 + 4], 6, -145523070), i2 = p(i2, n2, r2, o2, e3[u2 + 11], 10, -1120210379), o2 = p(o2, i2, n2, r2, e3[u2 + 2], 15, 718787259), r2 = p(r2, o2, i2, n2, e3[u2 + 9], 21, -343485551), n2 = g(n2, s2), r2 = g(r2, a2), o2 = g(o2, f2), i2 = g(i2, l2);
            }
            return Array(n2, r2, o2, i2);
          }
          function s(e3, t2, n2, r2, o2, i2) {
            return g((t2 = g(g(t2, e3), g(r2, i2))) << o2 | t2 >>> 32 - o2, n2);
          }
          function c(e3, t2, n2, r2, o2, i2, u2) {
            return s(t2 & n2 | ~t2 & r2, e3, t2, o2, i2, u2);
          }
          function d(e3, t2, n2, r2, o2, i2, u2) {
            return s(t2 & r2 | n2 & ~r2, e3, t2, o2, i2, u2);
          }
          function h(e3, t2, n2, r2, o2, i2, u2) {
            return s(t2 ^ n2 ^ r2, e3, t2, o2, i2, u2);
          }
          function p(e3, t2, n2, r2, o2, i2, u2) {
            return s(n2 ^ (t2 | ~r2), e3, t2, o2, i2, u2);
          }
          function g(e3, t2) {
            var n2 = (65535 & e3) + (65535 & t2);
            return (e3 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
          }
          b.exports = function(e3) {
            return t.hash(e3, n, 16);
          };
        }.call(this, w("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, w("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/md5.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 7: [function(e, l, t) {
        !function(e2, t2, n, r, o, i, u, s, f) {
          var a;
          l.exports = a || function(e3) {
            for (var t3, n2 = new Array(e3), r2 = 0; r2 < e3; r2++)
              0 == (3 & r2) && (t3 = 4294967296 * Math.random()), n2[r2] = t3 >>> ((3 & r2) << 3) & 255;
            return n2;
          };
        }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/rng.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { buffer: 3, lYpoI2: 11 }], 8: [function(c, d, e) {
        !function(e2, t, n, r, o, s, a, f, l) {
          var i = c("./helpers");
          function u(l2, c2) {
            l2[c2 >> 5] |= 128 << 24 - c2 % 32, l2[15 + (c2 + 64 >> 9 << 4)] = c2;
            for (var e3, t2, n2, r2 = Array(80), o2 = 1732584193, i2 = -271733879, u2 = -1732584194, s2 = 271733878, d2 = -1009589776, h = 0; h < l2.length; h += 16) {
              for (var p = o2, g = i2, y = u2, w = s2, b = d2, a2 = 0; a2 < 80; a2++) {
                r2[a2] = a2 < 16 ? l2[h + a2] : v(r2[a2 - 3] ^ r2[a2 - 8] ^ r2[a2 - 14] ^ r2[a2 - 16], 1);
                var f2 = m(m(v(o2, 5), (f2 = i2, t2 = u2, n2 = s2, (e3 = a2) < 20 ? f2 & t2 | ~f2 & n2 : !(e3 < 40) && e3 < 60 ? f2 & t2 | f2 & n2 | t2 & n2 : f2 ^ t2 ^ n2)), m(m(d2, r2[a2]), (e3 = a2) < 20 ? 1518500249 : e3 < 40 ? 1859775393 : e3 < 60 ? -1894007588 : -899497514)), d2 = s2, s2 = u2, u2 = v(i2, 30), i2 = o2, o2 = f2;
              }
              o2 = m(o2, p), i2 = m(i2, g), u2 = m(u2, y), s2 = m(s2, w), d2 = m(d2, b);
            }
            return Array(o2, i2, u2, s2, d2);
          }
          function m(e3, t2) {
            var n2 = (65535 & e3) + (65535 & t2);
            return (e3 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
          }
          function v(e3, t2) {
            return e3 << t2 | e3 >>> 32 - t2;
          }
          d.exports = function(e3) {
            return i.hash(e3, u, 20, true);
          };
        }.call(this, c("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 9: [function(c, d, e) {
        !function(e2, t, n, r, u, s, a, f, l) {
          function b(e3, t2) {
            var n2 = (65535 & e3) + (65535 & t2);
            return (e3 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
          }
          function o(e3, l2) {
            var c2, d2 = new Array(1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298), t2 = new Array(1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225), n2 = new Array(64);
            e3[l2 >> 5] |= 128 << 24 - l2 % 32, e3[15 + (l2 + 64 >> 9 << 4)] = l2;
            for (var r2, o2, h = 0; h < e3.length; h += 16) {
              for (var i2 = t2[0], u2 = t2[1], s2 = t2[2], p = t2[3], a2 = t2[4], g = t2[5], y = t2[6], w = t2[7], f2 = 0; f2 < 64; f2++)
                n2[f2] = f2 < 16 ? e3[f2 + h] : b(b(b((o2 = n2[f2 - 2], m(o2, 17) ^ m(o2, 19) ^ v(o2, 10)), n2[f2 - 7]), (o2 = n2[f2 - 15], m(o2, 7) ^ m(o2, 18) ^ v(o2, 3))), n2[f2 - 16]), c2 = b(b(b(b(w, m(o2 = a2, 6) ^ m(o2, 11) ^ m(o2, 25)), a2 & g ^ ~a2 & y), d2[f2]), n2[f2]), r2 = b(m(r2 = i2, 2) ^ m(r2, 13) ^ m(r2, 22), i2 & u2 ^ i2 & s2 ^ u2 & s2), w = y, y = g, g = a2, a2 = b(p, c2), p = s2, s2 = u2, u2 = i2, i2 = b(c2, r2);
              t2[0] = b(i2, t2[0]), t2[1] = b(u2, t2[1]), t2[2] = b(s2, t2[2]), t2[3] = b(p, t2[3]), t2[4] = b(a2, t2[4]), t2[5] = b(g, t2[5]), t2[6] = b(y, t2[6]), t2[7] = b(w, t2[7]);
            }
            return t2;
          }
          var i = c("./helpers"), m = function(e3, t2) {
            return e3 >>> t2 | e3 << 32 - t2;
          }, v = function(e3, t2) {
            return e3 >>> t2;
          };
          d.exports = function(e3) {
            return i.hash(e3, o, 32, true);
          };
        }.call(this, c("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha256.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 10: [function(e, t, f) {
        !function(e2, t2, n, r, o, i, u, s, a) {
          f.read = function(e3, t3, n2, r2, o2) {
            var i2, u2, l = 8 * o2 - r2 - 1, c = (1 << l) - 1, d = c >> 1, s2 = -7, a2 = n2 ? o2 - 1 : 0, f2 = n2 ? -1 : 1, o2 = e3[t3 + a2];
            for (a2 += f2, i2 = o2 & (1 << -s2) - 1, o2 >>= -s2, s2 += l; 0 < s2; i2 = 256 * i2 + e3[t3 + a2], a2 += f2, s2 -= 8)
              ;
            for (u2 = i2 & (1 << -s2) - 1, i2 >>= -s2, s2 += r2; 0 < s2; u2 = 256 * u2 + e3[t3 + a2], a2 += f2, s2 -= 8)
              ;
            if (0 === i2)
              i2 = 1 - d;
            else {
              if (i2 === c)
                return u2 ? NaN : 1 / 0 * (o2 ? -1 : 1);
              u2 += Math.pow(2, r2), i2 -= d;
            }
            return (o2 ? -1 : 1) * u2 * Math.pow(2, i2 - r2);
          }, f.write = function(e3, t3, l, n2, r2, c) {
            var o2, i2, u2 = 8 * c - r2 - 1, s2 = (1 << u2) - 1, a2 = s2 >> 1, d = 23 === r2 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, f2 = n2 ? 0 : c - 1, h = n2 ? 1 : -1, c = t3 < 0 || 0 === t3 && 1 / t3 < 0 ? 1 : 0;
            for (t3 = Math.abs(t3), isNaN(t3) || t3 === 1 / 0 ? (i2 = isNaN(t3) ? 1 : 0, o2 = s2) : (o2 = Math.floor(Math.log(t3) / Math.LN2), t3 * (n2 = Math.pow(2, -o2)) < 1 && (o2--, n2 *= 2), 2 <= (t3 += 1 <= o2 + a2 ? d / n2 : d * Math.pow(2, 1 - a2)) * n2 && (o2++, n2 /= 2), s2 <= o2 + a2 ? (i2 = 0, o2 = s2) : 1 <= o2 + a2 ? (i2 = (t3 * n2 - 1) * Math.pow(2, r2), o2 += a2) : (i2 = t3 * Math.pow(2, a2 - 1) * Math.pow(2, r2), o2 = 0)); 8 <= r2; e3[l + f2] = 255 & i2, f2 += h, i2 /= 256, r2 -= 8)
              ;
            for (o2 = o2 << r2 | i2, u2 += r2; 0 < u2; e3[l + f2] = 255 & o2, f2 += h, o2 /= 256, u2 -= 8)
              ;
            e3[l + f2 - h] |= 128 * c;
          };
        }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/ieee754/index.js", "/node_modules/gulp-browserify/node_modules/ieee754");
      }, { buffer: 3, lYpoI2: 11 }], 11: [function(e, h, t) {
        !function(e2, t2, n, r, o, f, l, c, d) {
          var i, u, s;
          function a() {
          }
          (e2 = h.exports = {}).nextTick = (u = "undefined" != typeof window && window.setImmediate, s = "undefined" != typeof window && window.postMessage && window.addEventListener, u ? function(e3) {
            return window.setImmediate(e3);
          } : s ? (i = [], window.addEventListener("message", function(e3) {
            var t3 = e3.source;
            t3 !== window && null !== t3 || "process-tick" !== e3.data || (e3.stopPropagation(), 0 < i.length && i.shift()());
          }, true), function(e3) {
            i.push(e3), window.postMessage("process-tick", "*");
          }) : function(e3) {
            setTimeout(e3, 0);
          }), e2.title = "browser", e2.browser = true, e2.env = {}, e2.argv = [], e2.on = a, e2.addListener = a, e2.once = a, e2.off = a, e2.removeListener = a, e2.removeAllListeners = a, e2.emit = a, e2.binding = function(e3) {
            throw new Error("process.binding is not supported");
          }, e2.cwd = function() {
            return "/";
          }, e2.chdir = function(e3) {
            throw new Error("process.chdir is not supported");
          };
        }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/process/browser.js", "/node_modules/gulp-browserify/node_modules/process");
      }, { buffer: 3, lYpoI2: 11 }] }, {}, [1])(1);
    });
  }
});

// node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/polyfill/XMLHttpRequest.js
var require_XMLHttpRequest = __commonJS({
  "node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/polyfill/XMLHttpRequest.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __classPrivateFieldGet3 = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet2 = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __asyncValues = exports && exports.__asyncValues || function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({ value: v2, done: d });
        }, reject);
      }
    };
    var _XMLHttpRequest_instances;
    var _XMLHttpRequest_abortedFlag;
    var _XMLHttpRequest_abortController;
    var _XMLHttpRequest_crossOriginCredentials;
    var _XMLHttpRequest_headers;
    var _XMLHttpRequest_mime;
    var _XMLHttpRequest_receivedBytes;
    var _XMLHttpRequest_requestMethod;
    var _XMLHttpRequest_response;
    var _XMLHttpRequest_responseObject;
    var _XMLHttpRequest_responseType;
    var _XMLHttpRequest_sendFlag;
    var _XMLHttpRequest_state;
    var _XMLHttpRequest_timedoutFlag;
    var _XMLHttpRequest_timeout;
    var _XMLHttpRequest_upload;
    var _XMLHttpRequest_uploadCompleteFlag;
    var _XMLHttpRequest_uploadListener;
    var _XMLHttpRequest_url;
    var _XMLHttpRequest_getResponseMIMEType;
    var _XMLHttpRequest_getFinalMIMEType;
    var _XMLHttpRequest_getFinalEncoding;
    var _XMLHttpRequest_getTextResponse;
    var _XMLHttpRequest_handleResponseEndOfBody;
    var _XMLHttpRequest_handleErrors;
    var _XMLHttpRequest_requestErrorSteps;
    var _XMLHttpRequest_setDocumentResponse;
    var _XMLHttpRequest_terminate;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XMLHttpRequest = exports.XMLHttpRequestUpload = exports.XMLHttpRequestEventTarget = exports.contentType = exports.formatMediaType = exports.typeByExtension = exports.getCharset = exports.needsEncoding = exports.isToken = exports.isIterator = exports.decode2331Encoding = exports.consumeMediaParam = exports.consumeValue = exports.consumeToken = exports.extensions = void 0;
    var db = {
      "application/1d-interleaved-parityfec": {
        source: "iana"
      },
      "application/3gpdash-qoe-report+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/3gpp-ims+xml": {
        source: "iana",
        compressible: true
      },
      "application/3gpphal+json": {
        source: "iana",
        compressible: true
      },
      "application/3gpphalforms+json": {
        source: "iana",
        compressible: true
      },
      "application/a2l": {
        source: "iana"
      },
      "application/ace+cbor": {
        source: "iana"
      },
      "application/activemessage": {
        source: "iana"
      },
      "application/activity+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-directory+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcost+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcostparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointprop+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointpropparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-error+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamcontrol+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamparams+json": {
        source: "iana",
        compressible: true
      },
      "application/aml": {
        source: "iana"
      },
      "application/andrew-inset": {
        source: "iana",
        extensions: ["ez"]
      },
      "application/applefile": {
        source: "iana"
      },
      "application/applixware": {
        source: "apache",
        extensions: ["aw"]
      },
      "application/at+jwt": {
        source: "iana"
      },
      "application/atf": {
        source: "iana"
      },
      "application/atfx": {
        source: "iana"
      },
      "application/atom+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atom"]
      },
      "application/atomcat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomcat"]
      },
      "application/atomdeleted+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomdeleted"]
      },
      "application/atomicmail": {
        source: "iana"
      },
      "application/atomsvc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomsvc"]
      },
      "application/atsc-dwd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dwd"]
      },
      "application/atsc-dynamic-event-message": {
        source: "iana"
      },
      "application/atsc-held+xml": {
        source: "iana",
        compressible: true,
        extensions: ["held"]
      },
      "application/atsc-rdt+json": {
        source: "iana",
        compressible: true
      },
      "application/atsc-rsat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsat"]
      },
      "application/atxml": {
        source: "iana"
      },
      "application/auth-policy+xml": {
        source: "iana",
        compressible: true
      },
      "application/bacnet-xdd+zip": {
        source: "iana",
        compressible: false
      },
      "application/batch-smtp": {
        source: "iana"
      },
      "application/bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/beep+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/calendar+json": {
        source: "iana",
        compressible: true
      },
      "application/calendar+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xcs"]
      },
      "application/call-completion": {
        source: "iana"
      },
      "application/cals-1840": {
        source: "iana"
      },
      "application/captive+json": {
        source: "iana",
        compressible: true
      },
      "application/cbor": {
        source: "iana"
      },
      "application/cbor-seq": {
        source: "iana"
      },
      "application/cccex": {
        source: "iana"
      },
      "application/ccmp+xml": {
        source: "iana",
        compressible: true
      },
      "application/ccxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ccxml"]
      },
      "application/cdfx+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdfx"]
      },
      "application/cdmi-capability": {
        source: "iana",
        extensions: ["cdmia"]
      },
      "application/cdmi-container": {
        source: "iana",
        extensions: ["cdmic"]
      },
      "application/cdmi-domain": {
        source: "iana",
        extensions: ["cdmid"]
      },
      "application/cdmi-object": {
        source: "iana",
        extensions: ["cdmio"]
      },
      "application/cdmi-queue": {
        source: "iana",
        extensions: ["cdmiq"]
      },
      "application/cdni": {
        source: "iana"
      },
      "application/cea": {
        source: "iana"
      },
      "application/cea-2018+xml": {
        source: "iana",
        compressible: true
      },
      "application/cellml+xml": {
        source: "iana",
        compressible: true
      },
      "application/cfw": {
        source: "iana"
      },
      "application/city+json": {
        source: "iana",
        compressible: true
      },
      "application/clr": {
        source: "iana"
      },
      "application/clue+xml": {
        source: "iana",
        compressible: true
      },
      "application/clue_info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cms": {
        source: "iana"
      },
      "application/cnrp+xml": {
        source: "iana",
        compressible: true
      },
      "application/coap-group+json": {
        source: "iana",
        compressible: true
      },
      "application/coap-payload": {
        source: "iana"
      },
      "application/commonground": {
        source: "iana"
      },
      "application/conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cose": {
        source: "iana"
      },
      "application/cose-key": {
        source: "iana"
      },
      "application/cose-key-set": {
        source: "iana"
      },
      "application/cpl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cpl"]
      },
      "application/csrattrs": {
        source: "iana"
      },
      "application/csta+xml": {
        source: "iana",
        compressible: true
      },
      "application/cstadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/csvm+json": {
        source: "iana",
        compressible: true
      },
      "application/cu-seeme": {
        source: "apache",
        extensions: ["cu"]
      },
      "application/cwt": {
        source: "iana"
      },
      "application/cybercash": {
        source: "iana"
      },
      "application/dart": {
        compressible: true
      },
      "application/dash+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpd"]
      },
      "application/dash-patch+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpp"]
      },
      "application/dashdelta": {
        source: "iana"
      },
      "application/davmount+xml": {
        source: "iana",
        compressible: true,
        extensions: ["davmount"]
      },
      "application/dca-rft": {
        source: "iana"
      },
      "application/dcd": {
        source: "iana"
      },
      "application/dec-dx": {
        source: "iana"
      },
      "application/dialog-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/dicom": {
        source: "iana"
      },
      "application/dicom+json": {
        source: "iana",
        compressible: true
      },
      "application/dicom+xml": {
        source: "iana",
        compressible: true
      },
      "application/dii": {
        source: "iana"
      },
      "application/dit": {
        source: "iana"
      },
      "application/dns": {
        source: "iana"
      },
      "application/dns+json": {
        source: "iana",
        compressible: true
      },
      "application/dns-message": {
        source: "iana"
      },
      "application/docbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dbk"]
      },
      "application/dots+cbor": {
        source: "iana"
      },
      "application/dskpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/dssc+der": {
        source: "iana",
        extensions: ["dssc"]
      },
      "application/dssc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdssc"]
      },
      "application/dvcs": {
        source: "iana"
      },
      "application/ecmascript": {
        source: "iana",
        compressible: true,
        extensions: ["es", "ecma"]
      },
      "application/edi-consent": {
        source: "iana"
      },
      "application/edi-x12": {
        source: "iana",
        compressible: false
      },
      "application/edifact": {
        source: "iana",
        compressible: false
      },
      "application/efi": {
        source: "iana"
      },
      "application/elm+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/elm+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.cap+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/emergencycalldata.comment+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.control+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.deviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.ecall.msd": {
        source: "iana"
      },
      "application/emergencycalldata.providerinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.serviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.subscriberinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.veds+xml": {
        source: "iana",
        compressible: true
      },
      "application/emma+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emma"]
      },
      "application/emotionml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emotionml"]
      },
      "application/encaprtp": {
        source: "iana"
      },
      "application/epp+xml": {
        source: "iana",
        compressible: true
      },
      "application/epub+zip": {
        source: "iana",
        compressible: false,
        extensions: ["epub"]
      },
      "application/eshop": {
        source: "iana"
      },
      "application/exi": {
        source: "iana",
        extensions: ["exi"]
      },
      "application/expect-ct-report+json": {
        source: "iana",
        compressible: true
      },
      "application/express": {
        source: "iana",
        extensions: ["exp"]
      },
      "application/fastinfoset": {
        source: "iana"
      },
      "application/fastsoap": {
        source: "iana"
      },
      "application/fdt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fdt"]
      },
      "application/fhir+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fhir+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fido.trusted-apps+json": {
        compressible: true
      },
      "application/fits": {
        source: "iana"
      },
      "application/flexfec": {
        source: "iana"
      },
      "application/font-sfnt": {
        source: "iana"
      },
      "application/font-tdpfr": {
        source: "iana",
        extensions: ["pfr"]
      },
      "application/font-woff": {
        source: "iana",
        compressible: false
      },
      "application/framework-attributes+xml": {
        source: "iana",
        compressible: true
      },
      "application/geo+json": {
        source: "iana",
        compressible: true,
        extensions: ["geojson"]
      },
      "application/geo+json-seq": {
        source: "iana"
      },
      "application/geopackage+sqlite3": {
        source: "iana"
      },
      "application/geoxacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/gltf-buffer": {
        source: "iana"
      },
      "application/gml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["gml"]
      },
      "application/gpx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["gpx"]
      },
      "application/gxf": {
        source: "apache",
        extensions: ["gxf"]
      },
      "application/gzip": {
        source: "iana",
        compressible: false,
        extensions: ["gz"]
      },
      "application/h224": {
        source: "iana"
      },
      "application/held+xml": {
        source: "iana",
        compressible: true
      },
      "application/hjson": {
        extensions: ["hjson"]
      },
      "application/http": {
        source: "iana"
      },
      "application/hyperstudio": {
        source: "iana",
        extensions: ["stk"]
      },
      "application/ibe-key-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pkg-reply+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pp-data": {
        source: "iana"
      },
      "application/iges": {
        source: "iana"
      },
      "application/im-iscomposing+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/index": {
        source: "iana"
      },
      "application/index.cmd": {
        source: "iana"
      },
      "application/index.obj": {
        source: "iana"
      },
      "application/index.response": {
        source: "iana"
      },
      "application/index.vnd": {
        source: "iana"
      },
      "application/inkml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ink", "inkml"]
      },
      "application/iotp": {
        source: "iana"
      },
      "application/ipfix": {
        source: "iana",
        extensions: ["ipfix"]
      },
      "application/ipp": {
        source: "iana"
      },
      "application/isup": {
        source: "iana"
      },
      "application/its+xml": {
        source: "iana",
        compressible: true,
        extensions: ["its"]
      },
      "application/java-archive": {
        source: "apache",
        compressible: false,
        extensions: ["jar", "war", "ear"]
      },
      "application/java-serialized-object": {
        source: "apache",
        compressible: false,
        extensions: ["ser"]
      },
      "application/java-vm": {
        source: "apache",
        compressible: false,
        extensions: ["class"]
      },
      "application/javascript": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["js", "mjs"]
      },
      "application/jf2feed+json": {
        source: "iana",
        compressible: true
      },
      "application/jose": {
        source: "iana"
      },
      "application/jose+json": {
        source: "iana",
        compressible: true
      },
      "application/jrd+json": {
        source: "iana",
        compressible: true
      },
      "application/jscalendar+json": {
        source: "iana",
        compressible: true
      },
      "application/json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["json", "map"]
      },
      "application/json-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/json-seq": {
        source: "iana"
      },
      "application/json5": {
        extensions: ["json5"]
      },
      "application/jsonml+json": {
        source: "apache",
        compressible: true,
        extensions: ["jsonml"]
      },
      "application/jwk+json": {
        source: "iana",
        compressible: true
      },
      "application/jwk-set+json": {
        source: "iana",
        compressible: true
      },
      "application/jwt": {
        source: "iana"
      },
      "application/kpml-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/kpml-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/ld+json": {
        source: "iana",
        compressible: true,
        extensions: ["jsonld"]
      },
      "application/lgr+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lgr"]
      },
      "application/link-format": {
        source: "iana"
      },
      "application/load-control+xml": {
        source: "iana",
        compressible: true
      },
      "application/lost+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lostxml"]
      },
      "application/lostsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/lpf+zip": {
        source: "iana",
        compressible: false
      },
      "application/lxf": {
        source: "iana"
      },
      "application/mac-binhex40": {
        source: "iana",
        extensions: ["hqx"]
      },
      "application/mac-compactpro": {
        source: "apache",
        extensions: ["cpt"]
      },
      "application/macwriteii": {
        source: "iana"
      },
      "application/mads+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mads"]
      },
      "application/manifest+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["webmanifest"]
      },
      "application/marc": {
        source: "iana",
        extensions: ["mrc"]
      },
      "application/marcxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mrcx"]
      },
      "application/mathematica": {
        source: "iana",
        extensions: ["ma", "nb", "mb"]
      },
      "application/mathml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mathml"]
      },
      "application/mathml-content+xml": {
        source: "iana",
        compressible: true
      },
      "application/mathml-presentation+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-associated-procedure-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-deregister+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-envelope+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-protection-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-reception-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-schedule+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-user-service-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbox": {
        source: "iana",
        extensions: ["mbox"]
      },
      "application/media-policy-dataset+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpf"]
      },
      "application/media_control+xml": {
        source: "iana",
        compressible: true
      },
      "application/mediaservercontrol+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mscml"]
      },
      "application/merge-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/metalink+xml": {
        source: "apache",
        compressible: true,
        extensions: ["metalink"]
      },
      "application/metalink4+xml": {
        source: "iana",
        compressible: true,
        extensions: ["meta4"]
      },
      "application/mets+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mets"]
      },
      "application/mf4": {
        source: "iana"
      },
      "application/mikey": {
        source: "iana"
      },
      "application/mipc": {
        source: "iana"
      },
      "application/missing-blocks+cbor-seq": {
        source: "iana"
      },
      "application/mmt-aei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["maei"]
      },
      "application/mmt-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musd"]
      },
      "application/mods+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mods"]
      },
      "application/moss-keys": {
        source: "iana"
      },
      "application/moss-signature": {
        source: "iana"
      },
      "application/mosskey-data": {
        source: "iana"
      },
      "application/mosskey-request": {
        source: "iana"
      },
      "application/mp21": {
        source: "iana",
        extensions: ["m21", "mp21"]
      },
      "application/mp4": {
        source: "iana",
        extensions: ["mp4s", "m4p"]
      },
      "application/mpeg4-generic": {
        source: "iana"
      },
      "application/mpeg4-iod": {
        source: "iana"
      },
      "application/mpeg4-iod-xmt": {
        source: "iana"
      },
      "application/mrb-consumer+xml": {
        source: "iana",
        compressible: true
      },
      "application/mrb-publish+xml": {
        source: "iana",
        compressible: true
      },
      "application/msc-ivr+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msc-mixer+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msword": {
        source: "iana",
        compressible: false,
        extensions: ["doc", "dot"]
      },
      "application/mud+json": {
        source: "iana",
        compressible: true
      },
      "application/multipart-core": {
        source: "iana"
      },
      "application/mxf": {
        source: "iana",
        extensions: ["mxf"]
      },
      "application/n-quads": {
        source: "iana",
        extensions: ["nq"]
      },
      "application/n-triples": {
        source: "iana",
        extensions: ["nt"]
      },
      "application/nasdata": {
        source: "iana"
      },
      "application/news-checkgroups": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-groupinfo": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-transmission": {
        source: "iana"
      },
      "application/nlsml+xml": {
        source: "iana",
        compressible: true
      },
      "application/node": {
        source: "iana",
        extensions: ["cjs"]
      },
      "application/nss": {
        source: "iana"
      },
      "application/oauth-authz-req+jwt": {
        source: "iana"
      },
      "application/oblivious-dns-message": {
        source: "iana"
      },
      "application/ocsp-request": {
        source: "iana"
      },
      "application/ocsp-response": {
        source: "iana"
      },
      "application/octet-stream": {
        source: "iana",
        compressible: false,
        extensions: [
          "bin",
          "dms",
          "lrf",
          "mar",
          "so",
          "dist",
          "distz",
          "pkg",
          "bpk",
          "dump",
          "elc",
          "deploy",
          "exe",
          "dll",
          "deb",
          "dmg",
          "iso",
          "img",
          "msi",
          "msp",
          "msm",
          "buffer"
        ]
      },
      "application/oda": {
        source: "iana",
        extensions: ["oda"]
      },
      "application/odm+xml": {
        source: "iana",
        compressible: true
      },
      "application/odx": {
        source: "iana"
      },
      "application/oebps-package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["opf"]
      },
      "application/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogx"]
      },
      "application/omdoc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["omdoc"]
      },
      "application/onenote": {
        source: "apache",
        extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
      },
      "application/opc-nodeset+xml": {
        source: "iana",
        compressible: true
      },
      "application/oscore": {
        source: "iana"
      },
      "application/oxps": {
        source: "iana",
        extensions: ["oxps"]
      },
      "application/p21": {
        source: "iana"
      },
      "application/p21+zip": {
        source: "iana",
        compressible: false
      },
      "application/p2p-overlay+xml": {
        source: "iana",
        compressible: true,
        extensions: ["relo"]
      },
      "application/parityfec": {
        source: "iana"
      },
      "application/passport": {
        source: "iana"
      },
      "application/patch-ops-error+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xer"]
      },
      "application/pdf": {
        source: "iana",
        compressible: false,
        extensions: ["pdf"]
      },
      "application/pdx": {
        source: "iana"
      },
      "application/pem-certificate-chain": {
        source: "iana"
      },
      "application/pgp-encrypted": {
        source: "iana",
        compressible: false,
        extensions: ["pgp"]
      },
      "application/pgp-keys": {
        source: "iana",
        extensions: ["asc"]
      },
      "application/pgp-signature": {
        source: "iana",
        extensions: ["asc", "sig"]
      },
      "application/pics-rules": {
        source: "apache",
        extensions: ["prf"]
      },
      "application/pidf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pidf-diff+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pkcs10": {
        source: "iana",
        extensions: ["p10"]
      },
      "application/pkcs12": {
        source: "iana"
      },
      "application/pkcs7-mime": {
        source: "iana",
        extensions: ["p7m", "p7c"]
      },
      "application/pkcs7-signature": {
        source: "iana",
        extensions: ["p7s"]
      },
      "application/pkcs8": {
        source: "iana",
        extensions: ["p8"]
      },
      "application/pkcs8-encrypted": {
        source: "iana"
      },
      "application/pkix-attr-cert": {
        source: "iana",
        extensions: ["ac"]
      },
      "application/pkix-cert": {
        source: "iana",
        extensions: ["cer"]
      },
      "application/pkix-crl": {
        source: "iana",
        extensions: ["crl"]
      },
      "application/pkix-pkipath": {
        source: "iana",
        extensions: ["pkipath"]
      },
      "application/pkixcmp": {
        source: "iana",
        extensions: ["pki"]
      },
      "application/pls+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pls"]
      },
      "application/poc-settings+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/postscript": {
        source: "iana",
        compressible: true,
        extensions: ["ai", "eps", "ps"]
      },
      "application/ppsp-tracker+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+xml": {
        source: "iana",
        compressible: true
      },
      "application/provenance+xml": {
        source: "iana",
        compressible: true,
        extensions: ["provx"]
      },
      "application/prs.alvestrand.titrax-sheet": {
        source: "iana"
      },
      "application/prs.cww": {
        source: "iana",
        extensions: ["cww"]
      },
      "application/prs.cyn": {
        source: "iana",
        charset: "7-BIT"
      },
      "application/prs.hpub+zip": {
        source: "iana",
        compressible: false
      },
      "application/prs.nprend": {
        source: "iana"
      },
      "application/prs.plucker": {
        source: "iana"
      },
      "application/prs.rdf-xml-crypt": {
        source: "iana"
      },
      "application/prs.xsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/pskc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pskcxml"]
      },
      "application/pvd+json": {
        source: "iana",
        compressible: true
      },
      "application/qsig": {
        source: "iana"
      },
      "application/raml+yaml": {
        compressible: true,
        extensions: ["raml"]
      },
      "application/raptorfec": {
        source: "iana"
      },
      "application/rdap+json": {
        source: "iana",
        compressible: true
      },
      "application/rdf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rdf", "owl"]
      },
      "application/reginfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rif"]
      },
      "application/relax-ng-compact-syntax": {
        source: "iana",
        extensions: ["rnc"]
      },
      "application/remote-printing": {
        source: "iana"
      },
      "application/reputon+json": {
        source: "iana",
        compressible: true
      },
      "application/resource-lists+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rl"]
      },
      "application/resource-lists-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rld"]
      },
      "application/rfc+xml": {
        source: "iana",
        compressible: true
      },
      "application/riscos": {
        source: "iana"
      },
      "application/rlmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/rls-services+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rs"]
      },
      "application/route-apd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rapd"]
      },
      "application/route-s-tsid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sls"]
      },
      "application/route-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rusd"]
      },
      "application/rpki-ghostbusters": {
        source: "iana",
        extensions: ["gbr"]
      },
      "application/rpki-manifest": {
        source: "iana",
        extensions: ["mft"]
      },
      "application/rpki-publication": {
        source: "iana"
      },
      "application/rpki-roa": {
        source: "iana",
        extensions: ["roa"]
      },
      "application/rpki-updown": {
        source: "iana"
      },
      "application/rsd+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rsd"]
      },
      "application/rss+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rss"]
      },
      "application/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "application/rtploopback": {
        source: "iana"
      },
      "application/rtx": {
        source: "iana"
      },
      "application/samlassertion+xml": {
        source: "iana",
        compressible: true
      },
      "application/samlmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/sarif+json": {
        source: "iana",
        compressible: true
      },
      "application/sarif-external-properties+json": {
        source: "iana",
        compressible: true
      },
      "application/sbe": {
        source: "iana"
      },
      "application/sbml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sbml"]
      },
      "application/scaip+xml": {
        source: "iana",
        compressible: true
      },
      "application/scim+json": {
        source: "iana",
        compressible: true
      },
      "application/scvp-cv-request": {
        source: "iana",
        extensions: ["scq"]
      },
      "application/scvp-cv-response": {
        source: "iana",
        extensions: ["scs"]
      },
      "application/scvp-vp-request": {
        source: "iana",
        extensions: ["spq"]
      },
      "application/scvp-vp-response": {
        source: "iana",
        extensions: ["spp"]
      },
      "application/sdp": {
        source: "iana",
        extensions: ["sdp"]
      },
      "application/secevent+jwt": {
        source: "iana"
      },
      "application/senml+cbor": {
        source: "iana"
      },
      "application/senml+json": {
        source: "iana",
        compressible: true
      },
      "application/senml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["senmlx"]
      },
      "application/senml-etch+cbor": {
        source: "iana"
      },
      "application/senml-etch+json": {
        source: "iana",
        compressible: true
      },
      "application/senml-exi": {
        source: "iana"
      },
      "application/sensml+cbor": {
        source: "iana"
      },
      "application/sensml+json": {
        source: "iana",
        compressible: true
      },
      "application/sensml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sensmlx"]
      },
      "application/sensml-exi": {
        source: "iana"
      },
      "application/sep+xml": {
        source: "iana",
        compressible: true
      },
      "application/sep-exi": {
        source: "iana"
      },
      "application/session-info": {
        source: "iana"
      },
      "application/set-payment": {
        source: "iana"
      },
      "application/set-payment-initiation": {
        source: "iana",
        extensions: ["setpay"]
      },
      "application/set-registration": {
        source: "iana"
      },
      "application/set-registration-initiation": {
        source: "iana",
        extensions: ["setreg"]
      },
      "application/sgml": {
        source: "iana"
      },
      "application/sgml-open-catalog": {
        source: "iana"
      },
      "application/shf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["shf"]
      },
      "application/sieve": {
        source: "iana",
        extensions: ["siv", "sieve"]
      },
      "application/simple-filter+xml": {
        source: "iana",
        compressible: true
      },
      "application/simple-message-summary": {
        source: "iana"
      },
      "application/simplesymbolcontainer": {
        source: "iana"
      },
      "application/sipc": {
        source: "iana"
      },
      "application/slate": {
        source: "iana"
      },
      "application/smil": {
        source: "iana"
      },
      "application/smil+xml": {
        source: "iana",
        compressible: true,
        extensions: ["smi", "smil"]
      },
      "application/smpte336m": {
        source: "iana"
      },
      "application/soap+fastinfoset": {
        source: "iana"
      },
      "application/soap+xml": {
        source: "iana",
        compressible: true
      },
      "application/sparql-query": {
        source: "iana",
        extensions: ["rq"]
      },
      "application/sparql-results+xml": {
        source: "iana",
        compressible: true,
        extensions: ["srx"]
      },
      "application/spdx+json": {
        source: "iana",
        compressible: true
      },
      "application/spirits-event+xml": {
        source: "iana",
        compressible: true
      },
      "application/sql": {
        source: "iana"
      },
      "application/srgs": {
        source: "iana",
        extensions: ["gram"]
      },
      "application/srgs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["grxml"]
      },
      "application/sru+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sru"]
      },
      "application/ssdl+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ssdl"]
      },
      "application/ssml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ssml"]
      },
      "application/stix+json": {
        source: "iana",
        compressible: true
      },
      "application/swid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["swidtag"]
      },
      "application/tamp-apex-update": {
        source: "iana"
      },
      "application/tamp-apex-update-confirm": {
        source: "iana"
      },
      "application/tamp-community-update": {
        source: "iana"
      },
      "application/tamp-community-update-confirm": {
        source: "iana"
      },
      "application/tamp-error": {
        source: "iana"
      },
      "application/tamp-sequence-adjust": {
        source: "iana"
      },
      "application/tamp-sequence-adjust-confirm": {
        source: "iana"
      },
      "application/tamp-status-query": {
        source: "iana"
      },
      "application/tamp-status-response": {
        source: "iana"
      },
      "application/tamp-update": {
        source: "iana"
      },
      "application/tamp-update-confirm": {
        source: "iana"
      },
      "application/tar": {
        compressible: true
      },
      "application/taxii+json": {
        source: "iana",
        compressible: true
      },
      "application/td+json": {
        source: "iana",
        compressible: true
      },
      "application/tei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tei", "teicorpus"]
      },
      "application/tetra_isi": {
        source: "iana"
      },
      "application/thraud+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tfi"]
      },
      "application/timestamp-query": {
        source: "iana"
      },
      "application/timestamp-reply": {
        source: "iana"
      },
      "application/timestamped-data": {
        source: "iana",
        extensions: ["tsd"]
      },
      "application/tlsrpt+gzip": {
        source: "iana"
      },
      "application/tlsrpt+json": {
        source: "iana",
        compressible: true
      },
      "application/tnauthlist": {
        source: "iana"
      },
      "application/token-introspection+jwt": {
        source: "iana"
      },
      "application/toml": {
        compressible: true,
        extensions: ["toml"]
      },
      "application/trickle-ice-sdpfrag": {
        source: "iana"
      },
      "application/trig": {
        source: "iana",
        extensions: ["trig"]
      },
      "application/ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ttml"]
      },
      "application/tve-trigger": {
        source: "iana"
      },
      "application/tzif": {
        source: "iana"
      },
      "application/tzif-leap": {
        source: "iana"
      },
      "application/ubjson": {
        compressible: false,
        extensions: ["ubj"]
      },
      "application/ulpfec": {
        source: "iana"
      },
      "application/urc-grpsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/urc-ressheet+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsheet"]
      },
      "application/urc-targetdesc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["td"]
      },
      "application/urc-uisocketdesc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vcard+json": {
        source: "iana",
        compressible: true
      },
      "application/vcard+xml": {
        source: "iana",
        compressible: true
      },
      "application/vemmi": {
        source: "iana"
      },
      "application/vividence.scriptfile": {
        source: "apache"
      },
      "application/vnd.1000minds.decision-model+xml": {
        source: "iana",
        compressible: true,
        extensions: ["1km"]
      },
      "application/vnd.3gpp-prose+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-prose-pc3ch+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-v2x-local-service-information": {
        source: "iana"
      },
      "application/vnd.3gpp.5gnas": {
        source: "iana"
      },
      "application/vnd.3gpp.access-transfer-events+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.bsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gmop+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gtpc": {
        source: "iana"
      },
      "application/vnd.3gpp.interworking-data": {
        source: "iana"
      },
      "application/vnd.3gpp.lpp": {
        source: "iana"
      },
      "application/vnd.3gpp.mc-signalling-ear": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-payload": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-signalling": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-floor-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-signed+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-init-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-transmission-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mid-call+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ngap": {
        source: "iana"
      },
      "application/vnd.3gpp.pfcp": {
        source: "iana"
      },
      "application/vnd.3gpp.pic-bw-large": {
        source: "iana",
        extensions: ["plb"]
      },
      "application/vnd.3gpp.pic-bw-small": {
        source: "iana",
        extensions: ["psb"]
      },
      "application/vnd.3gpp.pic-bw-var": {
        source: "iana",
        extensions: ["pvb"]
      },
      "application/vnd.3gpp.s1ap": {
        source: "iana"
      },
      "application/vnd.3gpp.sms": {
        source: "iana"
      },
      "application/vnd.3gpp.sms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-ext+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.state-and-event-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ussd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.bcmcsinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.sms": {
        source: "iana"
      },
      "application/vnd.3gpp2.tcap": {
        source: "iana",
        extensions: ["tcap"]
      },
      "application/vnd.3lightssoftware.imagescal": {
        source: "iana"
      },
      "application/vnd.3m.post-it-notes": {
        source: "iana",
        extensions: ["pwn"]
      },
      "application/vnd.accpac.simply.aso": {
        source: "iana",
        extensions: ["aso"]
      },
      "application/vnd.accpac.simply.imp": {
        source: "iana",
        extensions: ["imp"]
      },
      "application/vnd.acucobol": {
        source: "iana",
        extensions: ["acu"]
      },
      "application/vnd.acucorp": {
        source: "iana",
        extensions: ["atc", "acutc"]
      },
      "application/vnd.adobe.air-application-installer-package+zip": {
        source: "apache",
        compressible: false,
        extensions: ["air"]
      },
      "application/vnd.adobe.flash.movie": {
        source: "iana"
      },
      "application/vnd.adobe.formscentral.fcdt": {
        source: "iana",
        extensions: ["fcdt"]
      },
      "application/vnd.adobe.fxp": {
        source: "iana",
        extensions: ["fxp", "fxpl"]
      },
      "application/vnd.adobe.partial-upload": {
        source: "iana"
      },
      "application/vnd.adobe.xdp+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdp"]
      },
      "application/vnd.adobe.xfdf": {
        source: "iana",
        extensions: ["xfdf"]
      },
      "application/vnd.aether.imp": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata-pagedef": {
        source: "iana"
      },
      "application/vnd.afpc.cmoca-cmresource": {
        source: "iana"
      },
      "application/vnd.afpc.foca-charset": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codedfont": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codepage": {
        source: "iana"
      },
      "application/vnd.afpc.modca": {
        source: "iana"
      },
      "application/vnd.afpc.modca-cmtable": {
        source: "iana"
      },
      "application/vnd.afpc.modca-formdef": {
        source: "iana"
      },
      "application/vnd.afpc.modca-mediummap": {
        source: "iana"
      },
      "application/vnd.afpc.modca-objectcontainer": {
        source: "iana"
      },
      "application/vnd.afpc.modca-overlay": {
        source: "iana"
      },
      "application/vnd.afpc.modca-pagesegment": {
        source: "iana"
      },
      "application/vnd.age": {
        source: "iana",
        extensions: ["age"]
      },
      "application/vnd.ah-barcode": {
        source: "iana"
      },
      "application/vnd.ahead.space": {
        source: "iana",
        extensions: ["ahead"]
      },
      "application/vnd.airzip.filesecure.azf": {
        source: "iana",
        extensions: ["azf"]
      },
      "application/vnd.airzip.filesecure.azs": {
        source: "iana",
        extensions: ["azs"]
      },
      "application/vnd.amadeus+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.amazon.ebook": {
        source: "apache",
        extensions: ["azw"]
      },
      "application/vnd.amazon.mobi8-ebook": {
        source: "iana"
      },
      "application/vnd.americandynamics.acc": {
        source: "iana",
        extensions: ["acc"]
      },
      "application/vnd.amiga.ami": {
        source: "iana",
        extensions: ["ami"]
      },
      "application/vnd.amundsen.maze+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.android.ota": {
        source: "iana"
      },
      "application/vnd.android.package-archive": {
        source: "apache",
        compressible: false,
        extensions: ["apk"]
      },
      "application/vnd.anki": {
        source: "iana"
      },
      "application/vnd.anser-web-certificate-issue-initiation": {
        source: "iana",
        extensions: ["cii"]
      },
      "application/vnd.anser-web-funds-transfer-initiation": {
        source: "apache",
        extensions: ["fti"]
      },
      "application/vnd.antix.game-component": {
        source: "iana",
        extensions: ["atx"]
      },
      "application/vnd.apache.arrow.file": {
        source: "iana"
      },
      "application/vnd.apache.arrow.stream": {
        source: "iana"
      },
      "application/vnd.apache.thrift.binary": {
        source: "iana"
      },
      "application/vnd.apache.thrift.compact": {
        source: "iana"
      },
      "application/vnd.apache.thrift.json": {
        source: "iana"
      },
      "application/vnd.api+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.aplextor.warrp+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apothekende.reservation+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apple.installer+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpkg"]
      },
      "application/vnd.apple.keynote": {
        source: "iana",
        extensions: ["key"]
      },
      "application/vnd.apple.mpegurl": {
        source: "iana",
        extensions: ["m3u8"]
      },
      "application/vnd.apple.numbers": {
        source: "iana",
        extensions: ["numbers"]
      },
      "application/vnd.apple.pages": {
        source: "iana",
        extensions: ["pages"]
      },
      "application/vnd.apple.pkpass": {
        compressible: false,
        extensions: ["pkpass"]
      },
      "application/vnd.arastra.swi": {
        source: "iana"
      },
      "application/vnd.aristanetworks.swi": {
        source: "iana",
        extensions: ["swi"]
      },
      "application/vnd.artisan+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.artsquare": {
        source: "iana"
      },
      "application/vnd.astraea-software.iota": {
        source: "iana",
        extensions: ["iota"]
      },
      "application/vnd.audiograph": {
        source: "iana",
        extensions: ["aep"]
      },
      "application/vnd.autopackage": {
        source: "iana"
      },
      "application/vnd.avalon+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.avistar+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.balsamiq.bmml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["bmml"]
      },
      "application/vnd.balsamiq.bmpr": {
        source: "iana"
      },
      "application/vnd.banana-accounting": {
        source: "iana"
      },
      "application/vnd.bbf.usp.error": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bekitzur-stech+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bint.med-content": {
        source: "iana"
      },
      "application/vnd.biopax.rdf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.blink-idb-value-wrapper": {
        source: "iana"
      },
      "application/vnd.blueice.multipass": {
        source: "iana",
        extensions: ["mpm"]
      },
      "application/vnd.bluetooth.ep.oob": {
        source: "iana"
      },
      "application/vnd.bluetooth.le.oob": {
        source: "iana"
      },
      "application/vnd.bmi": {
        source: "iana",
        extensions: ["bmi"]
      },
      "application/vnd.bpf": {
        source: "iana"
      },
      "application/vnd.bpf3": {
        source: "iana"
      },
      "application/vnd.businessobjects": {
        source: "iana",
        extensions: ["rep"]
      },
      "application/vnd.byu.uapi+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cab-jscript": {
        source: "iana"
      },
      "application/vnd.canon-cpdl": {
        source: "iana"
      },
      "application/vnd.canon-lips": {
        source: "iana"
      },
      "application/vnd.capasystems-pg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cendio.thinlinc.clientconf": {
        source: "iana"
      },
      "application/vnd.century-systems.tcp_stream": {
        source: "iana"
      },
      "application/vnd.chemdraw+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdxml"]
      },
      "application/vnd.chess-pgn": {
        source: "iana"
      },
      "application/vnd.chipnuts.karaoke-mmd": {
        source: "iana",
        extensions: ["mmd"]
      },
      "application/vnd.ciedi": {
        source: "iana"
      },
      "application/vnd.cinderella": {
        source: "iana",
        extensions: ["cdy"]
      },
      "application/vnd.cirpack.isdn-ext": {
        source: "iana"
      },
      "application/vnd.citationstyles.style+xml": {
        source: "iana",
        compressible: true,
        extensions: ["csl"]
      },
      "application/vnd.claymore": {
        source: "iana",
        extensions: ["cla"]
      },
      "application/vnd.cloanto.rp9": {
        source: "iana",
        extensions: ["rp9"]
      },
      "application/vnd.clonk.c4group": {
        source: "iana",
        extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
      },
      "application/vnd.cluetrust.cartomobile-config": {
        source: "iana",
        extensions: ["c11amc"]
      },
      "application/vnd.cluetrust.cartomobile-config-pkg": {
        source: "iana",
        extensions: ["c11amz"]
      },
      "application/vnd.coffeescript": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet-template": {
        source: "iana"
      },
      "application/vnd.collection+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.doc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.next+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.comicbook+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.comicbook-rar": {
        source: "iana"
      },
      "application/vnd.commerce-battelle": {
        source: "iana"
      },
      "application/vnd.commonspace": {
        source: "iana",
        extensions: ["csp"]
      },
      "application/vnd.contact.cmsg": {
        source: "iana",
        extensions: ["cdbcmsg"]
      },
      "application/vnd.coreos.ignition+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cosmocaller": {
        source: "iana",
        extensions: ["cmc"]
      },
      "application/vnd.crick.clicker": {
        source: "iana",
        extensions: ["clkx"]
      },
      "application/vnd.crick.clicker.keyboard": {
        source: "iana",
        extensions: ["clkk"]
      },
      "application/vnd.crick.clicker.palette": {
        source: "iana",
        extensions: ["clkp"]
      },
      "application/vnd.crick.clicker.template": {
        source: "iana",
        extensions: ["clkt"]
      },
      "application/vnd.crick.clicker.wordbank": {
        source: "iana",
        extensions: ["clkw"]
      },
      "application/vnd.criticaltools.wbs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wbs"]
      },
      "application/vnd.cryptii.pipe+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.crypto-shade-file": {
        source: "iana"
      },
      "application/vnd.cryptomator.encrypted": {
        source: "iana"
      },
      "application/vnd.cryptomator.vault": {
        source: "iana"
      },
      "application/vnd.ctc-posml": {
        source: "iana",
        extensions: ["pml"]
      },
      "application/vnd.ctct.ws+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cups-pdf": {
        source: "iana"
      },
      "application/vnd.cups-postscript": {
        source: "iana"
      },
      "application/vnd.cups-ppd": {
        source: "iana",
        extensions: ["ppd"]
      },
      "application/vnd.cups-raster": {
        source: "iana"
      },
      "application/vnd.cups-raw": {
        source: "iana"
      },
      "application/vnd.curl": {
        source: "iana"
      },
      "application/vnd.curl.car": {
        source: "apache",
        extensions: ["car"]
      },
      "application/vnd.curl.pcurl": {
        source: "apache",
        extensions: ["pcurl"]
      },
      "application/vnd.cyan.dean.root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cybank": {
        source: "iana"
      },
      "application/vnd.cyclonedx+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cyclonedx+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.d2l.coursepackage1p0+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.d3m-dataset": {
        source: "iana"
      },
      "application/vnd.d3m-problem": {
        source: "iana"
      },
      "application/vnd.dart": {
        source: "iana",
        compressible: true,
        extensions: ["dart"]
      },
      "application/vnd.data-vision.rdz": {
        source: "iana",
        extensions: ["rdz"]
      },
      "application/vnd.datapackage+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dataresource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dbf": {
        source: "iana",
        extensions: ["dbf"]
      },
      "application/vnd.debian.binary-package": {
        source: "iana"
      },
      "application/vnd.dece.data": {
        source: "iana",
        extensions: ["uvf", "uvvf", "uvd", "uvvd"]
      },
      "application/vnd.dece.ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uvt", "uvvt"]
      },
      "application/vnd.dece.unspecified": {
        source: "iana",
        extensions: ["uvx", "uvvx"]
      },
      "application/vnd.dece.zip": {
        source: "iana",
        extensions: ["uvz", "uvvz"]
      },
      "application/vnd.denovo.fcselayout-link": {
        source: "iana",
        extensions: ["fe_launch"]
      },
      "application/vnd.desmume.movie": {
        source: "iana"
      },
      "application/vnd.dir-bi.plate-dl-nosuffix": {
        source: "iana"
      },
      "application/vnd.dm.delegation+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dna": {
        source: "iana",
        extensions: ["dna"]
      },
      "application/vnd.document+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dolby.mlp": {
        source: "apache",
        extensions: ["mlp"]
      },
      "application/vnd.dolby.mobile.1": {
        source: "iana"
      },
      "application/vnd.dolby.mobile.2": {
        source: "iana"
      },
      "application/vnd.doremir.scorecloud-binary-document": {
        source: "iana"
      },
      "application/vnd.dpgraph": {
        source: "iana",
        extensions: ["dpg"]
      },
      "application/vnd.dreamfactory": {
        source: "iana",
        extensions: ["dfac"]
      },
      "application/vnd.drive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ds-keypoint": {
        source: "apache",
        extensions: ["kpxx"]
      },
      "application/vnd.dtg.local": {
        source: "iana"
      },
      "application/vnd.dtg.local.flash": {
        source: "iana"
      },
      "application/vnd.dtg.local.html": {
        source: "iana"
      },
      "application/vnd.dvb.ait": {
        source: "iana",
        extensions: ["ait"]
      },
      "application/vnd.dvb.dvbisl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.dvbj": {
        source: "iana"
      },
      "application/vnd.dvb.esgcontainer": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcdftnotifaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess2": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgpdd": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcroaming": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-base": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-enhancement": {
        source: "iana"
      },
      "application/vnd.dvb.notif-aggregate-root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-container+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-generic+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-msglist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-init+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.pfr": {
        source: "iana"
      },
      "application/vnd.dvb.service": {
        source: "iana",
        extensions: ["svc"]
      },
      "application/vnd.dxr": {
        source: "iana"
      },
      "application/vnd.dynageo": {
        source: "iana",
        extensions: ["geo"]
      },
      "application/vnd.dzr": {
        source: "iana"
      },
      "application/vnd.easykaraoke.cdgdownload": {
        source: "iana"
      },
      "application/vnd.ecdis-update": {
        source: "iana"
      },
      "application/vnd.ecip.rlp": {
        source: "iana"
      },
      "application/vnd.eclipse.ditto+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ecowin.chart": {
        source: "iana",
        extensions: ["mag"]
      },
      "application/vnd.ecowin.filerequest": {
        source: "iana"
      },
      "application/vnd.ecowin.fileupdate": {
        source: "iana"
      },
      "application/vnd.ecowin.series": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesrequest": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesupdate": {
        source: "iana"
      },
      "application/vnd.efi.img": {
        source: "iana"
      },
      "application/vnd.efi.iso": {
        source: "iana"
      },
      "application/vnd.emclient.accessrequest+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.enliven": {
        source: "iana",
        extensions: ["nml"]
      },
      "application/vnd.enphase.envoy": {
        source: "iana"
      },
      "application/vnd.eprints.data+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.epson.esf": {
        source: "iana",
        extensions: ["esf"]
      },
      "application/vnd.epson.msf": {
        source: "iana",
        extensions: ["msf"]
      },
      "application/vnd.epson.quickanime": {
        source: "iana",
        extensions: ["qam"]
      },
      "application/vnd.epson.salt": {
        source: "iana",
        extensions: ["slt"]
      },
      "application/vnd.epson.ssf": {
        source: "iana",
        extensions: ["ssf"]
      },
      "application/vnd.ericsson.quickcall": {
        source: "iana"
      },
      "application/vnd.espass-espass+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.eszigno3+xml": {
        source: "iana",
        compressible: true,
        extensions: ["es3", "et3"]
      },
      "application/vnd.etsi.aoc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.asic-e+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.asic-s+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.cug+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvcommand+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-bc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-cod+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-npvr+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvservice+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mcid+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mheg5": {
        source: "iana"
      },
      "application/vnd.etsi.overload-control-policy-dataset+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.pstn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.sci+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.simservs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.timestamp-token": {
        source: "iana"
      },
      "application/vnd.etsi.tsl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.tsl.der": {
        source: "iana"
      },
      "application/vnd.eu.kasparian.car+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.eudora.data": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.profile": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.settings": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.theme": {
        source: "iana"
      },
      "application/vnd.exstream-empower+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.exstream-package": {
        source: "iana"
      },
      "application/vnd.ezpix-album": {
        source: "iana",
        extensions: ["ez2"]
      },
      "application/vnd.ezpix-package": {
        source: "iana",
        extensions: ["ez3"]
      },
      "application/vnd.f-secure.mobile": {
        source: "iana"
      },
      "application/vnd.familysearch.gedcom+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.fastcopy-disk-image": {
        source: "iana"
      },
      "application/vnd.fdf": {
        source: "iana",
        extensions: ["fdf"]
      },
      "application/vnd.fdsn.mseed": {
        source: "iana",
        extensions: ["mseed"]
      },
      "application/vnd.fdsn.seed": {
        source: "iana",
        extensions: ["seed", "dataless"]
      },
      "application/vnd.ffsns": {
        source: "iana"
      },
      "application/vnd.ficlab.flb+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.filmit.zfc": {
        source: "iana"
      },
      "application/vnd.fints": {
        source: "iana"
      },
      "application/vnd.firemonkeys.cloudcell": {
        source: "iana"
      },
      "application/vnd.flographit": {
        source: "iana",
        extensions: ["gph"]
      },
      "application/vnd.fluxtime.clip": {
        source: "iana",
        extensions: ["ftc"]
      },
      "application/vnd.font-fontforge-sfd": {
        source: "iana"
      },
      "application/vnd.framemaker": {
        source: "iana",
        extensions: ["fm", "frame", "maker", "book"]
      },
      "application/vnd.frogans.fnc": {
        source: "iana",
        extensions: ["fnc"]
      },
      "application/vnd.frogans.ltf": {
        source: "iana",
        extensions: ["ltf"]
      },
      "application/vnd.fsc.weblaunch": {
        source: "iana",
        extensions: ["fsc"]
      },
      "application/vnd.fujifilm.fb.docuworks": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.binder": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.jfi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fujitsu.oasys": {
        source: "iana",
        extensions: ["oas"]
      },
      "application/vnd.fujitsu.oasys2": {
        source: "iana",
        extensions: ["oa2"]
      },
      "application/vnd.fujitsu.oasys3": {
        source: "iana",
        extensions: ["oa3"]
      },
      "application/vnd.fujitsu.oasysgp": {
        source: "iana",
        extensions: ["fg5"]
      },
      "application/vnd.fujitsu.oasysprs": {
        source: "iana",
        extensions: ["bh2"]
      },
      "application/vnd.fujixerox.art-ex": {
        source: "iana"
      },
      "application/vnd.fujixerox.art4": {
        source: "iana"
      },
      "application/vnd.fujixerox.ddd": {
        source: "iana",
        extensions: ["ddd"]
      },
      "application/vnd.fujixerox.docuworks": {
        source: "iana",
        extensions: ["xdw"]
      },
      "application/vnd.fujixerox.docuworks.binder": {
        source: "iana",
        extensions: ["xbd"]
      },
      "application/vnd.fujixerox.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujixerox.hbpl": {
        source: "iana"
      },
      "application/vnd.fut-misnet": {
        source: "iana"
      },
      "application/vnd.futoin+cbor": {
        source: "iana"
      },
      "application/vnd.futoin+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fuzzysheet": {
        source: "iana",
        extensions: ["fzs"]
      },
      "application/vnd.genomatix.tuxedo": {
        source: "iana",
        extensions: ["txd"]
      },
      "application/vnd.gentics.grd+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geo+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geocube+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geogebra.file": {
        source: "iana",
        extensions: ["ggb"]
      },
      "application/vnd.geogebra.slides": {
        source: "iana"
      },
      "application/vnd.geogebra.tool": {
        source: "iana",
        extensions: ["ggt"]
      },
      "application/vnd.geometry-explorer": {
        source: "iana",
        extensions: ["gex", "gre"]
      },
      "application/vnd.geonext": {
        source: "iana",
        extensions: ["gxt"]
      },
      "application/vnd.geoplan": {
        source: "iana",
        extensions: ["g2w"]
      },
      "application/vnd.geospace": {
        source: "iana",
        extensions: ["g3w"]
      },
      "application/vnd.gerber": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt-response": {
        source: "iana"
      },
      "application/vnd.gmx": {
        source: "iana",
        extensions: ["gmx"]
      },
      "application/vnd.google-apps.document": {
        compressible: false,
        extensions: ["gdoc"]
      },
      "application/vnd.google-apps.presentation": {
        compressible: false,
        extensions: ["gslides"]
      },
      "application/vnd.google-apps.spreadsheet": {
        compressible: false,
        extensions: ["gsheet"]
      },
      "application/vnd.google-earth.kml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["kml"]
      },
      "application/vnd.google-earth.kmz": {
        source: "iana",
        compressible: false,
        extensions: ["kmz"]
      },
      "application/vnd.gov.sk.e-form+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.gov.sk.e-form+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.gov.sk.xmldatacontainer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.grafeq": {
        source: "iana",
        extensions: ["gqf", "gqs"]
      },
      "application/vnd.gridmp": {
        source: "iana"
      },
      "application/vnd.groove-account": {
        source: "iana",
        extensions: ["gac"]
      },
      "application/vnd.groove-help": {
        source: "iana",
        extensions: ["ghf"]
      },
      "application/vnd.groove-identity-message": {
        source: "iana",
        extensions: ["gim"]
      },
      "application/vnd.groove-injector": {
        source: "iana",
        extensions: ["grv"]
      },
      "application/vnd.groove-tool-message": {
        source: "iana",
        extensions: ["gtm"]
      },
      "application/vnd.groove-tool-template": {
        source: "iana",
        extensions: ["tpl"]
      },
      "application/vnd.groove-vcard": {
        source: "iana",
        extensions: ["vcg"]
      },
      "application/vnd.hal+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hal+xml": {
        source: "iana",
        compressible: true,
        extensions: ["hal"]
      },
      "application/vnd.handheld-entertainment+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zmm"]
      },
      "application/vnd.hbci": {
        source: "iana",
        extensions: ["hbci"]
      },
      "application/vnd.hc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hcl-bireports": {
        source: "iana"
      },
      "application/vnd.hdt": {
        source: "iana"
      },
      "application/vnd.heroku+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hhe.lesson-player": {
        source: "iana",
        extensions: ["les"]
      },
      "application/vnd.hl7cda+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hl7v2+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hp-hpgl": {
        source: "iana",
        extensions: ["hpgl"]
      },
      "application/vnd.hp-hpid": {
        source: "iana",
        extensions: ["hpid"]
      },
      "application/vnd.hp-hps": {
        source: "iana",
        extensions: ["hps"]
      },
      "application/vnd.hp-jlyt": {
        source: "iana",
        extensions: ["jlt"]
      },
      "application/vnd.hp-pcl": {
        source: "iana",
        extensions: ["pcl"]
      },
      "application/vnd.hp-pclxl": {
        source: "iana",
        extensions: ["pclxl"]
      },
      "application/vnd.httphone": {
        source: "iana"
      },
      "application/vnd.hydrostatix.sof-data": {
        source: "iana",
        extensions: ["sfd-hdstx"]
      },
      "application/vnd.hyper+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyper-item+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyperdrive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hzn-3d-crossword": {
        source: "iana"
      },
      "application/vnd.ibm.afplinedata": {
        source: "iana"
      },
      "application/vnd.ibm.electronic-media": {
        source: "iana"
      },
      "application/vnd.ibm.minipay": {
        source: "iana",
        extensions: ["mpy"]
      },
      "application/vnd.ibm.modcap": {
        source: "iana",
        extensions: ["afp", "listafp", "list3820"]
      },
      "application/vnd.ibm.rights-management": {
        source: "iana",
        extensions: ["irm"]
      },
      "application/vnd.ibm.secure-container": {
        source: "iana",
        extensions: ["sc"]
      },
      "application/vnd.iccprofile": {
        source: "iana",
        extensions: ["icc", "icm"]
      },
      "application/vnd.ieee.1905": {
        source: "iana"
      },
      "application/vnd.igloader": {
        source: "iana",
        extensions: ["igl"]
      },
      "application/vnd.imagemeter.folder+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.imagemeter.image+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.immervision-ivp": {
        source: "iana",
        extensions: ["ivp"]
      },
      "application/vnd.immervision-ivu": {
        source: "iana",
        extensions: ["ivu"]
      },
      "application/vnd.ims.imsccv1p1": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p2": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p3": {
        source: "iana"
      },
      "application/vnd.ims.lis.v2.result+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy.id+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings.simple+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informedcontrol.rms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informix-visionary": {
        source: "iana"
      },
      "application/vnd.infotech.project": {
        source: "iana"
      },
      "application/vnd.infotech.project+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.innopath.wamp.notification": {
        source: "iana"
      },
      "application/vnd.insors.igm": {
        source: "iana",
        extensions: ["igm"]
      },
      "application/vnd.intercon.formnet": {
        source: "iana",
        extensions: ["xpw", "xpx"]
      },
      "application/vnd.intergeo": {
        source: "iana",
        extensions: ["i2g"]
      },
      "application/vnd.intertrust.digibox": {
        source: "iana"
      },
      "application/vnd.intertrust.nncp": {
        source: "iana"
      },
      "application/vnd.intu.qbo": {
        source: "iana",
        extensions: ["qbo"]
      },
      "application/vnd.intu.qfx": {
        source: "iana",
        extensions: ["qfx"]
      },
      "application/vnd.iptc.g2.catalogitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.conceptitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.knowledgeitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.packageitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.planningitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ipunplugged.rcprofile": {
        source: "iana",
        extensions: ["rcprofile"]
      },
      "application/vnd.irepository.package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["irp"]
      },
      "application/vnd.is-xpr": {
        source: "iana",
        extensions: ["xpr"]
      },
      "application/vnd.isac.fcs": {
        source: "iana",
        extensions: ["fcs"]
      },
      "application/vnd.iso11783-10+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.jam": {
        source: "iana",
        extensions: ["jam"]
      },
      "application/vnd.japannet-directory-service": {
        source: "iana"
      },
      "application/vnd.japannet-jpnstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-payment-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-registration": {
        source: "iana"
      },
      "application/vnd.japannet-registration-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-setstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-verification": {
        source: "iana"
      },
      "application/vnd.japannet-verification-wakeup": {
        source: "iana"
      },
      "application/vnd.jcp.javame.midlet-rms": {
        source: "iana",
        extensions: ["rms"]
      },
      "application/vnd.jisp": {
        source: "iana",
        extensions: ["jisp"]
      },
      "application/vnd.joost.joda-archive": {
        source: "iana",
        extensions: ["joda"]
      },
      "application/vnd.jsk.isdn-ngn": {
        source: "iana"
      },
      "application/vnd.kahootz": {
        source: "iana",
        extensions: ["ktz", "ktr"]
      },
      "application/vnd.kde.karbon": {
        source: "iana",
        extensions: ["karbon"]
      },
      "application/vnd.kde.kchart": {
        source: "iana",
        extensions: ["chrt"]
      },
      "application/vnd.kde.kformula": {
        source: "iana",
        extensions: ["kfo"]
      },
      "application/vnd.kde.kivio": {
        source: "iana",
        extensions: ["flw"]
      },
      "application/vnd.kde.kontour": {
        source: "iana",
        extensions: ["kon"]
      },
      "application/vnd.kde.kpresenter": {
        source: "iana",
        extensions: ["kpr", "kpt"]
      },
      "application/vnd.kde.kspread": {
        source: "iana",
        extensions: ["ksp"]
      },
      "application/vnd.kde.kword": {
        source: "iana",
        extensions: ["kwd", "kwt"]
      },
      "application/vnd.kenameaapp": {
        source: "iana",
        extensions: ["htke"]
      },
      "application/vnd.kidspiration": {
        source: "iana",
        extensions: ["kia"]
      },
      "application/vnd.kinar": {
        source: "iana",
        extensions: ["kne", "knp"]
      },
      "application/vnd.koan": {
        source: "iana",
        extensions: ["skp", "skd", "skt", "skm"]
      },
      "application/vnd.kodak-descriptor": {
        source: "iana",
        extensions: ["sse"]
      },
      "application/vnd.las": {
        source: "iana"
      },
      "application/vnd.las.las+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.las.las+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lasxml"]
      },
      "application/vnd.laszip": {
        source: "iana"
      },
      "application/vnd.leap+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.liberty-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.llamagraphics.life-balance.desktop": {
        source: "iana",
        extensions: ["lbd"]
      },
      "application/vnd.llamagraphics.life-balance.exchange+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lbe"]
      },
      "application/vnd.logipipe.circuit+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.loom": {
        source: "iana"
      },
      "application/vnd.lotus-1-2-3": {
        source: "iana",
        extensions: ["123"]
      },
      "application/vnd.lotus-approach": {
        source: "iana",
        extensions: ["apr"]
      },
      "application/vnd.lotus-freelance": {
        source: "iana",
        extensions: ["pre"]
      },
      "application/vnd.lotus-notes": {
        source: "iana",
        extensions: ["nsf"]
      },
      "application/vnd.lotus-organizer": {
        source: "iana",
        extensions: ["org"]
      },
      "application/vnd.lotus-screencam": {
        source: "iana",
        extensions: ["scm"]
      },
      "application/vnd.lotus-wordpro": {
        source: "iana",
        extensions: ["lwp"]
      },
      "application/vnd.macports.portpkg": {
        source: "iana",
        extensions: ["portpkg"]
      },
      "application/vnd.mapbox-vector-tile": {
        source: "iana",
        extensions: ["mvt"]
      },
      "application/vnd.marlin.drm.actiontoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.conftoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.license+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.mdcf": {
        source: "iana"
      },
      "application/vnd.mason+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.maxar.archive.3tz+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.maxmind.maxmind-db": {
        source: "iana"
      },
      "application/vnd.mcd": {
        source: "iana",
        extensions: ["mcd"]
      },
      "application/vnd.medcalcdata": {
        source: "iana",
        extensions: ["mc1"]
      },
      "application/vnd.mediastation.cdkey": {
        source: "iana",
        extensions: ["cdkey"]
      },
      "application/vnd.meridian-slingshot": {
        source: "iana"
      },
      "application/vnd.mfer": {
        source: "iana",
        extensions: ["mwf"]
      },
      "application/vnd.mfmp": {
        source: "iana",
        extensions: ["mfm"]
      },
      "application/vnd.micro+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.micrografx.flo": {
        source: "iana",
        extensions: ["flo"]
      },
      "application/vnd.micrografx.igx": {
        source: "iana",
        extensions: ["igx"]
      },
      "application/vnd.microsoft.portable-executable": {
        source: "iana"
      },
      "application/vnd.microsoft.windows.thumbnail-cache": {
        source: "iana"
      },
      "application/vnd.miele+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.mif": {
        source: "iana",
        extensions: ["mif"]
      },
      "application/vnd.minisoft-hp3000-save": {
        source: "iana"
      },
      "application/vnd.mitsubishi.misty-guard.trustweb": {
        source: "iana"
      },
      "application/vnd.mobius.daf": {
        source: "iana",
        extensions: ["daf"]
      },
      "application/vnd.mobius.dis": {
        source: "iana",
        extensions: ["dis"]
      },
      "application/vnd.mobius.mbk": {
        source: "iana",
        extensions: ["mbk"]
      },
      "application/vnd.mobius.mqy": {
        source: "iana",
        extensions: ["mqy"]
      },
      "application/vnd.mobius.msl": {
        source: "iana",
        extensions: ["msl"]
      },
      "application/vnd.mobius.plc": {
        source: "iana",
        extensions: ["plc"]
      },
      "application/vnd.mobius.txf": {
        source: "iana",
        extensions: ["txf"]
      },
      "application/vnd.mophun.application": {
        source: "iana",
        extensions: ["mpn"]
      },
      "application/vnd.mophun.certificate": {
        source: "iana",
        extensions: ["mpc"]
      },
      "application/vnd.motorola.flexsuite": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.adsi": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.fis": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.gotap": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.kmr": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.ttc": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.wem": {
        source: "iana"
      },
      "application/vnd.motorola.iprm": {
        source: "iana"
      },
      "application/vnd.mozilla.xul+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xul"]
      },
      "application/vnd.ms-3mfdocument": {
        source: "iana"
      },
      "application/vnd.ms-artgalry": {
        source: "iana",
        extensions: ["cil"]
      },
      "application/vnd.ms-asf": {
        source: "iana"
      },
      "application/vnd.ms-cab-compressed": {
        source: "iana",
        extensions: ["cab"]
      },
      "application/vnd.ms-color.iccprofile": {
        source: "apache"
      },
      "application/vnd.ms-excel": {
        source: "iana",
        compressible: false,
        extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
      },
      "application/vnd.ms-excel.addin.macroenabled.12": {
        source: "iana",
        extensions: ["xlam"]
      },
      "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        source: "iana",
        extensions: ["xlsb"]
      },
      "application/vnd.ms-excel.sheet.macroenabled.12": {
        source: "iana",
        extensions: ["xlsm"]
      },
      "application/vnd.ms-excel.template.macroenabled.12": {
        source: "iana",
        extensions: ["xltm"]
      },
      "application/vnd.ms-fontobject": {
        source: "iana",
        compressible: true,
        extensions: ["eot"]
      },
      "application/vnd.ms-htmlhelp": {
        source: "iana",
        extensions: ["chm"]
      },
      "application/vnd.ms-ims": {
        source: "iana",
        extensions: ["ims"]
      },
      "application/vnd.ms-lrm": {
        source: "iana",
        extensions: ["lrm"]
      },
      "application/vnd.ms-office.activex+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-officetheme": {
        source: "iana",
        extensions: ["thmx"]
      },
      "application/vnd.ms-opentype": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-outlook": {
        compressible: false,
        extensions: ["msg"]
      },
      "application/vnd.ms-package.obfuscated-opentype": {
        source: "apache"
      },
      "application/vnd.ms-pki.seccat": {
        source: "apache",
        extensions: ["cat"]
      },
      "application/vnd.ms-pki.stl": {
        source: "apache",
        extensions: ["stl"]
      },
      "application/vnd.ms-playready.initiator+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-powerpoint": {
        source: "iana",
        compressible: false,
        extensions: ["ppt", "pps", "pot"]
      },
      "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        source: "iana",
        extensions: ["ppam"]
      },
      "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        source: "iana",
        extensions: ["pptm"]
      },
      "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        source: "iana",
        extensions: ["sldm"]
      },
      "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        source: "iana",
        extensions: ["ppsm"]
      },
      "application/vnd.ms-powerpoint.template.macroenabled.12": {
        source: "iana",
        extensions: ["potm"]
      },
      "application/vnd.ms-printdevicecapabilities+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-printing.printticket+xml": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-printschematicket+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-project": {
        source: "iana",
        extensions: ["mpp", "mpt"]
      },
      "application/vnd.ms-tnef": {
        source: "iana"
      },
      "application/vnd.ms-windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.nwprinting.oob": {
        source: "iana"
      },
      "application/vnd.ms-windows.printerpairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.wsd.oob": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-resp": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-resp": {
        source: "iana"
      },
      "application/vnd.ms-word.document.macroenabled.12": {
        source: "iana",
        extensions: ["docm"]
      },
      "application/vnd.ms-word.template.macroenabled.12": {
        source: "iana",
        extensions: ["dotm"]
      },
      "application/vnd.ms-works": {
        source: "iana",
        extensions: ["wps", "wks", "wcm", "wdb"]
      },
      "application/vnd.ms-wpl": {
        source: "iana",
        extensions: ["wpl"]
      },
      "application/vnd.ms-xpsdocument": {
        source: "iana",
        compressible: false,
        extensions: ["xps"]
      },
      "application/vnd.msa-disk-image": {
        source: "iana"
      },
      "application/vnd.mseq": {
        source: "iana",
        extensions: ["mseq"]
      },
      "application/vnd.msign": {
        source: "iana"
      },
      "application/vnd.multiad.creator": {
        source: "iana"
      },
      "application/vnd.multiad.creator.cif": {
        source: "iana"
      },
      "application/vnd.music-niff": {
        source: "iana"
      },
      "application/vnd.musician": {
        source: "iana",
        extensions: ["mus"]
      },
      "application/vnd.muvee.style": {
        source: "iana",
        extensions: ["msty"]
      },
      "application/vnd.mynfc": {
        source: "iana",
        extensions: ["taglet"]
      },
      "application/vnd.nacamar.ybrid+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ncd.control": {
        source: "iana"
      },
      "application/vnd.ncd.reference": {
        source: "iana"
      },
      "application/vnd.nearst.inv+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nebumind.line": {
        source: "iana"
      },
      "application/vnd.nervana": {
        source: "iana"
      },
      "application/vnd.netfpx": {
        source: "iana"
      },
      "application/vnd.neurolanguage.nlu": {
        source: "iana",
        extensions: ["nlu"]
      },
      "application/vnd.nimn": {
        source: "iana"
      },
      "application/vnd.nintendo.nitro.rom": {
        source: "iana"
      },
      "application/vnd.nintendo.snes.rom": {
        source: "iana"
      },
      "application/vnd.nitf": {
        source: "iana",
        extensions: ["ntf", "nitf"]
      },
      "application/vnd.noblenet-directory": {
        source: "iana",
        extensions: ["nnd"]
      },
      "application/vnd.noblenet-sealer": {
        source: "iana",
        extensions: ["nns"]
      },
      "application/vnd.noblenet-web": {
        source: "iana",
        extensions: ["nnw"]
      },
      "application/vnd.nokia.catalogs": {
        source: "iana"
      },
      "application/vnd.nokia.conml+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.conml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.iptv.config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.isds-radio-presets": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.landmarkcollection+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.n-gage.ac+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ac"]
      },
      "application/vnd.nokia.n-gage.data": {
        source: "iana",
        extensions: ["ngdat"]
      },
      "application/vnd.nokia.n-gage.symbian.install": {
        source: "iana",
        extensions: ["n-gage"]
      },
      "application/vnd.nokia.ncd": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.radio-preset": {
        source: "iana",
        extensions: ["rpst"]
      },
      "application/vnd.nokia.radio-presets": {
        source: "iana",
        extensions: ["rpss"]
      },
      "application/vnd.novadigm.edm": {
        source: "iana",
        extensions: ["edm"]
      },
      "application/vnd.novadigm.edx": {
        source: "iana",
        extensions: ["edx"]
      },
      "application/vnd.novadigm.ext": {
        source: "iana",
        extensions: ["ext"]
      },
      "application/vnd.ntt-local.content-share": {
        source: "iana"
      },
      "application/vnd.ntt-local.file-transfer": {
        source: "iana"
      },
      "application/vnd.ntt-local.ogw_remote-access": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_remote": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_tcp_stream": {
        source: "iana"
      },
      "application/vnd.oasis.opendocument.chart": {
        source: "iana",
        extensions: ["odc"]
      },
      "application/vnd.oasis.opendocument.chart-template": {
        source: "iana",
        extensions: ["otc"]
      },
      "application/vnd.oasis.opendocument.database": {
        source: "iana",
        extensions: ["odb"]
      },
      "application/vnd.oasis.opendocument.formula": {
        source: "iana",
        extensions: ["odf"]
      },
      "application/vnd.oasis.opendocument.formula-template": {
        source: "iana",
        extensions: ["odft"]
      },
      "application/vnd.oasis.opendocument.graphics": {
        source: "iana",
        compressible: false,
        extensions: ["odg"]
      },
      "application/vnd.oasis.opendocument.graphics-template": {
        source: "iana",
        extensions: ["otg"]
      },
      "application/vnd.oasis.opendocument.image": {
        source: "iana",
        extensions: ["odi"]
      },
      "application/vnd.oasis.opendocument.image-template": {
        source: "iana",
        extensions: ["oti"]
      },
      "application/vnd.oasis.opendocument.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["odp"]
      },
      "application/vnd.oasis.opendocument.presentation-template": {
        source: "iana",
        extensions: ["otp"]
      },
      "application/vnd.oasis.opendocument.spreadsheet": {
        source: "iana",
        compressible: false,
        extensions: ["ods"]
      },
      "application/vnd.oasis.opendocument.spreadsheet-template": {
        source: "iana",
        extensions: ["ots"]
      },
      "application/vnd.oasis.opendocument.text": {
        source: "iana",
        compressible: false,
        extensions: ["odt"]
      },
      "application/vnd.oasis.opendocument.text-master": {
        source: "iana",
        extensions: ["odm"]
      },
      "application/vnd.oasis.opendocument.text-template": {
        source: "iana",
        extensions: ["ott"]
      },
      "application/vnd.oasis.opendocument.text-web": {
        source: "iana",
        extensions: ["oth"]
      },
      "application/vnd.obn": {
        source: "iana"
      },
      "application/vnd.ocf+cbor": {
        source: "iana"
      },
      "application/vnd.oci.image.manifest.v1+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oftn.l10n+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessdownload+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessstreaming+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.cspg-hexbinary": {
        source: "iana"
      },
      "application/vnd.oipf.dae.svg+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.dae.xhtml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.mippvcontrolmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.pae.gem": {
        source: "iana"
      },
      "application/vnd.oipf.spdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.spdlist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.ueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.userprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.olpc-sugar": {
        source: "iana",
        extensions: ["xo"]
      },
      "application/vnd.oma-scws-config": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-request": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-response": {
        source: "iana"
      },
      "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.drm-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.imd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.ltkm": {
        source: "iana"
      },
      "application/vnd.oma.bcast.notification+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.provisioningtrigger": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgboot": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgdd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sgdu": {
        source: "iana"
      },
      "application/vnd.oma.bcast.simple-symbol-container": {
        source: "iana"
      },
      "application/vnd.oma.bcast.smartcard-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sprov+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.stkm": {
        source: "iana"
      },
      "application/vnd.oma.cab-address-book+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-feature-handler+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-pcc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-subs-invite+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-user-prefs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.dcd": {
        source: "iana"
      },
      "application/vnd.oma.dcdc": {
        source: "iana"
      },
      "application/vnd.oma.dd2+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dd2"]
      },
      "application/vnd.oma.drm.risd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.group-usage-list+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+cbor": {
        source: "iana"
      },
      "application/vnd.oma.lwm2m+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+tlv": {
        source: "iana"
      },
      "application/vnd.oma.pal+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.detailed-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.final-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.groups+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.invocation-descriptor+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.optimized-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.push": {
        source: "iana"
      },
      "application/vnd.oma.scidm.messages+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.xcap-directory+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omads-email+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-file+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-folder+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omaloc-supl-init": {
        source: "iana"
      },
      "application/vnd.onepager": {
        source: "iana"
      },
      "application/vnd.onepagertamp": {
        source: "iana"
      },
      "application/vnd.onepagertamx": {
        source: "iana"
      },
      "application/vnd.onepagertat": {
        source: "iana"
      },
      "application/vnd.onepagertatp": {
        source: "iana"
      },
      "application/vnd.onepagertatx": {
        source: "iana"
      },
      "application/vnd.openblox.game+xml": {
        source: "iana",
        compressible: true,
        extensions: ["obgx"]
      },
      "application/vnd.openblox.game-binary": {
        source: "iana"
      },
      "application/vnd.openeye.oeb": {
        source: "iana"
      },
      "application/vnd.openofficeorg.extension": {
        source: "apache",
        extensions: ["oxt"]
      },
      "application/vnd.openstreetmap.data+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osm"]
      },
      "application/vnd.opentimestamps.ots": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawing+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["pptx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        source: "iana",
        extensions: ["sldx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        source: "iana",
        extensions: ["ppsx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template": {
        source: "iana",
        extensions: ["potx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        source: "iana",
        compressible: false,
        extensions: ["xlsx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        source: "iana",
        extensions: ["xltx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.theme+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.vmldrawing": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        source: "iana",
        compressible: false,
        extensions: ["docx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        source: "iana",
        extensions: ["dotx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.core-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.relationships+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oracle.resource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.orange.indata": {
        source: "iana"
      },
      "application/vnd.osa.netdeploy": {
        source: "iana"
      },
      "application/vnd.osgeo.mapguide.package": {
        source: "iana",
        extensions: ["mgp"]
      },
      "application/vnd.osgi.bundle": {
        source: "iana"
      },
      "application/vnd.osgi.dp": {
        source: "iana",
        extensions: ["dp"]
      },
      "application/vnd.osgi.subsystem": {
        source: "iana",
        extensions: ["esa"]
      },
      "application/vnd.otps.ct-kip+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oxli.countgraph": {
        source: "iana"
      },
      "application/vnd.pagerduty+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.palm": {
        source: "iana",
        extensions: ["pdb", "pqa", "oprc"]
      },
      "application/vnd.panoply": {
        source: "iana"
      },
      "application/vnd.paos.xml": {
        source: "iana"
      },
      "application/vnd.patentdive": {
        source: "iana"
      },
      "application/vnd.patientecommsdoc": {
        source: "iana"
      },
      "application/vnd.pawaafile": {
        source: "iana",
        extensions: ["paw"]
      },
      "application/vnd.pcos": {
        source: "iana"
      },
      "application/vnd.pg.format": {
        source: "iana",
        extensions: ["str"]
      },
      "application/vnd.pg.osasli": {
        source: "iana",
        extensions: ["ei6"]
      },
      "application/vnd.piaccess.application-licence": {
        source: "iana"
      },
      "application/vnd.picsel": {
        source: "iana",
        extensions: ["efif"]
      },
      "application/vnd.pmi.widget": {
        source: "iana",
        extensions: ["wg"]
      },
      "application/vnd.poc.group-advertisement+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.pocketlearn": {
        source: "iana",
        extensions: ["plf"]
      },
      "application/vnd.powerbuilder6": {
        source: "iana",
        extensions: ["pbd"]
      },
      "application/vnd.powerbuilder6-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder7": {
        source: "iana"
      },
      "application/vnd.powerbuilder7-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder75": {
        source: "iana"
      },
      "application/vnd.powerbuilder75-s": {
        source: "iana"
      },
      "application/vnd.preminet": {
        source: "iana"
      },
      "application/vnd.previewsystems.box": {
        source: "iana",
        extensions: ["box"]
      },
      "application/vnd.proteus.magazine": {
        source: "iana",
        extensions: ["mgz"]
      },
      "application/vnd.psfs": {
        source: "iana"
      },
      "application/vnd.publishare-delta-tree": {
        source: "iana",
        extensions: ["qps"]
      },
      "application/vnd.pvi.ptid1": {
        source: "iana",
        extensions: ["ptid"]
      },
      "application/vnd.pwg-multiplexed": {
        source: "iana"
      },
      "application/vnd.pwg-xhtml-print+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.qualcomm.brew-app-res": {
        source: "iana"
      },
      "application/vnd.quarantainenet": {
        source: "iana"
      },
      "application/vnd.quark.quarkxpress": {
        source: "iana",
        extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
      },
      "application/vnd.quobject-quoxdocument": {
        source: "iana"
      },
      "application/vnd.radisys.moml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-stream+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-base+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-detect+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-group+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-speech+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-transform+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rainstor.data": {
        source: "iana"
      },
      "application/vnd.rapid": {
        source: "iana"
      },
      "application/vnd.rar": {
        source: "iana",
        extensions: ["rar"]
      },
      "application/vnd.realvnc.bed": {
        source: "iana",
        extensions: ["bed"]
      },
      "application/vnd.recordare.musicxml": {
        source: "iana",
        extensions: ["mxl"]
      },
      "application/vnd.recordare.musicxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musicxml"]
      },
      "application/vnd.renlearn.rlprint": {
        source: "iana"
      },
      "application/vnd.resilient.logic": {
        source: "iana"
      },
      "application/vnd.restful+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rig.cryptonote": {
        source: "iana",
        extensions: ["cryptonote"]
      },
      "application/vnd.rim.cod": {
        source: "apache",
        extensions: ["cod"]
      },
      "application/vnd.rn-realmedia": {
        source: "apache",
        extensions: ["rm"]
      },
      "application/vnd.rn-realmedia-vbr": {
        source: "apache",
        extensions: ["rmvb"]
      },
      "application/vnd.route66.link66+xml": {
        source: "iana",
        compressible: true,
        extensions: ["link66"]
      },
      "application/vnd.rs-274x": {
        source: "iana"
      },
      "application/vnd.ruckus.download": {
        source: "iana"
      },
      "application/vnd.s3sms": {
        source: "iana"
      },
      "application/vnd.sailingtracker.track": {
        source: "iana",
        extensions: ["st"]
      },
      "application/vnd.sar": {
        source: "iana"
      },
      "application/vnd.sbm.cid": {
        source: "iana"
      },
      "application/vnd.sbm.mid2": {
        source: "iana"
      },
      "application/vnd.scribus": {
        source: "iana"
      },
      "application/vnd.sealed.3df": {
        source: "iana"
      },
      "application/vnd.sealed.csf": {
        source: "iana"
      },
      "application/vnd.sealed.doc": {
        source: "iana"
      },
      "application/vnd.sealed.eml": {
        source: "iana"
      },
      "application/vnd.sealed.mht": {
        source: "iana"
      },
      "application/vnd.sealed.net": {
        source: "iana"
      },
      "application/vnd.sealed.ppt": {
        source: "iana"
      },
      "application/vnd.sealed.tiff": {
        source: "iana"
      },
      "application/vnd.sealed.xls": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.html": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.pdf": {
        source: "iana"
      },
      "application/vnd.seemail": {
        source: "iana",
        extensions: ["see"]
      },
      "application/vnd.seis+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.sema": {
        source: "iana",
        extensions: ["sema"]
      },
      "application/vnd.semd": {
        source: "iana",
        extensions: ["semd"]
      },
      "application/vnd.semf": {
        source: "iana",
        extensions: ["semf"]
      },
      "application/vnd.shade-save-file": {
        source: "iana"
      },
      "application/vnd.shana.informed.formdata": {
        source: "iana",
        extensions: ["ifm"]
      },
      "application/vnd.shana.informed.formtemplate": {
        source: "iana",
        extensions: ["itp"]
      },
      "application/vnd.shana.informed.interchange": {
        source: "iana",
        extensions: ["iif"]
      },
      "application/vnd.shana.informed.package": {
        source: "iana",
        extensions: ["ipk"]
      },
      "application/vnd.shootproof+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shopkick+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shp": {
        source: "iana"
      },
      "application/vnd.shx": {
        source: "iana"
      },
      "application/vnd.sigrok.session": {
        source: "iana"
      },
      "application/vnd.simtech-mindmapper": {
        source: "iana",
        extensions: ["twd", "twds"]
      },
      "application/vnd.siren+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.smaf": {
        source: "iana",
        extensions: ["mmf"]
      },
      "application/vnd.smart.notebook": {
        source: "iana"
      },
      "application/vnd.smart.teacher": {
        source: "iana",
        extensions: ["teacher"]
      },
      "application/vnd.snesdev-page-table": {
        source: "iana"
      },
      "application/vnd.software602.filler.form+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fo"]
      },
      "application/vnd.software602.filler.form-xml-zip": {
        source: "iana"
      },
      "application/vnd.solent.sdkm+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sdkm", "sdkd"]
      },
      "application/vnd.spotfire.dxp": {
        source: "iana",
        extensions: ["dxp"]
      },
      "application/vnd.spotfire.sfs": {
        source: "iana",
        extensions: ["sfs"]
      },
      "application/vnd.sqlite3": {
        source: "iana"
      },
      "application/vnd.sss-cod": {
        source: "iana"
      },
      "application/vnd.sss-dtf": {
        source: "iana"
      },
      "application/vnd.sss-ntf": {
        source: "iana"
      },
      "application/vnd.stardivision.calc": {
        source: "apache",
        extensions: ["sdc"]
      },
      "application/vnd.stardivision.draw": {
        source: "apache",
        extensions: ["sda"]
      },
      "application/vnd.stardivision.impress": {
        source: "apache",
        extensions: ["sdd"]
      },
      "application/vnd.stardivision.math": {
        source: "apache",
        extensions: ["smf"]
      },
      "application/vnd.stardivision.writer": {
        source: "apache",
        extensions: ["sdw", "vor"]
      },
      "application/vnd.stardivision.writer-global": {
        source: "apache",
        extensions: ["sgl"]
      },
      "application/vnd.stepmania.package": {
        source: "iana",
        extensions: ["smzip"]
      },
      "application/vnd.stepmania.stepchart": {
        source: "iana",
        extensions: ["sm"]
      },
      "application/vnd.street-stream": {
        source: "iana"
      },
      "application/vnd.sun.wadl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wadl"]
      },
      "application/vnd.sun.xml.calc": {
        source: "apache",
        extensions: ["sxc"]
      },
      "application/vnd.sun.xml.calc.template": {
        source: "apache",
        extensions: ["stc"]
      },
      "application/vnd.sun.xml.draw": {
        source: "apache",
        extensions: ["sxd"]
      },
      "application/vnd.sun.xml.draw.template": {
        source: "apache",
        extensions: ["std"]
      },
      "application/vnd.sun.xml.impress": {
        source: "apache",
        extensions: ["sxi"]
      },
      "application/vnd.sun.xml.impress.template": {
        source: "apache",
        extensions: ["sti"]
      },
      "application/vnd.sun.xml.math": {
        source: "apache",
        extensions: ["sxm"]
      },
      "application/vnd.sun.xml.writer": {
        source: "apache",
        extensions: ["sxw"]
      },
      "application/vnd.sun.xml.writer.global": {
        source: "apache",
        extensions: ["sxg"]
      },
      "application/vnd.sun.xml.writer.template": {
        source: "apache",
        extensions: ["stw"]
      },
      "application/vnd.sus-calendar": {
        source: "iana",
        extensions: ["sus", "susp"]
      },
      "application/vnd.svd": {
        source: "iana",
        extensions: ["svd"]
      },
      "application/vnd.swiftview-ics": {
        source: "iana"
      },
      "application/vnd.sycle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.syft+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.symbian.install": {
        source: "apache",
        extensions: ["sis", "sisx"]
      },
      "application/vnd.syncml+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xsm"]
      },
      "application/vnd.syncml.dm+wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["bdm"]
      },
      "application/vnd.syncml.dm+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xdm"]
      },
      "application/vnd.syncml.dm.notification": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["ddf"]
      },
      "application/vnd.syncml.dmtnds+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmtnds+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.syncml.ds.notification": {
        source: "iana"
      },
      "application/vnd.tableschema+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tao.intent-module-archive": {
        source: "iana",
        extensions: ["tao"]
      },
      "application/vnd.tcpdump.pcap": {
        source: "iana",
        extensions: ["pcap", "cap", "dmp"]
      },
      "application/vnd.think-cell.ppttc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tmd.mediaflex.api+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tml": {
        source: "iana"
      },
      "application/vnd.tmobile-livetv": {
        source: "iana",
        extensions: ["tmo"]
      },
      "application/vnd.tri.onesource": {
        source: "iana"
      },
      "application/vnd.trid.tpt": {
        source: "iana",
        extensions: ["tpt"]
      },
      "application/vnd.triscape.mxs": {
        source: "iana",
        extensions: ["mxs"]
      },
      "application/vnd.trueapp": {
        source: "iana",
        extensions: ["tra"]
      },
      "application/vnd.truedoc": {
        source: "iana"
      },
      "application/vnd.ubisoft.webplayer": {
        source: "iana"
      },
      "application/vnd.ufdl": {
        source: "iana",
        extensions: ["ufd", "ufdl"]
      },
      "application/vnd.uiq.theme": {
        source: "iana",
        extensions: ["utz"]
      },
      "application/vnd.umajin": {
        source: "iana",
        extensions: ["umj"]
      },
      "application/vnd.unity": {
        source: "iana",
        extensions: ["unityweb"]
      },
      "application/vnd.uoml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uoml"]
      },
      "application/vnd.uplanet.alert": {
        source: "iana"
      },
      "application/vnd.uplanet.alert-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.channel": {
        source: "iana"
      },
      "application/vnd.uplanet.channel-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.list": {
        source: "iana"
      },
      "application/vnd.uplanet.list-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.signal": {
        source: "iana"
      },
      "application/vnd.uri-map": {
        source: "iana"
      },
      "application/vnd.valve.source.material": {
        source: "iana"
      },
      "application/vnd.vcx": {
        source: "iana",
        extensions: ["vcx"]
      },
      "application/vnd.vd-study": {
        source: "iana"
      },
      "application/vnd.vectorworks": {
        source: "iana"
      },
      "application/vnd.vel+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.verimatrix.vcas": {
        source: "iana"
      },
      "application/vnd.veritone.aion+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.veryant.thin": {
        source: "iana"
      },
      "application/vnd.ves.encrypted": {
        source: "iana"
      },
      "application/vnd.vidsoft.vidconference": {
        source: "iana"
      },
      "application/vnd.visio": {
        source: "iana",
        extensions: ["vsd", "vst", "vss", "vsw"]
      },
      "application/vnd.visionary": {
        source: "iana",
        extensions: ["vis"]
      },
      "application/vnd.vividence.scriptfile": {
        source: "iana"
      },
      "application/vnd.vsf": {
        source: "iana",
        extensions: ["vsf"]
      },
      "application/vnd.wap.sic": {
        source: "iana"
      },
      "application/vnd.wap.slc": {
        source: "iana"
      },
      "application/vnd.wap.wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["wbxml"]
      },
      "application/vnd.wap.wmlc": {
        source: "iana",
        extensions: ["wmlc"]
      },
      "application/vnd.wap.wmlscriptc": {
        source: "iana",
        extensions: ["wmlsc"]
      },
      "application/vnd.webturbo": {
        source: "iana",
        extensions: ["wtb"]
      },
      "application/vnd.wfa.dpp": {
        source: "iana"
      },
      "application/vnd.wfa.p2p": {
        source: "iana"
      },
      "application/vnd.wfa.wsc": {
        source: "iana"
      },
      "application/vnd.windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.wmc": {
        source: "iana"
      },
      "application/vnd.wmf.bootstrap": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica.package": {
        source: "iana"
      },
      "application/vnd.wolfram.player": {
        source: "iana",
        extensions: ["nbp"]
      },
      "application/vnd.wordperfect": {
        source: "iana",
        extensions: ["wpd"]
      },
      "application/vnd.wqd": {
        source: "iana",
        extensions: ["wqd"]
      },
      "application/vnd.wrq-hp3000-labelled": {
        source: "iana"
      },
      "application/vnd.wt.stf": {
        source: "iana",
        extensions: ["stf"]
      },
      "application/vnd.wv.csp+wbxml": {
        source: "iana"
      },
      "application/vnd.wv.csp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.wv.ssp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xacml+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xara": {
        source: "iana",
        extensions: ["xar"]
      },
      "application/vnd.xfdl": {
        source: "iana",
        extensions: ["xfdl"]
      },
      "application/vnd.xfdl.webform": {
        source: "iana"
      },
      "application/vnd.xmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xmpie.cpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.dpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.plan": {
        source: "iana"
      },
      "application/vnd.xmpie.ppkg": {
        source: "iana"
      },
      "application/vnd.xmpie.xlim": {
        source: "iana"
      },
      "application/vnd.yamaha.hv-dic": {
        source: "iana",
        extensions: ["hvd"]
      },
      "application/vnd.yamaha.hv-script": {
        source: "iana",
        extensions: ["hvs"]
      },
      "application/vnd.yamaha.hv-voice": {
        source: "iana",
        extensions: ["hvp"]
      },
      "application/vnd.yamaha.openscoreformat": {
        source: "iana",
        extensions: ["osf"]
      },
      "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osfpvg"]
      },
      "application/vnd.yamaha.remote-setup": {
        source: "iana"
      },
      "application/vnd.yamaha.smaf-audio": {
        source: "iana",
        extensions: ["saf"]
      },
      "application/vnd.yamaha.smaf-phrase": {
        source: "iana",
        extensions: ["spf"]
      },
      "application/vnd.yamaha.through-ngn": {
        source: "iana"
      },
      "application/vnd.yamaha.tunnel-udpencap": {
        source: "iana"
      },
      "application/vnd.yaoweme": {
        source: "iana"
      },
      "application/vnd.yellowriver-custom-menu": {
        source: "iana",
        extensions: ["cmp"]
      },
      "application/vnd.youtube.yt": {
        source: "iana"
      },
      "application/vnd.zul": {
        source: "iana",
        extensions: ["zir", "zirz"]
      },
      "application/vnd.zzazz.deck+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zaz"]
      },
      "application/voicexml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["vxml"]
      },
      "application/voucher-cms+json": {
        source: "iana",
        compressible: true
      },
      "application/vq-rtcpxr": {
        source: "iana"
      },
      "application/wasm": {
        source: "iana",
        compressible: true,
        extensions: ["wasm"]
      },
      "application/watcherinfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wif"]
      },
      "application/webpush-options+json": {
        source: "iana",
        compressible: true
      },
      "application/whoispp-query": {
        source: "iana"
      },
      "application/whoispp-response": {
        source: "iana"
      },
      "application/widget": {
        source: "iana",
        extensions: ["wgt"]
      },
      "application/winhlp": {
        source: "apache",
        extensions: ["hlp"]
      },
      "application/wita": {
        source: "iana"
      },
      "application/wordperfect5.1": {
        source: "iana"
      },
      "application/wsdl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wsdl"]
      },
      "application/wspolicy+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wspolicy"]
      },
      "application/x-7z-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["7z"]
      },
      "application/x-abiword": {
        source: "apache",
        extensions: ["abw"]
      },
      "application/x-ace-compressed": {
        source: "apache",
        extensions: ["ace"]
      },
      "application/x-amf": {
        source: "apache"
      },
      "application/x-apple-diskimage": {
        source: "apache",
        extensions: ["dmg"]
      },
      "application/x-arj": {
        compressible: false,
        extensions: ["arj"]
      },
      "application/x-authorware-bin": {
        source: "apache",
        extensions: ["aab", "x32", "u32", "vox"]
      },
      "application/x-authorware-map": {
        source: "apache",
        extensions: ["aam"]
      },
      "application/x-authorware-seg": {
        source: "apache",
        extensions: ["aas"]
      },
      "application/x-bcpio": {
        source: "apache",
        extensions: ["bcpio"]
      },
      "application/x-bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/x-bittorrent": {
        source: "apache",
        extensions: ["torrent"]
      },
      "application/x-blorb": {
        source: "apache",
        extensions: ["blb", "blorb"]
      },
      "application/x-bzip": {
        source: "apache",
        compressible: false,
        extensions: ["bz"]
      },
      "application/x-bzip2": {
        source: "apache",
        compressible: false,
        extensions: ["bz2", "boz"]
      },
      "application/x-cbr": {
        source: "apache",
        extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
      },
      "application/x-cdlink": {
        source: "apache",
        extensions: ["vcd"]
      },
      "application/x-cfs-compressed": {
        source: "apache",
        extensions: ["cfs"]
      },
      "application/x-chat": {
        source: "apache",
        extensions: ["chat"]
      },
      "application/x-chess-pgn": {
        source: "apache",
        extensions: ["pgn"]
      },
      "application/x-chrome-extension": {
        extensions: ["crx"]
      },
      "application/x-cocoa": {
        source: "nginx",
        extensions: ["cco"]
      },
      "application/x-compress": {
        source: "apache"
      },
      "application/x-conference": {
        source: "apache",
        extensions: ["nsc"]
      },
      "application/x-cpio": {
        source: "apache",
        extensions: ["cpio"]
      },
      "application/x-csh": {
        source: "apache",
        extensions: ["csh"]
      },
      "application/x-deb": {
        compressible: false
      },
      "application/x-debian-package": {
        source: "apache",
        extensions: ["deb", "udeb"]
      },
      "application/x-dgc-compressed": {
        source: "apache",
        extensions: ["dgc"]
      },
      "application/x-director": {
        source: "apache",
        extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
      },
      "application/x-doom": {
        source: "apache",
        extensions: ["wad"]
      },
      "application/x-dtbncx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ncx"]
      },
      "application/x-dtbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dtb"]
      },
      "application/x-dtbresource+xml": {
        source: "apache",
        compressible: true,
        extensions: ["res"]
      },
      "application/x-dvi": {
        source: "apache",
        compressible: false,
        extensions: ["dvi"]
      },
      "application/x-envoy": {
        source: "apache",
        extensions: ["evy"]
      },
      "application/x-eva": {
        source: "apache",
        extensions: ["eva"]
      },
      "application/x-font-bdf": {
        source: "apache",
        extensions: ["bdf"]
      },
      "application/x-font-dos": {
        source: "apache"
      },
      "application/x-font-framemaker": {
        source: "apache"
      },
      "application/x-font-ghostscript": {
        source: "apache",
        extensions: ["gsf"]
      },
      "application/x-font-libgrx": {
        source: "apache"
      },
      "application/x-font-linux-psf": {
        source: "apache",
        extensions: ["psf"]
      },
      "application/x-font-pcf": {
        source: "apache",
        extensions: ["pcf"]
      },
      "application/x-font-snf": {
        source: "apache",
        extensions: ["snf"]
      },
      "application/x-font-speedo": {
        source: "apache"
      },
      "application/x-font-sunos-news": {
        source: "apache"
      },
      "application/x-font-type1": {
        source: "apache",
        extensions: ["pfa", "pfb", "pfm", "afm"]
      },
      "application/x-font-vfont": {
        source: "apache"
      },
      "application/x-freearc": {
        source: "apache",
        extensions: ["arc"]
      },
      "application/x-futuresplash": {
        source: "apache",
        extensions: ["spl"]
      },
      "application/x-gca-compressed": {
        source: "apache",
        extensions: ["gca"]
      },
      "application/x-glulx": {
        source: "apache",
        extensions: ["ulx"]
      },
      "application/x-gnumeric": {
        source: "apache",
        extensions: ["gnumeric"]
      },
      "application/x-gramps-xml": {
        source: "apache",
        extensions: ["gramps"]
      },
      "application/x-gtar": {
        source: "apache",
        extensions: ["gtar"]
      },
      "application/x-gzip": {
        source: "apache"
      },
      "application/x-hdf": {
        source: "apache",
        extensions: ["hdf"]
      },
      "application/x-httpd-php": {
        compressible: true,
        extensions: ["php"]
      },
      "application/x-install-instructions": {
        source: "apache",
        extensions: ["install"]
      },
      "application/x-iso9660-image": {
        source: "apache",
        extensions: ["iso"]
      },
      "application/x-iwork-keynote-sffkey": {
        extensions: ["key"]
      },
      "application/x-iwork-numbers-sffnumbers": {
        extensions: ["numbers"]
      },
      "application/x-iwork-pages-sffpages": {
        extensions: ["pages"]
      },
      "application/x-java-archive-diff": {
        source: "nginx",
        extensions: ["jardiff"]
      },
      "application/x-java-jnlp-file": {
        source: "apache",
        compressible: false,
        extensions: ["jnlp"]
      },
      "application/x-javascript": {
        compressible: true
      },
      "application/x-keepass2": {
        extensions: ["kdbx"]
      },
      "application/x-latex": {
        source: "apache",
        compressible: false,
        extensions: ["latex"]
      },
      "application/x-lua-bytecode": {
        extensions: ["luac"]
      },
      "application/x-lzh-compressed": {
        source: "apache",
        extensions: ["lzh", "lha"]
      },
      "application/x-makeself": {
        source: "nginx",
        extensions: ["run"]
      },
      "application/x-mie": {
        source: "apache",
        extensions: ["mie"]
      },
      "application/x-mobipocket-ebook": {
        source: "apache",
        extensions: ["prc", "mobi"]
      },
      "application/x-mpegurl": {
        compressible: false
      },
      "application/x-ms-application": {
        source: "apache",
        extensions: ["application"]
      },
      "application/x-ms-shortcut": {
        source: "apache",
        extensions: ["lnk"]
      },
      "application/x-ms-wmd": {
        source: "apache",
        extensions: ["wmd"]
      },
      "application/x-ms-wmz": {
        source: "apache",
        extensions: ["wmz"]
      },
      "application/x-ms-xbap": {
        source: "apache",
        extensions: ["xbap"]
      },
      "application/x-msaccess": {
        source: "apache",
        extensions: ["mdb"]
      },
      "application/x-msbinder": {
        source: "apache",
        extensions: ["obd"]
      },
      "application/x-mscardfile": {
        source: "apache",
        extensions: ["crd"]
      },
      "application/x-msclip": {
        source: "apache",
        extensions: ["clp"]
      },
      "application/x-msdos-program": {
        extensions: ["exe"]
      },
      "application/x-msdownload": {
        source: "apache",
        extensions: ["exe", "dll", "com", "bat", "msi"]
      },
      "application/x-msmediaview": {
        source: "apache",
        extensions: ["mvb", "m13", "m14"]
      },
      "application/x-msmetafile": {
        source: "apache",
        extensions: ["wmf", "wmz", "emf", "emz"]
      },
      "application/x-msmoney": {
        source: "apache",
        extensions: ["mny"]
      },
      "application/x-mspublisher": {
        source: "apache",
        extensions: ["pub"]
      },
      "application/x-msschedule": {
        source: "apache",
        extensions: ["scd"]
      },
      "application/x-msterminal": {
        source: "apache",
        extensions: ["trm"]
      },
      "application/x-mswrite": {
        source: "apache",
        extensions: ["wri"]
      },
      "application/x-netcdf": {
        source: "apache",
        extensions: ["nc", "cdf"]
      },
      "application/x-ns-proxy-autoconfig": {
        compressible: true,
        extensions: ["pac"]
      },
      "application/x-nzb": {
        source: "apache",
        extensions: ["nzb"]
      },
      "application/x-perl": {
        source: "nginx",
        extensions: ["pl", "pm"]
      },
      "application/x-pilot": {
        source: "nginx",
        extensions: ["prc", "pdb"]
      },
      "application/x-pkcs12": {
        source: "apache",
        compressible: false,
        extensions: ["p12", "pfx"]
      },
      "application/x-pkcs7-certificates": {
        source: "apache",
        extensions: ["p7b", "spc"]
      },
      "application/x-pkcs7-certreqresp": {
        source: "apache",
        extensions: ["p7r"]
      },
      "application/x-pki-message": {
        source: "iana"
      },
      "application/x-rar-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["rar"]
      },
      "application/x-redhat-package-manager": {
        source: "nginx",
        extensions: ["rpm"]
      },
      "application/x-research-info-systems": {
        source: "apache",
        extensions: ["ris"]
      },
      "application/x-sea": {
        source: "nginx",
        extensions: ["sea"]
      },
      "application/x-sh": {
        source: "apache",
        compressible: true,
        extensions: ["sh"]
      },
      "application/x-shar": {
        source: "apache",
        extensions: ["shar"]
      },
      "application/x-shockwave-flash": {
        source: "apache",
        compressible: false,
        extensions: ["swf"]
      },
      "application/x-silverlight-app": {
        source: "apache",
        extensions: ["xap"]
      },
      "application/x-sql": {
        source: "apache",
        extensions: ["sql"]
      },
      "application/x-stuffit": {
        source: "apache",
        compressible: false,
        extensions: ["sit"]
      },
      "application/x-stuffitx": {
        source: "apache",
        extensions: ["sitx"]
      },
      "application/x-subrip": {
        source: "apache",
        extensions: ["srt"]
      },
      "application/x-sv4cpio": {
        source: "apache",
        extensions: ["sv4cpio"]
      },
      "application/x-sv4crc": {
        source: "apache",
        extensions: ["sv4crc"]
      },
      "application/x-t3vm-image": {
        source: "apache",
        extensions: ["t3"]
      },
      "application/x-tads": {
        source: "apache",
        extensions: ["gam"]
      },
      "application/x-tar": {
        source: "apache",
        compressible: true,
        extensions: ["tar"]
      },
      "application/x-tcl": {
        source: "apache",
        extensions: ["tcl", "tk"]
      },
      "application/x-tex": {
        source: "apache",
        extensions: ["tex"]
      },
      "application/x-tex-tfm": {
        source: "apache",
        extensions: ["tfm"]
      },
      "application/x-texinfo": {
        source: "apache",
        extensions: ["texinfo", "texi"]
      },
      "application/x-tgif": {
        source: "apache",
        extensions: ["obj"]
      },
      "application/x-ustar": {
        source: "apache",
        extensions: ["ustar"]
      },
      "application/x-virtualbox-hdd": {
        compressible: true,
        extensions: ["hdd"]
      },
      "application/x-virtualbox-ova": {
        compressible: true,
        extensions: ["ova"]
      },
      "application/x-virtualbox-ovf": {
        compressible: true,
        extensions: ["ovf"]
      },
      "application/x-virtualbox-vbox": {
        compressible: true,
        extensions: ["vbox"]
      },
      "application/x-virtualbox-vbox-extpack": {
        compressible: false,
        extensions: ["vbox-extpack"]
      },
      "application/x-virtualbox-vdi": {
        compressible: true,
        extensions: ["vdi"]
      },
      "application/x-virtualbox-vhd": {
        compressible: true,
        extensions: ["vhd"]
      },
      "application/x-virtualbox-vmdk": {
        compressible: true,
        extensions: ["vmdk"]
      },
      "application/x-wais-source": {
        source: "apache",
        extensions: ["src"]
      },
      "application/x-web-app-manifest+json": {
        compressible: true,
        extensions: ["webapp"]
      },
      "application/x-www-form-urlencoded": {
        source: "iana",
        compressible: true
      },
      "application/x-x509-ca-cert": {
        source: "iana",
        extensions: ["der", "crt", "pem"]
      },
      "application/x-x509-ca-ra-cert": {
        source: "iana"
      },
      "application/x-x509-next-ca-cert": {
        source: "iana"
      },
      "application/x-xfig": {
        source: "apache",
        extensions: ["fig"]
      },
      "application/x-xliff+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/x-xpinstall": {
        source: "apache",
        compressible: false,
        extensions: ["xpi"]
      },
      "application/x-xz": {
        source: "apache",
        extensions: ["xz"]
      },
      "application/x-zmachine": {
        source: "apache",
        extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
      },
      "application/x400-bp": {
        source: "iana"
      },
      "application/xacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/xaml+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xaml"]
      },
      "application/xcap-att+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xav"]
      },
      "application/xcap-caps+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xca"]
      },
      "application/xcap-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdf"]
      },
      "application/xcap-el+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xel"]
      },
      "application/xcap-error+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-ns+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xns"]
      },
      "application/xcon-conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcon-conference-info-diff+xml": {
        source: "iana",
        compressible: true
      },
      "application/xenc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xenc"]
      },
      "application/xhtml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xhtml", "xht"]
      },
      "application/xhtml-voice+xml": {
        source: "apache",
        compressible: true
      },
      "application/xliff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml", "xsl", "xsd", "rng"]
      },
      "application/xml-dtd": {
        source: "iana",
        compressible: true,
        extensions: ["dtd"]
      },
      "application/xml-external-parsed-entity": {
        source: "iana"
      },
      "application/xml-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/xmpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/xop+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xop"]
      },
      "application/xproc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xpl"]
      },
      "application/xslt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xsl", "xslt"]
      },
      "application/xspf+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xspf"]
      },
      "application/xv+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mxml", "xhvml", "xvml", "xvm"]
      },
      "application/yang": {
        source: "iana",
        extensions: ["yang"]
      },
      "application/yang-data+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-data+xml": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/yin+xml": {
        source: "iana",
        compressible: true,
        extensions: ["yin"]
      },
      "application/zip": {
        source: "iana",
        compressible: false,
        extensions: ["zip"]
      },
      "application/zlib": {
        source: "iana"
      },
      "application/zstd": {
        source: "iana"
      },
      "audio/1d-interleaved-parityfec": {
        source: "iana"
      },
      "audio/32kadpcm": {
        source: "iana"
      },
      "audio/3gpp": {
        source: "iana",
        compressible: false,
        extensions: ["3gpp"]
      },
      "audio/3gpp2": {
        source: "iana"
      },
      "audio/aac": {
        source: "iana"
      },
      "audio/ac3": {
        source: "iana"
      },
      "audio/adpcm": {
        source: "apache",
        extensions: ["adp"]
      },
      "audio/amr": {
        source: "iana",
        extensions: ["amr"]
      },
      "audio/amr-wb": {
        source: "iana"
      },
      "audio/amr-wb+": {
        source: "iana"
      },
      "audio/aptx": {
        source: "iana"
      },
      "audio/asc": {
        source: "iana"
      },
      "audio/atrac-advanced-lossless": {
        source: "iana"
      },
      "audio/atrac-x": {
        source: "iana"
      },
      "audio/atrac3": {
        source: "iana"
      },
      "audio/basic": {
        source: "iana",
        compressible: false,
        extensions: ["au", "snd"]
      },
      "audio/bv16": {
        source: "iana"
      },
      "audio/bv32": {
        source: "iana"
      },
      "audio/clearmode": {
        source: "iana"
      },
      "audio/cn": {
        source: "iana"
      },
      "audio/dat12": {
        source: "iana"
      },
      "audio/dls": {
        source: "iana"
      },
      "audio/dsr-es201108": {
        source: "iana"
      },
      "audio/dsr-es202050": {
        source: "iana"
      },
      "audio/dsr-es202211": {
        source: "iana"
      },
      "audio/dsr-es202212": {
        source: "iana"
      },
      "audio/dv": {
        source: "iana"
      },
      "audio/dvi4": {
        source: "iana"
      },
      "audio/eac3": {
        source: "iana"
      },
      "audio/encaprtp": {
        source: "iana"
      },
      "audio/evrc": {
        source: "iana"
      },
      "audio/evrc-qcp": {
        source: "iana"
      },
      "audio/evrc0": {
        source: "iana"
      },
      "audio/evrc1": {
        source: "iana"
      },
      "audio/evrcb": {
        source: "iana"
      },
      "audio/evrcb0": {
        source: "iana"
      },
      "audio/evrcb1": {
        source: "iana"
      },
      "audio/evrcnw": {
        source: "iana"
      },
      "audio/evrcnw0": {
        source: "iana"
      },
      "audio/evrcnw1": {
        source: "iana"
      },
      "audio/evrcwb": {
        source: "iana"
      },
      "audio/evrcwb0": {
        source: "iana"
      },
      "audio/evrcwb1": {
        source: "iana"
      },
      "audio/evs": {
        source: "iana"
      },
      "audio/flexfec": {
        source: "iana"
      },
      "audio/fwdred": {
        source: "iana"
      },
      "audio/g711-0": {
        source: "iana"
      },
      "audio/g719": {
        source: "iana"
      },
      "audio/g722": {
        source: "iana"
      },
      "audio/g7221": {
        source: "iana"
      },
      "audio/g723": {
        source: "iana"
      },
      "audio/g726-16": {
        source: "iana"
      },
      "audio/g726-24": {
        source: "iana"
      },
      "audio/g726-32": {
        source: "iana"
      },
      "audio/g726-40": {
        source: "iana"
      },
      "audio/g728": {
        source: "iana"
      },
      "audio/g729": {
        source: "iana"
      },
      "audio/g7291": {
        source: "iana"
      },
      "audio/g729d": {
        source: "iana"
      },
      "audio/g729e": {
        source: "iana"
      },
      "audio/gsm": {
        source: "iana"
      },
      "audio/gsm-efr": {
        source: "iana"
      },
      "audio/gsm-hr-08": {
        source: "iana"
      },
      "audio/ilbc": {
        source: "iana"
      },
      "audio/ip-mr_v2.5": {
        source: "iana"
      },
      "audio/isac": {
        source: "apache"
      },
      "audio/l16": {
        source: "iana"
      },
      "audio/l20": {
        source: "iana"
      },
      "audio/l24": {
        source: "iana",
        compressible: false
      },
      "audio/l8": {
        source: "iana"
      },
      "audio/lpc": {
        source: "iana"
      },
      "audio/melp": {
        source: "iana"
      },
      "audio/melp1200": {
        source: "iana"
      },
      "audio/melp2400": {
        source: "iana"
      },
      "audio/melp600": {
        source: "iana"
      },
      "audio/mhas": {
        source: "iana"
      },
      "audio/midi": {
        source: "apache",
        extensions: ["mid", "midi", "kar", "rmi"]
      },
      "audio/mobile-xmf": {
        source: "iana",
        extensions: ["mxmf"]
      },
      "audio/mp3": {
        compressible: false,
        extensions: ["mp3"]
      },
      "audio/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["m4a", "mp4a"]
      },
      "audio/mp4a-latm": {
        source: "iana"
      },
      "audio/mpa": {
        source: "iana"
      },
      "audio/mpa-robust": {
        source: "iana"
      },
      "audio/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
      },
      "audio/mpeg4-generic": {
        source: "iana"
      },
      "audio/musepack": {
        source: "apache"
      },
      "audio/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["oga", "ogg", "spx", "opus"]
      },
      "audio/opus": {
        source: "iana"
      },
      "audio/parityfec": {
        source: "iana"
      },
      "audio/pcma": {
        source: "iana"
      },
      "audio/pcma-wb": {
        source: "iana"
      },
      "audio/pcmu": {
        source: "iana"
      },
      "audio/pcmu-wb": {
        source: "iana"
      },
      "audio/prs.sid": {
        source: "iana"
      },
      "audio/qcelp": {
        source: "iana"
      },
      "audio/raptorfec": {
        source: "iana"
      },
      "audio/red": {
        source: "iana"
      },
      "audio/rtp-enc-aescm128": {
        source: "iana"
      },
      "audio/rtp-midi": {
        source: "iana"
      },
      "audio/rtploopback": {
        source: "iana"
      },
      "audio/rtx": {
        source: "iana"
      },
      "audio/s3m": {
        source: "apache",
        extensions: ["s3m"]
      },
      "audio/scip": {
        source: "iana"
      },
      "audio/silk": {
        source: "apache",
        extensions: ["sil"]
      },
      "audio/smv": {
        source: "iana"
      },
      "audio/smv-qcp": {
        source: "iana"
      },
      "audio/smv0": {
        source: "iana"
      },
      "audio/sofa": {
        source: "iana"
      },
      "audio/sp-midi": {
        source: "iana"
      },
      "audio/speex": {
        source: "iana"
      },
      "audio/t140c": {
        source: "iana"
      },
      "audio/t38": {
        source: "iana"
      },
      "audio/telephone-event": {
        source: "iana"
      },
      "audio/tetra_acelp": {
        source: "iana"
      },
      "audio/tetra_acelp_bb": {
        source: "iana"
      },
      "audio/tone": {
        source: "iana"
      },
      "audio/tsvcis": {
        source: "iana"
      },
      "audio/uemclip": {
        source: "iana"
      },
      "audio/ulpfec": {
        source: "iana"
      },
      "audio/usac": {
        source: "iana"
      },
      "audio/vdvi": {
        source: "iana"
      },
      "audio/vmr-wb": {
        source: "iana"
      },
      "audio/vnd.3gpp.iufp": {
        source: "iana"
      },
      "audio/vnd.4sb": {
        source: "iana"
      },
      "audio/vnd.audiokoz": {
        source: "iana"
      },
      "audio/vnd.celp": {
        source: "iana"
      },
      "audio/vnd.cisco.nse": {
        source: "iana"
      },
      "audio/vnd.cmles.radio-events": {
        source: "iana"
      },
      "audio/vnd.cns.anp1": {
        source: "iana"
      },
      "audio/vnd.cns.inf1": {
        source: "iana"
      },
      "audio/vnd.dece.audio": {
        source: "iana",
        extensions: ["uva", "uvva"]
      },
      "audio/vnd.digital-winds": {
        source: "iana",
        extensions: ["eol"]
      },
      "audio/vnd.dlna.adts": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.1": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.2": {
        source: "iana"
      },
      "audio/vnd.dolby.mlp": {
        source: "iana"
      },
      "audio/vnd.dolby.mps": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2x": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2z": {
        source: "iana"
      },
      "audio/vnd.dolby.pulse.1": {
        source: "iana"
      },
      "audio/vnd.dra": {
        source: "iana",
        extensions: ["dra"]
      },
      "audio/vnd.dts": {
        source: "iana",
        extensions: ["dts"]
      },
      "audio/vnd.dts.hd": {
        source: "iana",
        extensions: ["dtshd"]
      },
      "audio/vnd.dts.uhd": {
        source: "iana"
      },
      "audio/vnd.dvb.file": {
        source: "iana"
      },
      "audio/vnd.everad.plj": {
        source: "iana"
      },
      "audio/vnd.hns.audio": {
        source: "iana"
      },
      "audio/vnd.lucent.voice": {
        source: "iana",
        extensions: ["lvp"]
      },
      "audio/vnd.ms-playready.media.pya": {
        source: "iana",
        extensions: ["pya"]
      },
      "audio/vnd.nokia.mobile-xmf": {
        source: "iana"
      },
      "audio/vnd.nortel.vbk": {
        source: "iana"
      },
      "audio/vnd.nuera.ecelp4800": {
        source: "iana",
        extensions: ["ecelp4800"]
      },
      "audio/vnd.nuera.ecelp7470": {
        source: "iana",
        extensions: ["ecelp7470"]
      },
      "audio/vnd.nuera.ecelp9600": {
        source: "iana",
        extensions: ["ecelp9600"]
      },
      "audio/vnd.octel.sbc": {
        source: "iana"
      },
      "audio/vnd.presonus.multitrack": {
        source: "iana"
      },
      "audio/vnd.qcelp": {
        source: "iana"
      },
      "audio/vnd.rhetorex.32kadpcm": {
        source: "iana"
      },
      "audio/vnd.rip": {
        source: "iana",
        extensions: ["rip"]
      },
      "audio/vnd.rn-realaudio": {
        compressible: false
      },
      "audio/vnd.sealedmedia.softseal.mpeg": {
        source: "iana"
      },
      "audio/vnd.vmx.cvsd": {
        source: "iana"
      },
      "audio/vnd.wave": {
        compressible: false
      },
      "audio/vorbis": {
        source: "iana",
        compressible: false
      },
      "audio/vorbis-config": {
        source: "iana"
      },
      "audio/wav": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/wave": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/webm": {
        source: "apache",
        compressible: false,
        extensions: ["weba"]
      },
      "audio/x-aac": {
        source: "apache",
        compressible: false,
        extensions: ["aac"]
      },
      "audio/x-aiff": {
        source: "apache",
        extensions: ["aif", "aiff", "aifc"]
      },
      "audio/x-caf": {
        source: "apache",
        compressible: false,
        extensions: ["caf"]
      },
      "audio/x-flac": {
        source: "apache",
        extensions: ["flac"]
      },
      "audio/x-m4a": {
        source: "nginx",
        extensions: ["m4a"]
      },
      "audio/x-matroska": {
        source: "apache",
        extensions: ["mka"]
      },
      "audio/x-mpegurl": {
        source: "apache",
        extensions: ["m3u"]
      },
      "audio/x-ms-wax": {
        source: "apache",
        extensions: ["wax"]
      },
      "audio/x-ms-wma": {
        source: "apache",
        extensions: ["wma"]
      },
      "audio/x-pn-realaudio": {
        source: "apache",
        extensions: ["ram", "ra"]
      },
      "audio/x-pn-realaudio-plugin": {
        source: "apache",
        extensions: ["rmp"]
      },
      "audio/x-realaudio": {
        source: "nginx",
        extensions: ["ra"]
      },
      "audio/x-tta": {
        source: "apache"
      },
      "audio/x-wav": {
        source: "apache",
        extensions: ["wav"]
      },
      "audio/xm": {
        source: "apache",
        extensions: ["xm"]
      },
      "chemical/x-cdx": {
        source: "apache",
        extensions: ["cdx"]
      },
      "chemical/x-cif": {
        source: "apache",
        extensions: ["cif"]
      },
      "chemical/x-cmdf": {
        source: "apache",
        extensions: ["cmdf"]
      },
      "chemical/x-cml": {
        source: "apache",
        extensions: ["cml"]
      },
      "chemical/x-csml": {
        source: "apache",
        extensions: ["csml"]
      },
      "chemical/x-pdb": {
        source: "apache"
      },
      "chemical/x-xyz": {
        source: "apache",
        extensions: ["xyz"]
      },
      "font/collection": {
        source: "iana",
        extensions: ["ttc"]
      },
      "font/otf": {
        source: "iana",
        compressible: true,
        extensions: ["otf"]
      },
      "font/sfnt": {
        source: "iana"
      },
      "font/ttf": {
        source: "iana",
        compressible: true,
        extensions: ["ttf"]
      },
      "font/woff": {
        source: "iana",
        extensions: ["woff"]
      },
      "font/woff2": {
        source: "iana",
        extensions: ["woff2"]
      },
      "image/aces": {
        source: "iana",
        extensions: ["exr"]
      },
      "image/apng": {
        compressible: false,
        extensions: ["apng"]
      },
      "image/avci": {
        source: "iana",
        extensions: ["avci"]
      },
      "image/avcs": {
        source: "iana",
        extensions: ["avcs"]
      },
      "image/avif": {
        source: "iana",
        compressible: false,
        extensions: ["avif"]
      },
      "image/bmp": {
        source: "iana",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/cgm": {
        source: "iana",
        extensions: ["cgm"]
      },
      "image/dicom-rle": {
        source: "iana",
        extensions: ["drle"]
      },
      "image/emf": {
        source: "iana",
        extensions: ["emf"]
      },
      "image/fits": {
        source: "iana",
        extensions: ["fits"]
      },
      "image/g3fax": {
        source: "iana",
        extensions: ["g3"]
      },
      "image/gif": {
        source: "iana",
        compressible: false,
        extensions: ["gif"]
      },
      "image/heic": {
        source: "iana",
        extensions: ["heic"]
      },
      "image/heic-sequence": {
        source: "iana",
        extensions: ["heics"]
      },
      "image/heif": {
        source: "iana",
        extensions: ["heif"]
      },
      "image/heif-sequence": {
        source: "iana",
        extensions: ["heifs"]
      },
      "image/hej2k": {
        source: "iana",
        extensions: ["hej2"]
      },
      "image/hsj2": {
        source: "iana",
        extensions: ["hsj2"]
      },
      "image/ief": {
        source: "iana",
        extensions: ["ief"]
      },
      "image/jls": {
        source: "iana",
        extensions: ["jls"]
      },
      "image/jp2": {
        source: "iana",
        compressible: false,
        extensions: ["jp2", "jpg2"]
      },
      "image/jpeg": {
        source: "iana",
        compressible: false,
        extensions: ["jpeg", "jpg", "jpe"]
      },
      "image/jph": {
        source: "iana",
        extensions: ["jph"]
      },
      "image/jphc": {
        source: "iana",
        extensions: ["jhc"]
      },
      "image/jpm": {
        source: "iana",
        compressible: false,
        extensions: ["jpm"]
      },
      "image/jpx": {
        source: "iana",
        compressible: false,
        extensions: ["jpx", "jpf"]
      },
      "image/jxr": {
        source: "iana",
        extensions: ["jxr"]
      },
      "image/jxra": {
        source: "iana",
        extensions: ["jxra"]
      },
      "image/jxrs": {
        source: "iana",
        extensions: ["jxrs"]
      },
      "image/jxs": {
        source: "iana",
        extensions: ["jxs"]
      },
      "image/jxsc": {
        source: "iana",
        extensions: ["jxsc"]
      },
      "image/jxsi": {
        source: "iana",
        extensions: ["jxsi"]
      },
      "image/jxss": {
        source: "iana",
        extensions: ["jxss"]
      },
      "image/ktx": {
        source: "iana",
        extensions: ["ktx"]
      },
      "image/ktx2": {
        source: "iana",
        extensions: ["ktx2"]
      },
      "image/naplps": {
        source: "iana"
      },
      "image/pjpeg": {
        compressible: false
      },
      "image/png": {
        source: "iana",
        compressible: false,
        extensions: ["png"]
      },
      "image/prs.btif": {
        source: "iana",
        extensions: ["btif"]
      },
      "image/prs.pti": {
        source: "iana",
        extensions: ["pti"]
      },
      "image/pwg-raster": {
        source: "iana"
      },
      "image/sgi": {
        source: "apache",
        extensions: ["sgi"]
      },
      "image/svg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["svg", "svgz"]
      },
      "image/t38": {
        source: "iana",
        extensions: ["t38"]
      },
      "image/tiff": {
        source: "iana",
        compressible: false,
        extensions: ["tif", "tiff"]
      },
      "image/tiff-fx": {
        source: "iana",
        extensions: ["tfx"]
      },
      "image/vnd.adobe.photoshop": {
        source: "iana",
        compressible: true,
        extensions: ["psd"]
      },
      "image/vnd.airzip.accelerator.azv": {
        source: "iana",
        extensions: ["azv"]
      },
      "image/vnd.cns.inf2": {
        source: "iana"
      },
      "image/vnd.dece.graphic": {
        source: "iana",
        extensions: ["uvi", "uvvi", "uvg", "uvvg"]
      },
      "image/vnd.djvu": {
        source: "iana",
        extensions: ["djvu", "djv"]
      },
      "image/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "image/vnd.dwg": {
        source: "iana",
        extensions: ["dwg"]
      },
      "image/vnd.dxf": {
        source: "iana",
        extensions: ["dxf"]
      },
      "image/vnd.fastbidsheet": {
        source: "iana",
        extensions: ["fbs"]
      },
      "image/vnd.fpx": {
        source: "iana",
        extensions: ["fpx"]
      },
      "image/vnd.fst": {
        source: "iana",
        extensions: ["fst"]
      },
      "image/vnd.fujixerox.edmics-mmr": {
        source: "iana",
        extensions: ["mmr"]
      },
      "image/vnd.fujixerox.edmics-rlc": {
        source: "iana",
        extensions: ["rlc"]
      },
      "image/vnd.globalgraphics.pgb": {
        source: "iana"
      },
      "image/vnd.microsoft.icon": {
        source: "iana",
        compressible: true,
        extensions: ["ico"]
      },
      "image/vnd.mix": {
        source: "iana"
      },
      "image/vnd.mozilla.apng": {
        source: "iana"
      },
      "image/vnd.ms-dds": {
        compressible: true,
        extensions: ["dds"]
      },
      "image/vnd.ms-modi": {
        source: "iana",
        extensions: ["mdi"]
      },
      "image/vnd.ms-photo": {
        source: "apache",
        extensions: ["wdp"]
      },
      "image/vnd.net-fpx": {
        source: "iana",
        extensions: ["npx"]
      },
      "image/vnd.pco.b16": {
        source: "iana",
        extensions: ["b16"]
      },
      "image/vnd.radiance": {
        source: "iana"
      },
      "image/vnd.sealed.png": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.gif": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.jpg": {
        source: "iana"
      },
      "image/vnd.svf": {
        source: "iana"
      },
      "image/vnd.tencent.tap": {
        source: "iana",
        extensions: ["tap"]
      },
      "image/vnd.valve.source.texture": {
        source: "iana",
        extensions: ["vtf"]
      },
      "image/vnd.wap.wbmp": {
        source: "iana",
        extensions: ["wbmp"]
      },
      "image/vnd.xiff": {
        source: "iana",
        extensions: ["xif"]
      },
      "image/vnd.zbrush.pcx": {
        source: "iana",
        extensions: ["pcx"]
      },
      "image/webp": {
        source: "apache",
        extensions: ["webp"]
      },
      "image/wmf": {
        source: "iana",
        extensions: ["wmf"]
      },
      "image/x-3ds": {
        source: "apache",
        extensions: ["3ds"]
      },
      "image/x-cmu-raster": {
        source: "apache",
        extensions: ["ras"]
      },
      "image/x-cmx": {
        source: "apache",
        extensions: ["cmx"]
      },
      "image/x-freehand": {
        source: "apache",
        extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
      },
      "image/x-icon": {
        source: "apache",
        compressible: true,
        extensions: ["ico"]
      },
      "image/x-jng": {
        source: "nginx",
        extensions: ["jng"]
      },
      "image/x-mrsid-image": {
        source: "apache",
        extensions: ["sid"]
      },
      "image/x-ms-bmp": {
        source: "nginx",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/x-pcx": {
        source: "apache",
        extensions: ["pcx"]
      },
      "image/x-pict": {
        source: "apache",
        extensions: ["pic", "pct"]
      },
      "image/x-portable-anymap": {
        source: "apache",
        extensions: ["pnm"]
      },
      "image/x-portable-bitmap": {
        source: "apache",
        extensions: ["pbm"]
      },
      "image/x-portable-graymap": {
        source: "apache",
        extensions: ["pgm"]
      },
      "image/x-portable-pixmap": {
        source: "apache",
        extensions: ["ppm"]
      },
      "image/x-rgb": {
        source: "apache",
        extensions: ["rgb"]
      },
      "image/x-tga": {
        source: "apache",
        extensions: ["tga"]
      },
      "image/x-xbitmap": {
        source: "apache",
        extensions: ["xbm"]
      },
      "image/x-xcf": {
        compressible: false
      },
      "image/x-xpixmap": {
        source: "apache",
        extensions: ["xpm"]
      },
      "image/x-xwindowdump": {
        source: "apache",
        extensions: ["xwd"]
      },
      "message/cpim": {
        source: "iana"
      },
      "message/delivery-status": {
        source: "iana"
      },
      "message/disposition-notification": {
        source: "iana",
        extensions: ["disposition-notification"]
      },
      "message/external-body": {
        source: "iana"
      },
      "message/feedback-report": {
        source: "iana"
      },
      "message/global": {
        source: "iana",
        extensions: ["u8msg"]
      },
      "message/global-delivery-status": {
        source: "iana",
        extensions: ["u8dsn"]
      },
      "message/global-disposition-notification": {
        source: "iana",
        extensions: ["u8mdn"]
      },
      "message/global-headers": {
        source: "iana",
        extensions: ["u8hdr"]
      },
      "message/http": {
        source: "iana",
        compressible: false
      },
      "message/imdn+xml": {
        source: "iana",
        compressible: true
      },
      "message/news": {
        source: "iana"
      },
      "message/partial": {
        source: "iana",
        compressible: false
      },
      "message/rfc822": {
        source: "iana",
        compressible: true,
        extensions: ["eml", "mime"]
      },
      "message/s-http": {
        source: "iana"
      },
      "message/sip": {
        source: "iana"
      },
      "message/sipfrag": {
        source: "iana"
      },
      "message/tracking-status": {
        source: "iana"
      },
      "message/vnd.si.simp": {
        source: "iana"
      },
      "message/vnd.wfa.wsc": {
        source: "iana",
        extensions: ["wsc"]
      },
      "model/3mf": {
        source: "iana",
        extensions: ["3mf"]
      },
      "model/e57": {
        source: "iana"
      },
      "model/gltf+json": {
        source: "iana",
        compressible: true,
        extensions: ["gltf"]
      },
      "model/gltf-binary": {
        source: "iana",
        compressible: true,
        extensions: ["glb"]
      },
      "model/iges": {
        source: "iana",
        compressible: false,
        extensions: ["igs", "iges"]
      },
      "model/mesh": {
        source: "iana",
        compressible: false,
        extensions: ["msh", "mesh", "silo"]
      },
      "model/mtl": {
        source: "iana",
        extensions: ["mtl"]
      },
      "model/obj": {
        source: "iana",
        extensions: ["obj"]
      },
      "model/step": {
        source: "iana"
      },
      "model/step+xml": {
        source: "iana",
        compressible: true,
        extensions: ["stpx"]
      },
      "model/step+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpz"]
      },
      "model/step-xml+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpxz"]
      },
      "model/stl": {
        source: "iana",
        extensions: ["stl"]
      },
      "model/vnd.collada+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dae"]
      },
      "model/vnd.dwf": {
        source: "iana",
        extensions: ["dwf"]
      },
      "model/vnd.flatland.3dml": {
        source: "iana"
      },
      "model/vnd.gdl": {
        source: "iana",
        extensions: ["gdl"]
      },
      "model/vnd.gs-gdl": {
        source: "apache"
      },
      "model/vnd.gs.gdl": {
        source: "iana"
      },
      "model/vnd.gtw": {
        source: "iana",
        extensions: ["gtw"]
      },
      "model/vnd.moml+xml": {
        source: "iana",
        compressible: true
      },
      "model/vnd.mts": {
        source: "iana",
        extensions: ["mts"]
      },
      "model/vnd.opengex": {
        source: "iana",
        extensions: ["ogex"]
      },
      "model/vnd.parasolid.transmit.binary": {
        source: "iana",
        extensions: ["x_b"]
      },
      "model/vnd.parasolid.transmit.text": {
        source: "iana",
        extensions: ["x_t"]
      },
      "model/vnd.pytha.pyox": {
        source: "iana"
      },
      "model/vnd.rosette.annotated-data-model": {
        source: "iana"
      },
      "model/vnd.sap.vds": {
        source: "iana",
        extensions: ["vds"]
      },
      "model/vnd.usdz+zip": {
        source: "iana",
        compressible: false,
        extensions: ["usdz"]
      },
      "model/vnd.valve.source.compiled-map": {
        source: "iana",
        extensions: ["bsp"]
      },
      "model/vnd.vtu": {
        source: "iana",
        extensions: ["vtu"]
      },
      "model/vrml": {
        source: "iana",
        compressible: false,
        extensions: ["wrl", "vrml"]
      },
      "model/x3d+binary": {
        source: "apache",
        compressible: false,
        extensions: ["x3db", "x3dbz"]
      },
      "model/x3d+fastinfoset": {
        source: "iana",
        extensions: ["x3db"]
      },
      "model/x3d+vrml": {
        source: "apache",
        compressible: false,
        extensions: ["x3dv", "x3dvz"]
      },
      "model/x3d+xml": {
        source: "iana",
        compressible: true,
        extensions: ["x3d", "x3dz"]
      },
      "model/x3d-vrml": {
        source: "iana",
        extensions: ["x3dv"]
      },
      "multipart/alternative": {
        source: "iana",
        compressible: false
      },
      "multipart/appledouble": {
        source: "iana"
      },
      "multipart/byteranges": {
        source: "iana"
      },
      "multipart/digest": {
        source: "iana"
      },
      "multipart/encrypted": {
        source: "iana",
        compressible: false
      },
      "multipart/form-data": {
        source: "iana",
        compressible: false
      },
      "multipart/header-set": {
        source: "iana"
      },
      "multipart/mixed": {
        source: "iana"
      },
      "multipart/multilingual": {
        source: "iana"
      },
      "multipart/parallel": {
        source: "iana"
      },
      "multipart/related": {
        source: "iana",
        compressible: false
      },
      "multipart/report": {
        source: "iana"
      },
      "multipart/signed": {
        source: "iana",
        compressible: false
      },
      "multipart/vnd.bint.med-plus": {
        source: "iana"
      },
      "multipart/voice-message": {
        source: "iana"
      },
      "multipart/x-mixed-replace": {
        source: "iana"
      },
      "text/1d-interleaved-parityfec": {
        source: "iana"
      },
      "text/cache-manifest": {
        source: "iana",
        compressible: true,
        extensions: ["appcache", "manifest"]
      },
      "text/calendar": {
        source: "iana",
        extensions: ["ics", "ifb"]
      },
      "text/calender": {
        compressible: true
      },
      "text/cmd": {
        compressible: true
      },
      "text/coffeescript": {
        extensions: ["coffee", "litcoffee"]
      },
      "text/cql": {
        source: "iana"
      },
      "text/cql-expression": {
        source: "iana"
      },
      "text/cql-identifier": {
        source: "iana"
      },
      "text/css": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["css"]
      },
      "text/csv": {
        source: "iana",
        compressible: true,
        extensions: ["csv"]
      },
      "text/csv-schema": {
        source: "iana"
      },
      "text/directory": {
        source: "iana"
      },
      "text/dns": {
        source: "iana"
      },
      "text/ecmascript": {
        source: "iana"
      },
      "text/encaprtp": {
        source: "iana"
      },
      "text/enriched": {
        source: "iana"
      },
      "text/fhirpath": {
        source: "iana"
      },
      "text/flexfec": {
        source: "iana"
      },
      "text/fwdred": {
        source: "iana"
      },
      "text/gff3": {
        source: "iana"
      },
      "text/grammar-ref-list": {
        source: "iana"
      },
      "text/html": {
        source: "iana",
        compressible: true,
        extensions: ["html", "htm", "shtml"]
      },
      "text/jade": {
        extensions: ["jade"]
      },
      "text/javascript": {
        source: "iana",
        compressible: true
      },
      "text/jcr-cnd": {
        source: "iana"
      },
      "text/jsx": {
        compressible: true,
        extensions: ["jsx"]
      },
      "text/less": {
        compressible: true,
        extensions: ["less"]
      },
      "text/markdown": {
        source: "iana",
        compressible: true,
        extensions: ["markdown", "md"]
      },
      "text/mathml": {
        source: "nginx",
        extensions: ["mml"]
      },
      "text/mdx": {
        compressible: true,
        extensions: ["mdx"]
      },
      "text/mizar": {
        source: "iana"
      },
      "text/n3": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["n3"]
      },
      "text/parameters": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/parityfec": {
        source: "iana"
      },
      "text/plain": {
        source: "iana",
        compressible: true,
        extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
      },
      "text/provenance-notation": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/prs.fallenstein.rst": {
        source: "iana"
      },
      "text/prs.lines.tag": {
        source: "iana",
        extensions: ["dsc"]
      },
      "text/prs.prop.logic": {
        source: "iana"
      },
      "text/raptorfec": {
        source: "iana"
      },
      "text/red": {
        source: "iana"
      },
      "text/rfc822-headers": {
        source: "iana"
      },
      "text/richtext": {
        source: "iana",
        compressible: true,
        extensions: ["rtx"]
      },
      "text/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "text/rtp-enc-aescm128": {
        source: "iana"
      },
      "text/rtploopback": {
        source: "iana"
      },
      "text/rtx": {
        source: "iana"
      },
      "text/sgml": {
        source: "iana",
        extensions: ["sgml", "sgm"]
      },
      "text/shaclc": {
        source: "iana"
      },
      "text/shex": {
        source: "iana",
        extensions: ["shex"]
      },
      "text/slim": {
        extensions: ["slim", "slm"]
      },
      "text/spdx": {
        source: "iana",
        extensions: ["spdx"]
      },
      "text/strings": {
        source: "iana"
      },
      "text/stylus": {
        extensions: ["stylus", "styl"]
      },
      "text/t140": {
        source: "iana"
      },
      "text/tab-separated-values": {
        source: "iana",
        compressible: true,
        extensions: ["tsv"]
      },
      "text/troff": {
        source: "iana",
        extensions: ["t", "tr", "roff", "man", "me", "ms"]
      },
      "text/turtle": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["ttl"]
      },
      "text/ulpfec": {
        source: "iana"
      },
      "text/uri-list": {
        source: "iana",
        compressible: true,
        extensions: ["uri", "uris", "urls"]
      },
      "text/vcard": {
        source: "iana",
        compressible: true,
        extensions: ["vcard"]
      },
      "text/vnd.a": {
        source: "iana"
      },
      "text/vnd.abc": {
        source: "iana"
      },
      "text/vnd.ascii-art": {
        source: "iana"
      },
      "text/vnd.curl": {
        source: "iana",
        extensions: ["curl"]
      },
      "text/vnd.curl.dcurl": {
        source: "apache",
        extensions: ["dcurl"]
      },
      "text/vnd.curl.mcurl": {
        source: "apache",
        extensions: ["mcurl"]
      },
      "text/vnd.curl.scurl": {
        source: "apache",
        extensions: ["scurl"]
      },
      "text/vnd.debian.copyright": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.dmclientscript": {
        source: "iana"
      },
      "text/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "text/vnd.esmertec.theme-descriptor": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.familysearch.gedcom": {
        source: "iana",
        extensions: ["ged"]
      },
      "text/vnd.ficlab.flt": {
        source: "iana"
      },
      "text/vnd.fly": {
        source: "iana",
        extensions: ["fly"]
      },
      "text/vnd.fmi.flexstor": {
        source: "iana",
        extensions: ["flx"]
      },
      "text/vnd.gml": {
        source: "iana"
      },
      "text/vnd.graphviz": {
        source: "iana",
        extensions: ["gv"]
      },
      "text/vnd.hans": {
        source: "iana"
      },
      "text/vnd.hgl": {
        source: "iana"
      },
      "text/vnd.in3d.3dml": {
        source: "iana",
        extensions: ["3dml"]
      },
      "text/vnd.in3d.spot": {
        source: "iana",
        extensions: ["spot"]
      },
      "text/vnd.iptc.newsml": {
        source: "iana"
      },
      "text/vnd.iptc.nitf": {
        source: "iana"
      },
      "text/vnd.latex-z": {
        source: "iana"
      },
      "text/vnd.motorola.reflex": {
        source: "iana"
      },
      "text/vnd.ms-mediapackage": {
        source: "iana"
      },
      "text/vnd.net2phone.commcenter.command": {
        source: "iana"
      },
      "text/vnd.radisys.msml-basic-layout": {
        source: "iana"
      },
      "text/vnd.senx.warpscript": {
        source: "iana"
      },
      "text/vnd.si.uricatalogue": {
        source: "iana"
      },
      "text/vnd.sosi": {
        source: "iana"
      },
      "text/vnd.sun.j2me.app-descriptor": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["jad"]
      },
      "text/vnd.trolltech.linguist": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.wap.si": {
        source: "iana"
      },
      "text/vnd.wap.sl": {
        source: "iana"
      },
      "text/vnd.wap.wml": {
        source: "iana",
        extensions: ["wml"]
      },
      "text/vnd.wap.wmlscript": {
        source: "iana",
        extensions: ["wmls"]
      },
      "text/vtt": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["vtt"]
      },
      "text/x-asm": {
        source: "apache",
        extensions: ["s", "asm"]
      },
      "text/x-c": {
        source: "apache",
        extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
      },
      "text/x-component": {
        source: "nginx",
        extensions: ["htc"]
      },
      "text/x-fortran": {
        source: "apache",
        extensions: ["f", "for", "f77", "f90"]
      },
      "text/x-gwt-rpc": {
        compressible: true
      },
      "text/x-handlebars-template": {
        extensions: ["hbs"]
      },
      "text/x-java-source": {
        source: "apache",
        extensions: ["java"]
      },
      "text/x-jquery-tmpl": {
        compressible: true
      },
      "text/x-lua": {
        extensions: ["lua"]
      },
      "text/x-markdown": {
        compressible: true,
        extensions: ["mkd"]
      },
      "text/x-nfo": {
        source: "apache",
        extensions: ["nfo"]
      },
      "text/x-opml": {
        source: "apache",
        extensions: ["opml"]
      },
      "text/x-org": {
        compressible: true,
        extensions: ["org"]
      },
      "text/x-pascal": {
        source: "apache",
        extensions: ["p", "pas"]
      },
      "text/x-processing": {
        compressible: true,
        extensions: ["pde"]
      },
      "text/x-sass": {
        extensions: ["sass"]
      },
      "text/x-scss": {
        extensions: ["scss"]
      },
      "text/x-setext": {
        source: "apache",
        extensions: ["etx"]
      },
      "text/x-sfv": {
        source: "apache",
        extensions: ["sfv"]
      },
      "text/x-suse-ymp": {
        compressible: true,
        extensions: ["ymp"]
      },
      "text/x-uuencode": {
        source: "apache",
        extensions: ["uu"]
      },
      "text/x-vcalendar": {
        source: "apache",
        extensions: ["vcs"]
      },
      "text/x-vcard": {
        source: "apache",
        extensions: ["vcf"]
      },
      "text/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml"]
      },
      "text/xml-external-parsed-entity": {
        source: "iana"
      },
      "text/yaml": {
        compressible: true,
        extensions: ["yaml", "yml"]
      },
      "video/1d-interleaved-parityfec": {
        source: "iana"
      },
      "video/3gpp": {
        source: "iana",
        extensions: ["3gp", "3gpp"]
      },
      "video/3gpp-tt": {
        source: "iana"
      },
      "video/3gpp2": {
        source: "iana",
        extensions: ["3g2"]
      },
      "video/av1": {
        source: "iana"
      },
      "video/bmpeg": {
        source: "iana"
      },
      "video/bt656": {
        source: "iana"
      },
      "video/celb": {
        source: "iana"
      },
      "video/dv": {
        source: "iana"
      },
      "video/encaprtp": {
        source: "iana"
      },
      "video/ffv1": {
        source: "iana"
      },
      "video/flexfec": {
        source: "iana"
      },
      "video/h261": {
        source: "iana",
        extensions: ["h261"]
      },
      "video/h263": {
        source: "iana",
        extensions: ["h263"]
      },
      "video/h263-1998": {
        source: "iana"
      },
      "video/h263-2000": {
        source: "iana"
      },
      "video/h264": {
        source: "iana",
        extensions: ["h264"]
      },
      "video/h264-rcdo": {
        source: "iana"
      },
      "video/h264-svc": {
        source: "iana"
      },
      "video/h265": {
        source: "iana"
      },
      "video/iso.segment": {
        source: "iana",
        extensions: ["m4s"]
      },
      "video/jpeg": {
        source: "iana",
        extensions: ["jpgv"]
      },
      "video/jpeg2000": {
        source: "iana"
      },
      "video/jpm": {
        source: "apache",
        extensions: ["jpm", "jpgm"]
      },
      "video/jxsv": {
        source: "iana"
      },
      "video/mj2": {
        source: "iana",
        extensions: ["mj2", "mjp2"]
      },
      "video/mp1s": {
        source: "iana"
      },
      "video/mp2p": {
        source: "iana"
      },
      "video/mp2t": {
        source: "iana",
        extensions: ["ts"]
      },
      "video/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["mp4", "mp4v", "mpg4"]
      },
      "video/mp4v-es": {
        source: "iana"
      },
      "video/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
      },
      "video/mpeg4-generic": {
        source: "iana"
      },
      "video/mpv": {
        source: "iana"
      },
      "video/nv": {
        source: "iana"
      },
      "video/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogv"]
      },
      "video/parityfec": {
        source: "iana"
      },
      "video/pointer": {
        source: "iana"
      },
      "video/quicktime": {
        source: "iana",
        compressible: false,
        extensions: ["qt", "mov"]
      },
      "video/raptorfec": {
        source: "iana"
      },
      "video/raw": {
        source: "iana"
      },
      "video/rtp-enc-aescm128": {
        source: "iana"
      },
      "video/rtploopback": {
        source: "iana"
      },
      "video/rtx": {
        source: "iana"
      },
      "video/scip": {
        source: "iana"
      },
      "video/smpte291": {
        source: "iana"
      },
      "video/smpte292m": {
        source: "iana"
      },
      "video/ulpfec": {
        source: "iana"
      },
      "video/vc1": {
        source: "iana"
      },
      "video/vc2": {
        source: "iana"
      },
      "video/vnd.cctv": {
        source: "iana"
      },
      "video/vnd.dece.hd": {
        source: "iana",
        extensions: ["uvh", "uvvh"]
      },
      "video/vnd.dece.mobile": {
        source: "iana",
        extensions: ["uvm", "uvvm"]
      },
      "video/vnd.dece.mp4": {
        source: "iana"
      },
      "video/vnd.dece.pd": {
        source: "iana",
        extensions: ["uvp", "uvvp"]
      },
      "video/vnd.dece.sd": {
        source: "iana",
        extensions: ["uvs", "uvvs"]
      },
      "video/vnd.dece.video": {
        source: "iana",
        extensions: ["uvv", "uvvv"]
      },
      "video/vnd.directv.mpeg": {
        source: "iana"
      },
      "video/vnd.directv.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dlna.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dvb.file": {
        source: "iana",
        extensions: ["dvb"]
      },
      "video/vnd.fvt": {
        source: "iana",
        extensions: ["fvt"]
      },
      "video/vnd.hns.video": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsavc": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsmpeg2": {
        source: "iana"
      },
      "video/vnd.motorola.video": {
        source: "iana"
      },
      "video/vnd.motorola.videop": {
        source: "iana"
      },
      "video/vnd.mpegurl": {
        source: "iana",
        extensions: ["mxu", "m4u"]
      },
      "video/vnd.ms-playready.media.pyv": {
        source: "iana",
        extensions: ["pyv"]
      },
      "video/vnd.nokia.interleaved-multimedia": {
        source: "iana"
      },
      "video/vnd.nokia.mp4vr": {
        source: "iana"
      },
      "video/vnd.nokia.videovoip": {
        source: "iana"
      },
      "video/vnd.objectvideo": {
        source: "iana"
      },
      "video/vnd.radgamettools.bink": {
        source: "iana"
      },
      "video/vnd.radgamettools.smacker": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg1": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg4": {
        source: "iana"
      },
      "video/vnd.sealed.swf": {
        source: "iana"
      },
      "video/vnd.sealedmedia.softseal.mov": {
        source: "iana"
      },
      "video/vnd.uvvu.mp4": {
        source: "iana",
        extensions: ["uvu", "uvvu"]
      },
      "video/vnd.vivo": {
        source: "iana",
        extensions: ["viv"]
      },
      "video/vnd.youtube.yt": {
        source: "iana"
      },
      "video/vp8": {
        source: "iana"
      },
      "video/vp9": {
        source: "iana"
      },
      "video/webm": {
        source: "apache",
        compressible: false,
        extensions: ["webm"]
      },
      "video/x-f4v": {
        source: "apache",
        extensions: ["f4v"]
      },
      "video/x-fli": {
        source: "apache",
        extensions: ["fli"]
      },
      "video/x-flv": {
        source: "apache",
        compressible: false,
        extensions: ["flv"]
      },
      "video/x-m4v": {
        source: "apache",
        extensions: ["m4v"]
      },
      "video/x-matroska": {
        source: "apache",
        compressible: false,
        extensions: ["mkv", "mk3d", "mks"]
      },
      "video/x-mng": {
        source: "apache",
        extensions: ["mng"]
      },
      "video/x-ms-asf": {
        source: "apache",
        extensions: ["asf", "asx"]
      },
      "video/x-ms-vob": {
        source: "apache",
        extensions: ["vob"]
      },
      "video/x-ms-wm": {
        source: "apache",
        extensions: ["wm"]
      },
      "video/x-ms-wmv": {
        source: "apache",
        compressible: false,
        extensions: ["wmv"]
      },
      "video/x-ms-wmx": {
        source: "apache",
        extensions: ["wmx"]
      },
      "video/x-ms-wvx": {
        source: "apache",
        extensions: ["wvx"]
      },
      "video/x-msvideo": {
        source: "apache",
        extensions: ["avi"]
      },
      "video/x-sgi-movie": {
        source: "apache",
        extensions: ["movie"]
      },
      "video/x-smv": {
        source: "apache",
        extensions: ["smv"]
      },
      "x-conference/x-cooltalk": {
        source: "apache",
        extensions: ["ice"]
      },
      "x-shader/x-fragment": {
        compressible: true
      },
      "x-shader/x-vertex": {
        compressible: true
      }
    };
    exports.extensions = /* @__PURE__ */ new Map();
    function consumeToken(v) {
      const notPos = indexOf(v, isNotTokenChar);
      if (notPos == -1) {
        return [v, ""];
      }
      if (notPos == 0) {
        return ["", v];
      }
      return [v.slice(0, notPos), v.slice(notPos)];
    }
    exports.consumeToken = consumeToken;
    function consumeValue(v) {
      if (!v) {
        return ["", v];
      }
      if (v[0] !== `"`) {
        return consumeToken(v);
      }
      let value = "";
      for (let i = 1; i < v.length; i++) {
        const r = v[i];
        if (r === `"`) {
          return [value, v.slice(i + 1)];
        }
        if (r === "\\" && i + 1 < v.length && isTSpecial(v[i + 1])) {
          value += v[i + 1];
          i++;
          continue;
        }
        if (r === "\r" || r === "\n") {
          return ["", v];
        }
        value += v[i];
      }
      return ["", v];
    }
    exports.consumeValue = consumeValue;
    function consumeMediaParam(v) {
      let rest = v.trimStart();
      if (!rest.startsWith(";")) {
        return ["", "", v];
      }
      rest = rest.slice(1);
      rest = rest.trimStart();
      let param;
      [param, rest] = consumeToken(rest);
      param = param.toLowerCase();
      if (!param) {
        return ["", "", v];
      }
      rest = rest.slice(1);
      rest = rest.trimStart();
      const [value, rest2] = consumeValue(rest);
      if (value == "" && rest2 === rest) {
        return ["", "", v];
      }
      rest = rest2;
      return [param, value, rest];
    }
    exports.consumeMediaParam = consumeMediaParam;
    function decode2331Encoding(v) {
      const sv = v.split(`'`, 3);
      if (sv.length !== 3) {
        return void 0;
      }
      const charset = sv[0].toLowerCase();
      if (!charset) {
        return void 0;
      }
      if (charset != "us-ascii" && charset != "utf-8") {
        return void 0;
      }
      const encv = decodeURI(sv[2]);
      if (!encv) {
        return void 0;
      }
      return encv;
    }
    exports.decode2331Encoding = decode2331Encoding;
    function indexOf(s, fn) {
      let i = -1;
      for (const v of s) {
        i++;
        if (fn(v)) {
          return i;
        }
      }
      return -1;
    }
    function isIterator(obj) {
      if (obj == null) {
        return false;
      }
      return typeof obj[Symbol.iterator] === "function";
    }
    exports.isIterator = isIterator;
    function isToken(s) {
      if (!s) {
        return false;
      }
      return indexOf(s, isNotTokenChar) < 0;
    }
    exports.isToken = isToken;
    function isNotTokenChar(r) {
      return !isTokenChar(r);
    }
    function isTokenChar(r) {
      const code = r.charCodeAt(0);
      return code > 32 && code < 127 && !isTSpecial(r);
    }
    function isTSpecial(r) {
      return `()<>@,;:\\"/[]?=`.includes(r[0]);
    }
    var CHAR_CODE_SPACE = " ".charCodeAt(0);
    var CHAR_CODE_TILDE = "~".charCodeAt(0);
    function needsEncoding(s) {
      for (const b of s) {
        const charCode = b.charCodeAt(0);
        if ((charCode < CHAR_CODE_SPACE || charCode > CHAR_CODE_TILDE) && b !== "	") {
          return true;
        }
      }
      return false;
    }
    exports.needsEncoding = needsEncoding;
    function parseMediaType(v) {
      const [base] = v.split(";");
      const mediaType = base.toLowerCase().trim();
      const params = {};
      const continuation = /* @__PURE__ */ new Map();
      v = v.slice(base.length);
      while (v.length) {
        v = v.trimStart();
        if (v.length === 0) {
          break;
        }
        const [key, value, rest] = consumeMediaParam(v);
        if (!key) {
          if (rest.trim() === ";") {
            break;
          }
          throw new TypeError("Invalid media parameter.");
        }
        let pmap = params;
        const [baseName, rest2] = key.split("*");
        if (baseName && rest2 != null) {
          if (!continuation.has(baseName)) {
            continuation.set(baseName, {});
          }
          pmap = continuation.get(baseName);
        }
        if (key in pmap) {
          throw new TypeError("Duplicate key parsed.");
        }
        pmap[key] = value;
        v = rest;
      }
      let str = "";
      for (const [key, pieceMap] of continuation) {
        const singlePartKey = `${key}*`;
        const v2 = pieceMap[singlePartKey];
        if (v2) {
          const decv = decode2331Encoding(v2);
          if (decv) {
            params[key] = decv;
          }
          continue;
        }
        str = "";
        let valid = false;
        for (let n = 0; ; n++) {
          const simplePart = `${key}*${n}`;
          let v3 = pieceMap[simplePart];
          if (v3) {
            valid = true;
            str += v3;
            continue;
          }
          const encodedPart = `${simplePart}*`;
          v3 = pieceMap[encodedPart];
          if (!v3) {
            break;
          }
          valid = true;
          if (n === 0) {
            const decv = decode2331Encoding(v3);
            if (decv) {
              str += decv;
            }
          } else {
            const decv = decodeURI(v3);
            str += decv;
          }
        }
        if (valid) {
          params[key] = str;
        }
      }
      return Object.keys(params).length ? [mediaType, params] : [mediaType, void 0];
    }
    function getCharset(type) {
      try {
        const [mediaType, params] = parseMediaType(type);
        if (params && params["charset"]) {
          return params["charset"];
        }
        const entry = db[mediaType];
        if (entry && entry.charset) {
          return entry.charset;
        }
        if (mediaType.startsWith("text/")) {
          return "UTF-8";
        }
      } catch (_a) {
      }
      return void 0;
    }
    exports.getCharset = getCharset;
    var types = /* @__PURE__ */ new Map();
    (function populateMaps() {
      const preference = ["nginx", "apache", void 0, "iana"];
      for (const type of Object.keys(db)) {
        const mime = db[type];
        const exts = mime.extensions;
        if (!exts || !exts.length) {
          continue;
        }
        exports.extensions.set(type, exts);
        for (const ext of exts) {
          const current = types.get(ext);
          if (current) {
            const from = preference.indexOf(db[current].source);
            const to = preference.indexOf(mime.source);
            if (current !== "application/octet-stream" && (from > to || from === to && current.startsWith("application/"))) {
              continue;
            }
          }
          types.set(ext, type);
        }
      }
    })();
    function typeByExtension(extension) {
      extension = extension.startsWith(".") ? extension.slice(1) : extension;
      return types.get(extension.toLowerCase());
    }
    exports.typeByExtension = typeByExtension;
    function formatMediaType(type, param) {
      let b = "";
      const [major, sub] = type.split("/");
      if (!sub) {
        if (!isToken(type)) {
          return "";
        }
        b += type.toLowerCase();
      } else {
        if (!isToken(major) || !isToken(sub)) {
          return "";
        }
        b += `${major.toLowerCase()}/${sub.toLowerCase()}`;
      }
      if (param) {
        param = isIterator(param) ? Object.fromEntries(param) : param;
        const attrs = Object.keys(param);
        attrs.sort();
        for (const attribute of attrs) {
          if (!isToken(attribute)) {
            return "";
          }
          const value = param[attribute];
          b += `; ${attribute.toLowerCase()}`;
          const needEnc = needsEncoding(value);
          if (needEnc) {
            b += "*";
          }
          b += "=";
          if (needEnc) {
            b += `utf-8''${encodeURIComponent(value)}`;
            continue;
          }
          if (isToken(value)) {
            b += value;
            continue;
          }
          b += `"${value.replace(/["\\]/gi, (m) => `\\${m}`)}"`;
        }
      }
      return b;
    }
    exports.formatMediaType = formatMediaType;
    function contentType(extensionOrType) {
      try {
        const [mediaType, params = {}] = extensionOrType.includes("/") ? parseMediaType(extensionOrType) : [typeByExtension(extensionOrType), void 0];
        if (!mediaType) {
          return void 0;
        }
        if (!("charset" in params)) {
          const charset = getCharset(mediaType);
          if (charset) {
            params.charset = charset;
          }
        }
        return formatMediaType(mediaType, params);
      } catch (_a) {
      }
      return void 0;
    }
    exports.contentType = contentType;
    function assert(cond, msg = "assertion failed") {
      if (!cond) {
        const err = new Error(msg);
        err.name = "AssertionError";
        throw err;
      }
    }
    function extractLength(response) {
      var _a, _b;
      const values = (_b = (_a = response.headers.get("content-length")) === null || _a === void 0 ? void 0 : _a.split(/\s*,\s*/)) !== null && _b !== void 0 ? _b : [];
      let candidateValue = null;
      for (const value of values) {
        if (candidateValue == null) {
          candidateValue = value;
        } else if (value !== candidateValue) {
          throw new Error("invalid content-length");
        }
      }
      if (candidateValue == "" || candidateValue == null) {
        return null;
      }
      const v = parseInt(candidateValue, 10);
      return Number.isNaN(v) ? null : v;
    }
    function getEssence(value) {
      return value.split(/\s*;\s*/)[0];
    }
    function extractMIMEType(headers) {
      var _a;
      let mimeType = null;
      const values = (_a = headers.get("content-type")) === null || _a === void 0 ? void 0 : _a.split(/\s*,\s*/);
      if (!values) {
        throw new Error("missing content type");
      }
      for (const value of values) {
        const temporaryMimeType = contentType(value);
        if (!temporaryMimeType || getEssence(temporaryMimeType) === "*/*") {
          continue;
        }
        mimeType = temporaryMimeType;
      }
      if (mimeType == null) {
        throw new Error("missing content type");
      }
      return mimeType;
    }
    function isHTMLMIMEType(value) {
      return getEssence(value) === "text/html";
    }
    function isXMLMIMEType(value) {
      const essence = getEssence(value);
      return essence.endsWith("+xml") || essence === "text/xml" || essence === "application/xml";
    }
    var decoder = new TextDecoder();
    function parseJSONFromBytes(value) {
      const string = decoder.decode(value);
      return JSON.parse(string);
    }
    function appendBytes(...bytes) {
      let length = 0;
      for (const b of bytes) {
        length += b.length;
      }
      const result = new Uint8Array(length);
      let offset = 0;
      for (const b of bytes) {
        result.set(b, offset);
        offset += b.length;
      }
      return result;
    }
    var XMLHttpRequestEventTarget = class extends EventTarget {
      constructor() {
        super(...arguments);
        this.onabort = null;
        this.onerror = null;
        this.onload = null;
        this.onloadend = null;
        this.onloadstart = null;
        this.onprogress = null;
        this.ontimeout = null;
      }
      dispatchEvent(evt) {
        if (evt instanceof ProgressEvent) {
          const xhr = this;
          switch (evt.type) {
            case "abort":
              if (this.onabort) {
                this.onabort.call(xhr, evt);
              }
              break;
            case "error":
              if (this.onerror) {
                this.onerror.call(xhr, evt);
              }
              break;
            case "load":
              if (this.onload) {
                this.onload.call(xhr, evt);
              }
              break;
            case "loadend":
              if (this.onloadend) {
                this.onloadend.call(xhr, evt);
              }
              break;
            case "loadstart":
              if (this.onloadstart) {
                this.onloadstart.call(xhr, evt);
              }
              break;
            case "progress":
              if (this.onprogress) {
                this.onprogress.call(xhr, evt);
              }
              break;
            case "timeout":
              if (this.ontimeout) {
                this.ontimeout.call(xhr, evt);
              }
          }
        }
        if (evt.cancelable && evt.defaultPrevented) {
          return false;
        } else {
          return super.dispatchEvent(evt);
        }
      }
    };
    exports.XMLHttpRequestEventTarget = XMLHttpRequestEventTarget;
    var XMLHttpRequestUpload = class extends XMLHttpRequestEventTarget {
    };
    exports.XMLHttpRequestUpload = XMLHttpRequestUpload;
    var State;
    (function(State2) {
      State2[State2["UNSENT"] = 0] = "UNSENT";
      State2[State2["OPENED"] = 1] = "OPENED";
      State2[State2["HEADERS_RECEIVED"] = 2] = "HEADERS_RECEIVED";
      State2[State2["LOADING"] = 3] = "LOADING";
      State2[State2["DONE"] = 4] = "DONE";
    })(State || (State = {}));
    var METHODS = ["GET", "HEAD", "POST", "DELETE", "OPTIONS", "PUT", "PATCH"];
    var XMLHttpRequest = class extends XMLHttpRequestEventTarget {
      constructor() {
        super(...arguments);
        _XMLHttpRequest_instances.add(this);
        _XMLHttpRequest_abortedFlag.set(this, false);
        _XMLHttpRequest_abortController.set(this, void 0);
        _XMLHttpRequest_crossOriginCredentials.set(this, false);
        _XMLHttpRequest_headers.set(this, new Headers());
        _XMLHttpRequest_mime.set(this, void 0);
        _XMLHttpRequest_receivedBytes.set(this, new Uint8Array());
        _XMLHttpRequest_requestMethod.set(this, void 0);
        _XMLHttpRequest_response.set(this, void 0);
        _XMLHttpRequest_responseObject.set(this, null);
        _XMLHttpRequest_responseType.set(this, "");
        _XMLHttpRequest_sendFlag.set(this, false);
        _XMLHttpRequest_state.set(this, State.UNSENT);
        _XMLHttpRequest_timedoutFlag.set(this, false);
        _XMLHttpRequest_timeout.set(this, 0);
        _XMLHttpRequest_upload.set(this, new XMLHttpRequestUpload());
        _XMLHttpRequest_uploadCompleteFlag.set(this, false);
        _XMLHttpRequest_uploadListener.set(this, false);
        _XMLHttpRequest_url.set(this, void 0);
        this.onreadystatechange = null;
      }
      get readyState() {
        return __classPrivateFieldGet3(this, _XMLHttpRequest_state, "f");
      }
      get response() {
        var _a;
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_responseType, "f") === "" || __classPrivateFieldGet3(this, _XMLHttpRequest_responseType, "f") === "text") {
          if (!(__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.LOADING || __classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.DONE)) {
            return "";
          }
          return __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_getTextResponse).call(this);
        }
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") !== State.DONE) {
          return null;
        }
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_responseObject, "f") instanceof Error) {
          return null;
        }
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_responseObject, "f") != null) {
          return __classPrivateFieldGet3(this, _XMLHttpRequest_responseObject, "f");
        }
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_responseType, "f") === "arraybuffer") {
          try {
            __classPrivateFieldSet2(this, _XMLHttpRequest_responseObject, __classPrivateFieldGet3(this, _XMLHttpRequest_receivedBytes, "f").buffer.slice(__classPrivateFieldGet3(this, _XMLHttpRequest_receivedBytes, "f").byteOffset, __classPrivateFieldGet3(this, _XMLHttpRequest_receivedBytes, "f").byteLength + __classPrivateFieldGet3(this, _XMLHttpRequest_receivedBytes, "f").byteOffset), "f");
          } catch (e) {
            __classPrivateFieldSet2(this, _XMLHttpRequest_responseObject, e, "f");
            return null;
          }
        } else if (__classPrivateFieldGet3(this, _XMLHttpRequest_responseType, "f") === "blob") {
          __classPrivateFieldSet2(this, _XMLHttpRequest_responseObject, new Blob([__classPrivateFieldGet3(this, _XMLHttpRequest_receivedBytes, "f")], {
            type: __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_getFinalMIMEType).call(this)
          }), "f");
        } else if (__classPrivateFieldGet3(this, _XMLHttpRequest_responseType, "f") === "document") {
          __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_setDocumentResponse).call(this);
        } else {
          assert(__classPrivateFieldGet3(this, _XMLHttpRequest_responseType, "f") === "json");
          if (((_a = __classPrivateFieldGet3(this, _XMLHttpRequest_response, "f")) === null || _a === void 0 ? void 0 : _a.body) == null) {
            return null;
          }
          let jsonObject;
          try {
            jsonObject = parseJSONFromBytes(__classPrivateFieldGet3(this, _XMLHttpRequest_receivedBytes, "f"));
          } catch (_b) {
            return null;
          }
          __classPrivateFieldSet2(this, _XMLHttpRequest_responseObject, jsonObject, "f");
        }
        return __classPrivateFieldGet3(this, _XMLHttpRequest_responseObject, "f") instanceof Error ? null : __classPrivateFieldGet3(this, _XMLHttpRequest_responseObject, "f");
      }
      get responseText() {
        if (!(__classPrivateFieldGet3(this, _XMLHttpRequest_responseType, "f") === "" || __classPrivateFieldGet3(this, _XMLHttpRequest_responseType, "f") === "text")) {
          throw new DOMException("Response type is not set properly", "InvalidStateError");
        }
        if (!(__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.LOADING || __classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.DONE)) {
          return "";
        }
        return __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_getTextResponse).call(this);
      }
      get responseType() {
        return __classPrivateFieldGet3(this, _XMLHttpRequest_responseType, "f");
      }
      set responseType(value) {
        if (value === "document") {
          return;
        }
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.LOADING || __classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.DONE) {
          throw new DOMException("The response type cannot be changed when loading or done", "InvalidStateError");
        }
        __classPrivateFieldSet2(this, _XMLHttpRequest_responseType, value, "f");
      }
      get responseURL() {
        var _a, _b;
        return (_b = (_a = __classPrivateFieldGet3(this, _XMLHttpRequest_response, "f")) === null || _a === void 0 ? void 0 : _a.url) !== null && _b !== void 0 ? _b : "";
      }
      get responseXML() {
        if (!(__classPrivateFieldGet3(this, _XMLHttpRequest_responseType, "f") === "" || __classPrivateFieldGet3(this, _XMLHttpRequest_responseType, "f") === "document")) {
          throw new DOMException("Response type is not properly set", "InvalidStateError");
        }
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") !== State.DONE) {
          return null;
        }
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_setDocumentResponse) instanceof Error) {
          return null;
        }
        __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_setDocumentResponse).call(this);
        return null;
      }
      get status() {
        var _a, _b;
        return (_b = (_a = __classPrivateFieldGet3(this, _XMLHttpRequest_response, "f")) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 0;
      }
      get statusText() {
        var _a, _b;
        return (_b = (_a = __classPrivateFieldGet3(this, _XMLHttpRequest_response, "f")) === null || _a === void 0 ? void 0 : _a.statusText) !== null && _b !== void 0 ? _b : "";
      }
      get timeout() {
        return __classPrivateFieldGet3(this, _XMLHttpRequest_timeout, "f");
      }
      set timeout(value) {
        __classPrivateFieldSet2(this, _XMLHttpRequest_timeout, value, "f");
      }
      get upload() {
        return __classPrivateFieldGet3(this, _XMLHttpRequest_upload, "f");
      }
      get withCredentials() {
        return __classPrivateFieldGet3(this, _XMLHttpRequest_crossOriginCredentials, "f");
      }
      set withCredentials(value) {
        if (!(__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.UNSENT || __classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.OPENED)) {
          throw new DOMException("The request is not unsent or opened", "InvalidStateError");
        }
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_sendFlag, "f")) {
          throw new DOMException("The request has been sent", "InvalidStateError");
        }
        __classPrivateFieldSet2(this, _XMLHttpRequest_crossOriginCredentials, value, "f");
      }
      abort() {
        __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_terminate).call(this);
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.OPENED && __classPrivateFieldGet3(this, _XMLHttpRequest_sendFlag, "f") || __classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.HEADERS_RECEIVED || __classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.LOADING) {
          __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_requestErrorSteps).call(this, "abort");
        }
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.DONE) {
          __classPrivateFieldSet2(this, _XMLHttpRequest_state, State.UNSENT, "f");
          __classPrivateFieldSet2(this, _XMLHttpRequest_response, void 0, "f");
        }
      }
      dispatchEvent(evt) {
        switch (evt.type) {
          case "readystatechange":
            if (this.onreadystatechange) {
              this.onreadystatechange.call(this, evt);
            }
            break;
        }
        if (evt.cancelable && evt.defaultPrevented) {
          return false;
        } else {
          return super.dispatchEvent(evt);
        }
      }
      getAllResponseHeaders() {
        if (!__classPrivateFieldGet3(this, _XMLHttpRequest_response, "f")) {
          return null;
        }
        const headers = [...__classPrivateFieldGet3(this, _XMLHttpRequest_response, "f").headers];
        headers.sort(([a], [b]) => a.localeCompare(b));
        return headers.map(([key, value]) => `${key}: ${value}`).join("\r\n");
      }
      getResponseHeader(name) {
        var _a, _b;
        return (_b = (_a = __classPrivateFieldGet3(this, _XMLHttpRequest_response, "f")) === null || _a === void 0 ? void 0 : _a.headers.get(name)) !== null && _b !== void 0 ? _b : null;
      }
      open(method, url, async = true, username = null, password = null) {
        method = method.toLocaleUpperCase();
        if (!METHODS.includes(method)) {
          throw new DOMException(`The method "${method}" is not allowed.`, "SyntaxError");
        }
        let parsedUrl;
        try {
          let base;
          try {
            base = window.location.toString();
          } catch (_a) {
          }
          parsedUrl = new URL(url, base);
        } catch (_b) {
          throw new DOMException(`The url "${url}" is invalid.`, "SyntaxError");
        }
        if (username != null) {
          parsedUrl.username = username;
        }
        if (password != null) {
          parsedUrl.password = password;
        }
        if (async === false) {
          throw new DOMException("The polyfill does not support sync operation.", "InvalidAccessError");
        }
        __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_terminate).call(this);
        __classPrivateFieldSet2(this, _XMLHttpRequest_sendFlag, false, "f");
        __classPrivateFieldSet2(this, _XMLHttpRequest_uploadListener, false, "f");
        __classPrivateFieldSet2(this, _XMLHttpRequest_requestMethod, method, "f");
        __classPrivateFieldSet2(this, _XMLHttpRequest_url, parsedUrl, "f");
        __classPrivateFieldSet2(this, _XMLHttpRequest_headers, new Headers(), "f");
        __classPrivateFieldSet2(this, _XMLHttpRequest_response, void 0, "f");
        __classPrivateFieldSet2(this, _XMLHttpRequest_state, State.OPENED, "f");
        this.dispatchEvent(new Event("readystatechange"));
      }
      overrideMimeType(mime) {
        var _a;
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.LOADING || __classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.DONE) {
          throw new DOMException("The request is in an invalid state", "InvalidStateError");
        }
        __classPrivateFieldSet2(this, _XMLHttpRequest_mime, (_a = contentType(mime)) !== null && _a !== void 0 ? _a : "application/octet-stream", "f");
      }
      send(body = null) {
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") !== State.OPENED) {
          throw new DOMException("Invalid state", "InvalidStateError");
        }
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_sendFlag, "f")) {
          throw new DOMException("Invalid state", "InvalidStateError");
        }
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_requestMethod, "f") === "GET" || __classPrivateFieldGet3(this, _XMLHttpRequest_requestMethod, "f") === "HEAD") {
          body = null;
        }
        const abortController = __classPrivateFieldSet2(this, _XMLHttpRequest_abortController, new AbortController(), "f");
        const req = new Request(__classPrivateFieldGet3(this, _XMLHttpRequest_url, "f").toString(), {
          method: __classPrivateFieldGet3(this, _XMLHttpRequest_requestMethod, "f"),
          headers: __classPrivateFieldGet3(this, _XMLHttpRequest_headers, "f"),
          body,
          mode: "cors",
          credentials: __classPrivateFieldGet3(this, _XMLHttpRequest_crossOriginCredentials, "f") ? "include" : "same-origin",
          signal: abortController.signal
        });
        __classPrivateFieldSet2(this, _XMLHttpRequest_uploadCompleteFlag, false, "f");
        __classPrivateFieldSet2(this, _XMLHttpRequest_timedoutFlag, false, "f");
        if (req.body == null) {
          __classPrivateFieldSet2(this, _XMLHttpRequest_uploadCompleteFlag, true, "f");
        }
        __classPrivateFieldSet2(this, _XMLHttpRequest_sendFlag, true, "f");
        this.dispatchEvent(new ProgressEvent("loadstart", { loaded: 0, total: 0 }));
        __classPrivateFieldGet3(this, _XMLHttpRequest_upload, "f").dispatchEvent(new ProgressEvent("loadstart", { loaded: 0, total: 0 }));
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") !== State.OPENED || !__classPrivateFieldGet3(this, _XMLHttpRequest_sendFlag, "f")) {
          return;
        }
        const processRequestEndOfBody = () => {
          __classPrivateFieldSet2(this, _XMLHttpRequest_uploadCompleteFlag, true, "f");
          if (!__classPrivateFieldGet3(this, _XMLHttpRequest_uploadListener, "f")) {
            return;
          }
          __classPrivateFieldGet3(this, _XMLHttpRequest_upload, "f").dispatchEvent(new ProgressEvent("progress", { loaded: 0, total: 0 }));
          __classPrivateFieldGet3(this, _XMLHttpRequest_upload, "f").dispatchEvent(new ProgressEvent("load", {
            loaded: 0,
            total: 0
          }));
          __classPrivateFieldGet3(this, _XMLHttpRequest_upload, "f").dispatchEvent(new ProgressEvent("loadend", { loaded: 0, total: 0 }));
        };
        const processResponse = (response) => __awaiter(this, void 0, void 0, function* () {
          var e_1, _a;
          var _b;
          __classPrivateFieldSet2(this, _XMLHttpRequest_response, response, "f");
          __classPrivateFieldSet2(this, _XMLHttpRequest_state, State.HEADERS_RECEIVED, "f");
          this.dispatchEvent(new Event("readystatechange"));
          if (__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") !== State.HEADERS_RECEIVED) {
            return;
          }
          if (response.body == null) {
            __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_handleResponseEndOfBody).call(this);
            return;
          }
          const total = (_b = extractLength(__classPrivateFieldGet3(this, _XMLHttpRequest_response, "f"))) !== null && _b !== void 0 ? _b : 0;
          const processBodyChunk = (bytes) => {
            __classPrivateFieldSet2(this, _XMLHttpRequest_receivedBytes, appendBytes(__classPrivateFieldGet3(this, _XMLHttpRequest_receivedBytes, "f"), bytes), "f");
            if (__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") === State.HEADERS_RECEIVED) {
              __classPrivateFieldSet2(this, _XMLHttpRequest_state, State.LOADING, "f");
            }
            this.dispatchEvent(new Event("readystatechange"));
            this.dispatchEvent(new ProgressEvent("progress", {
              loaded: __classPrivateFieldGet3(this, _XMLHttpRequest_receivedBytes, "f").length,
              total
            }));
          };
          const processEndOfBody = () => {
            __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_handleResponseEndOfBody).call(this);
          };
          const processBodyError = () => {
            __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_handleErrors).call(this);
          };
          try {
            try {
              for (var _c = __asyncValues(response.body), _d; _d = yield _c.next(), !_d.done; ) {
                const bytes = _d.value;
                processBodyChunk(bytes);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_d && !_d.done && (_a = _c.return))
                  yield _a.call(_c);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
            processEndOfBody();
          } catch (_e) {
            processBodyError();
          }
        });
        const processRejection = () => {
          __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_handleErrors).call(this);
        };
        const p = fetch(req).then((response) => {
          processRequestEndOfBody();
          return processResponse(response);
        }).catch(processRejection);
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_timeout, "f") > 0) {
          let tid = -1;
          const t = new Promise((res) => {
            tid = setTimeout(() => res(true), __classPrivateFieldGet3(this, _XMLHttpRequest_timeout, "f"));
          });
          Promise.race([p, t]).then((value) => {
            clearTimeout(tid);
            if (value) {
              __classPrivateFieldSet2(this, _XMLHttpRequest_timedoutFlag, true, "f");
              __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_terminate).call(this);
            }
          });
        }
      }
      setRequestHeader(name, value) {
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_state, "f") !== State.OPENED) {
          throw new DOMException("Invalid state", "InvalidStateError");
        }
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_sendFlag, "f")) {
          throw new DOMException("Invalid state", "InvalidateStateError");
        }
        __classPrivateFieldGet3(this, _XMLHttpRequest_headers, "f").append(name, value);
      }
      get DONE() {
        return State.DONE;
      }
      get HEADERS_RECEIVED() {
        return State.HEADERS_RECEIVED;
      }
      get LOADING() {
        return State.LOADING;
      }
      get OPENED() {
        return State.OPENED;
      }
      get UNSENT() {
        return State.UNSENT;
      }
      static get DONE() {
        return State.DONE;
      }
      static get HEADERS_RECEIVED() {
        return State.HEADERS_RECEIVED;
      }
      static get LOADING() {
        return State.LOADING;
      }
      static get OPENED() {
        return State.OPENED;
      }
      static get UNSENT() {
        return State.UNSENT;
      }
    };
    exports.XMLHttpRequest = XMLHttpRequest;
    _XMLHttpRequest_abortedFlag = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_abortController = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_crossOriginCredentials = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_headers = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_mime = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_receivedBytes = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_requestMethod = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_response = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_responseObject = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_responseType = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_sendFlag = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_state = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_timedoutFlag = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_timeout = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_upload = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_uploadCompleteFlag = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_uploadListener = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_url = /* @__PURE__ */ new WeakMap(), _XMLHttpRequest_instances = /* @__PURE__ */ new WeakSet(), _XMLHttpRequest_getResponseMIMEType = function _XMLHttpRequest_getResponseMIMEType2() {
      try {
        assert(__classPrivateFieldGet3(this, _XMLHttpRequest_response, "f"));
        const mimeType = extractMIMEType(__classPrivateFieldGet3(this, _XMLHttpRequest_response, "f").headers);
        return mimeType;
      } catch (_a) {
        return "text/xml";
      }
    }, _XMLHttpRequest_getFinalMIMEType = function _XMLHttpRequest_getFinalMIMEType2() {
      if (!__classPrivateFieldGet3(this, _XMLHttpRequest_mime, "f")) {
        return __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_getResponseMIMEType).call(this);
      } else {
        return __classPrivateFieldGet3(this, _XMLHttpRequest_mime, "f");
      }
    }, _XMLHttpRequest_getFinalEncoding = function _XMLHttpRequest_getFinalEncoding2() {
      var _a, _b;
      return (_b = (_a = getCharset(__classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_getFinalMIMEType).call(this))) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) !== null && _b !== void 0 ? _b : null;
    }, _XMLHttpRequest_getTextResponse = function _XMLHttpRequest_getTextResponse2() {
      var _a;
      if (((_a = __classPrivateFieldGet3(this, _XMLHttpRequest_response, "f")) === null || _a === void 0 ? void 0 : _a.body) == null) {
        return "";
      }
      let charset = __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_getFinalEncoding).call(this);
      if (__classPrivateFieldGet3(this, _XMLHttpRequest_responseType, "f") === "" && charset == null && isXMLMIMEType(__classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_getFinalMIMEType).call(this))) {
        charset = "utf-8";
      }
      charset = charset !== null && charset !== void 0 ? charset : "utf8";
      const decoder2 = new TextDecoder(charset);
      return decoder2.decode(__classPrivateFieldGet3(this, _XMLHttpRequest_receivedBytes, "f"));
    }, _XMLHttpRequest_handleResponseEndOfBody = function _XMLHttpRequest_handleResponseEndOfBody2() {
      var _a;
      assert(__classPrivateFieldGet3(this, _XMLHttpRequest_response, "f"));
      const loaded = __classPrivateFieldGet3(this, _XMLHttpRequest_receivedBytes, "f").length;
      const total = (_a = extractLength(__classPrivateFieldGet3(this, _XMLHttpRequest_response, "f"))) !== null && _a !== void 0 ? _a : 0;
      this.dispatchEvent(new ProgressEvent("progress", { loaded, total }));
      __classPrivateFieldSet2(this, _XMLHttpRequest_state, State.DONE, "f");
      __classPrivateFieldSet2(this, _XMLHttpRequest_sendFlag, false, "f");
      this.dispatchEvent(new Event("readystatechange"));
      this.dispatchEvent(new ProgressEvent("load", { loaded, total }));
      this.dispatchEvent(new ProgressEvent("loadend", { loaded, total }));
    }, _XMLHttpRequest_handleErrors = function _XMLHttpRequest_handleErrors2() {
      if (!__classPrivateFieldGet3(this, _XMLHttpRequest_sendFlag, "f")) {
        return;
      }
      if (__classPrivateFieldGet3(this, _XMLHttpRequest_timedoutFlag, "f")) {
        __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_requestErrorSteps).call(this, "timeout");
      } else if (__classPrivateFieldGet3(this, _XMLHttpRequest_abortedFlag, "f")) {
        __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_requestErrorSteps).call(this, "abort");
      } else {
        __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_requestErrorSteps).call(this, "error");
      }
    }, _XMLHttpRequest_requestErrorSteps = function _XMLHttpRequest_requestErrorSteps2(event) {
      __classPrivateFieldSet2(this, _XMLHttpRequest_state, State.DONE, "f");
      __classPrivateFieldSet2(this, _XMLHttpRequest_sendFlag, false, "f");
      this.dispatchEvent(new Event("readystatechange"));
      if (!__classPrivateFieldGet3(this, _XMLHttpRequest_uploadCompleteFlag, "f")) {
        __classPrivateFieldSet2(this, _XMLHttpRequest_uploadCompleteFlag, true, "f");
        if (__classPrivateFieldGet3(this, _XMLHttpRequest_uploadListener, "f")) {
          __classPrivateFieldGet3(this, _XMLHttpRequest_upload, "f").dispatchEvent(new ProgressEvent(event, { loaded: 0, total: 0 }));
          __classPrivateFieldGet3(this, _XMLHttpRequest_upload, "f").dispatchEvent(new ProgressEvent("loadend", { loaded: 0, total: 0 }));
        }
      }
      this.dispatchEvent(new ProgressEvent(event, { loaded: 0, total: 0 }));
      this.dispatchEvent(new ProgressEvent("loadend", { loaded: 0, total: 0 }));
    }, _XMLHttpRequest_setDocumentResponse = function _XMLHttpRequest_setDocumentResponse2() {
      assert(__classPrivateFieldGet3(this, _XMLHttpRequest_response, "f"));
      if (__classPrivateFieldGet3(this, _XMLHttpRequest_response, "f").body == null) {
        return;
      }
      const finalMIME = __classPrivateFieldGet3(this, _XMLHttpRequest_instances, "m", _XMLHttpRequest_getFinalMIMEType).call(this);
      if (!(isHTMLMIMEType(finalMIME) || isXMLMIMEType(finalMIME))) {
        return;
      }
      if (__classPrivateFieldGet3(this, _XMLHttpRequest_responseType, "f") === "" && isHTMLMIMEType(finalMIME)) {
        return;
      }
      __classPrivateFieldSet2(this, _XMLHttpRequest_responseObject, new DOMException("Document bodies are not supported", "SyntaxError"), "f");
    }, _XMLHttpRequest_terminate = function _XMLHttpRequest_terminate2() {
      if (__classPrivateFieldGet3(this, _XMLHttpRequest_abortController, "f")) {
        try {
          __classPrivateFieldGet3(this, _XMLHttpRequest_abortController, "f").abort();
        } catch (_a) {
        }
        __classPrivateFieldSet2(this, _XMLHttpRequest_abortController, void 0, "f");
      }
    };
    function maybeDefine(value, name, scope) {
      Object.defineProperty(value, "name", {
        value: name,
        writable: false,
        enumerable: false,
        configurable: true
      });
      if (!(name in globalThis)) {
        Object.defineProperty(scope, name, {
          value,
          writable: true,
          configurable: true,
          enumerable: false
        });
      }
    }
    maybeDefine(XMLHttpRequest, "XMLHttpRequest", globalThis);
    maybeDefine(XMLHttpRequestEventTarget, "XMLHttpRequestEventTarget", globalThis);
    maybeDefine(XMLHttpRequestUpload, "XMLHttpRequestUpload", globalThis);
  }
});

// node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/Web3Function.js
var require_Web3Function = __commonJS({
  "node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/Web3Function.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Web3Function = void 0;
    var ethers_1 = require_lib32();
    var Web3FunctionHttpServer_1 = require_Web3FunctionHttpServer();
    var objectHash = require_object_hash();
    require_XMLHttpRequest();
    var Web3Function2 = class {
      constructor() {
        var _a;
        const port = Number((_a = Deno.env.get("WEB3_FUNCTION_SERVER_PORT")) !== null && _a !== void 0 ? _a : 80);
        this._server = new Web3FunctionHttpServer_1.Web3FunctionHttpServer(port, Web3Function2._debug, this._onEvent.bind(this));
      }
      _onEvent(event) {
        return __awaiter(this, void 0, void 0, function* () {
          switch (event === null || event === void 0 ? void 0 : event.action) {
            case "start": {
              let storage = {
                state: "last",
                storage: Object.assign({}, event.data.context.storage)
              };
              try {
                const { result, ctxData } = yield this._run(event.data.context);
                const lastStorageHash = objectHash(storage.storage, {
                  algorithm: "md5",
                  unorderedObjects: true
                });
                const returnedStoragehash = objectHash(ctxData.storage, {
                  algorithm: "md5",
                  unorderedObjects: true
                });
                if (lastStorageHash !== returnedStoragehash)
                  storage = { state: "updated", storage: ctxData.storage };
                return {
                  action: "result",
                  data: { result, storage }
                };
              } catch (error) {
                return {
                  action: "error",
                  data: {
                    error: {
                      name: error.name,
                      message: `${error.name}: ${error.message}`
                    },
                    storage
                  }
                };
              } finally {
                this._exit();
              }
              break;
            }
            default:
              Web3Function2._log(`Unrecognized parent process event: ${event.action}`);
              throw new Error(`Unrecognized parent process event: ${event.action}`);
          }
        });
      }
      _run(ctxData) {
        return __awaiter(this, void 0, void 0, function* () {
          if (!this._onRun)
            throw new Error("Web3Function.onRun function is not registered");
          const context = {
            gelatoArgs: Object.assign(Object.assign({}, ctxData.gelatoArgs), { gasPrice: ethers_1.BigNumber.from(ctxData.gelatoArgs.gasPrice) }),
            provider: this._initProvider(ctxData.rpcProviderUrl),
            userArgs: ctxData.userArgs,
            secrets: {
              get: (key) => __awaiter(this, void 0, void 0, function* () {
                Web3Function2._log(`secrets.get(${key})`);
                return ctxData.secrets[key];
              })
            },
            storage: {
              get: (key) => __awaiter(this, void 0, void 0, function* () {
                Web3Function2._log(`storage.get(${key})`);
                return ctxData.storage[key];
              }),
              set: (key, value) => __awaiter(this, void 0, void 0, function* () {
                if (typeof value !== "string") {
                  throw new Error("Web3FunctionStorageError: value must be a string");
                }
                Web3Function2._log(`storage.set(${key},${value})`);
                ctxData.storage[key] = value;
              }),
              delete: (key) => __awaiter(this, void 0, void 0, function* () {
                Web3Function2._log(`storage.delete(${key})`);
                ctxData.storage[key] = void 0;
              })
            }
          };
          const result = yield this._onRun(context);
          return { result, ctxData };
        });
      }
      _exit(code = 0) {
        setTimeout(() => {
          this._server.close();
          Deno.exit(code);
        });
      }
      static getInstance() {
        if (!Web3Function2.Instance) {
          Web3Function2.Instance = new Web3Function2();
        }
        return Web3Function2.Instance;
      }
      static onRun(onRun) {
        Web3Function2._log("Registering onRun function");
        Web3Function2.getInstance()._onRun = onRun;
      }
      static setDebug(debug) {
        Web3Function2._debug = debug;
      }
      static _log(message) {
        if (Web3Function2._debug)
          console.log(`Web3Function: ${message}`);
      }
      _initProvider(providerUrl) {
        const provider = new ethers_1.ethers.providers.StaticJsonRpcProvider(providerUrl);
        provider.on("debug", (data) => {
          if (data.action === "response" && data.error) {
            if (/Request limit exceeded/.test(data.error.message)) {
              console.error("Web3FunctionError: RPC requests limit exceeded");
              this._exit(250);
            }
          }
        });
        return provider;
      }
    };
    exports.Web3Function = Web3Function2;
    Web3Function2._debug = false;
  }
});

// node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/types/Web3FunctionContext.js
var require_Web3FunctionContext = __commonJS({
  "node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/types/Web3FunctionContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/types/Web3FunctionEvent.js
var require_Web3FunctionEvent = __commonJS({
  "node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/types/Web3FunctionEvent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/types/Web3FunctionResult.js
var require_Web3FunctionResult = __commonJS({
  "node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/types/Web3FunctionResult.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/types/Web3FunctionSchema.js
var require_Web3FunctionSchema = __commonJS({
  "node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/types/Web3FunctionSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/types/Web3FunctionUserArgs.js
var require_Web3FunctionUserArgs = __commonJS({
  "node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/types/Web3FunctionUserArgs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/types/index.js
var require_types2 = __commonJS({
  "node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/types/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Web3FunctionContext(), exports);
    __exportStar(require_Web3FunctionEvent(), exports);
    __exportStar(require_Web3FunctionResult(), exports);
    __exportStar(require_Web3FunctionSchema(), exports);
    __exportStar(require_Web3FunctionUserArgs(), exports);
  }
});

// node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/index.js
var require_lib33 = __commonJS({
  "node_modules/@gelatonetwork/web3-functions-sdk/dist/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Web3Function(), exports);
    __exportStar(require_types2(), exports);
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/beefyfinance.js
var require_beefyfinance = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0x09dc95959978800E57464E962724a34Bb4Ac1253";
    var treasuryMultisig = "0xe37dD9A535c1D3c9fC33e3295B7e08bD1C42218D";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0x6fd13191539e0e13B381e1a3770F28D96705ce91",
      vaultOwner: "0x94A9D4d38385C7bD5715A2068D69B87FF81F4BF3",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0xDeB0a777ba6f59C78c654B8c92F80238c8002DD2",
      treasury: "0x09EF0e7b555599A9F810789FfF68Db8DBF4c51a0",
      beefyFeeRecipient: "0x7313533ed72D2678bFD9393480D0A30f9AC45c1f",
      multicall: "0xC3821F0b56FA4F4794d5d760f94B812DE261361B",
      bifiMaxiStrategy: "0xD126BA764D2fA052Fc14Ae012Aef590Bc6aE0C4f",
      beefyFeeConverterETHtoWMATIC: "0x166Ea67fA3F2257B9bafF28AaF006D33674acA7e",
      vaultRegistry: "0x820cE73c7F15C2b828aBE79670D7e61731AB93Be",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      gaugeStaker: "0xe37dD9A535c1D3c9fC33e3295B7e08bD1C42218D",
      beefyFeeConfig: "0x8E98004FE65A2eAdA63AD1DE0F5ff76d845f14E7",
      vaultFactory: "0x5a7Bdd60d6004aaED4C06cA16434f4b657d76C3D",
      wrapperFactory: "0x7e778f4cF8c7C43FB2F3C9C0b4Ce7CB7c2bad978"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/chainlink.js
var require_chainlink = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/chainlink.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chainlink = void 0;
    exports.chainlink = {
      VRFCoordinator: "0x3d2341ADb2D31f1c5530cDC622016af293177AE0"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/cometh.js
var require_cometh = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/cometh.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cometh = void 0;
    exports.cometh = {
      router: "0x93bcDc45f7e62f89a8e901DC4A0E2c6C427D9F25"
      // UniswapV2Router02
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/dfyn.js
var require_dfyn = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/dfyn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dfyn = void 0;
    exports.dfyn = {
      router: "0xA102072A4C07F06EC3B4900FDC4C7B80b6c57429"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/polyzap.js
var require_polyzap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/polyzap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.polyzap = void 0;
    exports.polyzap = {
      router: "0x4aAEC1FA8247F85Dc3Df20F4e03FEAFdCB087Ae9",
      masterchef: "0xB93C082bCfCCf5BAeA0E0f0c556668E25A41B896"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/quickswap.js
var require_quickswap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/quickswap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.quickswap = void 0;
    exports.quickswap = {
      router: "0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff",
      wethBifiLp: "0x8b80417D92571720949fC22404200AB8FAf7775f"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/sushi.js
var require_sushi = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/sushi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sushi = void 0;
    exports.sushi = {
      minichef: "0x0769fd68dFb93167989C6f7254cd0D766Fb2841F",
      router: "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506",
      tridentRouter: "0xc5017BE80b4446988e8686168396289a9A62668E",
      complexRewarderTime: "0xa3378Ca78633B3b9b2255EAa26748770211163AE"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/wault.js
var require_wault = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/wault.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wault = void 0;
    exports.wault = {
      masterchef: "0xC8Bd86E5a132Ac0bf10134e270De06A8Ba317BFe",
      router: "0x3a1D87f206D12415f5b0A33E786967680AAb4f6d"
      // UniswapV2Router02
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/polycat.js
var require_polycat = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/polycat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.polycat = void 0;
    exports.polycat = {
      masterchef: "0x8CFD1B9B7478E7B0422916B72d1DB6A9D513D734"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/iron.js
var require_iron = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/iron.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.iron = void 0;
    exports.iron = {
      masterchef_LPs: "0x65430393358e55A658BcdE6FF69AB28cF1CbB77a",
      masterchef_IronTitanLP: "0xb444d596273C66Ac269C33c30Fbb245F4ba8A79d",
      masterchef_TitanSingleAsset: "0xa37DD1f62661EB18c338f18Cf797cff8b5102d8e"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/polyyeld.js
var require_polyyeld = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/polyyeld.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.polyyeld_xyeld = exports.polyyeld = void 0;
    exports.polyyeld = {
      masterchef: "0x2DC11B394BD0f1CC6AC0a269cfe3CC0b333601B4"
    };
    exports.polyyeld_xyeld = {
      masterchef: "0x54aC698DbA046247B8D081774005A434f03d329D"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/polypup.js
var require_polypup = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/polypup.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.polypupBall = exports.polypupBone = exports.polypup = void 0;
    exports.polypup = {
      masterchef: "0xCc7E7c9FC775D25176e9Bfc5A400EdAc212aa81C",
      timelock: "0xFA256781ff98ac55f1E531d8217A7EB7Fd54F7a2"
    };
    exports.polypupBone = {
      masterchef: "0x9DcB2D5e7b5212fAF98e4a152827fd76bD55f68b",
      timelock: "0xdfe4665328DD5C5485A05c2A5252Bb44Bf6E65dc"
    };
    exports.polypupBall = {
      masterchef: "0xB5F383998d4E58C140c15C441c75bB79170b6b45",
      timelock: "0xCdC4eaB720239Ae18dd13e60488848E49d4d7137"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/apeswap.js
var require_apeswap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/apeswap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.apeswap = void 0;
    exports.apeswap = {
      minichef: "0x54aff400858Dcac39797a81894D9920f16972D1D",
      router: "0xC0788A3aD43d79aa53B09c2EaCc313A787d1d607",
      complexRewarderTime: "0x1F234B1b83e21Cb5e2b99b4E498fe70Ef2d6e3bf"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/brainswap.js
var require_brainswap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/brainswap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.brainswap = void 0;
    exports.brainswap = {
      masterchef: "0x616CAFA10C2EE31B2da90d9511C92d84bA3F4Fc7"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/mai.js
var require_mai = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/mai.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      chef: "0x574Fe4E8120C4Da1741b5Fd45584de7A5b521F0F",
      chef2: "0x0635AF5ab29Fc7bbA007B8cebAD27b7A3d3D1958",
      chef3: "0xcC54AfCeCD0d89e0B2db58f5d9e58468E7aD20dc"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/jetswap.js
var require_jetswap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/jetswap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      chef: "0x4e22399070aD5aD7f7BEb7d3A7b543e8EcBf1d85",
      router: "0x5C6EC38fb0e2609672BDf628B1fD605A523E5923"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/farmhero.js
var require_farmhero = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/farmhero.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.farmhero = void 0;
    exports.farmhero = {
      chef: "0x8e5860DF653A467D1cC5b6160Dd340E8D475724E",
      multiFeeDistribution: "0x047e7D6E8f4b6dEBa0537A7c7e852C4272981075"
      // TransparentUpgradeableProxy
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/polywise.js
var require_polywise = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/polywise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.polywise = void 0;
    exports.polywise = {
      masterchef: "0x62BA727e2449EE3BE0573b4b102D7090c5977BFB",
      timelock: "0x34926a6DeF7fFBC223747F4912eB38fd9B2609aB"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/polysage.js
var require_polysage = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/polysage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.polysage = void 0;
    exports.polysage = {
      masterchef: "0x0451b4893e4a77E7Eec3B25E816ed7FFeA1EBA68",
      timelock: "0xc8391D2ADF3969f2ecea18e69Af6Ca88abD452cb"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/balancer.js
var require_balancer = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/balancer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.balancer = void 0;
    exports.balancer = {
      router: "0xBA12222222228d8Ba445958a75a0704d566BF2C8"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/solace.js
var require_solace = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/solace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.solace = void 0;
    exports.solace = {
      rewards: "0x501ACee6350BB566EBE4A0dABDC9901100B8c445",
      xSolace: "0x501Ace47c5b0C2099C4464f681c3fa2ECD3146C1"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/platforms/dystopia.js
var require_dystopia = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/platforms/dystopia.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dystopia = void 0;
    exports.dystopia = {
      router: "0xbE75Dd16D029c6B32B7aD57A0FD9C1c20Dd2862e",
      ve: "0x060fa7aD32C510F12550c7a967999810dafC5697",
      voter: "0x649BdF58B09A0Cd4Ac848b42c4B5e1390A72A49A",
      gaugeStaker: "0x2b25fc2e80C3f4A7983306fFC72d95a553f59C9d"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/tokens/tokens.js
var require_tokens = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var MATIC = {
      name: "Wrapped Matic",
      address: "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
      symbol: "WMATIC",
      decimals: 18,
      chainId: 137,
      website: "https://polygon.technology/",
      description: "Polygon is a protocol and a framework for building and connecting Ethereum-compatible blockchain networks. Aggregating scalable solutions on Ethereum supporting a multi-chain Ethereum ecosystem.",
      logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0/logo.png"
    };
    var MAI = {
      name: "Mai",
      address: "0xa3Fa99A148fA48D14Ed51d610c367C61876997F1",
      symbol: "MAI",
      decimals: 18,
      chainId: 137,
      website: "https://www.mai.finance/",
      description: "MAI is a stablecoin collateralized by your crypto holdings. It's powered by Qi Dao, a protocol that enables any cryptocurrency community to create stablecoins backed by their native tokens.",
      logoURI: "https://raw.githubusercontent.com/0xlaozi/qidao/main/images/mimatic-red.png",
      documentation: "https://docs.mai.finance/"
    };
    var _tokens = {
      MVX: {
        name: "MVX",
        address: "0x2760E46d9BB43dafCbEcaad1F64b93207f9f0eD7",
        symbol: "MVX",
        decimals: 18,
        website: "https://metavault.trade/",
        documentation: "https://docs.metavault.trade/",
        description: "MVX is the Metavault.Trade's governance and utility token. 30% of swap and leverage trading fees are converted to $MATIC and distributed to the accounts staking MVX.",
        chainId: 137,
        logoURI: ""
      },
      BUSD: {
        name: "Binance USD",
        address: "0x9C9e5fD8bbc25984B178FdCE6117Defa39d2db39",
        symbol: "BUSD",
        decimals: 18,
        website: "https://www.binance.com/en/busd/",
        documentation: "https://www.binance.com/en/busd",
        description: "These are digitised US Dollars and are always purchased and redeemed at 1 BUSD for 1 US dollar.",
        chainId: 137,
        logoURI: ""
      },
      spUSDC: {
        name: "Stargate USD Coin LP",
        address: "0x1205f31718499dBf1fCa446663B532Ef87481fe1",
        symbol: "spUSDC",
        decimals: 6,
        website: "https://www.circle.com/usdc",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        chainId: 137,
        logoURI: "https://ftmscan.com/token/images/USDC_32.png"
      },
      "USD+": {
        name: "USD+ Stablecoin",
        symbol: "USD+",
        address: "0x236eeC6359fb44CCe8f97E99387aa7F8cd5cdE1f",
        chainId: 137,
        decimals: 6,
        website: "https://overnight.fi/",
        description: "USD+ is USDC that pays you yield daily via rebase.  It is 100% collateralized with assets immediately convertible into USDC.  Yield is generated via strategies such as lending and stable-to-stable pools. Initial strategies include Aave, Rubicon, and Pika.",
        logoURI: "",
        documentation: "https://docs.overnight.fi/"
      },
      spUSDT: {
        name: "Stargate Tether USD LP",
        symbol: "spUSDT",
        address: "0x29e38769f23701A2e4A8Ef0492e19dA4604Be62c",
        chainId: 137,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      DYST: {
        name: "Dystopia token",
        symbol: "DYST",
        address: "0x39aB6574c289c3Ae4d88500eEc792AB5B947A5Eb",
        chainId: 137,
        decimals: 18,
        logoURI: "",
        website: "https://www.dystopia.exchange/",
        description: "Dystopia is a decentralized exchange and automated market marker focused on providing efficient token swaps and deep liquidity for stablecoins and other assets. Dystopia has a sophisticated governance structure using the ve(3,3) system that provides the possibility to maximize gains for all users of the ecosystem."
      },
      SOLACE: {
        name: "solace",
        symbol: "SOLACE",
        address: "0x501acE9c35E60f03A2af4d484f49F9B1EFde9f40",
        chainId: 137,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x501acE9c35E60f03A2af4d484f49F9B1EFde9f40.svg",
        website: "https://solace.fi/",
        description: "Solace is building a community around making this space safe, secure and trusted so that we can onboard and de-risk DeFi and other crypto applications while opening the space to millions of users. We recently launched a coverage policy protocol that enables protection for liquidity providers, Defi protocols or DAOs to mitigate loss from hacks, bugs and exploits. Our purpose is to transform DeFi by delivering intelligent and empowering tools for a safe, secure and trusted industry."
      },
      PAE: {
        name: "Ripae",
        symbol: "PAE",
        address: "0x8063037ea50E4a066bF1430EA1E3e609CD5cEf6B",
        chainId: 137,
        decimals: 18,
        website: "https://matic.ripae.finance/",
        description: "Ripae Finance\u2019s full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: "https://matic.ripae.finance/static/media/ripae_pae.87e37ce1.svg"
      },
      pMATIC: {
        name: "pMATIC",
        symbol: "pMATIC",
        address: "0xA0dF47432d9d88bcc040E9ee66dDC7E17A882715",
        chainId: 137,
        decimals: 18,
        website: "https://matic.ripae.finance/",
        description: "Ripae Finance\u2019s full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: "https://matic.ripae.finance/static/media/ripae_pftm.1a3fe2b4.svg"
      },
      LCD: {
        name: "Lucidao",
        address: "0xc2A45FE7d40bCAc8369371B08419DDAFd3131b4a",
        symbol: "LCD",
        decimals: 18,
        chainId: 137,
        website: "https://lucidao.com/",
        description: "Lucidao aims to gather a community of oracles and users to build the infrastructure and facilitate the bridge between crypto and the real worlds.",
        logoURI: "https://assets.coingecko.com/coins/images/23693/large/lcd-icon-color-200px.png?1645450706"
      },
      LDO: {
        name: "Lido DAO",
        address: "0xC3C7d422809852031b44ab29EEC9F1EfF2A58756",
        symbol: "LDO",
        decimals: 18,
        chainId: 137,
        website: "https://stake.lido.fi/",
        documentation: "https://docs.lido.fi/",
        description: "Lido is a liquid staking solution for ETH 2.0 backed by industry-leading staking providers.",
        logoURI: "https://assets.coingecko.com/coins/images/13573/large/Lido_DAO.png?1609873644"
      },
      cxBTC: {
        name: "CelsiusX Wrapped BTC",
        symbol: "cxBTC",
        address: "0xD30DC92b8ec0fa8de625768d208f51A93C10aFF2",
        chainId: 137,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xD30DC92b8ec0fa8de625768d208f51A93C10aFF2.svg",
        website: "",
        description: ""
      },
      NZDS: {
        name: "New Zealand Dollar Stablecoin",
        symbol: "NZDS",
        address: "0xeaFE31Cd9e8E01C8f0073A2C974f728Fb80e9DcE",
        chainId: 137,
        decimals: 6,
        website: "https://www.techemynt.com/",
        description: "All NZDS tokens are backed 100% by New Zealand dollars held in trust in a bank account (or cash equivalents) confirmed every six months by a leading accounting firm. ",
        logoURI: "https://assets.coingecko.com/coins/images/20394/small/nzds.png?1636964381"
      },
      jNZD: {
        name: "Jarvis Synthetic New Zealand Dollar",
        symbol: "jNZD",
        address: "0x6b526Daf03B4C47AF2bcc5860B12151823Ff70E0",
        chainId: 137,
        decimals: 18,
        website: "https://jarvis.network/",
        description: "jNZD is a multi-collateralized synthetic token tracking the price of the New Zealand Dollar. It is built on the top of UMA and Chainlink.",
        logoURI: "https://app.jarvis.exchange/assets/bd5ec61c3163ddb222eaadb2ce8d8042.svg"
      },
      newQUICK: {
        name: "Quickswap",
        address: "0xB5C064F955D8e7F38fE0460C556a72987494eE17",
        symbol: "newQUICK",
        decimals: 18,
        chainId: 137,
        website: "https://quickswap.exchange/#/swap",
        description: "Next-gen Layer 2 DEX. Trade at lightning-fast speeds with near-zero gas fees.",
        logoURI: "https://assets.coingecko.com/coins/images/15185/small/quickswap.png?1620044811"
      },
      QUIDD: {
        name: "QUIDD",
        address: "0x123706cDD8e60324e610E9A2CC7012D0F45A5b8E",
        symbol: "QUIDD",
        decimals: 18,
        chainId: 137,
        website: "https://www.quiddtoken.com/",
        description: "A fungible utility token built on Ethereum, QUIDD is the cornerstone of a new, cooperative economic system that aligns the interests of collectors, creators, and developers.",
        logoURI: "https://assets.coingecko.com/coins/images/19725/small/quidd.png?1637303435"
      },
      "4EUR": {
        name: "Curve Factory 4EUR",
        symbol: "4EUR",
        address: "0xAd326c253A84e9805559b73A08724e11E49ca651",
        chainId: 137,
        decimals: 18,
        logoURI: "",
        website: "https://polygon.curve.fi",
        description: "Curves Factory 4EUR Pool"
      },
      MaticX: {
        name: "Stader Staking Matic",
        symbol: "MaticX",
        address: "0xfa68FB4628DFF1028CFEc22b4162FCcd0d45efb6",
        chainId: 137,
        decimals: 18,
        logoURI: "",
        website: "https://polygon.staderlabs.com/liquid-staking/maticx",
        description: "Stader is a non-custodial smart contract-based staking platform that helps you conveniently discover and access staking solutions. We are building key staking middleware infra for multiple PoS networks for retail crypto users, exchanges and custodians."
      },
      SD: {
        name: "Stader ",
        symbol: "SD",
        address: "0x1d734A02eF1e1f5886e66b0673b71Af5B53ffA94",
        chainId: 137,
        decimals: 18,
        logoURI: "",
        website: "https://staderlabs.com/",
        description: "Stader is a non-custodial smart contract-based staking platform that helps you conveniently discover and access staking solutions. We are building key staking middleware infra for multiple PoS networks for retail crypto users, exchanges and custodians."
      },
      beQI: {
        name: "Beefy QI",
        symbol: "beQI",
        address: "0x97bfa4b212A153E15dCafb799e733bc7d1b70E72",
        chainId: 137,
        decimals: 18,
        logoURI: "",
        website: "https://beefy.com",
        description: "beQI is a Beefy-wrapped version of eQI. Holding beQI will be a great way to earn a bunch of QI. Beefy will distribute weekly QI rewards to beQI stakers. beQI holders will recieve the same rewards as max lock eQI holders"
      },
      stMATIC: {
        name: "Lido Staked Matic stMATIC",
        symbol: "stMATIC",
        address: "0x3A58a54C066FdC0f2D55FC9C89F0415C92eBf3C4",
        chainId: 137,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/24185/large/stMATIC.png?1646789287/",
        website: "https://polygon.lido.fi/",
        description: "Lido for Polygon is a liquid staking solution for MATIC backed by industry-leading staking providers."
      },
      ONE: {
        name: "Wrapped ONE",
        address: "0x80c0CBDB8d0B190238795d376f0bD57fd40525F2",
        symbol: "WONE",
        decimals: 18,
        chainId: 137,
        website: "https://www.harmony.one/",
        description: "Harmony is an open and fast blockchain. Our mainnet runs Ethereum applications with 2-second transaction finality and 100 times lower fees.",
        logoURI: "https://res.cloudinary.com/dnz2bkszg/image/fetch/f_auto/https://raw.githubusercontent.com/sushiswap/icons/master/token/one.jpg"
      },
      METIS: {
        name: "METIS",
        address: "0xA863246658DEA34111C3C1DceDb2cfd5d6067334",
        symbol: "WMETIS",
        decimals: 18,
        chainId: 137,
        website: "https://www.metis.io/",
        description: "METIS IS SOLVING ETHEREUMS SIX BIGGEST CHALLENGES. SIMPLICITY. SPEED. STORAGE. SCALABILITY. SECURITY. SAVINGS.",
        logoURI: ""
      },
      NEAR: {
        name: "NEAR",
        symbol: "NEAR",
        address: "0x72bd80445b0db58ebe3E8dB056529D4C5FAF6F2f",
        chainId: 137,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d.svg",
        website: "https://near.org/",
        description: "Through simple, secure, and scalable technology, NEAR empowers millions to invent and explore new experiences. Business, creativity, and community are being reimagined for a more sustainable and inclusive future."
      },
      CEL: {
        name: "Celsius CEL",
        symbol: "CEL",
        address: "0xD85d1e945766Fea5Eda9103F918Bd915FbCa63E6",
        chainId: 137,
        decimals: 4,
        website: "https://celsius.network/",
        description: "An economy where financial freedom doesn't come with a price tag.  Our goal is to disrupt the financial industry, one happy user at a time, and introduce financial freedom through crypto.",
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/2700.png"
      },
      PAR: {
        name: "PAR Stablecoin",
        symbol: "PAR",
        address: "0xE2Aa7db6dA1dAE97C5f5C6914d285fBfCC32A128",
        chainId: 137,
        decimals: 18,
        website: "https://mimo.capital/",
        description: "Mimo have a lending platform allowing people to borrow PAR, a stable token algorithmically pegged to the Euro.",
        logoURI: "https://assets.coingecko.com/coins/images/14153/small/par_round_200.png?1614670422"
      },
      EURS: {
        name: "STATIS EURS Token",
        symbol: "EURS",
        address: "0xE111178A87A3BFf0c8d18DECBa5798827539Ae99",
        chainId: 137,
        decimals: 2,
        website: "https://stasis.net/",
        description: "EURS token is a virtual financial asset that is designed to digitally mirror the EURO on the condition that its value is tied to the value of its collateral.",
        logoURI: "https://assets.coingecko.com/coins/images/5164/small/EURS_300x300.png?1550571779"
      },
      EURt: {
        name: "Euro Tether",
        symbol: "EURt",
        address: "0x7BDF330f423Ea880FF95fC41A280fD5eCFD3D09f",
        chainId: 137,
        decimals: 6,
        website: "https://tether.to/en/",
        description: "Euro Tether token (EURt) is the first euro-pegged stablecoin pegged to the Euro.",
        logoURI: "https://assets.coingecko.com/coins/images/17385/small/Tether_full_logo_dm.png?1627537298"
      },
      renBTC: {
        name: "renBTC",
        symbol: "renBTC",
        address: "0xDBf31dF14B66535aF65AaC99C32e9eA844e14501",
        chainId: 137,
        decimals: 8,
        website: "https://renproject.io/",
        description: "RenBTC is an ERC-20 token built on the Ethereum network, pegged to Bitcoin. This means that each RenBTC can be always redeemed for one Bitcoin, and hence tends to maintain its value at close to the Bitcoin market rate.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xfCe146bF3146100cfe5dB4129cf6C82b0eF4Ad8c.png"
      },
      IXT: {
        name: "IX Token IXT",
        symbol: "IXT",
        address: "0xE06Bd4F5aAc8D0aA337D13eC88dB6defC6eAEefE",
        chainId: 137,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/20927/large/IXT_SYMBOL_SVG_RGB_BLACK.png?1637934555",
        website: "https://www.planetix.com/",
        description: "Planet IX is an online NFT-strategy game where a broken digital rendition of Planet Earth is its game field."
      },
      STG: {
        name: "Stargate",
        symbol: "STG",
        address: "0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590",
        chainId: 137,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590/logo.png",
        website: "https://stargate.finance/",
        description: "Stargate is a community-driven organization building the first fully composable native asset bridge, and the first dApp built on LayerZero.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      XSGD: {
        name: "StraitsX Singapore Dollar",
        symbol: "XSGD",
        address: "0x769434dcA303597C8fc4997Bf3DAB233e961Eda2",
        chainId: 137,
        decimals: 6,
        website: "https://www.straitsx.com/sg",
        description: "XSGD is the digital Singapore Dollar running on the Ethereum and Zilliqa blockchains.",
        logoURI: ""
      },
      jSGD: {
        name: "Jarvis Synthetic Singapore Dollar",
        symbol: "jSGD",
        address: "0xa926db7a4CC0cb1736D5ac60495ca8Eb7214B503",
        chainId: 137,
        decimals: 18,
        website: "https://jarvis.network/",
        description: "jSGD is a multi-collateralized synthetic token tracking the price of the Singapore Dollar. It is built on the top of UMA and Chainlink.",
        logoURI: ""
      },
      FUSE: {
        name: "Fuse",
        symbol: "FUSE",
        address: "0xF915fDDa4c882731C0456a4214548Cd13A822886",
        chainId: 137,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xd3974AE5A9BCD4AE4c9037a25A67374a11df4154/logo.png",
        website: "https://fuse.io/",
        description: "Fuse was founded in 2019 with a mission to bring the power of mobile payments to communities around the world."
      },
      ORBS: {
        name: "Orbs Token",
        symbol: "ORBS",
        address: "0x614389EaAE0A6821DC49062D56BDA3d9d45Fa2ff",
        chainId: 137,
        decimals: 18,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/3835.png",
        website: "https://www.orbs.com/",
        description: "Making Your Smart Contracts Smarter"
      },
      SX: {
        name: "SX Network SX",
        symbol: "SX",
        address: "0x840195888Db4D6A99ED9F73FcD3B225Bb3cB1A79",
        chainId: 137,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/13779/large/sx.png?1636034699",
        website: "https://sx.technology/",
        description: "SX Network is the first public blockchain to combine a smart contract platform with an on-chain community treasury and a native prediction market protocol."
      },
      GENESIS: {
        name: "Genesis Worlds GENESIS",
        symbol: "GENESIS",
        address: "0x51869836681BcE74a514625c856aFb697a013797",
        chainId: 137,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/19905/large/kKkWmniB_400x400.jpg?1636100432",
        website: "https://genesis.game/",
        description: "Genesis is a multicreator gaming universe, with a diverse community working together to achieve a common goal: A metaverse that will still be growing, evolving, and actively played in 100 years"
      },
      BICO: {
        name: "Biconomy BICO",
        symbol: "BICO",
        address: "0x91c89A94567980f0e9723b487b0beD586eE96aa7",
        chainId: 137,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/21061/large/biconomy_logo.jpg?1638269749",
        website: "https://www.biconomy.io/",
        description: "Biconomy is a multichain relayer protocol that aims to improve the user onboarding and transaction experience on decentralized applications (DApps)"
      },
      BOOK: {
        name: "Bookie Dao BOOK",
        symbol: "BOOK",
        address: "0x8192759Bf7f247cC92F74E39B3A4225516624fC1",
        chainId: 137,
        decimals: 8,
        logoURI: "https://bookie.farm/logoether/bookie200.png",
        website: "https://bookie.farm/",
        description: "Decentralized Betting, where Odds & Games meet the Bookie - play the game or be the house, your stake!"
      },
      cxETH: {
        name: "CelsiusX Wrapped ETH",
        symbol: "cxETH",
        address: "0xfe4546feFe124F30788c4Cc1BB9AA6907A7987F9",
        chainId: 137,
        decimals: 18,
        logoURI: "https://i.ibb.co/VDPBwHS/cx-ETH-128x128.png",
        website: "https://celsiusx.io/ ",
        description: "CelsiusX Wrapped ETH Token"
      },
      cxADA: {
        name: "CelsiusX Wrapped ADA",
        symbol: "cxADA",
        address: "0x64875Aaa68d1d5521666C67d692Ee0B926b08b2F",
        chainId: 137,
        decimals: 18,
        logoURI: "https://i.ibb.co/x3RcB6Q/cx-ADA-128x128.png",
        website: "https://celsiusx.io/ ",
        description: "CelsiusX Wrapped ADA Token"
      },
      cxDOGE: {
        name: "CelsiusX Wrapped DOGE",
        symbol: "cxDOGE",
        address: "0x9Bd9aD490dD3a52f096D229af4483b94D63BE618",
        chainId: 137,
        decimals: 18,
        logoURI: "https://i.ibb.co/FH1GMYX/cx-DOGE-128x128.png",
        website: "https://celsiusx.io/ ",
        description: "CelsiusX Wrapped DOGE Token"
      },
      FODL: {
        name: "Fodl Finance FODL",
        symbol: "FODL",
        address: "0x5314bA045a459f63906Aa7C76d9F337DcB7d6995",
        chainId: 137,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/19040/large/new.jpg?1634559024",
        website: "https://fodl.finance/",
        description: "Fodl enables traders to utilize leverage for their trades without paying a funding rate. This leverage is derived from existing DeFi building blocks, such as Compound and Aave."
      },
      SAND: {
        name: "Sandbox",
        symbol: "SAND",
        address: "0xBbba073C31bF03b8ACf7c28EF0738DeCF3695683",
        chainId: 137,
        decimals: 18,
        website: "https://www.sandbox.game",
        description: "The Sandbox is a virtual Metaverse where players can play, build, own, and monetize their virtual experiences. ",
        logoURI: "https://assets.coingecko.com/coins/images/12129/large/sandbox_logo.jpg?1597397942"
      },
      CADC: {
        name: "CAD Coin",
        symbol: "CADC",
        address: "0x5d146d8B1dACb1EBBA5cb005ae1059DA8a1FbF57",
        chainId: 137,
        decimals: 18,
        website: "https://paytrie.com/cadc",
        description: "CADC is a fully-backed stable coin for the Canadian Dollar, issued by PayTrie.",
        logoURI: "https://assets.coingecko.com/coins/images/14149/small/cadc_2.png?1614666625"
      },
      jCAD: {
        name: "Jarvis Synthetic Canadian Dollar",
        symbol: "jCAD",
        address: "0x8ca194A3b22077359b5732DE53373D4afC11DeE3",
        chainId: 137,
        decimals: 18,
        website: "https://jarvis.network/",
        description: "jCAD is a multi-collateralized synthetic token tracking the price of the Canadian Dollar. It is built on the top of UMA and Chainlink.",
        logoURI: "https://yield.jarvis.network/static/media/jCAD.832ff304.png"
      },
      USTw: {
        name: "TerraUSD (Wormhole)",
        symbol: "UST",
        address: "0xE6469Ba6D2fD6130788E0eA9C0a0515900563b59",
        chainId: 137,
        decimals: 6,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/7129.png",
        website: "https://coinmarketcap.com/currencies/terrausd-wormhole/",
        description: "Terra stablecoins offer instant settlements, low fees and seamless cross-border exchange - loved by millions of users and merchants."
      },
      ETH2x: {
        name: "ETH 2x Flexible Leverage Index",
        symbol: "ETH2x",
        address: "0x3Ad707dA309f3845cd602059901E39C4dcd66473",
        chainId: 137,
        decimals: 18,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/9789.png",
        website: "https://www.indexcoop.com/ethfli",
        description: "The Ethereum Flexible Leverage Index lets you leverage a collateralized debt position in a safe and efficient way, by abstracting its management into a simple index. It enabled market participants to take on leverage while minimizing the transaction costs and risks associated with maintaining collateralized debt."
      },
      gOHM: {
        name: "Governance OHM",
        symbol: "gOHM",
        address: "0xd8cA34fd379d9ca3C6Ee3b3905678320F5b45195",
        chainId: 137,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x8D9bA570D6cb60C7e3e0F31343Efe75AB8E65FB1.svg",
        website: "https://www.olympusdao.finance/",
        description: "Olympus is building a community-owned decentralized financial infrastructure to bring more stability and transparency for the world."
      },
      TUSD: {
        name: "True USD",
        symbol: "TUSD",
        address: "0x2e1AD108fF1D8C782fcBbB89AAd783aC49586756",
        decimals: 18,
        chainId: 137,
        website: "https://www.trueusd.com/",
        description: "TrueUSD is one of a number of cryptocurrency stablecoins administered by TrustToken, a platform for tokenizing real-world assets.",
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/200x200/2563.png"
      },
      WCRO: {
        name: "WCRO",
        symbol: "WCRO",
        address: "0xf2D8124b8F9267DaD61351c7aD252362880C6638",
        chainId: 137,
        decimals: 18,
        website: "https://cronos.crypto.org/",
        description: "Crypto.com Coin",
        logoURI: "https://vvs.finance/images/tokens/0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23.svg"
      },
      SHIB: {
        name: "SHIBA INU",
        symbol: "SHIB",
        address: "0x6f8a06447Ff6FcF75d803135a7de15CE88C1d4ec",
        chainId: 137,
        decimals: 18,
        website: "https://shibatoken.com/",
        description: "A Decentralized Meme Token that Evolved into a Vibrant Ecosystem.",
        logoURI: "https://assets.coingecko.com/coins/images/11939/small/shiba.png?1622619446"
      },
      FTM: {
        name: "Fantom Token",
        symbol: "FTM  ",
        address: "0xB85517b87BF64942adf3A0B9E4c71E4Bc5Caa4e5",
        chainId: 137,
        decimals: 18,
        website: "https://fantom.foundation/",
        description: "Fantom is a fast, high-throughput open-source smart contract platform for digital assets and dApps.",
        logoURI: "https://ftmscan.com/token/images/wFtm_32.png"
      },
      jEUR: {
        name: "Jarvis Synthetic Euro",
        symbol: "jEUR",
        address: "0x4e3Decbb3645551B8A19f0eA1678079FCB33fB4c",
        chainId: 137,
        decimals: 18,
        website: "https://jarvis.network/",
        description: "jEUR is a multi-collateralized synthetic token tracking the price of Euro. It is built on the top of UMA and Chainlink.",
        logoURI: "https://i.imgur.com/ZvP634G.png"
      },
      jGBP: {
        name: "Jarvis Synthetic British Pound",
        symbol: "jGBP",
        address: "0x767058F11800FBA6A682E73A6e79ec5eB74Fac8c",
        chainId: 137,
        decimals: 18,
        website: "https://jarvis.network/",
        description: "jGBP is a multi-collateralized synthetic token tracking the price of the British Pound. It is built on the top of UMA and Chainlink.",
        logoURI: "https://i.imgur.com/zOLD6Vf.png"
      },
      jCHF: {
        name: "Jarvis Synthetic Swiss Franc",
        symbol: "jCHF",
        address: "0xbD1463F02f61676d53fd183C2B19282BFF93D099",
        chainId: 137,
        decimals: 18,
        website: "https://jarvis.network/",
        description: "jCHF is a multi-collateralized synthetic token tracking the price of the Swiss Franc. It is built on the top of UMA and Chainlink.",
        logoURI: "https://i.imgur.com/EknGhAl.png"
      },
      JRT: {
        name: "Jarvis Reward Token",
        symbol: "JRT",
        address: "0x596eBE76e2DB4470966ea395B0d063aC6197A8C5",
        chainId: 137,
        decimals: 18,
        website: "https://jarvis.network/",
        description: "The Jarvis Reward Token  is a utility token for securing and governing the Jarvis network, and rewarding agents who would bring value to it.",
        logoURI: "https://cdn.coinranking.com/vLU4_a_Zp/jarvis.svg?size=48x48"
      },
      pBREW: {
        name: "pBREW",
        symbol: "pBREW",
        address: "0xb5106A3277718eCaD2F20aB6b86Ce0Fee7A21F09",
        chainId: 137,
        decimals: 18,
        website: "https://polygon.cafeswap.finance/",
        description: "Safest & Lowest fee AMM on BSC & Polygon.",
        logoURI: "https://polygon.cafeswap.finance/images/tokens/pbrew.png"
      },
      FOX: {
        name: "FOX",
        symbol: "FOX",
        address: "0x65A05DB8322701724c197AF82C9CaE41195B0aA8",
        chainId: 137,
        decimals: 18,
        website: "https://shapeshift.com/",
        description: "FOX is ShapeShift\u2019s official loyalty token. Holders of FOX enjoy zero-commission trading and win ongoing USDC crypto payments from Rainfall (payments increase in proportion to your FOX holdings). Use at ShapeShift.com.",
        logoURI: "https://assets.coingecko.com/coins/images/9988/large/FOX.png"
      },
      CRYSTL: {
        name: "CrystalToken",
        symbol: "CRYSTL",
        address: "0x76bF0C28e604CC3fE9967c83b3C3F31c213cfE64",
        chainId: 137,
        decimals: 18,
        website: "https://www.crystl.finance/",
        description: "Crystl Finance is a decentralized yield farm that runs on Polygon and ApeSwap Polygon Exchange, and pays out $CRYSTL, the native currency. With it, you can earn profits from your capital in a way that is fair, transparent, and secure.",
        logoURI: "https://www.crystl.finance/images/crystlbg.png"
      },
      TETU: {
        name: "TETU",
        symbol: "TETU",
        address: "0x255707B70BF90aa112006E1b07B9AeA6De021424",
        chainId: 137,
        decimals: 18,
        website: "https://app.tetu.io/",
        description: "Tetu implements automated yield farming strategies in order to provide investors with a safe and secure method of receiving high yield on their investments.",
        logoURI: "https://github.com/tetu-io/tetu-brand-assets/blob/master/token_icons/flat_icon.svg"
      },
      WATCH: {
        name: "YieldWatch",
        symbol: "WATCH",
        address: "0x09211Dc67f9fe98Fb7bBB91Be0ef05f4a12FA2b2",
        decimals: 18,
        chainId: 137,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/8621.png",
        website: "https://www.yieldwatch.net/",
        description: "Smart Defi Dashboard"
      },
      AXS: {
        name: "Axie Infinity Shard",
        symbol: "AXS",
        address: "0x61BDD9C7d4dF4Bf47A4508c0c8245505F2Af5b7b",
        decimals: 18,
        chainId: 137,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/200x200/6783.png",
        website: "https://axieinfinity.com/",
        description: "Axie Infinity is a Pok\xE9mon-inspired digital pet universe built on the Ethereum blockchain where anyone can earn token rewards through skilled gameplay and contributions to the ecosystem."
      },
      AVAX: {
        name: "Avalanche",
        symbol: "AVAX",
        address: "0x2C89bbc92BD86F8075d1DEcc58C7F4E0107f286b",
        decimals: 18,
        chainId: 137,
        logoURI: "https://assets.coingecko.com/coins/images/12559/small/coin-round-red.png?1604021818",
        website: "https://www.avax.network/",
        description: "Avalanche is the fastest smart contracts platform in the blockchain industry, as measured by time-to-finality, and has the most validators securing its activity of any proof-of-stake protocol."
      },
      PEAR: {
        name: "PearZap",
        symbol: "PEAR",
        address: "0xc8bcb58caEf1bE972C0B638B1dD8B0748Fdc8A44",
        decimals: 18,
        chainId: 137,
        logoURI: "https://assets.coingecko.com/coins/images/17173/small/pear200.png",
        website: "https://pearzap.com/",
        description: "PearZap is a high yield farm & pool on the Polygon Chain (MATIC) and Binance Smart Chain"
      },
      SPADE: {
        name: "PolygonFarm",
        symbol: "SPADE",
        address: "0xf5EA626334037a2cf0155D49eA6462fDdC6Eff19",
        decimals: 18,
        chainId: 137,
        logoURI: "https://polygonfarm.finance/images/spade.png",
        website: "https://polygonfarm.finance/",
        description: "PolygonFarm Finance is a community led next generation stable-yield farming protocol established exclusively on the Polygon ecosystem"
      },
      $DG: {
        name: "decentral.games",
        address: "0x2a93172c8DCCbfBC60a39d56183B7279a2F647b4",
        symbol: "$DG",
        decimals: 18,
        chainId: 137,
        logoURI: "https://raw.githubusercontent.com/sameepsi/quickswap-default-token-list/master/assets/dg.jpg",
        website: "https://decentral.games/",
        description: "decentral.games is a DAO-governed metaverse casino powered by $DG"
      },
      AAVE: {
        name: "Aave",
        address: "0xD6DF932A45C0f255f85145f286eA0b292B21C90B",
        symbol: "AAVE",
        decimals: 18,
        chainId: 137,
        website: "https://aave.com/",
        description: "Aave is a decentralized non-custodial liquidity protocol where users can participate as depositors or borrowers. Depositors provide liquidity to the market to earn a passive income, while borrowers are able to borrow in an overcollateralized (perpetually) or undercollateralized (one-block liquidity) fashion.",
        logoURI: "https://etherscan.io/token/images/aave_32.png"
      },
      AZUKI: {
        name: "DokiDokiAzuki",
        address: "0x7CdC0421469398e0F3aA8890693d86c840Ac8931",
        symbol: "AZUKI",
        decimals: 18,
        chainId: 137,
        website: "https://dokidoki.com/",
        description: "AZUKI is a secondary token designed for use in Doki Doki NFT products",
        logoURI: "https://raw.githubusercontent.com/sameepsi/quickswap-default-token-list/master/assets/azuki.png"
      },
      BAL: {
        name: "Balancer",
        symbol: "BAL",
        address: "0x9a71012B13CA4d3D0Cdc72A177DF3ef03b0E76A3",
        chainId: 137,
        decimals: 18,
        website: "https://balancer.fi/",
        description: "Balancer turns the concept of an index fund on its head: instead of a paying fees to portfolio managers to rebalance your portfolio, you collect fees from traders, who rebalance your portfolio by following arbitrage opportunities. ",
        logoURI: "https://hecoinfo.com/token/images/bal_32.png"
      },
      BANANA: {
        name: "ApeSwapFinance Banana",
        address: "0x5d47bAbA0d66083C52009271faF3F50DCc01023C",
        symbol: "BANANA",
        decimals: 18,
        chainId: 137,
        website: "https://apeswap.finance/",
        description: "ApeSwap is a leading decentralized exchange (DEX) on Binance Smart Chain and Polygon focused on offering a premier trading experience. Users are incentivized to pool liquidity on ApeSwap through yield farming to earn the native currency, $BANANA. Additionally, apes can use their earned $BANANA to stake and earn other tokens and unlock exclusive features. Built by DeFi apes, for DeFi apes, we have a dedicated team with years of experience who are committed to the DeFi community and growing the ApeSwap Jungle.",
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/BANANA.svg"
      },
      BIFI: {
        name: "beefy.finance",
        address: "0xFbdd194376de19a88118e84E279b977f165d01b8",
        symbol: "BIFI",
        decimals: 18,
        chainId: 137,
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      DAI: {
        name: "Dai Stablecoin",
        address: "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
        symbol: "DAI",
        decimals: 18,
        chainId: 137,
        website: "https://makerdao.com/",
        description: "Multi-Collateral Dai, brings a lot of new and exciting features, such as support for new CDP collateral types and Dai Savings Rate.",
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x6B175474E89094C44Da98b954EedeAC495271d0F/logo.png"
      },
      DEGEN: {
        name: "DEGEN Index",
        address: "0x8a2870fb69A90000D6439b7aDfB01d4bA383A415",
        symbol: "DEGEN",
        decimals: 18,
        chainId: 137,
        website: "https://indexed.finance/",
        description: "A higher risk/reward index of promising Ethereum protocols that have significant room to grow",
        logoURI: "https://raw.githubusercontent.com/sameepsi/quickswap-default-token-list/master/assets/DEGEN_LOGO.png"
      },
      ETH: {
        name: "Ether",
        address: "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
        symbol: "ETH",
        decimals: 18,
        chainId: 137,
        website: "https://ethereum.org/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network.",
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png"
      },
      FISH: {
        name: "Fish",
        address: "0x3a3Df212b7AA91Aa0402B9035b098891d276572B",
        symbol: "FISH",
        decimals: 18,
        chainId: 137,
        website: "https://polycat.finance/vaults",
        description: "Polycat is a value-oriented, economically sustainable and decentralized hybrid yield optimizer (yield farm and yield aggregator) running on the Polygon blockchain (formerly known as MATIC).",
        logoURI: "https://i.imgur.com/ncleoTN.png"
      },
      FRAX: {
        name: "Frax",
        address: "0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89",
        symbol: "FRAX",
        decimals: 18,
        chainId: 137,
        website: "https://frax.finance/",
        description: "The Frax Protocol introduced the world to the concept of a cryptocurrency being partially backed by collateral and partially stabilized algorithmically.",
        logoURI: "https://avatars.githubusercontent.com/u/56005256?s=200&v=4"
      },
      FXS: {
        name: "Frax Share",
        address: "0x1a3acf6D19267E2d3e7f898f42803e90C9219062",
        symbol: "FXS",
        decimals: 18,
        chainId: 137,
        website: "https://frax.finance/",
        description: "The Frax Share token (FXS) is the non-stable, utility token in the protocol. It is meant to be volatile and hold rights to governance and all utility of the system. It is important to note that we take a highly governance-minimized approach to designing trustless money in the same ethos as Bitcoin. We eschew DAO-like active management such as MakerDAO. The less parameters for a community to be able to actively manage, the less there is to disagree on. Parameters that are up for governance through FXS include adding/adjusting collateral pools, adjusting various fees (like minting or redeeming), and refreshing the rate of the collateral ratio. No other actions such as active management of collateral or addition of human-modifiable parameters are possible other than a hardfork that would require voluntarily moving to a new implementation entirely. ",
        logoURI: "https://app.sushi.com/images/tokens/fxs-square.jpg"
      },
      GHST: {
        name: "Aavegotchi GHST Token",
        address: "0x385Eeac5cB85A38A9a07A70c73e0a3271CfB54A7",
        symbol: "GHST",
        decimals: 18,
        chainId: 137,
        website: "https://www.aavegotchi.com/",
        description: "Aavegotchis are crypto-collectibles living on the Ethereum blockchain, backed by the ERC721 standard used in popular blockchain games.",
        logoURI: "https://aavegotchi.com/images/ghsttoken.svg"
      },
      GNS: {
        name: "Gains Network Token",
        address: "0xE5417Af564e4bFDA1c483642db72007871397896",
        symbol: "GNS",
        decimals: 18,
        chainId: 137,
        website: "https://gainsnetwork.io/",
        description: "Decentralized leverage trading platform on Polygon and Arbitrum.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/GNS.png",
        documentation: "https://gains-network.gitbook.io/docs-home/"
      },
      LINK: {
        name: "ChainLink Token",
        address: "0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39",
        symbol: "LINK",
        decimals: 18,
        website: "https://chain.link/",
        description: "Link is the currency used to pay the Chainlink node operators for their work. Chainlink node operators have to stake LINK in the network in order to participate and provide data services.",
        chainId: 137,
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x514910771AF9Ca656af840dff83E8264EcF986CA/logo.png"
      },
      MANA: {
        name: "Decentraland MANA",
        address: "0xA1c57f48F0Deb89f569dFbE6E2B7f46D33606fD4",
        symbol: "MANA",
        decimals: 18,
        chainId: 137,
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x0F5D2fB29fb7d3CFeE444a200298f468908cC942/logo.png"
      },
      MAI,
      miMATIC: MAI,
      MUST: {
        name: "Must",
        address: "0x9C78EE466D6Cb57A4d01Fd887D2b5dFb2D46288f",
        symbol: "MUST",
        decimals: 18,
        chainId: 137,
        website: "https://www.cometh.io/",
        description: "Explore the galaxy and mine precious tokens out of asteroids. Cometh is a defi powered game with yield generating NFT. Get a spaceship, explore the galaxy and earn tokens.",
        logoURI: "https://etherscan.io/token/images/cometh_32.png"
      },
      QI: {
        name: "Qi Dao",
        address: "0x580A84C73811E1839F75d86d75d88cCa0c241fF4",
        symbol: "QI",
        decimals: 18,
        chainId: 137,
        website: "https://www.mai.finance/",
        description: "QiDao is a self-sustaining, community-governed protocol that allows you to borrow stablecoins interest-free against your crypto assets used as collateral. Loans are paid out and repaid in miTokens (stablecoin soft pegged to the USD).",
        logoURI: "https://raw.githubusercontent.com/0xlaozi/qidao/main/images/qi.png",
        documentation: "https://docs.mai.finance/"
      },
      QUICK: {
        name: "Quickswap",
        address: "0x831753DD7087CaC61aB5644b308642cc1c33Dc13",
        symbol: "QUICK",
        decimals: 18,
        chainId: 137,
        website: "https://quickswap.exchange/#/swap",
        description: "Next-gen Layer 2 DEX. Trade at lightning-fast speeds with near-zero gas fees.",
        logoURI: "https://assets.coingecko.com/coins/images/15185/small/quickswap.png?1620044811"
      },
      dQUICK: {
        name: "Dragon's Quick",
        address: "0xf28164A485B0B2C90639E47b0f377b4a438a16B1",
        symbol: "dQUICK",
        decimals: 18,
        chainId: 137,
        website: "https://quickswap.exchange/#/syrup",
        description: "Deposit your dQUICK tokens to earn more through the QuickSwap platform.",
        logoURI: "https://assets.coingecko.com/coins/images/15185/small/quickswap.png?1620044811"
      },
      SOL: {
        name: "Solana",
        address: "0x7DfF46370e9eA5f0Bad3C4E29711aD50062EA7A4",
        symbol: "SOL",
        decimals: 18,
        chainId: 137,
        logoURI: "https://assets.coingecko.com/coins/images/4128/large/coinmarketcap-solana-200.png?1616489452",
        website: "https://solana.com/",
        description: "The Solana protocol is designed to facilitate decentralized app (DApp) creation. It aims to improve scalability by introducing a proof-of-history (PoH) consensus combined with the underlying proof-of-stake (PoS) consensus of the blockchain."
      },
      TEL: {
        name: "Telcoin",
        address: "0xdF7837DE1F2Fa4631D716CF2502f8b230F1dcc32",
        symbol: "TEL",
        decimals: 2,
        chainId: 137,
        website: "https://www.telco.in/",
        description: "A cryptocurrency distributed by your mobile operator and accepted everywhere.",
        logoURI: "https://pbs.twimg.com/profile_images/933388441475194881/57fOk40N_400x400.jpg"
      },
      UNI: {
        name: "Uniswap",
        address: "0xb33EaAd8d922B1083446DC23f610c2567fB5180f",
        symbol: "UNI",
        decimals: 18,
        website: "https://uniswap.org/",
        description: "UNI is the governance token for Uniswap. UNI was introduced on 16th September 2020 through a retrospective airdrop to users who have interacted with the protocol either by swapping tokens or by providing liquidity.",
        chainId: 137,
        logoURI: "https://raw.githubusercontent.com/sameepsi/quickswap-interface/master/public/favicon1.png"
      },
      USDC: {
        name: "USD Coin",
        address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
        symbol: "USDC",
        decimals: 6,
        website: "https://www.circle.com/usdc",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        chainId: 137,
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png"
      },
      USDT: {
        name: "Tether USD",
        address: "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
        symbol: "USDT",
        decimals: 6,
        chainId: 137,
        website: "https://tether.to/",
        description: "Tether converts cash into digital currency, to anchor or tether the value to the price of national currencies like the US dollar, the Euro, and the offshore Chinese yuan.",
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png"
      },
      VISION: {
        name: "Vision Token",
        address: "0x034b2090b579228482520c589dbD397c53Fc51cC",
        symbol: "VISION",
        decimals: 18,
        chainId: 137,
        website: "https://matic.apy.vision/",
        description: "All-in-one liquidity pool analytics and yield farming rewards tracking tool",
        logoURI: "https://s3-us-west-2.amazonaws.com/acf-uploads/apyvisionlogo200circle.png"
      },
      WBTC: {
        name: "Wrapped BTC",
        address: "0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6",
        symbol: "WBTC",
        decimals: 8,
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
        chainId: 137,
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599/logo.png"
      },
      WEXpoly: {
        name: "WEXPoly",
        address: "0x4c4BF319237D98a30A929A96112EfFa8DA3510EB",
        symbol: "WEXPoly",
        decimals: 18,
        chainId: 137,
        website: "https://wault.finance/",
        description: "WEXpoly, or Wault EXchange Token, is the foundational token of WaultSwap, on the Polygon network. ",
        logoURI: "https://assets.coingecko.com/coins/images/16282/small/ws_purple_circle_200x200_%281%29.png"
      },
      MATIC,
      WMATIC: MATIC,
      WNATIVE: MATIC,
      xMARK: {
        name: "Standard",
        address: "0xf153EfF70DC0bf3b085134928daeEA248d9B30d0",
        symbol: "xMARK",
        decimals: 9,
        chainId: 137,
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/8cb78aca77b340510958ed98a3cd260d2d7f0420/blockchains/ethereum/assets/0x36b679bd64Ed73DBfd88909cDCB892cB66Bd4CBb/logo.png",
        website: "https://benchmarkprotocol.finance/",
        description: "Benchmark Protocol is an elastic stablecoin-alternative bridging capital markets to DeFi."
      },
      YFI: {
        name: "yearn.finance",
        address: "0xDA537104D6A5edd53c6fBba9A898708E465260b6",
        symbol: "YFI",
        decimals: 18,
        chainId: 137,
        website: "https://yearn.finance/",
        description: "Yearn Finance is a suite of products in Decentralized Finance (DeFi) that provides lending aggregation, yield generation, and insurance on the Ethereum blockchain. The protocol is maintained by various independent developers and is governed by YFI holders.",
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e/logo.png"
      },
      ROUTE: {
        name: "Route",
        address: "0x16ECCfDbb4eE1A85A33f3A9B21175Cd7Ae753dB4",
        symbol: "ROUTE",
        decimals: 18,
        chainId: 137,
        website: "https://routerprotocol.com/",
        description: "Router is developing the bridging infrastructure to allow contract level data flow across various blockchains, thus enabling asset level data transfer.",
        logoURI: "https://assets.coingecko.com/coins/images/13709/small/route_token_200x200-19.png"
      },
      DFYN: {
        name: "Dfyn",
        address: "0xC168E40227E4ebD8C1caE80F7a55a4F0e6D66C97",
        symbol: "DFYN",
        decimals: 18,
        chainId: 137,
        website: "https://exchange.dfyn.network/#/swap",
        description: "With Dfyn nodes spread across multiple Layer 1 and Layer 2 blockchains, Dfyn will act as a multi-chain DEX. This will allow Dfyn to plug into a liquidity super-mesh, enabling users to perform their asset trades seamlessly on several blockchains from a single interface. Dfyn will also build a decentralized swap station to swap large assets natively like BTC, ETH, ADA in a non-custodial way.",
        logoURI: "https://raw.githubusercontent.com/dfyn/assets/main/DFYN_logo.png"
      },
      IRON: {
        name: "Iron",
        address: "0xD86b5923F3AD7b585eD81B448170ae026c65ae9a",
        symbol: "IRON",
        decimals: 18,
        chainId: 137,
        logoURI: "https://polygon.iron.finance/static/media/IRON.484ee2b8.png"
      },
      SUSHI: {
        name: "Sushi",
        address: "0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a",
        symbol: "SUSHI",
        decimals: 18,
        chainId: 137,
        website: "https://sushi.com/",
        description: "Sushi is the home of DeFi. Their community is building a comprehensive, decentralized trading platform for the future of finance. Swap, earn, stack yields, lend, borrow, leverage all on one decentralized, community driven platform.",
        logoURI: "https://app.sushi.com/static/media/logo.11fafaa5.png"
      },
      GRT: {
        name: "The Graph",
        address: "0x5fe2B58c013d7601147DcdD68C143A77499f5531",
        symbol: "GRT",
        decimals: 18,
        chainId: 137,
        website: "https://thegraph.com/",
        description: "The Graph is an indexing protocol for querying networks like Ethereum and IPFS. Anyone can build and publish open APIs, called subgraphs, making data easily accessible.",
        logoURI: "https://raw.githubusercontent.com/sushiswap/assets/master/blockchains/polygon/assets/0x5fe2B58c013d7601147DcdD68C143A77499f5531/logo.png"
      },
      WOOFY: {
        name: "Woofy",
        address: "0xD0660cD418a64a1d44E9214ad8e459324D8157f1",
        symbol: "WOOFY",
        decimals: 12,
        chainId: 137,
        website: "https://woofy.finance/",
        description: "The WOOFY token is the blue dog companion token of YFI. Utilizing special Woof technology, it allows two-way conversion between the two tokens, allowing holders to be exposed to YFI in a fluffier package.",
        logoURI: "https://raw.githubusercontent.com/sushiswap/assets/master/blockchains/polygon/assets/0xD0660cD418a64a1d44E9214ad8e459324D8157f1/logo.png"
      },
      renDOGE: {
        name: "renDOGE",
        address: "0xcE829A89d4A55a63418bcC43F00145adef0eDB8E",
        symbol: "renDOGE",
        decimals: 8,
        chainId: 137,
        website: "https://renproject.io/",
        description: "renDOGE is a one-for-one representation of Dogecoin (DOGE) on Polygon via RenVM.",
        logoURI: "https://polygonscan.com/token/images/rendogecoin_32.png"
      },
      SNX: {
        name: "SNX",
        address: "0x50B728D8D964fd00C2d0AAD81718b71311feF68a",
        symbol: "SNX",
        decimals: 18,
        chainId: 137,
        website: "https://synthetix.io/",
        description: "Synthetix is the backbone for derivatives trading in DeFi, allowing anyone, anywhere to gain on-chain exposure to a vast range of assets.",
        logoURI: "https://app.sushi.com/images/tokens/snx-square.jpg"
      },
      CRV: {
        name: "Curve Protocol",
        symbol: "CRV",
        address: "0x172370d5Cd63279eFa6d502DAB29171933a610AF",
        chainId: 137,
        decimals: 18,
        website: "https://curve.fi/",
        description: "Curve is an exchange liquidity pool on Ethereum. Curve is designed for extremely efficient stablecoin trading and low risk, supplemental fee income for liquidity providers, without an opportunity cost.",
        logoURI: "https://external-content.duckduckgo.com/ip3/resources.curve.fi.ico"
      },
      DOKI: {
        name: "DokiDoki Finance",
        symbol: "DOKI",
        address: "0x5C7F7Fe4766fE8f0fa9b41E2E4194d939488ff1C",
        chainId: 137,
        decimals: 18,
        website: "https://dokidoki.finance/stake/pool/1",
        description: "Doki is the platform token for DokiDoki Finance.",
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x9cEB84f92A0561fa3Cc4132aB9c0b76A59787544/logo.png"
      },
      PZAP: {
        name: "PolyZap",
        symbol: "PZAP",
        address: "0xeb2778f74E5ee038E67AA6c77f0F0451ABd748FD",
        chainId: 137,
        decimals: 18,
        website: "https://farm.polyzap.finance/",
        description: "PolyZap is an innovative and reliable, next-generation Automated Market Maker (AMM) and Yield Farm on the Polygon Network, with unique features and attributes:",
        logoURI: "https://polyzap.finance/logo.png"
      },
      WFIL: {
        name: "Wrapped Filecoin",
        symbol: "WFIL",
        address: "0xEde1B77C0Ccc45BFa949636757cd2cA7eF30137F",
        chainId: 137,
        decimals: 18,
        website: "https://filecoin.io/",
        description: "Filecoin is an open-source cloud storage marketplace, protocol, and cryptocurrency.",
        logoURI: "https://raw.githubusercontent.com/sushiswap/assets/master/blockchains/polygon/assets/0xEde1B77C0Ccc45BFa949636757cd2cA7eF30137F/logo.png"
      },
      ibBTC: {
        name: "Interest bearing BTC",
        symbol: "ibBTC",
        address: "0x4EaC4c4e9050464067D673102F8E24b2FccEB350",
        chainId: 137,
        decimals: 18,
        website: "https://app.badger.finance/ibBTC",
        description: "ibBTC is an asset launched in collaboration with DeFiDollar, it stands for Interest Bearing Bitcoin. It was created to serve as the default Bitcoin asset on Ethereum while generating interest to the users who hold it.",
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599/logo.png"
      },
      BNB: {
        name: "AnySwap Bridge Polygon Binance Coin",
        symbol: "BNB",
        address: "0xA649325Aa7C5093d12D6F98EB4378deAe68CE23F",
        chainId: 137,
        decimals: 18,
        website: "https://www.binance.com/",
        description: "Binance Coin (BNB) is an exchange-based token created and issued by the cryptocurrency exchange Binance. Initially created on the Ethereum blockchain as an ERC-20 token in July 2017, BNB was migrated over to Binance Chain in February 2019 and became the native coin of the Binance Chain.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c.png"
      },
      PUP: {
        name: "Polypup.Finance",
        symbol: "PUP",
        address: "0xcFe2cF35D2bDDE84967e67d00aD74237e234CE59",
        chainId: 137,
        decimals: 18,
        website: "https://www.polypup.finance/",
        description: "PolyPup Finance is a new DeFi project on Polygon featuring a deflationary token model with a maximum supply of 31,000 PUP tokens.",
        logoURI: "https://polypup.finance/images/egg/9.png"
      },
      rUSD: {
        name: "Ramp USD",
        symbol: "rUSD",
        address: "0xfC40a4F89b410a1b855b5e205064a38fC29F5eb5",
        chainId: 137,
        decimals: 18,
        website: "https://rampdefi.com/",
        description: "Ramp aims to empower users with access to a global, blockchain-agnostic liquidity network. rUSD can be minted on Binance Smart Chain and Polygon, with more chains in the near future.",
        logoURI: "https://appv2.rampdefi.com/assets/icon/rusdc.svg"
      },
      UST: {
        name: "USD Terra",
        symbol: "UST",
        address: "0x692597b009d13C4049a947CAB2239b7d6517875F",
        chainId: 137,
        decimals: 18,
        website: "https://www.terra.money/",
        description: "Terra stablecoins offer instant settlements, low fees and seamless cross-border exchange - loved by millions of users and merchants.",
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/7129.png"
      },
      WMATIC_DFYN: {
        name: "Wrapped Matic, DFYN version",
        symbol: "WMATIC",
        address: "0x4c28f48448720e9000907BC2611F73022fdcE1fA",
        chainId: 137,
        decimals: 18,
        website: "https://polygon.technology/",
        description: "DFyn version. Polygon is a protocol and a framework for building and connecting Ethereum-compatible blockchain networks. Aggregating scalable solutions on Ethereum supporting a multi-chain Ethereum ecosystem.",
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0/logo.png"
      },
      pWINGS: {
        name: "JetSwap Polygon Token",
        symbol: "pWINGS",
        address: "0x845E76A8691423fbc4ECb8Dd77556Cb61c09eE25",
        chainId: 137,
        decimals: 18,
        website: "https://jetswap.finance/",
        description: "Jetswap is a decentralized Automated Market Maker (AMM) on Binance Smart Chain & Polygon with low fees and instant trade execution. Trade from the comfort of your own wallet! ",
        logoURI: "https://polygon-info.jetswap.finance/static/media/wings.dca9f9fe.png"
      },
      HONOR: {
        name: "FarmHero HONOR",
        symbol: "HONOR",
        address: "0xb82A20B4522680951F11c94c54B8800c1C237693",
        chainId: 137,
        decimals: 18,
        website: "https://polygon.farmhero.io/",
        description: "FarmHero is a protocol that mixes NFT, gaming and DEFI concepts.",
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/10620.png"
      },
      ironICE: {
        name: "Iron Finance ICE Token",
        symbol: "ironICE",
        address: "0x4A81f8796e0c6Ad4877A51C86693B0dE8093F2ef",
        chainId: 137,
        decimals: 18,
        website: "https://iron.finance/",
        description: "Iron Finance is building a full suite of decentralized finance ecosystem of products and use cases on the Polygon network. The official Iron Finance token is the ICE token, inspired by A Song of Ice and Fire novels, where the Iron Throne is a well-known symbol.",
        logoURI: "https://app.iron.finance/static/media/ice-square.6e960434.svg"
      },
      ICE: {
        name: "IceToken",
        address: "0x4e1581f01046eFDd7a1a2CDB0F82cdd7F71F2E59",
        symbol: "ICE",
        decimals: 18,
        chainId: 137,
        website: "https://popsicle.finance/",
        description: "Popsicle is a next-gen cross-chain yield enhancement platform focusing on Automated Market-Making (AMM) Liquidity Providers (LP).",
        logoURI: "https://raw.githubusercontent.com/sushiswap/assets/master/blockchains/ethereum/assets/0xf16e81dce15B08F326220742020379B855B87DF9/logo.png"
      },
      NEXO: {
        name: "Nexo",
        symbol: "NEXO",
        address: "0x41b3966B4FF7b427969ddf5da3627d6AEAE9a48E",
        chainId: 137,
        decimals: 18,
        website: "https://nexo.io/",
        description: "Since 2018 Nexo has strived to bring professional financial services to the world of digital assets. Leveraging the best of the team\u2019s years of experience in FinTech along with the power of blockchain technology, Nexo is empowering thousands of people to harness the value behind their crypto assets and live the future of finance today.",
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/200x200/2694.png"
      },
      DINO: {
        name: "DINO",
        symbol: "DINO",
        address: "0xAa9654BECca45B5BDFA5ac646c939C62b527D394",
        chainId: 137,
        decimals: 18,
        website: "https://dinoswap.exchange/",
        description: "DinoSwap is a cross-chain infrastructure project that builds liquidity for layer-one blockchains, AMMs and partnering projects.",
        logoURI: "https://assets.coingecko.com/coins/images/17103/small/DINO.png"
      },
      BCT: {
        name: "Toucan Protocol: Base Carbon Tonne",
        symbol: "BCT",
        address: "0x2F800Db0fdb5223b3C3f354886d907A671414A7F",
        chainId: 137,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x2F800Db0fdb5223b3C3f354886d907A671414A7F.svg",
        website: "https://toucan.earth/",
        description: "Toucan Protocol brings carbon as a new money-lego to Web3. Kickstarting an open and decentralized climate finance ecosystem."
      },
      KLIMA: {
        name: "Klima DAO",
        symbol: "KLIMA",
        address: "0x4e78011Ce80ee02d2c3e649Fb657E45898257815",
        chainId: 137,
        decimals: 9,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4e78011Ce80ee02d2c3e649Fb657E45898257815.svg",
        website: "https://www.klimadao.finance/",
        description: "Klima DAO gives Web3 builders and users the opportunity to participate in the carbon market through the KLIMA token."
      },
      polyWISE: {
        name: "Polywise",
        symbol: "WISE",
        address: "0x4c19DdeebAF84cA3A255730295AD9d824D4Ff51f",
        chainId: 137,
        decimals: 18,
        website: "https://polywise.finance/",
        description: "PolyWise Finance is a next-generation yield farming protocol on the Polygon network with lots of unique and creative features that enable you to earn a passive income. We are trying to create a protocol like Yearn, but with a reduced token supply and high value for Polygon Network users, LP providers and stakers. The max supply of WISE token is 5400."
      },
      polySAGE: {
        name: "PolySage",
        symbol: "SAGE",
        address: "0x2ed945Dc703D85c80225d95ABDe41cdeE14e1992",
        chainId: 137,
        decimals: 18,
        website: "https://polysage.finance/",
        description: "PolySage Finance is a next-generation yield farming protocol on the Polygon network with lots of unique and creative features that enable you to earn a passive income.",
        logoURI: "https://polysage.finance/images/sage.png"
      },
      TOMB: {
        name: "TOMB",
        symbol: "TOMB",
        address: "0x0e98C977B943f06075b2D795794238fBfB9b9a34",
        chainId: 137,
        decimals: 18,
        logoURI: "",
        website: "https://tomb.finance/",
        description: "The first algorithmic stablecoin on Fantom Opera, pegged to the price of 1 FTM via seigniorage"
      },
      CLAM: {
        name: "Otter Clam",
        symbol: "CLAM",
        address: "0xC250e9987A032ACAC293d838726C511E6E1C029d",
        chainId: 137,
        decimals: 9,
        logoURI: "",
        website: "https://www.otterclam.finance/#/",
        description: "The first store of value meme"
      },
      HBAR: {
        name: "HBAR[0x]",
        symbol: "HBAR",
        address: "0x1646C835d70F76D9030DF6BaAeec8f65c250353d",
        chainId: 137,
        decimals: 8,
        logoURI: "",
        website: "https://hedera.com/",
        description: "Hedera is the most used enterprise-grade public network for you to make your digital world exactly as it should be \u2013 yours. HBAR is the native, energy-efficient cryptocurrency of Hedera that powers the decentralized economy. Whether youre a startup or enterprise, a creator or consumer, Hedera goes beyond blockchain for developers to create the next era of fast, fair, and secure applications."
      },
      agEUR: {
        name: "agEUR",
        symbol: "agEUR",
        address: "0xE0B52e49357Fd4DAf2c15e02058DCE6BC0057db4",
        chainId: 137,
        decimals: 18,
        logoURI: "",
        website: "https://www.angle.money/",
        description: "Angle is an over-collateralized, decentralized and capital-efficient stablecoin protocol. It offers full convertibility between stable assets and collateral at oracle value."
      },
      jJPY: {
        name: "Jarvis Synthetic Yen",
        symbol: "jJPY",
        address: "0x8343091F2499FD4b6174A46D067A920a3b851FF9",
        chainId: 137,
        decimals: 18,
        website: "https://jarvis.network/",
        description: "jJPY is a multi-collateralized synthetic token tracking the price of Yen. It is built on the top of UMA and Chainlink.",
        logoURI: ""
      },
      JPYC: {
        name: "JPY Coin",
        symbol: "JPYC",
        address: "0x431D5dfF03120AFA4bDf332c61A6e1766eF37BDB",
        chainId: 137,
        decimals: 18,
        website: "https://jpyc.jp/",
        description: "JPYC (JPYCoin) is Japan's first Japanese Yen stablecoin that utilizes blockchain technology.",
        logoURI: ""
      },
      PSP: {
        name: "ParaSwap",
        symbol: "PSP",
        address: "0x42d61D766B85431666B39B89C43011f24451bFf6",
        chainId: 137,
        decimals: 18,
        website: "https://paraswap.io/",
        description: "ParaSwap aggregates decentralized exchanges and other DeFi services in one comprehensive interface to streamline and facilitate users' interactions with decentralized finance on Ethereum and EVM-compatible chains: Polygon, Avalanche, BSC & more to come.",
        logoURI: ""
      },
      KIRO: {
        name: "Kirobo",
        symbol: "KIRO",
        address: "0xB382C1cfA622795a534e5bd56Fac93d59BAc8B0D",
        chainId: 137,
        decimals: 18,
        website: "https://www.kirobo.io/",
        description: "Kirobos decentralized applications remove the risk of losing funds enabling you to use blockchain technology to its fullest potential from one consolidated platform.",
        logoURI: ""
      },
      GIDDY: {
        name: "Giddy",
        symbol: "GIDDY",
        address: "0x67eB41A14C0fe5CD701FC9d5A3D6597A72F641a6",
        chainId: 137,
        decimals: 18,
        website: "https://www.giddy.co/",
        description: "Giddy is an in-development app that simplifies sophisticated DeFi processes into a one-tap investing experience. The app will allow users to earn passive income with crypto assets using a multi-identity, self-custody, private key solution. The fully doxxed Giddy team focuses on security, compliance, and ease of use. Its mission is simple: to grow and adapt to the ever-changing regulatory landscape. This goal will keep investors and their funds within the bounds of current financial regulation. The Giddy token standard allows smart contracts to communicate effectively with compliant tokens. Its method involves encoding contract approval data into a meta-transaction, which removes the need for standalone and infinite contract approvals. GIDDY has a max capped supply of 1 billion tokens and began trading on April 6, 2022",
        logoURI: ""
      },
      EURe: {
        name: "Monerium EURe emoney",
        symbol: "EURe",
        address: "0x18ec0A6E18E5bc3784fDd3a3634b31245ab704F6",
        chainId: 137,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/23354/small/eur.png?1643926562",
        website: "https://monerium.com/",
        description: "EURe is a Euro stable-coin from Monerium. Monerium is the first company authorized to issue money on blockchains under European financial regulation. They have issued EUR, USD, GBP, and ISK as e-money tokens on Ethereum and EUR on Algorand. Monerium also operates a gateway for instant transfers of EUR between bank accounts and blockchain wallets/smart contracts."
      },
      HOP: {
        name: "HOP Protocol",
        symbol: "HOP",
        address: "0xc5102fE9359FD9a28f877a67E36B0F050d81a3CC",
        chainId: 137,
        decimals: 18,
        website: "https://app.hop.exchange",
        description: "Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "https://docs.velodrome.finance/tokens/HOP.svg",
        documentation: "https://docs.hop.exchange/"
      },
      hETH: {
        name: "ETH Hop Token",
        symbol: "hETH",
        address: "0x1fDeAF938267ca43388eD1FdB879eaF91e920c7A",
        chainId: 137,
        decimals: 18,
        website: "https://app.hop.exchange",
        description: "hETH is the bridge token for transferring ETH via the Hop Protocol. Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "",
        documentation: "https://docs.hop.exchange/"
      },
      hUSDC: {
        name: "USDC Hop Token",
        symbol: "hUSDC",
        address: "0x9ec9551d4A1a1593b0ee8124D98590CC71b3B09D",
        chainId: 137,
        decimals: 6,
        website: "https://app.hop.exchange",
        description: "hUSDC is the bridge token for transferring USDC via the Hop Protocol. Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "",
        documentation: "https://docs.hop.exchange/"
      },
      hUSDT: {
        name: "USDT Hop Token",
        symbol: "hUSDT",
        address: "0x9F93ACA246F457916E49Ec923B8ed099e313f763",
        chainId: 137,
        decimals: 6,
        website: "https://app.hop.exchange",
        description: "hUSDT is the bridge token for transferring USDT via the Hop Protocol. Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "",
        documentation: "https://docs.hop.exchange/"
      },
      hDAI: {
        name: "DAI Hop Token",
        symbol: "hDAI",
        address: "0xb8901acB165ed027E32754E0FFe830802919727f",
        chainId: 137,
        decimals: 18,
        website: "https://app.hop.exchange",
        description: "hDAI is the bridge token for transferring DAI via the Hop Protocol. Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "",
        documentation: "https://docs.hop.exchange/"
      },
      amUSDT: {
        name: "Aave Tether USD",
        symbol: "amUSDT",
        address: "0x60D55F02A771d515e077c9C2403a1ef324885CeC",
        chainId: 137,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://tether.to/",
        description: "Aave interest bearing USDT. Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        documentation: "https://docs.aave.com/developers/v/2.0/the-core-protocol/atokens"
      },
      wamUSDT: {
        name: "Wrapped Aave Tether USD",
        symbol: "wamUSDT",
        address: "0x19C60a251e525fa88Cd6f3768416a8024e98fC19",
        chainId: 137,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://tether.to/",
        documentation: "https://docs.aave.com/developers/v/2.0/the-core-protocol/atokens",
        description: "Wrapped Aave interest bearing USDT. Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem."
      },
      bbamUSDT: {
        name: "Balancer Aave USDT Linear Pool",
        symbol: "bbamUSDT",
        address: "0xFf4ce5AAAb5a627bf82f4A571AB1cE94Aa365eA6",
        chainId: 137,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://app.balancer.fi/#/",
        documentation: "https://docs.balancer.fi/products/balancer-pools/boosted-pools",
        description: "Balancer linear pool that consist of 50/50 USDT and wrapped Aave Interest Bearing USDT."
      },
      amUSDC: {
        name: "Aave USDC",
        symbol: "amUSDC",
        address: "0x1a13F4Ca1d028320A707D99520AbFefca3998b7F",
        chainId: 137,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://www.circle.com/usdc",
        documentation: "https://docs.aave.com/developers/v/2.0/the-core-protocol/atokens",
        description: "Aave interest bearing USDC. USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      wamUSDC: {
        name: "Wrapped Aave Tether USD",
        symbol: "wamUSDC",
        address: "0x221836a597948Dce8F3568E044fF123108aCc42A",
        chainId: 137,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://www.circle.com/usdc",
        documentation: "https://docs.aave.com/developers/v/2.0/the-core-protocol/atokens",
        description: "Wrapped Aave interest bearing USDC. USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      bbamUSDC: {
        name: "Balancer Aave USDC Linear Pool",
        symbol: "bbamUSDC",
        address: "0xF93579002DBE8046c43FEfE86ec78b1112247BB8",
        chainId: 137,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://app.balancer.fi/#/",
        documentation: "https://docs.balancer.fi/products/balancer-pools/boosted-pools",
        description: "Balancer linear pool that consist of 50/50 USDC and wrapped Aave Interest Bearing USDC."
      },
      amDAI: {
        name: "Aave DAI",
        symbol: "amDAI",
        address: "0x27F8D03b3a2196956ED754baDc28D73be8830A6e",
        chainId: 137,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://makerdao.com/en/",
        documentation: "https://docs.aave.com/developers/v/2.0/the-core-protocol/atokens",
        description: "Aave interest bearing DAI. Dai is a stablecoin cryptocurrency which aims to keep its value as close to one United States dollar as possible through an automated system of smart contracts on the Ethereum blockchain."
      },
      wamDAI: {
        name: "Wrapped Aave Tether DAI",
        symbol: "wamDAI",
        address: "0xEE029120c72b0607344f35B17cdD90025e647B00",
        chainId: 137,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://makerdao.com/en/",
        documentation: "https://docs.aave.com/developers/v/2.0/the-core-protocol/atokens",
        description: "Wrapped Aave interest bearing DAI. Dai is a stablecoin cryptocurrency which aims to keep its value as close to one United States dollar as possible through an automated system of smart contracts on the Ethereum blockchain."
      },
      bbamDAI: {
        name: "Balancer Aave DAI Linear Pool",
        symbol: "bbamDAI",
        address: "0x178E029173417b1F9C8bC16DCeC6f697bC323746",
        chainId: 137,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://app.balancer.fi/#/",
        documentation: "https://docs.balancer.fi/products/balancer-pools/boosted-pools",
        description: "Balancer linear pool that consist of 50/50 DAI and wrapped Aave Interest Bearing DAI."
      },
      bbamUSD: {
        name: "Balancer Aave Stable Composable Pool",
        symbol: "bbamUSD",
        address: "0x48e6B98ef6329f8f0A30eBB8c7C960330d648085",
        chainId: 137,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://app.balancer.fi/#/",
        documentation: "https://docs.balancer.fi/products/balancer-pools/boosted-pools",
        description: "Balancer composable pool that consist of bbaUSDT, bbaUSDC, and bbaDAI. bbTokens are Aave boosted linear pools."
      },
      "2BRZ": {
        name: "Balancer 2BRZ Pool",
        symbol: "2BRZ",
        address: "0xE22483774bd8611bE2Ad2F4194078DaC9159F4bA",
        chainId: 137,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://app.balancer.fi/#/",
        documentation: "https://docs.balancer.fi/products/balancer-pools/",
        description: "Balancer composable pool that consist of BRZ and jBRL"
      },
      jBRL: {
        name: "Jarvis Synthetic Brazilian Real",
        symbol: "jBRL",
        address: "0xf2f77FE7b8e66571E0fca7104c4d670BF1C8d722",
        chainId: 137,
        decimals: 18,
        website: "https://jarvis.network/",
        description: "jBRL is a multi-collateralized synthetic token tracking the price of Brazilian Real. It is built on the top of UMA and Chainlink.",
        logoURI: "https://jarvis.network/images/jBRL.svg",
        documentation: "https://learn.jarvis.network/"
      },
      BRZ: {
        name: "BRZ Token",
        symbol: "BRZ",
        address: "0x491a4eB4f1FC3BfF8E1d2FC856a6A46663aD556f",
        chainId: 137,
        decimals: 4,
        website: "https://brztoken.io/",
        description: "BRZ is the first Brazilian stablecoin in circulation. It will allow Brazilians to directly ramp up investments in foreign exchanges and to trade a Brazilian Real (BRL) pegged stablecoin in global scale.",
        logoURI: "https://bscscan.com/token/images/brztoken_32.png",
        documentation: "https://brztoken.io/files/white_paper_BRZ_2023.pdf"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/util/convertSymbolTokenMapToAddressTokenMap.js
var require_convertSymbolTokenMapToAddressTokenMap = __commonJS({
  "node_modules/blockchain-addressbook/build/util/convertSymbolTokenMapToAddressTokenMap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertSymbolTokenMapToAddressTokenMap = void 0;
    function convertSymbolTokenMapToAddressTokenMap(symbolTokenMap) {
      return Object.fromEntries(Object.values(symbolTokenMap).map(function(t) {
        return [t.address, t];
      }));
    }
    exports.convertSymbolTokenMapToAddressTokenMap = convertSymbolTokenMapToAddressTokenMap;
  }
});

// node_modules/blockchain-addressbook/build/address-book/polygon/index.js
var require_polygon = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/polygon/index.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.polygon = void 0;
    var beefyfinance_1 = require_beefyfinance();
    var chainlink_1 = require_chainlink();
    var cometh_1 = require_cometh();
    var dfyn_1 = require_dfyn();
    var polyzap_1 = require_polyzap();
    var quickswap_1 = require_quickswap();
    var sushi_1 = require_sushi();
    var wault_1 = require_wault();
    var polycat_1 = require_polycat();
    var iron_1 = require_iron();
    var polyyeld = __importStar(require_polyyeld());
    var polypup = __importStar(require_polypup());
    var apeswap_1 = require_apeswap();
    var brainswap_1 = require_brainswap();
    var mai_1 = __importDefault(require_mai());
    var jetswap_1 = __importDefault(require_jetswap());
    var farmhero_1 = require_farmhero();
    var polywise_1 = require_polywise();
    var polysage_1 = require_polysage();
    var balancer_1 = require_balancer();
    var solace_1 = require_solace();
    var dystopia_1 = require_dystopia();
    var tokens_1 = require_tokens();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _polygon = {
      platforms: __assign(__assign(__assign({
        beefyfinance: beefyfinance_1.beefyfinance,
        chainlink: chainlink_1.chainlink,
        cometh: cometh_1.cometh,
        dfyn: dfyn_1.dfyn,
        polyzap: polyzap_1.polyzap,
        quickswap: quickswap_1.quickswap,
        sushi: sushi_1.sushi,
        wault: wault_1.wault,
        polycat: polycat_1.polycat,
        iron: iron_1.iron
      }, polyyeld), polypup), {
        apeswap: apeswap_1.apeswap,
        brainswap: brainswap_1.brainswap,
        mai: mai_1.default,
        jetswap: jetswap_1.default,
        farmhero: farmhero_1.farmhero,
        polywise: polywise_1.polywise,
        polysage: polysage_1.polysage,
        balancer: balancer_1.balancer,
        solace: solace_1.solace,
        dystopia: dystopia_1.dystopia
      }),
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.polygon = _polygon;
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/ape.js
var require_ape = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/ape.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ape = void 0;
    exports.ape = {
      masterape: "0x5c8D727b265DBAfaba67E050f2f739cAeEB4A6F9",
      router: "0xcF0feBd3f17CEf5b47b0cD257aCf6025c5BFf3b7",
      factory: "0x0841BD0B734E4F5853f0dD8d7Ea041c241fb0Da6",
      bifiBananaLp: "0x2ce820319047c407cb952060Df5f7fb3D9A9a688"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/babyswap.js
var require_babyswap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/babyswap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.babyswap = void 0;
    exports.babyswap = {
      masterchef: "0xdfAa0e08e357dB0153927C7EaBB492d1F60aC730",
      router: "0x325E343f1dE602396E256B67eFd1F61C3A6B38Bd"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/chainlink.js
var require_chainlink2 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/chainlink.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chainlink = void 0;
    exports.chainlink = {
      VRFCoordinator: "0x747973a5A2a4Ae1D3a8fDF5479f1514F65Db9C31"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/bakery.js
var require_bakery = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/bakery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bakery = void 0;
    exports.bakery = {
      masterchef: "0x20eC291bB8459b6145317E7126532CE7EcE5056f",
      router: "0xCDe540d7eAFE93aC5fE6233Bee57E1270D3E330F"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/beefyfinance.js
var require_beefyfinance2 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0x44b74ED902e6423B51Bd9e44B6e5646749376943";
    var treasuryMultisig = "0x7C780b8A63eE9B7d0F985E8a922Be38a1F7B2141";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0x65CF7E8C0d431f59787D07Fa1A9f8725bbC33F7E",
      vaultOwner: "0xA2E6391486670D2f1519461bcc915E4818aD1c9a",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0x0d5761D9181C7745855FC985f646a842EB254eB9",
      treasury: "0x4A32De8c248533C28904b24B4cFCFE18E9F2ad01",
      beefyFeeRecipient: "0xAb4e8665E7b0E6D83B65b8FF6521E347ca93E4F8",
      multicall: "0xB94858b0bB5437498F5453A16039337e5Fdc269C",
      bifiMaxiStrategy: "0xbCF1e02ac0c45729dC85F290C4A6AB35c4801cB1",
      gasPrice: "0x16cD932c494Ac1B3452d6C8453fB7665aB49EC6b",
      oldBifiMaxiStrategy: "0x87056F5E8Dce0fD71605E6E291C6a3B53cbc3818",
      oldBeefyFeeRecipient: "0xEB41298BA4Ea3865c33bDE8f60eC414421050d53",
      oldRewardPool: "0x453D4Ba9a2D594314DF88564248497F7D74d6b2C",
      oldTimelock: "0x8f0fFc8C7FC3157697Bdbf94B328F7141d6B41de",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      beefyFeeConfig: "0x97F86f2dC863D98e423E288938dF257D1b6e1553",
      vaultFactory: "0xe596eC590DE52C09c8D1C7A1294B32F957A7c94e",
      wrapperFactory: "0x85B792C67cEe281064eb7A3AF0Fe2A76E9a7849e"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/pancake.js
var require_pancake = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/pancake.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pancake = void 0;
    exports.pancake = {
      masterchefV2: "0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652",
      masterchef: "0x73feaa1eE314F8c655E354234017bE2193C9E24E",
      router: "0x10ED43C718714eb63d5aA57B78B54704E256024E",
      oldRouter: "0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F",
      bifiBnbLp: "0x3f1A9f3D9aaD8bD339eD4853F345d2eF89fbfE0c"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/ironfinance.js
var require_ironfinance = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/ironfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ironfinance = void 0;
    exports.ironfinance = {
      masterchef: "0xC5a992dD7ba108e3349D2Fd8e8E126753Ca8Ce34",
      steelchef: "0x417E816Fae93a3136D5b4fE334eFF659e3941328",
      dndchef: "0x5d8b018BF2058Cd5264AA8c97A29E23cE660B3Ea",
      dndsinglechef: "0xAA8b49a4FC0A4C94087B2A01AaC760D89D491432"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/farmhero.js
var require_farmhero2 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/farmhero.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.farmhero = void 0;
    exports.farmhero = {
      chef: "0xDAD01f1d99191a2eCb78FA9a007604cEB8993B2D"
      // TransparentUpgradeableProxy
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/ellipsis.js
var require_ellipsis = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/ellipsis.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ellipsis = void 0;
    exports.ellipsis = {
      multiFeeDistribution: "0x4076CC26EFeE47825917D0feC3A79d0bB9a6bB5c"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/elk.js
var require_elk = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/elk.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.elk = void 0;
    exports.elk = {
      router: "0xA63B831264183D755756ca9AE5190fF5183d65D6",
      factory: "0x31aFfd875e9f68cd6Cd12Cee8943566c9A4bBA13"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/wault.js
var require_wault2 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/wault.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wault = void 0;
    exports.wault = {
      masterchef: "0x22fB2663C7ca71Adc2cc99481C77Aaf21E152e2D",
      router: "0xD48745E39BbED146eEC15b79cBF964884F9877c2",
      factory: "0xB42E3FE71b7E0673335b3331B3e1053BD9822570"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/kebab.js
var require_kebab = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/kebab.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.kebab = void 0;
    exports.kebab = {
      masterchef: "0x76FCeffFcf5325c6156cA89639b17464ea833ECd",
      smartchef: "0xcbeA91d99993ACF38F9Aabff1aF961b85224DC07"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/jet.js
var require_jet = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/jet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.jet = void 0;
    exports.jet = {
      masterchef: "0x63d6EC1cDef04464287e2af710FFef9780B6f9F5",
      factory: "0x0eb58E5c8aA63314ff5547289185cC4583DfCBD5",
      router: "0xBe65b8f75B9F20f4C522e0067a3887FADa714800"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/mdex.js
var require_mdex = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/mdex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mdex = void 0;
    exports.mdex = {
      masterchef: "0xc48FE252Aa631017dF253578B1405ea399728A50",
      router: "0x7DAe51BD3E3376B8c7c4900E9107f12Be3AF1bA8"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/biswap.js
var require_biswap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/biswap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.biswap = void 0;
    exports.biswap = {
      masterchef: "0xDbc1A13490deeF9c3C12b44FE77b503c1B061739",
      router: "0x3a6d8cA21D1CF76F653A67577FA0D27453350dD8"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/emp.js
var require_emp = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/emp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.emp = void 0;
    exports.emp = {
      rewardpool: "0x97a68a7949EE30849D273b0c4450314ae26235b1",
      router: "0x10ED43C718714eb63d5aA57B78B54704E256024E"
      // PancakeSwap
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/cone.js
var require_cone = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/cone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cone = void 0;
    exports.cone = {
      router: "0xbf1fc29668e5f5Eaa819948599c9Ac1B1E03E75F",
      ve: "0xd0C1378c177E961D96c06b0E8F6E7841476C81Ef",
      voter: "0xC3B5d80E4c094B17603Ea8Bb15d2D31ff5954aAE",
      gaugeStaker: "0xA13b6c3A855d9fd084d0678cAcb8230B78416F1A"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/bolide.js
var require_bolide = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/bolide.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bolide = void 0;
    exports.bolide = {
      masterchef: "0x3782C47E62b13d579fe748946AEf7142B45B2cf7",
      router: "0x10ED43C718714eb63d5aA57B78B54704E256024E"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/swapfish.js
var require_swapfish = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/swapfish.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.swapfish = void 0;
    exports.swapfish = {
      minichef: "0x671eFBa3F6874485cC39535fa7b525fe764985e9",
      router: "0x33141e87ad2DFae5FBd12Ed6e61Fa2374aAeD029"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/platforms/thena.js
var require_thena = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/platforms/thena.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.thena = void 0;
    exports.thena = {
      router: "0x20a304a7d126758dfe6B243D0fc515F83bCA8431",
      ve: "0xfBBF371C9B0B994EebFcC977CEf603F7f31c070D",
      voter: "0x62Ee96e6365ab515Ec647C065c2707d1122d7b26"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/tokens/tokens.js
var require_tokens2 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var BNB = {
      name: "WBNB Token",
      symbol: "WBNB",
      address: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
      chainId: 56,
      decimals: 18,
      website: "https://www.binance.com/",
      description: "Binance Coin (BNB) is an exchange-based token created and issued by the cryptocurrency exchange Binance. Initially created on the Ethereum blockchain as an ERC-20 token in July 2017, BNB was migrated over to Binance Chain in February 2019 and became the native coin of the Binance Chain.",
      logoURI: "https://tokens.pancakeswap.finance/images/0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c.png"
    };
    var _tokens = {
      DEI: {
        name: "DEI",
        symbol: "DEI",
        address: "0xDE1E704dae0B4051e80DAbB26ab6ad6c12262DA0",
        chainId: 56,
        decimals: 18,
        website: "https://deus.finance/",
        description: "DEI is an advanced algorithmic cross-chain fractional-reserve stablecoin, with one native bridge that will connect to all chains within the DEUS ecosystem. The collateral ratio of DEI is constantly monitored and adjusted via arbitrage bots.",
        logoURI: "https://app.deus.finance/tokens/dei.svg",
        documentation: "https://docs.deus.finance/"
      },
      ETSAlpha: {
        name: "ETS Alpha",
        symbol: "ETS Alpha",
        address: "0x5B852898CD47d2Be1d77D30377b3642290f5Ec75",
        chainId: 56,
        decimals: 18,
        website: "https://overnight.fi/",
        description: "The exchange-traded strategies(ETS) of overnight.fi are ERC-20 structured products that lets users leverage a collateralized debt position (e.g. DAI lent on Aave) to borrow a volatile asset (e.g. WETH), pair it with a stablecoin, and provide stable-to-crypto liquidity, (e.g. WETH/DAI) in an AMM, like Uni V3. This allows earning high APY and hedging against crypto volatility. ",
        logoURI: "https://app.deus.finance/tokens/dei.svg",
        documentation: "https://docs.overnight.fi/"
      },
      THE: {
        name: "THENA",
        symbol: "THE",
        address: "0xF4C8E32EaDEC4BFe97E0F595AdD0f4450a863a11",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://thena.fi/",
        description: "We envision THENA as being the native liquidity layer of BNB Chain, enabling value creation by opening the gates for new protocols that wish to solve the cold start liquidity problem, as well as for established protocols looking for a long-term solution to reduce costs to incentivize their liquidity. THENA is a public good owned by protocols and users, with both parties contributing to THENAs status as the leading AMM. We believe that in a decentralized and open-source economy, a collaborative strategy is essential to outrun the competition and establish your product as a market leader.",
        documentation: "https://thena.gitbook.io/thena/"
      },
      FISH: {
        name: "SwapFish",
        symbol: "FISH",
        address: "0xb348B87b23D5977E2948E6f36ca07E1EC94d7328",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xb348B87b23D5977E2948E6f36ca07E1EC94d7328.svg",
        website: "https://swapfish.fi/",
        description: "Brand new decentralized platform bringing you fresh fishing farms and more.",
        oracleId: "SWAPFISH"
      },
      MGP: {
        name: "Magpie Token",
        symbol: "MGP",
        address: "0xD06716E1Ff2E492Cc5034c2E81805562dd3b45fa",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xD06716E1Ff2E492Cc5034c2E81805562dd3b45fa.svg",
        website: "https://www.magpiexyz.io/",
        documentation: "https://docs.magpiexyz.io/",
        description: "Magpie XYZ is a BNB Chain native yield-boosting platform built on top of Wombat Exchange that maximizes benefits for governance token holders."
      },
      HOOP: {
        name: "Primal Hoop",
        symbol: "HOOP",
        address: "0xF19cfb40B3774dF6Eed83169Ad5aB0Aaf6865F25",
        chainId: 56,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/27405/small/HOOP_TOKEN.png?1663837803",
        website: "https://www.chibidinos.io/",
        description: "HOOP is the reward and in-game currency for the Chibi Dinos Gaming Universe. It can be used to pay for merchandise and events; future uses include staking and governance for in-game decisions. Chibi Dinos is a basketball and dinosaur themed metaverse with games such as Primal Hoop, an arcade basketball game with an adventure role-playing game (RPG) mode and Primal Pickem, a predictive play-to earn game (P2E)."
      },
      HAY: {
        name: "Hay Stablecoin",
        symbol: "HAY",
        address: "0x0782b6d8c4551B9760e74c0545a9bCD90bdc41E5",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x0782b6d8c4551B9760e74c0545a9bCD90bdc41E5.svg",
        website: "https://helio.money/",
        description: "HAY is an over-collateralized destablecoin, where 1 HAY is always redeemable at $1 of cryptocurrency, and over-collateralized by BNB. Users can mint and borrow HAY by providing BNB as collateral, which can then be used to stake for yield, liquidity mining and as a means to transfer value."
      },
      jCHF: {
        name: "Jarvis Synthetic Swiss Franc",
        symbol: "jCHF",
        address: "0x7c869b5A294b1314E985283d01C702B62224a05f",
        chainId: 56,
        decimals: 18,
        website: "https://jarvis.network/",
        description: "jCHF is a multi-collateralized synthetic stable-coin from Jarvis tracking the price of the Swiss Franc. It is built on the top of UMA and Chainlink.",
        logoURI: "https://i.imgur.com/EknGhAl.png"
      },
      TRIVIA: {
        name: "TRIVIA",
        symbol: "TRIVIA",
        address: "0xb465f3cb6Aba6eE375E12918387DE1eaC2301B05",
        chainId: 56,
        decimals: 3,
        logoURI: "https://tokens.pancakeswap.finance/images/0xb465f3cb6Aba6eE375E12918387DE1eaC2301B05.png",
        website: "https://trivians.io/",
        description: "Trivians is the new generation crypto-powered Trivia gaming platform. It is a metaverse, where players play as Trivian characters and earn Trivian Token for their achievements."
      },
      PEEL: {
        name: "Meta Apes Peel",
        symbol: "PEEL",
        address: "0x734548a9e43d2D564600b1B2ed5bE9C2b911c6aB",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x734548a9e43d2D564600b1B2ed5bE9C2b911c6aB.png",
        website: "https://metaapesgame.com/",
        description: "Meta Apes is a free-to-play, play-and-earn MMO strategy game designed for mobile."
      },
      WOM: {
        name: "Wombat Token",
        symbol: "WOM",
        address: "0xAD6742A35fB341A9Cc6ad674738Dd8da98b94Fb1",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xAD6742A35fB341A9Cc6ad674738Dd8da98b94Fb1.svg",
        website: "https://www.wombat.exchange/",
        description: "Swap stablecoins at minimal slippage and stake at maximum yield. Just one stablecoin currency to earn it all."
      },
      MAI: {
        name: "Mai Stablecoin",
        symbol: "MAI",
        address: "0x3F56e0c36d275367b8C502090EDF38289b3dEa0d",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://www.mai.finance/",
        description: "MAI is a stablecoin collateralized by your crypto holdings. It's powered by Qi Dao, a protocol that enables any cryptocurrency community to create stablecoins backed by their native tokens.",
        documentation: "https://docs.mai.finance/"
      },
      QI: {
        name: "QiDao",
        symbol: "QI",
        address: "0xdDC3D26BAA9D2d979F5E2e42515478bf18F354D5",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://www.mai.finance/",
        description: "QiDao is a self-sustaining, community-governed protocol that allows you to borrow stablecoins interest-free against your crypto assets used as collateral. Loans are paid out and repaid in miTokens (stablecoin soft pegged to the USD).",
        documentation: "https://docs.mai.finance/"
      },
      BNBx: {
        name: "Liquid Staking BNB",
        symbol: "BNBx",
        address: "0x1bdd3Cf7F79cfB8EdbB955f20ad99211551BA275",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x70e48Eb0881a8c56BAAD37EB4491eA85Eb47b4b2.svg",
        website: "https://staderlabs.com/",
        description: "Stader is a non-custodial smart contract-based staking platform that helps you conveniently discover and access staking solutions. We are building key staking middleware infra for multiple PoS networks for retail crypto users, exchanges and custodians."
      },
      BAPE: {
        name: "Bored APEmove",
        symbol: "BAPE",
        address: "0x70e48Eb0881a8c56BAAD37EB4491eA85Eb47b4b2",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x70e48Eb0881a8c56BAAD37EB4491eA85Eb47b4b2.svg",
        website: "https://apemove.io/",
        description: "APEmove is built around an essential daily activity for most people \u2013 moving around. We are the next project to effectively bring to life a functioning move&earn concept and totally FREE to JOIN. Users equip themselves with NFTs in the form of Sneakers. By walking, jogging, or running outdoors, users will earn in-game currency, which can either be used in-game or cashed out for profit. With Game-Fi, APEmove aims to nudge millions toward a healthier lifestyle, combat climate change and connect the public to Web 3.0, all while simultaneously hinging on its Social-Fi aspect to build a long-lasting platform fostering user-generated Web 3.0 content."
      },
      SD: {
        name: "Stader (Wormhole)",
        symbol: "SD",
        address: "0x3BC5AC0dFdC871B365d159f728dd1B9A0B5481E8",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x3BC5AC0dFdC871B365d159f728dd1B9A0B5481E8.svg",
        website: "https://staderlabs.com/",
        description: "Stader (SD) token is the native governance and value accrual token for Stader."
      },
      CONE: {
        name: "Cone token",
        symbol: "CONE",
        address: "0xA60205802E1B5C6EC1CAFA3cAcd49dFeECe05AC9",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://www.cone.exchange/home",
        description: "Cone is a decentralized exchange on the BSC network with low fees, near 0 slippage on correlated assets and a strong focus on secondary markets for tokenized locks as NFTs."
      },
      stkBNB: {
        name: "Staked BNB",
        symbol: "stkBNB",
        address: "0xc2E9d07F66A89c44062459A47a0D2Dc038E4fb16",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xc2E9d07F66A89c44062459A47a0D2Dc038E4fb16.svg",
        website: "https://pstake.finance/",
        description: "pSTAKE\u2019s BNB liquid staking product allows holders of BNB to stake their assets using the BNB staking interface. Users are issued stkBNB which follows an exchange rate model, (inspired by the Compound\u2019s cToken model). stkBNB value keeps increasing against BNB as it accrues staking rewards in the background."
      },
      PSTAKE: {
        name: "pStake Finance",
        symbol: "PSTAKE",
        address: "0x4C882ec256823eE773B25b414d36F92ef58a7c0C",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4C882ec256823eE773B25b414d36F92ef58a7c0C.svg",
        website: "https://pstake.finance/",
        description: "pSTAKE is a liquid staking protocol unlocking the liquidity of staked assets. Stakers of PoS tokens can now stake their assets while maintaining the liquidity of these assets. On staking with pSTAKE, users earn staking rewards and also receive staked representative tokens (stkASSETs) which can be used in DeFi to generate additional yield (yield on top of staking rewards)."
      },
      MIX: {
        name: "MixMarvel Token",
        symbol: "MIX",
        address: "0x398f7827DcCbeFe6990478876bBF3612D93baF05",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x398f7827DcCbeFe6990478876bBF3612D93baF05.png",
        website: "https://www.mixmarvel.com/",
        description: "MixMarvel is a blockchain content-incubation platform and creators community. MixMarvel provides content-incubation services, including asset distribution, content publication, infrastructure construction, community co-creation, and other diversified scenarios, to link investors and mass users, and create a new decentralized application ecosystem."
      },
      jBRL: {
        name: "Jarvis Synthetic Brazilian Real",
        symbol: "jBRL",
        address: "0x316622977073BBC3dF32E7d2A9B3c77596a0a603",
        chainId: 56,
        decimals: 18,
        website: "https://jarvis.network/",
        description: "jBRL is a multi-collateralized synthetic token tracking the price of Brazilian Real. It is built on the top of UMA and Chainlink.",
        logoURI: "https://jarvis.network/images/jBRL.svg"
      },
      BRZ: {
        name: "BRZ Token",
        symbol: "BRZ",
        address: "0x71be881e9C5d4465B3FfF61e89c6f3651E69B5bb",
        chainId: 56,
        decimals: 4,
        website: "https://brztoken.io/",
        description: "BRZ is the first Brazilian stablecoin in circulation. It will allow Brazilians to directly ramp up investments in foreign exchanges and to trade a Brazilian Real (BRL) pegged stablecoin in global scale.",
        logoURI: "https://bscscan.com/token/images/brztoken_32.png"
      },
      BRZw: {
        name: "BRZ (Wormhole) Token",
        symbol: "BRZw",
        address: "0x5b1a9850f55d9282a7C4Bf23A2a21B050e3Beb2f",
        chainId: 56,
        decimals: 4,
        website: "https://brztoken.io/",
        description: "BRZw is the Wormhole bridged verison of BRZ. It will allow Brazilians to directly ramp up investments in foreign exchanges and to trade a Brazilian Real (BRL) pegged stablecoin in global scale.",
        logoURI: "https://bscscan.com/token/images/brztoken_32.png"
      },
      SOL: {
        name: "Solana",
        symbol: "SOL",
        address: "0x570A5D26f7765Ecb712C0924E4De545B89fD43dF",
        chainId: 56,
        decimals: 18,
        logoURI: "https://biswap.org/images/tokens/sol.svg",
        website: "https://solana.com",
        description: "Solana is the fastest blockchain in the world and the fastest growing ecosystem in crypto, with thousands of projects spanning DeFi, NFTs, Web3 and more."
      },
      GAL: {
        name: "Project Galaxy",
        symbol: "GAL",
        address: "0xe4Cc45Bb5DBDA06dB6183E8bf016569f40497Aa5",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xe4Cc45Bb5DBDA06dB6183E8bf016569f40497Aa5.png",
        website: "https://galaxy.eco/",
        description: "Project Galaxy is  a Web3 credential data networks, built on open and collaborative infrastructure and helps Web3 developers and projects leverage digital credential data and NFTs to build better products and communities"
      },
      PAE: {
        name: "Ripae",
        symbol: "PAE",
        address: "0x6c7fc3Fd4a9f1Cfa2a69B83F92b9DA7EC26240A2",
        chainId: 56,
        decimals: 18,
        website: "https://bnb.ripae.finance/",
        description: "Ripae Finance\u2019s full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: "https://bnb.ripae.finance/static/media/ripae_pae.b7a952f2.svg"
      },
      pBNB: {
        name: "pBNB",
        symbol: "pBNB",
        address: "0xA2315cC5A1e4aE3D0a491ED4Fe45EBF8356fEaC7",
        chainId: 56,
        decimals: 18,
        website: "https://bnb.ripae.finance/",
        description: "Ripae Finance\u2019s full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: "https://bnb.ripae.finance/static/media/ripae_pftm.72dccc11.svg"
      },
      beCAKE: {
        name: "Beefy Staked CAKE",
        symbol: "beCAKE",
        address: "0x42b50A901228fb4C739C19fcd38DC2182B515B66",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://beefy.com",
        description: "beCAKE is a Beefy-wrapped version of CAKE. Staking beCAKE will be a great way to earn a bunch of CAKE. Beefy will deposit and timelock into the Cake Pool earning more yield than staking without timelock, in addition a portion of all pancakeswap strategies CAKE earnings get sent to the CAKE earnings pool. beCAKE pays out its yield in CAKE."
      },
      BUSM: {
        name: "BUSM.Money",
        symbol: "BUSM",
        address: "0x6216B17f696B14701E17BCB24Ec14430261Be94A",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://busm.money/",
        description: "BUSM.Money is explosive! Provide your yield-bearing xBOMB as collateral. Once completed, you will be ableto borrow BOMB US Money (BUSM). From here the sky is the limit! Purchase any token you wish, from more BOMB to another stablecoin!"
      },
      BOMB: {
        name: "Bomb.Money",
        symbol: "BOMB",
        address: "0x522348779DCb2911539e76A1042aA922F9C47Ee3",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://app.bomb.money/",
        description: "BOMB is pegged via algorithm to a 10,000:1 ratio to BTC. $100k BTC = $10 BOMB PEG"
      },
      BSHARE: {
        name: "BSHARE",
        symbol: "BSHARE",
        address: "0x531780FAcE85306877D7e1F05d713D1B50a37F7A",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://app.bomb.money/",
        description: "BOMB is pegged via algorithm to a 10,000:1 ratio to BTC. $100k BTC = $10 BOMB PEG"
      },
      ankrBNB: {
        name: "Ankr Staked BNB",
        symbol: "ankrBNB",
        address: "0x52F24a5e03aee338Da5fd9Df68D2b6FAe1178827",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://www.ankr.com/",
        description: "Decentralized Infrastructure to Build and Earn in Web3"
      },
      aBNBc: {
        name: "Ankr BNB Reward Bearing Certificate",
        symbol: "aBNBc",
        address: "0xE85aFCcDaFBE7F2B096f268e31ccE3da8dA2990A",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://www.ankr.com/",
        description: "Decentralized Infrastructure to Build and Earn in Web3"
      },
      PEX: {
        name: "Pear DAO",
        symbol: "PEX",
        address: "0x6a0b66710567b6beb81A71F7e9466450a91a384b",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://peardao.io/",
        description: "Trade, earn and meet people in the new decentralized marketplace."
      },
      FROYO: {
        name: "Froyo",
        symbol: "FROYO",
        address: "0xe369fec23380f9F14ffD07a1DC4b7c1a9fdD81c9",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://froyo.games/",
        description: "Be part of the future of gaming with play to earn games, NFTs & digital assets."
      },
      VALAS: {
        name: "Valas Finance",
        symbol: "VALAS",
        address: "0xB1EbdD56729940089Ecc3aD0BBEEB12b6842ea6F",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://valasfinance.com/markets",
        description: "Valas is a decentralised non-custodial liquidity market protocol where users can participate as depositors or borrowers. Depositors provide liquidity to the market to earn a passive income, while borrowers are able to borrow in an overcollateralised (perpetually) or undercollateralised (one-block liquidity) fashion."
      },
      sbBUSD: {
        chainId: 56,
        address: "0x98a5737749490856b401DB5Dc27F522fC314A4e1",
        decimals: 6,
        name: "Stargate Binance USD LP",
        symbol: "sbBUSD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xaEb044650278731Ef3DC244692AB9F64C78FfaEA/logo.png",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      sbUSDT: {
        name: "Stargate Tether USD LP",
        symbol: "sbUSDT",
        address: "0x9aA83081AA06AF7208Dcc7A4cB72C94d057D2cda",
        chainId: 56,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      STG: {
        name: "Stargate",
        symbol: "STG",
        address: "0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590",
        chainId: 56,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590/logo.png",
        website: "https://stargate.finance/",
        description: "Stargate is a community-driven organization building the first fully composable native asset bridge, and the first dApp built on LayerZero.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      EMP: {
        name: "EMP.Money",
        symbol: "EMP",
        address: "0x3b248CEfA87F836a4e6f6d6c9b42991b88Dc1d58",
        chainId: 56,
        decimals: 18,
        logoURI: "https://emp.money/static/media/emp-final2.bb119013",
        website: "https://emp.money/",
        description: "EMP Money offers the first decentralised algorithmic stable coin on Binance Smartchain, pegged to the price of Ethereum via seigniorage at a rate of 4000 EMP: 1 ETH."
      },
      ESHARE: {
        name: "EMP.Money Shares",
        symbol: "ESHARE",
        address: "0xDB20F6A8665432CE895D724b417f77EcAC956550",
        chainId: 56,
        decimals: 18,
        logoURI: "https://emp.money/static/media/eshares-final2.bd716d0f.gif",
        website: "https://emp.money/",
        description: "EMP Money offers the first decentralised algorithmic stable coin on Binance Smartchain, pegged to the price of Ethereum via seigniorage at a rate of 4000 EMP: 1 ETH."
      },
      APE: {
        name: "ApeCoin",
        symbol: "APE",
        address: "0x0b079B33B6e72311c6BE245F9f660CC385029fc3",
        chainId: 56,
        decimals: 18,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/18876.png",
        website: "http://apecoin.com/",
        description: "ApeCoin is an ERC-20 governance and utility token used within the APE Ecosystem to empower and incentivize a decentralized community building at the forefront of web3."
      },
      DUET: {
        name: "Duet Protocol",
        symbol: "DUET",
        address: "0x95EE03e1e2C5c4877f9A298F1C0D6c98698FAB7B",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x95EE03e1e2C5c4877f9A298F1C0D6c98698FAB7B.svg",
        website: "https://www.duet.finance/",
        description: "A parallel universe which turns flat assets into sharp assets"
      },
      ERA: {
        name: "Era7",
        symbol: "ERA",
        address: "0x6f9F0c4ad9Af7EbD61Ac5A1D4e0F2227F7B0E5f9",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x6f9F0c4ad9Af7EbD61Ac5A1D4e0F2227F7B0E5f9.svg",
        website: "https://www.era7.io/",
        description: "Era7: Game of Truth is a metaverse-style Trading Card Game"
      },
      GMT: {
        name: "Green Metaverse Token",
        symbol: "GMT",
        address: "0x3019BF2a2eF8040C242C9a4c5c4BD4C81678b2A1",
        chainId: 56,
        decimals: 8,
        logoURI: "https://tokens.pancakeswap.finance/images/0x3019BF2a2eF8040C242C9a4c5c4BD4C81678b2A1.svg",
        website: "https://www.stepn.com/",
        description: "Green Metaverse Token is the currency of STEPN, a Web 3 lifestyle app with social-fi and game-fi elements."
      },
      BSW: {
        name: "Biswap",
        symbol: "BSW",
        address: "0x965F527D9159dCe6288a2219DB51fc6Eef120dD1",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x965F527D9159dCe6288a2219DB51fc6Eef120dD1.svg",
        website: "https://biswap.org/",
        description: "The First DEX on BNB Chain with a three-type referral system"
      },
      ERTHA: {
        name: "ERTHA",
        symbol: "ERTHA",
        address: "0x62823659d09F9F9D2222058878f89437425eB261",
        chainId: 56,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/20317/large/Ry9tgUal_400x400.jpg?1636856709",
        website: "https://ertha.io/",
        description: "Own NFT land in ERTHA metaverse & generate lifetime revenue"
      },
      RACA: {
        name: "Radio Caca",
        symbol: "RACA",
        address: "0x12BB890508c125661E03b09EC06E404bc9289040",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x12BB890508c125661E03b09EC06E404bc9289040.svg",
        website: "https://www.radiocaca.com/",
        description: "RACA is the native token for blockchain P2E game Metamon and for the Universal Metaverse (a.k.a. USM)."
      },
      FUSE: {
        name: "Fuse Token on BSC",
        symbol: "FUSE",
        address: "0x5857c96DaE9cF8511B08Cb07f85753C472D36Ea3",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x5857c96DaE9cF8511B08Cb07f85753C472D36Ea3.svg",
        website: "https://fuse.io/",
        description: "Fuse token is the primary currency of the network and the decentralized applications that it support."
      },
      DSHARE: {
        name: "DSHARE",
        symbol: "DSHARE",
        address: "0x26d3163b165BE95137CEe97241E716b2791a7572",
        chainId: 56,
        decimals: 18,
        logoURI: "https://www.dibs.money/static/media/dshare.27e9dda3.png",
        website: "https://www.dibs.money/",
        description: "DIBS is a stablecoin pegged to the price of BNB."
      },
      DIBS: {
        name: "DIBS",
        symbol: "DIBS",
        address: "0xFd81Ef21EA7CF1dC00e9c6Dd261B4F3BE0341d5c",
        chainId: 56,
        decimals: 18,
        logoURI: "https://www.dibs.money/static/media/dibs.01460d5a.png",
        website: "https://www.dibs.money/",
        description: "DIBS is a stablecoin pegged to the price of BNB."
      },
      AOT: {
        name: "A.O.T.",
        symbol: "AOT",
        address: "0x9589014F7a8547B89A6331eEEe32b7fBd5852af9",
        chainId: 56,
        decimals: 6,
        logoURI: "https://bscscan.com/token/images/ageoftanks2_32.png",
        website: "https://ageoftanks.io/",
        description: "Bitcrush uses a hybrid approach that allows centralized gameplay utilizing a non-custodial live wallet."
      },
      CRUSH: {
        name: "Crush Coin",
        symbol: "CRUSH",
        address: "0x0Ef0626736c2d484A792508e99949736D0AF807e",
        chainId: 56,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/CRUSH.svg",
        website: "https://www.bitcrush.com/",
        description: "Bitcrush uses a hybrid approach that allows centralized gameplay utilizing a non-custodial live wallet."
      },
      STATIC: {
        name: "STATIC",
        symbol: "STATIC",
        address: "0x7dEb9906BD1d77B410a56E5C23c36340Bd60C983",
        chainId: 56,
        decimals: 18,
        logoURI: "https://www.chargedefi.fi/static/media/static.180ec003.png",
        website: "https://www.chargedefi.fi/",
        description: "Algorithmic Stablecoin ecosystem with rebase mechanics."
      },
      CHARGE: {
        name: "CHARGE",
        symbol: "CHARGE",
        address: "0x1C6bc8e962427dEb4106aE06A7fA2d715687395c",
        chainId: 56,
        decimals: 18,
        logoURI: "https://www.chargedefi.fi/static/media/charge.53089c19.png",
        website: "https://www.chargedefi.fi/",
        description: "Algorithmic Stablecoin ecosystem with rebase mechanics."
      },
      BISON: {
        name: "Bison",
        symbol: "BISON",
        address: "0x19A6Da6e382b85F827088092a3DBe864d9cCba73",
        chainId: 56,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/BISON.svg",
        website: "https://bishares.finance/",
        description: "Gain exposure in an easy and fast way to several crypto assets represented by a single token. Earn passive yield by staking on BiShares farms."
      },
      NUGGET: {
        name: "Gold Nugget",
        symbol: "NUGGET",
        address: "0xE0B58022487131eC9913C1F3AcFD8F74FC6A6C7E",
        chainId: 56,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/NUGGET.svg",
        website: "https://block-mine.io/",
        description: "A revolutionary sustainable Liquidity Mining Solution on Binance Smart Chain (Sustainable Mining, Token Evolution, Wild-West Gaming & Restricted Chain Routing)."
      },
      GOLDCOIN: {
        name: "Goldcoin",
        symbol: "GOLDCOIN",
        address: "0xF2f02f60fD1a376270e777Aa2a4667329E3984eD",
        chainId: 56,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/GOLDCOIN.svg",
        website: "https://block-mine.io/",
        description: "A revolutionary sustainable Liquidity Mining Solution on Binance Smart Chain (Sustainable Mining, Token Evolution, Wild-West Gaming & Restricted Chain Routing)."
      },
      FRAX: {
        name: "Frax Token",
        symbol: "FRAX",
        address: "0x90C97F71E18723b0Cf0dfa30ee176Ab653E89F40",
        chainId: 56,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/FRAX.png",
        website: "https://frax.finance/",
        description: "Frax is the world\u2019s first fractional-algorithmic stablecoin."
      },
      FXS: {
        name: "Frax Share",
        symbol: "FXS",
        address: "0xe48A3d7d0Bc88d552f730B62c006bC925eadB9eE",
        chainId: 56,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/FXS.png",
        website: "https://frax.finance/",
        description: "The Frax Protocol introduced the world to the concept of a cryptocurrency being partially backed by collateral and partially stabilized algorithmically."
      },
      BETU: {
        name: "BETU Token",
        symbol: "BETU",
        address: "0x0df1B3F30865C5b324797F8dB9d339514caC4e94",
        chainId: 56,
        decimals: 18,
        logoURI: "https://assets.trustwalletapp.com/blockchains/smartchain/assets/0x0df1B3F30865C5b324797F8dB9d339514caC4e94/logo.png",
        website: "https://www.betu.io/",
        description: "Sports, esports & crypto betting platform. Secured by smart contracts & powered by the BETU token."
      },
      OASIS: {
        name: "OASIS",
        symbol: "OASIS",
        address: "0xb19289b436b2F7A92891ac391D8f52580d3087e4",
        chainId: 56,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/OASIS.svg",
        website: "https://projectoasis.io/",
        description: "ProjectOasis is a metaverse built for users to socialize and interact with various Dapps and protocols available within DeFi"
      },
      CEEK: {
        name: "CEEK",
        symbol: "CEEK",
        address: "0xe0F94Ac5462997D2BC57287Ac3a3aE4C31345D66",
        chainId: 56,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/CEEK.png",
        website: "https://www.ceek.com/",
        description: "CEEK (CEEK) is a decentralized platform featuring global superstars like Lady Gaga, Katy Perry, Ziggy Marley, Bon Jovi, UFC Champion Francis Ngannou, 3x NBA Champion Dwyane Wade and more."
      },
      BABY: {
        name: "BabySwap Token",
        symbol: "BABY",
        address: "0x53E562b9B7E5E94b81f10e96Ee70Ad06df3D2657",
        chainId: 56,
        decimals: 18,
        logoURI: "https://bscscan.com/token/images/babyswap_32.png",
        website: "https://babyswap.finance",
        description: "BabySwap is the best AMM+NFT decentralized exchange for newborn projects on Binance Smart Chain, providing a more friendly trading experience and better project support."
      },
      NFTY: {
        name: "NFTY Token",
        symbol: "NFTY",
        address: "0x5774B2fc3e91aF89f89141EacF76545e74265982",
        chainId: 56,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/NFTY.png",
        website: "https://nftynetwork.io/",
        description: "NFTYLabs envisions a world where NFTs function as a medium of access, bringing a means of utility and privilege to NFT holders in a secure and confidential manner."
      },
      BETA: {
        name: "Beta Token",
        symbol: "BETA",
        address: "0xBe1a001FE942f96Eea22bA08783140B9Dcc09D28",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xBe1a001FE942f96Eea22bA08783140B9Dcc09D28.svg",
        website: "https://betafinance.org/",
        description: "Beta Finance is the permissionless money market for borrowing, lending, and shorting crypto assets."
      },
      SING: {
        name: "Sing Token",
        symbol: "SING",
        address: "0x23894C0ce2d79B79Ea33A4D02e67ae843Ef6e563",
        chainId: 56,
        decimals: 18,
        website: "https://singular.farm/",
        description: "Singular is a multichain, decentralized, strategic yield farm running on Polygon, BSC, Fantom and Okchain. Users are incentivized with a triple farming system.",
        logoURI: "https://github.com/singularfarm/assets/blob/main/400.png?raw=true"
      },
      ONG: {
        name: "Ontology Gas Token",
        symbol: "ONG",
        address: "0x308bfaeAaC8BDab6e9Fc5Ead8EdCb5f95b0599d9",
        chainId: 56,
        decimals: 18,
        website: "https://ont.io/",
        description: "Ontology is a high performance, open source blockchain specializing in digital identity and data.",
        logoURI: "https://apeswap.finance/images/tokens/ONG.svg"
      },
      PACOCA: {
        name: "Pacoca",
        symbol: "PACOCA",
        address: "0x55671114d774ee99D653D6C12460c780a67f1D18",
        chainId: 56,
        decimals: 18,
        logoURI: "https://bscscan.com/token/images/pacoca_32.png",
        description: "Invest in yield-optimizing vaults and track your DeFi assets on BSC",
        website: "https://pacoca.io/"
      },
      ANN: {
        name: "Annex",
        symbol: "ANN",
        address: "0x98936Bde1CF1BFf1e7a8012Cee5e2583851f2067",
        chainId: 56,
        decimals: 18,
        logoURI: "https://app.annex.finance/images/coins/ANN.png",
        description: "A Decentralized Marketplace for Lenders and Borrowers with Borderless Stablecoins.",
        website: "https://www.annex.finance/"
      },
      CZF: {
        name: "Chinese Zodiac",
        symbol: "CZF",
        address: "0x7c1608C004F20c3520f70b924E2BfeF092dA0043",
        chainId: 56,
        decimals: 18,
        logoURI: "https://github.com/chinese-zodiac/czodiac-site/blob/main/src/images/czodiac-coin.png?raw=true",
        description: "Chinese Zodiac is a lending and NFT ecosystem, with a unique NFT Tiger Hunt game.",
        website: "https://app.czodiac.com/#/"
      },
      LONG: {
        name: "Longdrink Finance",
        symbol: "LONG",
        address: "0x5317fA16f8603bE9C461DeF5D5A1Bf28DfE42d55",
        chainId: 56,
        decimals: 18,
        logoURI: "https://longdrink.finance/static/media/longdrink-logo.0b6c21de.png",
        description: "Longdrink Finance creates index tokens on Binance Smart Chain. LONG is the protocol's governance token enabling holders to decide on the composition of future indices and their weightings, as well as fee capturing within the protocol.",
        website: "https://longdrink.finance/#/"
      },
      PEAR: {
        name: "PearZap",
        symbol: "PEAR",
        address: "0xdf7C18ED59EA738070E665Ac3F5c258dcc2FBad8",
        decimals: 18,
        chainId: 56,
        logoURI: "https://assets.coingecko.com/coins/images/17173/small/pear200.png",
        description: "High yields farms & pools on the Polygon chain & Binance Smart Chain",
        website: "https://bsc.pearzap.com/"
      },
      TLOS: {
        name: "Telos",
        symbol: "TLOS",
        address: "0xb6C53431608E626AC81a9776ac3e999c5556717c",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xb6C53431608E626AC81a9776ac3e999c5556717c.svg",
        description: "Telos is built for speed and scalability making it the ideal network for mainstream adoption \u2013 Telos based Tokens NFT\u2019s and Smart Contracts are already used for DeFi, Gaming, Social Media apps and so much more. ",
        website: "https://www.telos.net/"
      },
      BSCDEFI: {
        name: "BSC Defi Blue Chips",
        symbol: "BSCDEFI",
        address: "0x40E46dE174dfB776BB89E04dF1C47d8a66855EB3",
        chainId: 56,
        decimals: 18,
        logoURI: "https://powerindex.io/images/index-tokens/sdefi.svg",
        description: "Build your own exposure to DeFi using bullish, bearish, and hedged investment DAO-managed DeFi products with rewards. More details on powerpool.finance",
        website: "https://powerindex.io/#/binance/"
      },
      ELK: {
        name: "Elk Finance",
        symbol: "ELK",
        address: "0xE1C110E1B1b4A1deD0cAf3E42BfBdbB7b5d7cE1C",
        chainId: 56,
        decimals: 18,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/200x200/10095.png",
        description: "Elk.Finance is a cross-chain liquidity network, allowing for instantaneous exchange of tokens between chains. Elk.Finance also aims to provide the first gyroscopic stablecoin (CHFT) available on multiple chains for blazing fast payments anytime, anywhere.",
        website: "https://elk.finance/"
      },
      AURO: {
        name: "Viralata",
        symbol: "AURO",
        address: "0x8d9A79314c4e09A7c53C124195cAeB8B89F4879D",
        chainId: 56,
        decimals: 18,
        logoURI: "https://app.viralata.finance/nextimg/%2Fimages%2Ftokens%2Fauro.png/128/50?url=%2Fimages%2Ftokens%2Fauro.png&w=128&q=50",
        description: "Viralata Finance",
        website: "https://app.viralata.finance/"
      },
      NAOS: {
        name: "NAOS Finance",
        symbol: "NAOS",
        address: "0x758d08864fB6cCE3062667225ca10b8F00496cc2",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x758d08864fB6cCE3062667225ca10b8F00496cc2.png",
        description: "DeFi Lending",
        website: "https://naos.finance/"
      },
      USDO: {
        name: "USD Open Dollar",
        symbol: "USDO",
        address: "0x5801D0e1C7D977D78E4890880B8E579eb4943276",
        chainId: 56,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/14828/small/New_USDO_32px_.png",
        website: "https://omnifarms.ocp.finance/",
        description: "USDO is a decentralised stablecoin backed by a verifiable collateral pool of on-chain assets."
      },
      FET: {
        name: "Fetch",
        symbol: "FET",
        address: "0x031b41e504677879370e9DBcF937283A8691Fa7f",
        chainId: 56,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/5681/small/Fetch.jpg",
        website: "https://fetch.ai/",
        description: "Fetch.ai is delivering AI to the crypto economy."
      },
      YEL: {
        name: "YEL Token",
        symbol: "YEL",
        address: "0xD3b71117E6C1558c1553305b44988cd944e97300",
        chainId: 56,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/YEL.svg",
        website: "https://yel.finance/",
        description: "Yield Enhancement Labs core mission is to help projects gain liquidity across multiple chains while building token economics with constant buy-pressure for YEL token"
      },
      rUSD: {
        name: "Ramp Defi USD",
        symbol: "rUSD",
        address: "0x07663837218A003e66310a01596af4bf4e44623D",
        chainId: 56,
        decimals: 18,
        logoURI: "https://www.rampdefi.com/icons/ramp_v4.svg",
        description: "Ramp Defi USD pegged token",
        website: "https://www.rampdefi.com/"
      },
      BP: {
        name: "Bunny Park",
        symbol: "BP",
        address: "0xACB8f52DC63BB752a51186D1c55868ADbFfEe9C1",
        chainId: 56,
        decimals: 18,
        logoURI: "https://assets.trustwalletapp.com/blockchains/smartchain/assets/0x477bC8d23c634C154061869478bce96BE6045D12/logo.png",
        description: "NFT & Yield Farm on Binance Smart Chain",
        website: "https://www.bunnypark.com/"
      },
      SFUND: {
        name: "Seedify",
        symbol: "SFUND",
        address: "0x477bC8d23c634C154061869478bce96BE6045D12",
        chainId: 56,
        decimals: 18,
        logoURI: "https://assets.trustwalletapp.com/blockchains/smartchain/assets/0x477bC8d23c634C154061869478bce96BE6045D12/logo.png",
        description: "Incubator & Launchpad for Blockchain Games & Gamers",
        website: "https://launchpad.seedify.fund/"
      },
      CAPS: {
        name: "Capsule Coin",
        symbol: "CAPS",
        address: "0xFfBa7529AC181c2Ee1844548e6D7061c9A597dF4",
        chainId: 56,
        decimals: 18,
        logoURI: "https://apeswap.finance/images/tokens/CAPS.svg",
        description: "NFT-Based Decentralized Data Transmission Blockchain.",
        website: "https://www.ternoa.com/"
      },
      WUSD: {
        name: "Wault USD",
        symbol: "WUSD",
        address: "0x3fF997eAeA488A082fb7Efc8e6B9951990D0c3aB",
        chainId: 56,
        decimals: 18,
        website: "https://wault.finance/",
        description: "WUSD is Wault Finance's commerce-backed stablecoin! The world's first commerce-backed stablecoin!",
        logoURI: "https://app.wault.finance/bsc/assets/images/stablecoin/wusd.svg"
      },
      CYT: {
        name: "Coinary Token",
        symbol: "CYT",
        address: "0xd9025e25Bb6cF39f8c926A704039D2DD51088063",
        chainId: 56,
        decimals: 18,
        website: "https://dragonary.com/",
        description: "CYT is used as the currency for the game Dragonary and throughout the Coinary gaming multiverse.",
        logoURI: "https://gblobscdn.gitbook.com/spaces%2F-Mdx-7pkiD2Xoca5jkXV%2Favatar-1626481398232.png?alt=media"
      },
      LAND: {
        name: "Landshare Token",
        symbol: "LAND",
        address: "0x9D986A3f147212327Dd658F712d5264a73a1fdB0",
        chainId: 56,
        decimals: 18,
        website: "https://landshare.io/",
        description: "Bringing Real Estate to the Blockchain. Landshare offers a hassle-free alternative to traditional real estate investments.",
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/LAND.svg"
      },
      GUARD: {
        name: "Guardian",
        symbol: "GUARD",
        address: "0xF606bd19b1E61574ED625d9ea96C841D4E247A32",
        chainId: 56,
        decimals: 18,
        website: "https://www.wolfdencrypto.com",
        description: "The first decentralized token designed specifically to earn you passive income by unlocking high yield staking and farming opportunities on multiple platforms across the BSC Network",
        logoURI: "https://apeswap.finance/images/tokens/GUARD.png"
      },
      POTS: {
        name: "Moonpot",
        symbol: "POTS",
        address: "0x3Fcca8648651E5b974DD6d3e50F61567779772A8",
        chainId: 56,
        decimals: 18,
        website: "https://moonpot.com/",
        description: "The win-win lottery on BSC where every ticket earns you interest.",
        logoURI: "https://assets.trustwalletapp.com/blockchains/smartchain/assets/0x3Fcca8648651E5b974DD6d3e50F61567779772A8/logo.png"
      },
      REVV: {
        name: "REVV",
        symbol: "REVV",
        address: "0x833F307aC507D47309fD8CDD1F835BeF8D702a93",
        chainId: 56,
        decimals: 18,
        website: "https://revvmotorsport.com",
        description: "The REVV token is an ERC-20 utility token that acts as the main currency for a number of game dApps developed by Animoca Brands.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x833F307aC507D47309fD8CDD1F835BeF8D702a93.svg"
      },
      BMON: {
        name: "Binamon",
        symbol: "BMON",
        address: "0x08ba0619b1e7A582E0BCe5BBE9843322C954C340",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x08ba0619b1e7A582E0BCe5BBE9843322C954C340.svg",
        website: "https://binamon.org/",
        description: "A complete metaverse of digital monsters inspired by Axie Infinity"
      },
      WSG: {
        name: "Wall Street Games",
        symbol: "WSG",
        address: "0xA58950F05FeA2277d2608748412bf9F802eA4901",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xA58950F05FeA2277d2608748412bf9F802eA4901.svg",
        website: "https://wsg.gg/",
        description: "The next generation gaming platform with a unique and immersive way to earn rewards"
      },
      METAHERO: {
        name: "Metahero",
        symbol: "HERO",
        address: "0xD40bEDb44C081D2935eebA6eF5a3c8A31A1bBE13",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xD40bEDb44C081D2935eebA6eF5a3c8A31A1bBE13.svg",
        website: "https://metahero.io/",
        description: "Deflationary token with Smart Staking, Burn and Auto Liquidity used to transact in Metahero's ecosystem for real world utility"
      },
      DEP: {
        name: "DEAPCOIN",
        symbol: "DEP",
        address: "0xcaF5191fc480F43e4DF80106c7695ECA56E48B18",
        chainId: 56,
        decimals: 18,
        website: "https://dea.sg/",
        description: "DEAPCOIN is a platform that will create a new economy and culture in the PlayMining gaming field where digital assets will be distributed in a new age infrastructure that compensates users by using blockchain.",
        logoURI: "https://pbs.twimg.com/profile_images/1258627009296531456/qGAevdn7_400x400.png"
      },
      SISTA: {
        name: "srnArtGallery Tokenized Arts",
        symbol: "SISTA",
        address: "0xCA6d25C10dad43ae8Be0bc2af4D3CD1114583C08",
        chainId: 56,
        decimals: 18,
        website: "https://srnartgallery.com/",
        description: "srnArtGallery is a platform where a union of artists use NFT art to connect people through the things they love\u2026",
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/SISTA.svg"
      },
      TAPE: {
        name: "Ape Tooks",
        symbol: "TAPE",
        address: "0xF63400ee0420ce5b1Ebdee0C942D7dE1C734a41f",
        chainId: 56,
        decimals: 18,
        website: "https://www.apetools.co/",
        description: "A decentralized tool platform that provides trading tools for dexes in the Binance Smart Chain and Polygon network, Besides aiming to release unique tokens for the community through IDO sales",
        logoURI: "https://bscscan.com/token/images/apetoolsco_32.png"
      },
      STARS: {
        name: "Mogul Stars",
        symbol: "STARS",
        address: "0xbD83010eB60F12112908774998F65761cf9f6f9a",
        chainId: 56,
        decimals: 18,
        website: "https://www.mogulproductions.com/",
        description: "Mogul is a decentralized film financing platform that brings creators, fans, and film financiers together; allowing everyone to play a part in the next big blockbuster",
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/STARS.svg"
      },
      SKILL: {
        name: "CryptoBlades Skill Token",
        symbol: "SKILL",
        address: "0x154A9F9cbd3449AD22FDaE23044319D6eF2a1Fab",
        chainId: 56,
        decimals: 18,
        website: "https://www.cryptoblades.io/",
        description: "CryptoBlades is a NFT crafting game where players employ powerful weapons to defeat opponents and collect SKILL tokens, which can be used for upgrades and to level up characters.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x154A9F9cbd3449AD22FDaE23044319D6eF2a1Fab.svg"
      },
      SPS: {
        name: "Splintershards",
        symbol: "SPS",
        address: "0x1633b7157e7638C4d6593436111Bf125Ee74703F",
        chainId: 56,
        decimals: 18,
        website: "https://splinterlands.com/",
        description: "Splinterlands is a digital, collectible card game where you build up a collection of cards, which all have various different stats and abilities, and use them to battle other players in skill-based matches.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x1633b7157e7638C4d6593436111Bf125Ee74703F.svg"
      },
      AXS: {
        name: "Axie Infinity Shard",
        symbol: "AXS",
        address: "0x715D400F88C167884bbCc41C5FeA407ed4D2f8A0",
        chainId: 56,
        decimals: 18,
        logoURI: "https://bscscan.com/token/images/axieinfinity_32.png",
        website: "https://axieinfinity.com/",
        description: "Axie Infinity is a Pok\xE9mon-inspired digital pet universe built on the Ethereum blockchain where anyone can earn token rewards through skilled gameplay and contributions to the ecosystem."
      },
      OOE: {
        name: "Open Ocean Finance",
        symbol: "OOE",
        address: "0x9029FdFAe9A03135846381c7cE16595C3554e10A",
        chainId: 56,
        decimals: 18,
        website: "https://openocean.finance/",
        description: "OpenOcean is the worlds first full aggregation protocol for crypto trading that source liquidity from DeFi and CeFi, and enable cross-chain swaps. Our intelligent routing algorithm find the best prices from DEXes and CEXes, and split the routes to provide traders the best prices with low slippage and fast settlement. The function is free to use, OpenOcean users only need to pay the normal blockchain gas fees and exchange fees for the trades, which are charged by the exchanges and not OpenOcean.",
        logoURI: "https://ethapi.openocean.finance/asset/icon-ooe.svg?t=2"
      },
      C98: {
        name: "Coin98",
        symbol: "C98",
        address: "0xaEC945e04baF28b135Fa7c640f624f8D90F1C3a6",
        chainId: 56,
        decimals: 18,
        website: "https://coin98.com/",
        description: "Coin98 enables value transfer as easily as using the Internet by the innovation of Multi-chain Engine, Fully Automatic Liquidity and Space Gate, all in one Super Liquidity Aggregator.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xaEC945e04baF28b135Fa7c640f624f8D90F1C3a6.svg"
      },
      CHESS: {
        name: "Chess",
        symbol: "CHESS",
        address: "0x20de22029ab63cf9A7Cf5fEB2b737Ca1eE4c82A6",
        chainId: 56,
        decimals: 18,
        website: "https://tranchess.com/",
        description: "Tranchess is a tokenized asset management and derivatives trading protocol, which is inspired by tranche funds that cater to different class of investors with varying risk appetites.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x20de22029ab63cf9A7Cf5fEB2b737Ca1eE4c82A6.svg"
      },
      MASK: {
        name: "Mask Network",
        symbol: "MASK",
        address: "0x2eD9a5C8C13b93955103B9a7C167B67Ef4d568a3",
        chainId: 56,
        decimals: 18,
        website: "https://mask.io/",
        description: "Mask Network is a protocol that allows its users to send encrypted messages over Twitter and Facebook. It essentially acts as a bridge between the internet and a decentralized network running on top",
        logoURI: "https://tokens.pancakeswap.finance/images/0x2eD9a5C8C13b93955103B9a7C167B67Ef4d568a3.svg"
      },
      ORBS: {
        name: "Orbs",
        symbol: "ORBS",
        address: "0xeBd49b26169e1b52c04cFd19FCf289405dF55F80",
        chainId: 56,
        decimals: 18,
        website: "https://www.orbs.com/",
        description: "The Orbs Network is a public blockchain infrastructure designed for businesses looking at trust as a competitive strategy.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xeBd49b26169e1b52c04cFd19FCf289405dF55F80.svg"
      },
      ADX: {
        name: "AdEx Network",
        symbol: "ADX",
        address: "0x6bfF4Fb161347ad7de4A625AE5aa3A1CA7077819",
        chainId: 56,
        decimals: 18,
        website: "https://www.adex.network/",
        description: "ADX is the native utility token that is used for incentivizing validator uptime and ensuring the smooth running of all advertising campaigns on the AdEx platform.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x6bfF4Fb161347ad7de4A625AE5aa3A1CA7077819.svg"
      },
      BSCPAD: {
        name: "BSCPAD.com",
        symbol: "BSCPAD",
        address: "0x5A3010d4d8D3B5fB49f8B6E57FB9E48063f16700",
        chainId: 56,
        decimals: 18,
        website: "https://bscpad.com/",
        description: "BSCPAD aims to become the next evolution of blockchain launchpads solving the fundamental flaws that plague existing launchpads. This platform benefits all holders of the token and allows for fair launches giving traders of all sizes the opportunity to invest in the best upcoming Binance Smart Chain projects.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x5A3010d4d8D3B5fB49f8B6E57FB9E48063f16700.svg"
      },
      WEX: {
        name: "WaultSwap",
        symbol: "WEX",
        address: "0xa9c41A46a6B3531d28d5c32F6633dd2fF05dFB90",
        chainId: 56,
        decimals: 18,
        website: "https://wault.finance/",
        description: "Wault Finance is a decentralized finance hub that connects all of the primary DeFi use-cases within one simple ecosystem, on the Binance Smart Chain.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xa9c41A46a6B3531d28d5c32F6633dd2fF05dFB90.svg"
      },
      DG: {
        name: "Decentralized Game",
        symbol: "DG",
        address: "0x9Fdc3ae5c814b79dcA2556564047C5e7e5449C19",
        chainId: 56,
        decimals: 18,
        website: "https://decentral.games/",
        description: "Decentral.games is a community-owned metaverse casino ecosystem powered by $DG where players earn $DG for playing games.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x9Fdc3ae5c814b79dcA2556564047C5e7e5449C19.png"
      },
      WOO: {
        name: "Woo",
        symbol: "WOO",
        address: "0x4691937a7508860F876c9c0a2a617E7d9E945D4B",
        chainId: 56,
        decimals: 18,
        website: "https://woo.network/",
        description: "Wootrade is a layer one trading infrastructure complete with deep liquidity, frontend trading GUI, and the ability to integrate into any exchange, trading desk, wallet, dApp, or other trading-related platform.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x4691937a7508860F876c9c0a2a617E7d9E945D4B.png"
      },
      HAI: {
        name: "Hai",
        symbol: "HAI",
        address: "0xaA9E582e5751d703F85912903bacADdFed26484C",
        chainId: 56,
        decimals: 8,
        website: "https://hackenfoundation.com/",
        description: "Hacken Token (HAI) is a cybersecurity coin underlying the rapidly growing Hacken Foundation. Hacken Foundation is a fully fledged organization that unites cybersecurity products and companies developing secure Web 3.0 infrastructure.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xaA9E582e5751d703F85912903bacADdFed26484C.png"
      },
      O3: {
        name: "O3",
        symbol: "O3",
        address: "0xEe9801669C6138E84bD50dEB500827b776777d28",
        chainId: 56,
        decimals: 18,
        website: "https://o3swap.com/",
        description: "O3 Swap is a cross-chain aggregation protocol, allowing users to access multi-chain liquidity sources on one platform.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xEe9801669C6138E84bD50dEB500827b776777d28.png"
      },
      TENFI: {
        name: "TENFI",
        symbol: "TENFI",
        address: "0xd15C444F1199Ae72795eba15E8C1db44E47abF62",
        chainId: 56,
        decimals: 18,
        website: "https://ten.finance/",
        description: "TEN is a yield aggregator / optimizer that simplifies staking and yield farming with the most liquid Binance Smart Chain Liquidity Pools available and provides a robust yield earning environment on the market while adhering to security, sustainability, longevity and simplicity.",
        logoURI: "https://bscscan.com/token/images/tenfinance_32.png"
      },
      MBOX: {
        name: "Mobox",
        symbol: "MBOX",
        address: "0x3203c9E46cA618C8C1cE5dC67e7e9D75f5da2377",
        chainId: 56,
        decimals: 18,
        website: "https://www.mobox.io/",
        description: "MOBOX Protocol combines the best of yield farming DeFi with Gaming NFTs creating a truly free to play and play to earn ecosystem.",
        logoURI: "https://bscscan.com/token/images/mobox_32.png"
      },
      ATA: {
        name: "Automata",
        symbol: "ATA",
        address: "0xA2120b9e674d3fC3875f415A7DF52e382F141225",
        chainId: 56,
        decimals: 18,
        website: "https://www.ata.network/",
        description: "Automata Network is a decentralized service protocol that provides privacy middleware for dApps across multiple blockchains.",
        logoURI: "https://bscscan.com/token/images/automata_32.png"
      },
      SHIB: {
        name: "SHIBA INU",
        symbol: "SHIB",
        address: "0x2859e4544C4bB03966803b044A93563Bd2D0DD4D",
        chainId: 56,
        decimals: 18,
        website: "https://shibatoken.com/",
        description: "According to the SHIBA INU website, SHIB is the \u201CDOGECOIN KILLER\u201D and will be listed on their own ShibaSwap, a decentralized exchange.",
        logoURI: "https://bscscan.com/token/images/shibatoken_32.png"
      },
      CELR: {
        name: "CelerToken",
        symbol: "CELR",
        address: "0x1f9f6a696C6Fd109cD3956F45dC709d2b3902163",
        chainId: 56,
        decimals: 18,
        website: "https://www.celer.network/#",
        description: "The Celer Network (CELR) is a smartly designed layer-2 scaling solution that provides off-chain transactions handling.",
        logoURI: "https://bscscan.com/token/images/celernetwork_32.png"
      },
      WINGS: {
        name: "JetSwap",
        symbol: "WINGS",
        address: "0x0487b824c8261462F88940f97053E65bDb498446",
        chainId: 56,
        decimals: 18,
        website: "https://jetswap.finance/",
        description: "Jetswap is a decentralized Automated Market Maker (AMM) on Binance Smart Chain with low fees and instant trade execution.",
        logoURI: "https://bscscan.com/token/images/jetswap_32.png"
      },
      HPS: {
        name: "Happiness",
        symbol: "HPS",
        address: "0xeDa21B525Ac789EaB1a08ef2404dd8505FfB973D",
        chainId: 56,
        decimals: 18,
        website: "https://billionhappiness.finance/",
        description: "Billion Happiness is a blockchain community-based project, with the goal of introducing Blockchain to billions of people through simple needs including clothes or wearables.",
        logoURI: "https://bscscan.com/token/images/happiness_32.png"
      },
      PMP: {
        name: "Pumpy",
        symbol: "PMP",
        address: "0x8d4FBB3AC63bf33851dCE80D63613Df1A515BC00",
        chainId: 56,
        decimals: 18,
        website: "https://pumpy.farm/",
        description: "Pumpy is an assets management platform and yield farming aggregator running on Binance Smart Chain",
        logoURI: "https://bscscan.com/images/main/empty-token.png"
      },
      JulD: {
        name: "JulSwap",
        symbol: "JulD",
        address: "0x5A41F637C3f7553dBa6dDC2D3cA92641096577ea",
        chainId: 56,
        decimals: 18,
        website: "https://julswap.com/",
        description: "JulSwap offers automated, decentralized exchange of BSC-20 tokens.",
        logoURI: "https://tokens.julswap.com/images/0x5A41F637C3f7553dBa6dDC2D3cA92641096577ea.png"
      },
      SOUP: {
        name: "Soup",
        symbol: "SOUP",
        address: "0x94F559aE621F1c810F31a6a620Ad7376776fe09E",
        chainId: 56,
        decimals: 18,
        website: "https://soups.finance/",
        description: "SOUP tokens are designed to be used as a medium of exchange. The built-in stability mechanism in the protocol aims to maintain SOUP peg to 1 Binance (BNB) token in the long run.",
        logoURI: "https://bscscan.com/token/images/soupfinance_32.png"
      },
      "1INCH": {
        name: "1INCH",
        symbol: "1INCH",
        address: "0x111111111117dC0aa78b770fA6A738034120C302",
        chainId: 56,
        decimals: 18,
        website: "https://1inch.io/",
        description: "1inch is a decentralized exchange (DEX) aggregator, connecting several DEXes into one platform to allow its users to find the most efficient swapping routes across all platforms.",
        logoURI: "https://tokens.1inch.exchange/0x111111111117dc0aa78b770fa6a738034120c302.png"
      },
      SALT: {
        name: "Salt",
        symbol: "SALT",
        address: "0x2849b1aE7E04A3D9Bc288673A92477CF63F28aF4",
        chainId: 56,
        decimals: 18,
        website: "https://www.saltswap.finance/",
        description: "SALT is the native token of Saltswap.finance yield aggregator.",
        logoURI: "https://bscscan.com/token/images/saltswap_32.png"
      },
      RAMEN: {
        name: "Ramen",
        symbol: "RAMEN",
        address: "0x4F47A0d15c1E53F3d94c069C7D16977c29F9CB6B",
        chainId: 56,
        decimals: 18,
        website: "https://ramenswap.finance/",
        description: "RamenSwap Finance is a community driven Yield Farming, DeFi Yield Aggregator and DEX Aggregator on Binance Smart Chain.",
        logoURI: "https://bscscan.com/token/images/ramenswap_32.png"
      },
      BREW: {
        name: "CafeSwap",
        symbol: "BREW",
        address: "0x790Be81C3cA0e53974bE2688cDb954732C9862e1",
        chainId: 56,
        decimals: 18,
        website: "https://cafeswap.finance/",
        description: "REW is native Binance Smart Chain token on the cafeswap.finance platform.",
        logoURI: "https://bscscan.com/token/images/cafeswap_32.png"
      },
      MSC: {
        name: "Monster Slayer Cash",
        symbol: "MSC",
        address: "0x8C784C49097Dcc637b93232e15810D53871992BF",
        chainId: 56,
        decimals: 18,
        website: "https://monsterslayer.finance/",
        description: "Monster Slayer Cash tokens are designed to be used as a medium of exchange. The built-in stability mechanism in the protocol deterministically expands and contracts the MSC supply to maintain MSC peg to 1 $BUSD token.",
        logoURI: "https://bscscan.com/token/images/monsterslayer_32.png?=v1"
      },
      BTS: {
        name: "Bat True Share",
        symbol: "BTS",
        address: "0xc2e1acef50aE55661855E8dcB72adB182A3cC259",
        chainId: 56,
        decimals: 18,
        website: "https://boltdollar.finance/",
        description: "Bolt Shares, also known as \u201CBolt True Share\u201D are the governance tokens of the ecosystem. These tokens follow a Seigniorage Shares system that maintains a peg by auctioning coins for shares and shares for coins.",
        logoURI: "https://bscscan.com/token/images/boltshare_32.png"
      },
      KEBAB: {
        name: "Kebab",
        symbol: "KEBAB",
        address: "0x7979F6C54ebA05E18Ded44C4F986F49a5De551c2",
        chainId: 56,
        decimals: 18,
        website: "https://kebabfinance.com/#/",
        description: "Kebab Finance is a DEX (Decentralized Exchange), using AMM (Automated Market Maker) technology.",
        logoURI: "https://bscscan.com/token/images/kebabfinance_32.png"
      },
      SOAK: {
        name: "Soak",
        symbol: "SOAK",
        address: "0x849233FF1aea15D80EF658B2871664C9Ca994063",
        chainId: 56,
        decimals: 18,
        website: "https://www.sponge.finance/",
        description: "The Soak token is the main token that will be emitted by Sponge.finance.",
        logoURI: "https://bscscan.com/token/images/sponge-soak_32.png"
      },
      MSS: {
        name: "Monster Slayer Share",
        symbol: "MSS",
        address: "0xAcABD3f9b8F76fFd2724604185Fa5AFA5dF25aC6",
        chainId: 56,
        decimals: 18,
        website: "https://monsterslayer.finance/",
        description: "Monster Slayer Shares loosely represent the value of the Monster Slayer Cash and trust in its systemic ability to maintain MSC to peg.",
        logoURI: "https://bscscan.com/token/images/monsterslayer-mss_32.png"
      },
      BHC: {
        name: "Billion Happiness",
        symbol: "BHC",
        address: "0x6fd7c98458a943f469E1Cf4eA85B173f5Cd342F4",
        chainId: 56,
        decimals: 18,
        website: "https://billionhappiness.finance/",
        description: "Billion Happiness is a blockchain community-based project, with the goal of introducing Blockchain to billions of people through simple needs including clothes or wearables.",
        logoURI: "https://bscscan.com/token/images/billionhappiness_32.png?v=2"
      },
      GOLD: {
        name: "NAR Ticket",
        symbol: "GOLD",
        address: "0x8f4087Cb09E0F378f4278a314C94A636665dE24b",
        chainId: 56,
        decimals: 18,
        website: "https://narwhalswap.org/#/swap",
        description: "$GOLD is the second token introduced by the NAR protocol for this update. You\u2019ll need this token to upgrade your abilities in the near future.",
        logoURI: "https://bscscan.com/token/images/narwhalswap-gold_32.png"
      },
      KTN: {
        name: "Kattana",
        symbol: "KTN",
        address: "0xDAe6c2A48BFAA66b43815c5548b10800919c993E",
        chainId: 56,
        decimals: 18,
        website: "https://kattana.io/",
        description: "Kattana is the native token of Kattana.io trading terminal.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xDAe6c2A48BFAA66b43815c5548b10800919c993E.png"
      },
      TUSD: {
        name: "TrueUSD",
        symbol: "TUSD",
        address: "0x14016E85a25aeb13065688cAFB43044C2ef86784",
        chainId: 56,
        decimals: 18,
        website: "https://www.trueusd.com/",
        description: "TrueUSD (TUSD) is the first independently-verified digital asset redeemable 1-for-1 for US Dollars.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x14016e85a25aeb13065688cafb43044c2ef86784.png"
      },
      VRT: {
        name: "VRT",
        symbol: "VRT",
        address: "0x5F84ce30DC3cF7909101C69086c50De191895883",
        chainId: 56,
        decimals: 18,
        website: "https://venus.io/",
        description: "Venus Reward Token is a mechanism created to become an additional mining distribution to suppliers and borrowers of Venus Protocol.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x5f84ce30dc3cf7909101c69086c50de191895883.png"
      },
      pOPEN: {
        name: "pOPEN",
        symbol: "pOPEN",
        address: "0xaBaE871B7E3b67aEeC6B46AE9FE1A91660AadAC5",
        chainId: 56,
        decimals: 18,
        website: "https://opendao.io/",
        description: "The OPEN project is a toolkit to connect the real world to DEFI",
        logoURI: "https://tokens.pancakeswap.finance/images/0xaBaE871B7E3b67aEeC6B46AE9FE1A91660AadAC5.png"
      },
      SNX: {
        name: "Synthetix",
        symbol: "SNX",
        address: "0x9Ac983826058b8a9C7Aa1C9171441191232E8404",
        chainId: 56,
        decimals: 18,
        website: "https://www.synthetix.io/",
        description: "Synthetix is the backbone for derivatives trading in DeFi, allowing anyone, anywhere to gain on-chain exposure to a vast range of assets",
        logoURI: "https://bscscan.com/token/images/snx_32.png"
      },
      BLZ: {
        name: "Bluezelle",
        symbol: "BLZ",
        address: "0x935a544Bf5816E3A7C13DB2EFe3009Ffda0aCdA2",
        chainId: 56,
        decimals: 18,
        website: "https://bluzelle.com/",
        description: "Bluzelle is a decentralized storage network for the creator economy.",
        logoURI: "https://dex.apeswap.finance/images/coins/blz.svg"
      },
      DERI: {
        name: "Deri",
        symbol: "DERI",
        address: "0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5",
        chainId: 56,
        decimals: 18,
        website: "https://deri.finance/",
        description: "DERI Protocol is a decentralized protocol to exchange risk exposures precisely and capital-efficiently.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5.png"
      },
      CHR: {
        name: "Chromia",
        symbol: "CHR",
        address: "0xf9CeC8d50f6c8ad3Fb6dcCEC577e05aA32B224FE",
        chainId: 56,
        decimals: 6,
        website: "https://chromia.com/",
        description: "Chromia is a blockchain platform, making it easy for people to build decentralized apps in the real world, for a better world",
        logoURI: "https://tokens.pancakeswap.finance/images/0xf9CeC8d50f6c8ad3Fb6dcCEC577e05aA32B224FE.png"
      },
      XEND: {
        name: "XEND",
        symbol: "XEND",
        address: "0x4a080377f83D669D7bB83B3184a8A5E61B500608",
        chainId: 56,
        decimals: 18,
        website: "https://anyswap.exchange/",
        description: "Xend Finance is a blockchain-based platform inspired by traditional credit unions. It aims to provide opportunities for those interested in borrowing, investing, saving or lending digital assets.",
        logoURI: "https://bscscan.com/token/images/xendfinance_32.png"
      },
      CYC: {
        name: "Cyclone Protocol",
        symbol: "CYC",
        address: "0x810EE35443639348aDbbC467b33310d2AB43c168",
        chainId: 56,
        decimals: 18,
        website: "https://cyclone.xyz/",
        description: "Cyclone is the world first cross-chain, yield enhancement, zkSNARKs-based privacy protocol for all DeFi apps, with the decentralized governance and fair launch.",
        logoURI: "https://bscscan.com/token/images/cyclone_32.png"
      },
      ZEC: {
        name: "Z-Cash",
        symbol: "ZEC",
        address: "0x1Ba42e5193dfA8B03D15dd1B86a3113bbBEF8Eeb",
        chainId: 56,
        decimals: 18,
        website: "https://z.cash/",
        description: "Zcash is a digital currency - fast and confidential with low fees.",
        logoURI: "https://dex.apeswap.finance/images/coins/ZEC.svg"
      },
      ETC: {
        name: "Ethereum Classic",
        symbol: "ETC",
        address: "0x3d6545b08693daE087E957cb1180ee38B9e3c25E",
        chainId: 56,
        decimals: 18,
        website: "https://ethereumclassic.org/",
        description: "Ethereum Classic is a decentralized computing platform that executes smart contracts. Applications are ran exactly as programmed without the possibility of censorship, downtime, or third-party interference.",
        logoURI: "https://assets.coingecko.com/coins/images/453/small/ethereum-classic-logo.png"
      },
      COTI: {
        name: "Coti",
        symbol: "COTI",
        address: "0xAdBAF88B39D37Dc68775eD1541F1bf83A5A45feB",
        chainId: 56,
        decimals: 18,
        website: "https://coti.io/",
        description: "COTI is the first enterprise-grade fintech platform that empowers organizations to build their own payment solution and digitize any currency to save time and money.",
        logoURI: "https://dex.apeswap.finance/images/coins/coti.svg"
      },
      NEAR: {
        name: "Near",
        symbol: "NEAR",
        address: "0x1Fa4a73a3F0133f0025378af00236f3aBDEE5D63",
        chainId: 56,
        decimals: 18,
        website: "https://near.org/",
        description: "NEAR is an open source platform that enables creators, communities, and markets to drive a more open, interconnected and consumer-empowered world.",
        logoURI: "https://dex.apeswap.finance/images/coins/near.svg"
      },
      SWAMP: {
        name: "Swampy Token",
        symbol: "SWAMP",
        address: "0xc5A49b4CBe004b6FD55B30Ba1dE6AC360FF9765d",
        chainId: 56,
        decimals: 18,
        website: "https://swamp.finance/",
        description: "Swampy is the native token of Swamp.finance, a yield farming optimiser on Binance Smart Chain.",
        logoURI: "https://bscscan.com/token/images/swampfinance_32.png"
      },
      HOTCROSS: {
        name: "Hot Cross Token",
        address: "0x4FA7163E153419E0E1064e418dd7A99314Ed27b6",
        symbol: "HOTCROSS",
        decimals: 18,
        chainId: 56,
        website: "https://hotcross.com/",
        description: "Hot Cross will become an extensive multi-chain and cross-chain tool suite that enables blockchain teams and their communities to thrive.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x4fa7163e153419e0e1064e418dd7a99314ed27b6.png"
      },
      FINE: {
        name: "Refinable Token",
        symbol: "FINE",
        address: "0x4e6415a5727ea08aAE4580057187923aeC331227",
        chainId: 56,
        decimals: 18,
        website: "https://app.refinable.com/",
        description: "Refinable is the first dedicated NFT marketplace built on Binance Smart Chain.",
        logoURI: "https://bscscan.com/token/images/refinable_32.png"
      },
      OIN: {
        name: "oinfinance Token",
        symbol: "OIN",
        address: "0x658E64FFcF40D240A43D52CA9342140316Ae44fA",
        chainId: 56,
        decimals: 8,
        website: "https://oin.finance/",
        description: "OIN brings great DeFi functionality, such as stablecoin issuance to blockchain projects through a multi-faceted infrastructure.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x658E64FFcF40D240A43D52CA9342140316Ae44fA.png"
      },
      PMON: {
        name: "Polkamon Token",
        symbol: "PMON",
        address: "0x1796ae0b0fa4862485106a0de9b654eFE301D0b2",
        chainId: 56,
        decimals: 18,
        website: "https://polychainmonsters.com/",
        description: "Polychain Monsters are beautifully animated digital collectibles with varying scarcities. Each Polychain Monster is backed by a truly unique NFT and can be unpacked with $PMON tokens.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x1796ae0b0fa4862485106a0de9b654eFE301D0b2.png"
      },
      BTR: {
        name: "Bitrue Token",
        symbol: "BTR",
        address: "0x5a16E8cE8cA316407c6E6307095dc9540a8D62B3",
        chainId: 56,
        decimals: 18,
        website: "http://www.bitrue.com/",
        description: "BTR is the native token of the BiTrue exchange.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x5a16E8cE8cA316407c6E6307095dc9540a8D62B3.png"
      },
      UBXT: {
        name: "UpBots Token",
        symbol: "UBXT",
        address: "0xBbEB90cFb6FAFa1F69AA130B7341089AbeEF5811",
        chainId: 56,
        decimals: 18,
        website: "https://upbots.com/",
        description: "UpBots is an all-in-one platform that brings together the best crypto trading tools and strategies that are generally stand-alone services.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xbbeb90cfb6fafa1f69aa130b7341089abeef5811.png"
      },
      ZEFI: {
        name: "ZCore Finance Token",
        symbol: "ZEFI",
        address: "0x0288D3E353fE2299F11eA2c2e1696b4A648eCC07",
        chainId: 56,
        decimals: 18,
        website: "https://finance.zcore.network/",
        description: "ZCore is a Binance Smart Chain yield farming bundled with an advanced crypto card with integrated burning mechanism.",
        logoURI: "https://bscscan.com/token/images/zcore-zefi_32.png"
      },
      ICA: {
        name: "ICA Token",
        symbol: "ICA",
        address: "0x95111f630aC215Eb74599ED42C67E2c2790d69e2",
        chainId: 56,
        decimals: 18,
        website: "https://icarus.finance/",
        description: "ICA is the Governance token of icarus.finance and will be used to provide holders voting rights in the next direction of the project. This includes voting on what cryptocurrency to actually mine.",
        logoURI: "https://bscscan.com/token/images/icarus_32.png"
      },
      STEEL: {
        name: "IRON Share V2 Token",
        symbol: "STEEL",
        address: "0x9001eE054F1692feF3A48330cB543b6FEc6287eb",
        chainId: 56,
        decimals: 18,
        website: "https://iron.finance/",
        description: "STEEL - Iron Share - is the algorithmic token which accrues seigniorage revenue and excess collateral value.",
        logoURI: "https://bscscan.com/token/images/ironfinance-share_32.png"
      },
      TYPH: {
        name: "Typhoon Token",
        symbol: "TYPH",
        address: "0x4090e535F2e251F5F88518998B18b54d26B3b07c",
        chainId: 56,
        decimals: 18,
        website: "https://typhoon.network/",
        description: "Typhoon enables you to send private transactions between 2 BSC or Polygon wallets",
        logoURI: "https://bscscan.com/token/images/typhoonnetwork_32.png"
      },
      IRON: {
        name: "IRON Stablecoin Token",
        symbol: "IRON",
        address: "0x7b65B489fE53fCE1F6548Db886C08aD73111DDd8",
        chainId: 56,
        decimals: 18,
        website: "https://iron.finance/",
        description: "IRON is the stablecoin token of the iron.finance protocol.",
        logoURI: "https://bscscan.com/token/images/ironfinance_32.png?=v1"
      },
      KEYFI: {
        name: "KeyFi Token",
        symbol: "KEYFI",
        address: "0x4b6000F9163de2E3f0a01eC37E06e1469DBbcE9d",
        chainId: 56,
        decimals: 18,
        website: "https://keyfi.com/",
        description: "KeyFi is an all-in-one platform for tracking, swapping, and staking your tokens, and more.",
        logoURI: "https://dex.apeswap.finance/images/coins/XBTC.svg"
      },
      NAUT: {
        name: "Astronaut Token",
        symbol: "NAUT",
        address: "0x05B339B0A346bF01f851ddE47a5d485c34FE220c",
        chainId: 56,
        decimals: 8,
        website: "https://astronaut.to/",
        description: "Astronaut enables projects to raise capital on a decentralized, permission-less and interoperable environment based on the Binance smart chain.",
        logoURI: "https://dex.apeswap.finance/images/coins/NAUT.png"
      },
      IOTA: {
        name: "MIOTAC Token",
        symbol: "IOTA",
        address: "0xd944f1D1e9d5f9Bb90b62f9D45e447D989580782",
        chainId: 56,
        decimals: 6,
        website: "https://www.iota.org/",
        description: "IOTA has fundamentally reengineered distributed ledger technology, enabling secure exchange of both value and data, without any fees.",
        logoURI: "https://dex.apeswap.finance/images/coins/IOTA.png"
      },
      AVAX: {
        name: "Avalanche Token",
        symbol: "AVAX",
        address: "0x1CE0c2827e2eF14D5C4f29a091d735A204794041",
        chainId: 56,
        decimals: 18,
        website: "https://www.avalabs.org/",
        description: "Avalanche is the fastest smart contracts platform in the blockchain industry, as measured by time-to-finality, and has the most validators securing its activity of any proof-of-stake protocol.",
        logoURI: "https://dex.apeswap.finance/images/coins/avax.png"
      },
      BANANA: {
        name: "ApeSwapFinance Banana",
        symbol: "BANANA",
        address: "0x603c7f932ED1fc6575303D8Fb018fDCBb0f39a95",
        chainId: 56,
        decimals: 18,
        website: "https://apeswap.finance/",
        description: "BANANA is the native token of the Apeswap.finance.",
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/BANANA.svg"
      },
      FTM: {
        name: "Fantom",
        symbol: "FTM",
        address: "0xAD29AbB318791D579433D831ed122aFeAf29dcfe",
        chainId: 56,
        decimals: 18,
        website: "https://fantom.foundation/",
        description: "Fantom is a fast, high-throughput open-source smart contract platform for digital assets and dApps.",
        logoURI: "https://dex.apeswap.finance/images/coins/FTM.svg"
      },
      AAVE: {
        name: "Binance-Peg Aave Token",
        symbol: "AAVE",
        address: "0xfb6115445Bff7b52FeB98650C87f44907E58f802",
        chainId: 56,
        decimals: 18,
        website: "https://aave.com/",
        description: "Aave is an open source and non-custodial liquidity protocol for earning interest on deposits and borrowing assets.",
        logoURI: "https://dex.apeswap.finance/images/coins/AAVE.svg"
      },
      MATIC: {
        name: "Matic Token",
        symbol: "MATIC",
        address: "0xCC42724C6683B7E57334c4E856f4c9965ED682bD",
        chainId: 56,
        decimals: 18,
        website: "https://polygon.technology/",
        description: "The MATIC token serves dual purposes: securing the Polygon network via staking and being used for the payment of transaction fees.",
        logoURI: "https://dex.apeswap.finance/images/coins/MATIC.svg"
      },
      DOGE: {
        name: "Binance-Peg Dogecoin",
        symbol: "DOGE",
        address: "0xbA2aE424d960c26247Dd6c32edC70B295c744C43",
        chainId: 56,
        decimals: 8,
        website: "https://dogecoin.com/",
        description: "Dogecoin is an open source peer-to-peer digital currency, favored by Shiba Inus worldwide.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xba2ae424d960c26247dd6c32edc70b295c744c43.png"
      },
      XED: {
        name: "Exeedme TOKEN",
        symbol: "XED",
        address: "0x5621b5A3f4a8008c4CCDd1b942B121c8B1944F1f",
        chainId: 56,
        decimals: 18,
        website: "https://www.exeedme.com/",
        description: "Exeedme is about using blockchain to allow for skill monetization through digital currencies and assets with open market dynamics, giving gamers a superior sense of ownership and control.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x5621b5a3f4a8008c4ccdd1b942b121c8b1944f1f.png"
      },
      DFD: {
        name: "DefiDollar DAO TOKEN",
        symbol: "DFD",
        address: "0x9899a98b222fCb2f3dbee7dF45d943093a4ff9ff",
        chainId: 56,
        decimals: 18,
        website: "https://app.dusd.finance/",
        description: "DefiDollar is a multi-chain DeFi Protocol Lab. We are building a range of products for the open finance ecosystem including - indexes, yield diversification and enabling capital efficient loans.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x9899a98b222fcb2f3dbee7df45d943093a4ff9ff.png"
      },
      LMT: {
        name: "Lympo Market TOKEN",
        symbol: "LMT",
        address: "0x9617857E191354dbEA0b714d78Bc59e57C411087",
        chainId: 56,
        decimals: 18,
        website: "https://nft.lympo.io/",
        description: "The LMT token is a fungible cryptographic token initially released on the Ethereum blockchain and later bridged to Binance Smart Chain.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x9617857e191354dbea0b714d78bc59e57c411087.png"
      },
      SUTER: {
        name: "Suterusu TOKEN",
        symbol: "SUTER",
        address: "0x4CfbBdfBd5BF0814472fF35C72717Bd095ADa055",
        chainId: 56,
        decimals: 18,
        website: "https://suterusu.io/",
        description: "The Suterusu Protocol is a second-layer private payment infrastructure for smart contract platforms. The Suterusu Protocol uses the original and most advanced ZK-ConSnark algorithm that does not require a trusted setup.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x4cfbbdfbd5bf0814472ff35c72717bd095ada055.png"
      },
      GOAL: {
        name: "Goal TOKEN",
        symbol: "GOAL",
        address: "0xE5b57E6e1b945B91FEE368aC108d2ebCcA78Aa8F",
        chainId: 56,
        decimals: 18,
        website: "https://fanaticsfinance.com/",
        description: "GOAL is the native token of the fanaticsfinance.com yield aggregator.",
        logoURI: ""
      },
      SPACE: {
        name: "farm.space TOKEN",
        symbol: "SPACE",
        address: "0x0abd3E3502c15ec252f90F64341cbA74a24fba06",
        chainId: 56,
        decimals: 18,
        website: "https://farm.space/",
        description: "SPACE is the native token of the farm.space yield aggregator.",
        logoURI: ""
      },
      WIN: {
        name: "WINk Token",
        symbol: "WIN",
        address: "0xaeF0d72a118ce24feE3cD1d43d383897D05B4e99",
        chainId: 56,
        decimals: 18,
        website: "https://www.wink.org/",
        description: "WINkLink fully integrates the real world with the blockchain space, will be able to provide reliable, unpredictable and verifiable random numbers, and fully restore trust and improve user experience by tapping into data, events, and payment systems.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xaef0d72a118ce24fee3cd1d43d383897d05b4e99.png"
      },
      TRX: {
        name: "TRON Token",
        symbol: "TRX",
        address: "0x85EAC5Ac2F758618dFa09bDbe0cf174e7d574D5B",
        chainId: 56,
        decimals: 18,
        website: "https://tron.network/",
        description: "TRON is a blockchain-based operating system that aims to ensure this technology is suitable for daily use.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x85eac5ac2f758618dfa09bdbe0cf174e7d574d5b.png"
      },
      BTT: {
        name: "BitTorrent Token",
        symbol: "BTT",
        address: "0x8595F9dA7b868b1822194fAEd312235E43007b49",
        chainId: 56,
        decimals: 18,
        website: "https://www.bittorrent.com/",
        description: "BitTorrent is a popular peer-to-peer (P2P) file sharing and torrent platform which has become increasingly decentralized in recent years.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x8595f9da7b868b1822194faed312235e43007b49.png"
      },
      mCOIN: {
        name: "Wrapped Mirror COIN Token",
        symbol: "mCOIN",
        address: "0x49022089e78a8D46Ec87A3AF86a1Db6c189aFA6f",
        chainId: 56,
        decimals: 18,
        website: "https://mirror.finance/",
        description: "Mirrored COIN (mCOIN) is a synthetic asset tracking the price of a Coinbase stock.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x49022089e78a8d46ec87a3af86a1db6c189afa6f.png"
      },
      MDX: {
        name: "MDEX Token",
        symbol: "MDX",
        address: "0x9C65AB58d8d978DB963e63f2bfB7121627e3a739",
        chainId: 56,
        decimals: 18,
        website: "https://bsc.mdex.com/",
        description: "MDEX is a new decentralized trading protocol that launched in January 2021. MDEX is an automated market making (AMM) decentralized exchange protocol that operates on the concept of fund pools, sharing some similarities with standard DEXs.",
        logoURI: "https://mdex.com/token-icons/bsc/0x9c65ab58d8d978db963e63f2bfb7121627e3a739.png"
      },
      xBLZD: {
        name: "xBLZD Token",
        symbol: "xBLZD",
        address: "0x9a946c3Cb16c08334b69aE249690C236Ebd5583E",
        chainId: 56,
        decimals: 18,
        website: "https://www.blizzard.money/",
        description: "xBLZD is the native token of Blizzard.money where users can yield their tokens.",
        logoURI: "https://app.beefy.finance/static/media/BLZD.fdf1fc8d.png"
      },
      BNB,
      WBNB: BNB,
      WNATIVE: BNB,
      BAKE: {
        name: "Bakery Token",
        symbol: "BAKE",
        address: "0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5",
        chainId: 56,
        decimals: 18,
        website: "https://www.bakeryswap.org/",
        description: "BakerySwap is a decentralized automated market-making (AMM) protocol that is based on the Binance Smart Chain (BSC). The BAKE token is a native BEP-20 governance token on the platform.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xe02df9e3e622debdd69fb838bb799e3f168902c5.png"
      },
      BUSD: {
        name: "BUSD Token",
        symbol: "BUSD",
        address: "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",
        chainId: 56,
        decimals: 18,
        website: "https://www.binance.com/en/busd",
        description: "Binance USD (BUSD) is a 1:1 USD-backed stable coin issued by Binance (in partnership with Paxos), Approved and regulated by the New York State Department of Financial Services (NYDFS), The BUSD Monthly Audit Report can be viewed from the official website.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xe9e7cea3dedca5984780bafc599bd69add087d56.png"
      },
      ETH: {
        name: "Ethereum Token",
        symbol: "ETH",
        address: "0x2170Ed0880ac9A755fd29B2688956BD959F933F8",
        chainId: 56,
        decimals: 18,
        website: "https://ethereum.org/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x2170ed0880ac9a755fd29b2688956bd959f933f8.png"
      },
      BTCB: {
        name: "BTCB Token",
        symbol: "BTCB",
        address: "0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c",
        chainId: 56,
        decimals: 18,
        website: "https://bitcoin.org/en/",
        description: "Bitcoin BEP2 (BTCB) is a token on the Binance Chain. Each BTCB is 100% backed by a BTC reserve, with the price pegged to Bitcoin at a rate of 1 BTCB = 1 BTC.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c.png"
      },
      BAND: {
        name: "BAND Protocol Token",
        symbol: "BAND",
        address: "0xAD6cAEb32CD2c308980a548bD0Bc5AA4306c6c18",
        chainId: 56,
        decimals: 18,
        website: "https://bandprotocol.com/",
        description: "Band Protocol is a cross-chain data oracle platform that aggregates and connects real-world data and APIs to smart contracts.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xad6caeb32cd2c308980a548bd0bc5aa4306c6c18.png"
      },
      USDT: {
        name: "Tether USD",
        symbol: "USDT",
        address: "0x55d398326f99059fF775485246999027B3197955",
        chainId: 56,
        decimals: 18,
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x55d398326f99059ff775485246999027b3197955.png"
      },
      XRP: {
        name: "XRP Token",
        symbol: "XRP",
        address: "0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE",
        chainId: 56,
        decimals: 18,
        website: "https://ripple.com/xrp/",
        description: "XRP Ledger (XRPL) is the open-source distributed ledger that is created by Ripple. The native cryptocurrency of the XRP Ledger is XRP.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x1d2f0da169ceb9fc7b3144628db156f3f6c60dbe.png"
      },
      BCH: {
        name: "Bitcoin Cash Token",
        symbol: "BCH",
        address: "0x8fF795a6F4D97E7887C79beA79aba5cc76444aDf",
        chainId: 56,
        decimals: 18,
        website: "https://bitcoincash.org/",
        description: 'Bitcoin Cash brings sound money to the world, fulfilling the original promise of Bitcoin as "Peer-to-Peer Electronic Cash".',
        logoURI: "https://tokens.pancakeswap.finance/images/0x8ff795a6f4d97e7887c79bea79aba5cc76444adf.png"
      },
      LTC: {
        name: "Litecoin Token",
        symbol: "LTC",
        address: "0x4338665CBB7B2485A8855A139b75D5e34AB0DB94",
        chainId: 56,
        decimals: 18,
        website: "https://litecoin.org/",
        description: "Litecoin is a peer-to-peer cryptocurrency and open-source software project released under the MIT/X11 license. Litecoin was an early bitcoin spinoff or altcoin, starting in October 2011.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x4338665cbb7b2485a8855a139b75d5e34ab0db94.png"
      },
      ADA: {
        name: "Cardano Token",
        symbol: "ADA",
        address: "0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47",
        chainId: 56,
        decimals: 18,
        website: "https://cardano.org/",
        description: "Within the Cardano platform, Ada exists on the settlement layer.Cardano is a public blockchain platform. It is open-source and decentralized, with consensus achieved using proof of stake.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x3ee2200efb3400fabb9aacf31297cbdd1d435d47.png"
      },
      ATOM: {
        name: "Cosmos Token",
        symbol: "ATOM",
        address: "0x0Eb3a705fc54725037CC9e008bDede697f62F335",
        chainId: 56,
        decimals: 18,
        website: "https://cosmos.network/",
        description: "Cosmos is an ever-expanding ecosystem of interconnected apps and services, built for a decentralized future.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x0eb3a705fc54725037cc9e008bdede697f62f335.png"
      },
      XTZ: {
        name: "Tezos Token",
        symbol: "XTZ",
        address: "0x16939ef78684453bfDFb47825F8a5F714f12623a",
        chainId: 56,
        decimals: 18,
        website: "https://tezos.com/",
        description: "Tezos is an open-source platform that addresses key barriers facing blockchain adoption for assets and applications backed by a global community of validators, researchers, and builders.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x16939ef78684453bfdfb47825f8a5f714f12623a.png"
      },
      ONT: {
        name: "Ontology Token",
        symbol: "ONT",
        address: "0xFd7B3A77848f1C2D67E05E54d78d174a0C850335",
        chainId: 56,
        decimals: 18,
        website: "https://ont.io/",
        description: "Ontology is a high performance, open source blockchain specializing in digital identity and data.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xfd7b3a77848f1c2d67e05e54d78d174a0c850335.png"
      },
      DAI: {
        name: "Dai Token",
        symbol: "DAI",
        address: "0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3",
        chainId: 56,
        decimals: 18,
        website: "https://makerdao.com/en/",
        description: "DAI is an Ethereum-based stablecoin (stable-price cryptocurrency) whose issuance and development is managed by the Maker Protocol and the MakerDAO decentralized autonomous organization.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3.png"
      },
      YFII: {
        name: "YFII.finance Token",
        symbol: "YFII",
        address: "0x7F70642d88cf1C4a3a7abb072B53B929b653edA5",
        chainId: 56,
        decimals: 18,
        website: "https://dfi.money/",
        description: "DFI.money is a DeFi-farming aggregator that automatically puts your crypto assets to work for high yield profits.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x7f70642d88cf1c4a3a7abb072b53b929b653eda5.png"
      },
      CREAM: {
        name: "Cream",
        symbol: "CREAM",
        address: "0xd4CB328A82bDf5f03eB737f37Fa6B370aef3e888",
        chainId: 56,
        decimals: 18,
        website: "https://cream.finance/",
        description: "C.R.E.A.M Finance is a decentralized peer-to-peer (P2P) DeFi platform that provides lending, borrowing, swap, payment and tokenization services for digital assets.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xd4cb328a82bdf5f03eb737f37fa6b370aef3e888.png"
      },
      PROM: {
        name: "Prometeus",
        symbol: "PROM",
        address: "0xaF53d56ff99f1322515E54FdDE93FF8b3b7DAFd5",
        chainId: 56,
        decimals: 18,
        website: "https://prometeus.io/",
        description: "Prometeus Network describes itself as a secure and decentralized ecosystem designed to solve real-world problems in data brokerage.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xaf53d56ff99f1322515e54fdde93ff8b3b7dafd5.png"
      },
      CAN: {
        name: "CanYaCoin",
        symbol: "CAN",
        address: "0x007EA5C0Ea75a8DF45D288a4debdD5bb633F9e56",
        chainId: 56,
        decimals: 18,
        website: "https://www.canwork.io/",
        description: "CanYaCoin or CAN is the native token that powers the CanWork payment system and will be the bridge between all Binance Chain (BEP2) assets",
        logoURI: "https://tokens.pancakeswap.finance/images/0x007ea5c0ea75a8df45d288a4debdd5bb633f9e56.png"
      },
      DOT: {
        name: "Polkadot Token",
        symbol: "DOT",
        address: "0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402",
        chainId: 56,
        decimals: 18,
        website: "https://polkadot.network/",
        description: "Polkadot is an open-source sharding multichain protocol that facilitates the cross-chain transfer of any data or asset types, not just tokens, thereby making a wide range of blockchains interoperable with each other.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x7083609fce4d1d8dc0c979aab8c869ea2c873402.png"
      },
      CAKE: {
        name: "PancakeSwap Token",
        symbol: "CAKE",
        address: "0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82",
        chainId: 56,
        decimals: 18,
        website: "https://pancakeswap.finance/",
        description: "PancakeSwap is an automated market maker (AMM) \u2014 a decentralized finance (DeFi) application that allows users to exchange tokens, providing liquidity via farming and earning fees in return.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82.png"
      },
      STM: {
        name: "Streamity",
        symbol: "STM",
        address: "0x90DF11a8ccE420675e73922419e3f4f3Fe13CCCb",
        chainId: 56,
        decimals: 18,
        website: "https://streamity.org/",
        description: "Streamity describes itself as an ecosystem that unites several crypto products (e.g.wallet, exchange, educational courses).",
        logoURI: "https://tokens.pancakeswap.finance/images/0x90df11a8cce420675e73922419e3f4f3fe13cccb.png"
      },
      ANKR: {
        name: "Ankr",
        symbol: "ANKR",
        address: "0xf307910A4c7bbc79691fD374889b36d8531B08e3",
        chainId: 56,
        decimals: 18,
        website: "https://www.ankr.com/",
        description: "Ankr originates as a solution that utilizes shared resources in order to provide easy and affordable blockchain node hosting solutions.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xf307910a4c7bbc79691fd374889b36d8531b08e3.png",
        documentation: "https://www.ankr.com/about-network/token/"
      },
      LINK: {
        name: "ChainLink Token",
        symbol: "LINK",
        address: "0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD",
        chainId: 56,
        decimals: 18,
        website: "https://chain.link/",
        description: "Link is the currency used to pay the Chainlink node operators for their work. Chainlink node operators have to stake LINK in the network in order to participate and provide data services.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xf8a0bf9cf54bb92f17374d9e9a321e6a111a51bd.png"
      },
      DICE: {
        name: "Dice.finance Token",
        symbol: "DICE",
        address: "0x748AD98b14C814B28812eB42ad219C8672909879",
        chainId: 56,
        decimals: 18,
        website: "https://dice.finance/",
        description: "DICE.FINANCE is a fully decentralized protocol for a casino on Ethereum.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x748ad98b14c814b28812eb42ad219c8672909879.png"
      },
      "JNTR/b": {
        name: "JNTR/b",
        symbol: "JNTR/b",
        address: "0x3c037C4c2296f280bB318D725D0b454B76c199b9",
        chainId: 56,
        decimals: 18,
        website: "https://jointer.io/",
        description: "Jointer strives to simplify the commercial real estate industry so that every investor, even one with zero knowledge or experience, will have the opportunity to syndicate funds and invest in this historically lucrative asset class.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x3c037c4c2296f280bb318d725d0b454b76c199b9.png"
      },
      SPART: {
        name: "SPARTAN PROTOCOL TOKEN",
        symbol: "SPART",
        address: "0xE4Ae305ebE1AbE663f261Bc00534067C80ad677C",
        chainId: 56,
        decimals: 18,
        website: "https://spartanprotocol.org/",
        description: "Spartan Protocol provides community-governed and programmable token emissions functions to incentivize the formation of deep liquidity pools.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xe4ae305ebe1abe663f261bc00534067c80ad677c.png"
      },
      TWT: {
        name: "Trust Wallet",
        symbol: "TWT",
        address: "0x4B0F1812e5Df2A09796481Ff14017e6005508003",
        chainId: 56,
        decimals: 18,
        website: "https://trustwallet.com/",
        description: "Trust Wallet Token, or TWT, is a simple BEP-20 utility token that provides a range of benefits and incentives to Trust Wallet users.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x4b0f1812e5df2a09796481ff14017e6005508003.png"
      },
      XVS: {
        name: "Venus",
        symbol: "XVS",
        address: "0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63",
        chainId: 56,
        decimals: 18,
        website: "https://venus.io/",
        description: "Venus is an algorithmic money market and synthetic stablecoin protocol launched exclusively on BNB Chain.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63.png"
      },
      Beer: {
        name: "Beer Garden",
        symbol: "Beer",
        address: "0xbB8DB5e17BBe9c90Da8E3445E335b82d7cc53575",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xbb8db5e17bbe9c90da8e3445e335b82d7cc53575.png"
      },
      ALPHA: {
        name: "AlphaToken",
        symbol: "ALPHA",
        address: "0xa1faa113cbE53436Df28FF0aEe54275c13B40975",
        chainId: 56,
        decimals: 18,
        website: "https://alphafinance.io/",
        description: "Alpha Finance Lab is a DeFi Lab, and on a mission to build Alpha Universe. Alpha Universe includes the Alpha ecosystem, which consists of Alpha products that interoperate to maximize returns while minimizing risks for users, and other ecosystems incubated through the Alpha Launchpad incubator program.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xa1faa113cbe53436df28ff0aee54275c13b40975.png"
      },
      BIFI: {
        name: "Beefy.finance",
        symbol: "BIFI",
        address: "0xCa3F508B8e4Dd382eE878A314789373D80A5190A",
        chainId: 56,
        decimals: 18,
        website: "https://www.beefy.finance/",
        description: "Beefy.Finance (BIFI), is a yield optimization tool on the Binance Smart Chain that helps maximize the return from yield farming.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xCa3F508B8e4Dd382eE878A314789373D80A5190A.png",
        documentation: "https://docs.beefy.finance/"
      },
      YFI: {
        name: "yearn.finance",
        symbol: "YFI",
        address: "0x88f1A5ae2A3BF98AEAF342D26B30a79438c9142e",
        chainId: 56,
        decimals: 18,
        website: "https://yearn.finance/",
        description: "Yearn.finance is an aggregator service for decentralized finance (DeFi) investors, using automation to allow them to maximize profits from yield farming.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x88f1a5ae2a3bf98aeaf342d26b30a79438c9142e.png"
      },
      UNI: {
        name: "Uniswap",
        symbol: "UNI",
        address: "0xBf5140A22578168FD562DCcF235E5D43A02ce9B1",
        chainId: 56,
        decimals: 18,
        website: "https://uniswap.org/",
        description: "UNI is the governance token for Uniswap. UNI was introduced on 16th September 2020 through a retrospective airdrop to users who have interacted with the protocol either by swapping tokens or by providing liquidity.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xbf5140a22578168fd562dccf235e5d43a02ce9b1.png"
      },
      FRIES: {
        name: "fry.world",
        symbol: "FRIES",
        address: "0x393B312C01048b3ed2720bF1B090084C09e408A1",
        chainId: 56,
        decimals: 18,
        website: "https://fry.world/",
        description: "Fries is described to potentially be one of the first projects to build the infrastructure required for yield optimizing strategies on the Binance Smart Chain.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x393B312C01048b3ed2720bF1B090084C09e408A1.png"
      },
      STAX: {
        name: "StableXSwap",
        symbol: "STAX",
        address: "0x0Da6Ed8B13214Ff28e9Ca979Dd37439e8a88F6c4",
        chainId: 56,
        decimals: 18,
        website: "https://www.stablex.finance/",
        description: "StableXSwap is a stablecoin-focused AMM-style decentralized exchange built on Binance Smart Chain.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x0da6ed8b13214ff28e9ca979dd37439e8a88f6c4.png"
      },
      FIL: {
        name: "Filecoin",
        symbol: "FIL",
        address: "0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153",
        chainId: 56,
        decimals: 18,
        website: "https://filecoin.io/",
        description: "Filecoin is a decentralized storage system that aims to \u201Cstore humanity\u2019s most important information.\u201D.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x0d8ce2a99bb6e3b7db580ed848240e4a0f9ae153.png"
      },
      KAVA: {
        name: "KAVA",
        symbol: "KAVA",
        address: "0x5F88AB06e8dfe89DF127B2430Bba4Af600866035",
        chainId: 56,
        decimals: 6,
        website: "https://www.kava.io/",
        description: "Kava is a cross-chain DeFi lending platform that allows users to borrow USDX stablecoins and deposit a variety of cryptocurrencies to begin earning a yield.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x5F88AB06e8dfe89DF127B2430Bba4Af600866035.png"
      },
      USDX: {
        name: "USDX",
        symbol: "USDX",
        address: "0x1203355742e76875154C0D13eB81DCD7711dC7d9",
        chainId: 56,
        decimals: 6,
        website: "https://www.kava.io/",
        description: "USDX is the crypto-backed native stablecoin of the Kava DeFi hub.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x1203355742e76875154c0d13eb81dcd7711dc7d9.png"
      },
      INJ: {
        name: "Injective Protocol",
        symbol: "INJ",
        address: "0xa2B726B1145A4773F68593CF171187d8EBe4d495",
        chainId: 56,
        decimals: 18,
        website: "https://injectiveprotocol.com/",
        description: "The Injective Protocol project is a revolutionary idea that aims to make currency exchanges completely decentralized, public operated networks.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xa2B726B1145A4773F68593CF171187d8EBe4d495.png"
      },
      SXP: {
        name: "Swipe",
        symbol: "SXP",
        address: "0x47BEAd2563dCBf3bF2c9407fEa4dC236fAbA485A",
        chainId: 56,
        decimals: 18,
        website: "https://swipe.io/",
        description: "Swipe powers a robust platform that enable businesses to create card programs for users to spend anything globally.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x47bead2563dcbf3bf2c9407fea4dc236faba485a.png"
      },
      USDC: {
        name: "Binance-Peg USD Coin",
        symbol: "USDC",
        address: "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
        chainId: 56,
        decimals: 18,
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d.png"
      },
      CTK: {
        name: "CertiK Token",
        symbol: "CTK",
        address: "0xA8c2B8eec3d368C0253ad3dae65a5F2BBB89c929",
        chainId: 56,
        decimals: 6,
        website: "https://www.certik.org/",
        description: "CertiK Chain is a security-first, delegated proof-of-stake blockchain, for trustworthy execution of mission-critical applications, including DeFi, NFTs, and autonomous vehicles.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xa8c2b8eec3d368c0253ad3dae65a5f2bbb89c929.png"
      },
      DANGO: {
        name: "DANGO",
        symbol: "DANGO",
        address: "0x0957C57C9EB7744850dCC95db5A06eD4a246236E",
        chainId: 56,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x0957c57c9eb7744850dcc95db5a06ed4a246236e.png"
      },
      HARD: {
        name: "HARD",
        symbol: "HARD",
        address: "0xf79037F6f6bE66832DE4E7516be52826BC3cBcc4",
        chainId: 56,
        decimals: 6,
        website: "https://www.hard.kava.io/",
        description: "HARD Protocol is a decentralized money market built on Kava, enabling the lending and borrowing of cross-chain assets.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xf79037f6f6be66832de4e7516be52826bc3cbcc4.png"
      },
      bROOBEE: {
        name: "ROOBEE",
        symbol: "bROOBEE",
        address: "0xE64F5Cb844946C1F102Bd25bBD87a5aB4aE89Fbe",
        chainId: 56,
        decimals: 18,
        website: "https://roobee.io/",
        description: "Roobee (ROOBEE) is a blockchain-based investment platform that allows users to invest in products from both the traditional and crypto markets.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xe64f5cb844946c1f102bd25bbd87a5ab4ae89fbe.png"
      },
      UNFI: {
        name: "Unifi Token",
        symbol: "UNFI",
        address: "0x728C5baC3C3e370E372Fc4671f9ef6916b814d8B",
        chainId: 56,
        decimals: 18,
        website: "https://unifiprotocol.com/",
        description: "Unifi Protocol combines the power of several blockchains and relies on the foundation of Ethereum DApp and DeFi development. However, Unifi makes it its mission to introduce interoperability to the world of DeFi by allowing users access to multiple blockchains and an extremely versatile UNFI token.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x728C5baC3C3e370E372Fc4671f9ef6916b814d8B.png"
      },
      QUSD: {
        name: "QUSD Stablecoin",
        symbol: "QUSD",
        address: "0xb8C540d00dd0Bf76ea12E4B4B95eFC90804f924E",
        chainId: 56,
        decimals: 18,
        website: "https://qian.finance/",
        description: "QUSD is the stablecoin developed by the QIAN protocol.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xb8C540d00dd0Bf76ea12E4B4B95eFC90804f924E.png"
      },
      VAI: {
        name: "VAI Stablecoin",
        symbol: "VAI",
        address: "0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7",
        chainId: 56,
        decimals: 18,
        website: "https://venus.io/",
        description: "Vai is a decentralized stablecoin built on the Venus Protocol that runs on the Binance Smart Chain.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x4bd17003473389a42daf6a0a729f6fdb328bbbd7.png"
      },
      JUV: {
        name: "Juventus",
        symbol: "JUV",
        address: "0xC40C9A843E1c6D01b7578284a9028854f6683b1B",
        chainId: 56,
        decimals: 2,
        website: "https://www.socios.com/juventus/",
        description: "Juventus Fan Tokens can be used in the Socios.com app, where users acquire voting rights to influence the clubs they support.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xc40c9a843e1c6d01b7578284a9028854f6683b1b.png"
      },
      PSG: {
        name: "Paris Saint-Germain",
        symbol: "PSG",
        address: "0xBc5609612b7C44BEf426De600B5fd1379DB2EcF1",
        chainId: 56,
        decimals: 2,
        website: "https://www.socios.com/paris-saint-germain/",
        description: "Paris Saint-Germain Fan Tokens can be used in the Socios.com app, where users acquire voting rights to influence the clubs they support.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xbc5609612b7c44bef426de600b5fd1379db2ecf1.png"
      },
      MATH: {
        name: "Math",
        symbol: "MATH",
        address: "0xF218184Af829Cf2b0019F8E6F0b2423498a36983",
        chainId: 56,
        decimals: 18,
        website: "https://mathwallet.org/en-us/",
        description: "MATH is a multi-chain and cross-chain blockchain assets hub.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xf218184af829cf2b0019f8e6f0b2423498a36983.png"
      },
      FUEL: {
        name: "Fuel",
        symbol: "FUEL",
        address: "0x2090c8295769791ab7A3CF1CC6e0AA19F35e441A",
        chainId: 56,
        decimals: 18,
        website: "https://jetfuel.finance/",
        description: "Jetfuel is a yield farming and yield aggregator platform that combines features from the most successful DeFi projects.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x2090c8295769791ab7A3CF1CC6e0AA19F35e441A.png"
      },
      NULS: {
        name: "Nuls",
        symbol: "NULS",
        address: "0x8CD6e29d3686d24d3C2018CEe54621eA0f89313B",
        chainId: 56,
        decimals: 8,
        website: "https://nuls.io/",
        description: "NULS is a microservices-driven blockchain project that uses the Proof of Credit (PoC) consensus mechanism (dPoS plus credit rating) to mine via staking.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x8cd6e29d3686d24d3c2018cee54621ea0f89313b.png"
      },
      NVT: {
        name: "NerveNetwork",
        symbol: "NVT",
        address: "0xf0E406c49C63AbF358030A299C0E00118C4C6BA5",
        chainId: 56,
        decimals: 8,
        website: "https://nerve.network/",
        description: "Nerve is a decentralized digital asset service network based on the NULS micro-services framework, which uses the NULS ChainBox to develop a blockchain cross-chain interaction protocol.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xf0e406c49c63abf358030a299c0e00118c4c6ba5.png"
      },
      REEF: {
        name: "Reef",
        symbol: "REEF",
        address: "0xF21768cCBC73Ea5B6fd3C687208a7c2def2d966e",
        chainId: 56,
        decimals: 18,
        website: "https://reef.finance/",
        description: "Reef Chain is an EVM compatible chain for DeFi. It is fast, scalable, has low transaction costs and does no wasteful mining. It is built with Polkadot Substrate and comes with on-chain governance.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xf21768ccbc73ea5b6fd3c687208a7c2def2d966e.png"
      },
      OG: {
        name: "OG",
        symbol: "OG",
        address: "0xf05E45aD22150677a017Fbd94b84fBB63dc9b44c",
        chainId: 56,
        decimals: 2,
        website: "https://www.socios.com/og/",
        description: "OG Fan Tokens can be used in the Socios.com app, where users acquire voting rights to influence the clubs they support.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xf05e45ad22150677a017fbd94b84fbb63dc9b44c.png"
      },
      ATM: {
        name: "Atletico de Madrid",
        symbol: "ATM",
        address: "0x25E9d05365c867E59C1904E7463Af9F312296f9E",
        chainId: 56,
        decimals: 2,
        website: "https://www.socios.com/atletico-de-madrid/",
        description: "Atletico de Madrid Fan Tokens can be used in the Socios.com app, where users acquire voting rights to influence the clubs they support.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x25e9d05365c867e59c1904e7463af9f312296f9e.png"
      },
      ASR: {
        name: "AS Roma",
        symbol: "ASR",
        address: "0x80D5f92C2c8C682070C95495313dDB680B267320",
        chainId: 56,
        decimals: 2,
        website: "https://www.socios.com/asroma/",
        description: "AS Roma Fan Tokens can be used in the Socios.com app, where users acquire voting rights to influence the clubs they support.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x80d5f92c2c8c682070c95495313ddb680b267320.png"
      },
      TEN: {
        name: "Tenet",
        symbol: "TEN",
        address: "0xdFF8cb622790b7F92686c722b02CaB55592f152C",
        chainId: 56,
        decimals: 18,
        website: "https://tenet.farm/",
        description: "Tenet is a cross-chain Automated Market Maker (AMM) connector that provides a decentralized Liquidity Tap for various tokens.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xdff8cb622790b7f92686c722b02cab55592f152c.png"
      },
      Helmet: {
        name: "Helmet.insure",
        symbol: "Helmet",
        address: "0x948d2a81086A075b3130BAc19e4c6DEe1D2E3fE8",
        chainId: 56,
        decimals: 18,
        website: "https://www.helmet.insure/",
        description: "Helmet.insure is a peer-to-peer (P2P) price-shield insurance protocol launched in January 2021 on Binance Smart Chain (BSC) with the aim to redefine option trading with user-friendly insurance policy wrapping.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x948d2a81086a075b3130bac19e4c6dee1d2e3fe8.png"
      },
      BSCX: {
        name: "BSCEX",
        symbol: "BSCX",
        address: "0x5Ac52EE5b2a633895292Ff6d8A89bB9190451587",
        chainId: 56,
        decimals: 18,
        website: "https://bscex.org/",
        description: "BSCex is a decentralized non-custodial cryptocurrency exchange-centered ecosystem that runs on Binance Smart Chain (BSC).",
        logoURI: "https://tokens.pancakeswap.finance/images/0x5ac52ee5b2a633895292ff6d8a89bb9190451587.png"
      },
      BTCST: {
        name: "Standard BTC Hashrate Token",
        symbol: "BTCST",
        address: "0x78650B139471520656b9E7aA7A5e9276814a38e9",
        chainId: 56,
        decimals: 17,
        website: "https://www.btcst.finance/",
        description: "BTCST\u2019s goal is to bridge liquidity to Bitcoin\u2019s mining market. This will allow users to get exposure to mining rewards and hashpower of any size, at a low cost. The ultimate goal of the app is to increase the liquidity and efficiency of mining power markets.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x78650b139471520656b9e7aa7a5e9276814a38e9.png"
      },
      FRONT: {
        name: "Frontier Token",
        symbol: "FRONT",
        address: "0x928e55daB735aa8260AF3cEDadA18B5f70C72f1b",
        chainId: 56,
        decimals: 18,
        website: "https://frontier.xyz/",
        description: "Frontier is a chain-agnostic DeFi aggregation layer. In short, Frontier\u02BCs core mission is to bring the essential pieces of DeFi to users across whichever platforms they prefer.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x928e55daB735aa8260AF3cEDadA18B5f70C72f1b.png"
      },
      UST: {
        name: "UST Token",
        symbol: "UST",
        address: "0x23396cF899Ca06c4472205fC903bDB4de249D6fC",
        chainId: 56,
        decimals: 18,
        website: "https://mirror.finance/",
        description: "TerraUSD (UST) is the decentralized and algorithmic stablecoin of the Terra blockchain. It is a scalable, yield-bearing coin that is value-pegged to the US Dollar.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x23396cF899Ca06c4472205fC903bDB4de249D6fC.png"
      },
      EGLD: {
        name: "Elrond",
        symbol: "EGLD",
        address: "0xbF7c81FFF98BbE61B40Ed186e4AfD6DDd01337fe",
        chainId: 56,
        decimals: 18,
        website: "https://elrond.com/",
        description: "EGLD is a highly scalable, fast and secure blockchain platform for distributed apps, enterprise use cases and the new internet economy.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xbf7c81fff98bbe61b40ed186e4afd6ddd01337fe.png"
      },
      LIT: {
        name: "Litentry",
        symbol: "LIT",
        address: "0xb59490aB09A0f526Cc7305822aC65f2Ab12f9723",
        chainId: 56,
        decimals: 18,
        website: "https://www.litentry.com/",
        description: "LIT is a network that supports cross-chain aggregated identities. Build on Substrate, ready for Polkadot.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xb59490ab09a0f526cc7305822ac65f2ab12f9723.png"
      },
      LINA: {
        name: "Linear Finance",
        symbol: "LINA",
        address: "0x762539b45A1dCcE3D36d080F74d1AED37844b878",
        chainId: 56,
        decimals: 18,
        website: "https://linear.finance/",
        description: "Linear is a decentralized delta-one asset protocol capable of instantly creating synthetic assets with unlimited liquidity.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x762539b45a1dcce3d36d080f74d1aed37844b878.png"
      },
      BETH: {
        name: "Beacon ETH",
        symbol: "BETH",
        address: "0x250632378E573c6Be1AC2f97Fcdf00515d0Aa91B",
        chainId: 56,
        decimals: 18,
        website: "https://ethereum.org/en/eth2/beacon-chain/",
        description: "Beacon ETH is the token of Beacon Chain. Beacon Chain will introduce proof-of-stake to Ethereum.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x250632378e573c6be1ac2f97fcdf00515d0aa91b.png"
      },
      lUSD: {
        name: "lUSD",
        symbol: "lUSD",
        address: "0x23e8a70534308a4AAF76fb8C32ec13d17a3BD89e",
        chainId: 56,
        decimals: 18,
        website: "https://www.liquity.org/",
        description: "LUSD is the USD-pegged stablecoin used to pay out loans on the Liquity protocol.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x23e8a70534308a4AAF76fb8C32ec13d17a3BD89e.png"
      },
      SFP: {
        name: "SafePal Token",
        symbol: "SFP",
        address: "0xD41FDb03Ba84762dD66a0af1a6C8540FF1ba5dfb",
        chainId: 56,
        decimals: 18,
        website: "https://www.safepal.io/",
        description: "SafePal is a cryptocurrency wallet launched in 2018 that helps users to protect and grow their digital assets.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xd41fdb03ba84762dd66a0af1a6c8540ff1ba5dfb.png"
      },
      COMP: {
        name: "Compound Finance",
        symbol: "COMP",
        address: "0x52CE071Bd9b1C4B00A0b92D298c512478CaD67e8",
        chainId: 56,
        decimals: 18,
        website: "https://compound.finance/",
        description: "Compound is a DeFi lending protocol that allows users to earn interest on their cryptocurrencies by depositing them into one of several pools supported by the platform.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x52ce071bd9b1c4b00a0b92d298c512478cad67e8.png"
      },
      renBTC: {
        name: "renBTC",
        symbol: "renBTC",
        address: "0xfCe146bF3146100cfe5dB4129cf6C82b0eF4Ad8c",
        chainId: 56,
        decimals: 8,
        website: "https://renproject.io/",
        description: "RenBTC is an ERC-20 token built on the Ethereum network, pegged to Bitcoin. This means that each RenBTC can be always redeemed for one Bitcoin, and hence tends to maintain its value at close to the Bitcoin market rate.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xfCe146bF3146100cfe5dB4129cf6C82b0eF4Ad8c.png"
      },
      renDOGE: {
        name: "renDOGE",
        symbol: "renDOGE",
        address: "0xc3fEd6eB39178A541D274e6Fc748d48f0Ca01CC3",
        chainId: 56,
        decimals: 8,
        website: "https://renproject.io/",
        description: "RenDOGE is an ERC-20 token built on the Ethereum network, pegged to Dogecoin. This means that each RenDoge can be always redeemed for one Dogecoin, and hence tends to maintain its value at close to the Dogecoin market rate.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xc3fed6eb39178a541d274e6fc748d48f0ca01cc3.png"
      },
      anyMTLX: {
        name: "anyMTLX",
        symbol: "anyMTLX",
        address: "0x5921DEE8556c4593EeFCFad3CA5e2f618606483b",
        chainId: 56,
        decimals: 18,
        website: "https://mettalex.com/",
        description: "Mettalex is the first decentralised derivatives exchange (DEX) powered by Fetch.ai technology.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x5921dee8556c4593eefcfad3ca5e2f618606483b.png"
      },
      BRY: {
        name: "Berry",
        symbol: "BRY",
        address: "0xf859Bf77cBe8699013d6Dbc7C2b926Aaf307F830",
        chainId: 56,
        decimals: 18,
        website: "https://berrydata.co/",
        description: "Berry is a decentralized oracle network on the Binance Smart Chain.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xf859Bf77cBe8699013d6Dbc7C2b926Aaf307F830.png"
      },
      DODO: {
        name: "Dodo",
        symbol: "DODO",
        address: "0x67ee3Cb086F8a16f34beE3ca72FAD36F7Db929e2",
        chainId: 56,
        decimals: 18,
        website: "https://dodoex.io/",
        description: "DODO is a DeFi protocol decentralized finance (DeFi) protocol and on-chain liquidity provider whose unique proactive market maker (PMM) algorithm aims to offer better liquidity and price stability than automated market makers (AMM).",
        logoURI: "https://tokens.pancakeswap.finance/images/0x67ee3cb086f8a16f34bee3ca72fad36f7db929e2.png"
      },
      SUSHI: {
        name: "Sushi",
        symbol: "SUSHI",
        address: "0x947950BcC74888a40Ffa2593C5798F11Fc9124C4",
        chainId: 56,
        decimals: 18,
        website: "https://www.sushi.com/",
        description: "Sushi is the home of DeFi. Their community is building a comprehensive, decentralized trading platform for the future of finance. Swap, earn, stack yields, lend, borrow, leverage all on one decentralized, community driven platform.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x947950bcc74888a40ffa2593c5798f11fc9124c4.png"
      },
      BOPEN: {
        name: "OPEN Governance Token",
        symbol: "BOPEN",
        address: "0xF35262a9d427F96d2437379eF090db986eaE5d42",
        chainId: 56,
        decimals: 18,
        website: "https://opendao.io/",
        description: "The OPEN project is a toolkit to connect the real world to DEFI",
        logoURI: "https://tokens.pancakeswap.finance/images/0xF35262a9d427F96d2437379eF090db986eaE5d42.png"
      },
      BOR: {
        name: "BoringDAO",
        symbol: "BOR",
        address: "0x92D7756c60dcfD4c689290E8A9F4d263b3b32241",
        chainId: 56,
        decimals: 18,
        website: "https://www.boringdao.com/",
        description: "BoringDAO deploys a series of decentralized bridges - or tunnels - which allow you to safely move your Bitcoin & other crypto assets between Ethereum & different blockchains to maximize utilization rate of crypto assets in DeFi world.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x92d7756c60dcfd4c689290e8a9f4d263b3b32241.png"
      },
      renZEC: {
        name: "renZEC",
        symbol: "renZEC",
        address: "0x695FD30aF473F2960e81Dc9bA7cB67679d35EDb7",
        chainId: 56,
        decimals: 8,
        website: "https://renproject.io/",
        description: "RenZEC is an ERC-20 token built on the Ethereum network, pegged to ZCash. This means that each RenZEC can be always redeemed for one ZCash, and hence tends to maintain its value at close to the ZCash market rate.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x695FD30aF473F2960e81Dc9bA7cB67679d35EDb7.png"
      },
      IOTX: {
        name: "IoTeX",
        symbol: "IOTX",
        address: "0x9678E42ceBEb63F23197D726B29b1CB20d0064E5",
        chainId: 56,
        decimals: 18,
        website: "https://iotex.io/",
        description: "IoTeX is an open ecosystem where people and machines can interact with guaranteed trust, free will, and under properly designed economic incentives.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x9678e42cebeb63f23197d726b29b1cb20d0064e5.png"
      },
      XMARK: {
        name: "xMARK",
        symbol: "XMARK",
        address: "0x26A5dFab467d4f58fB266648CAe769503CEC9580",
        chainId: 56,
        decimals: 9,
        website: "https://benchmarkprotocol.finance/",
        description: "Benchmark Protocol is an elastic stablecoin-alternative bridging capital markets to DeFi.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x26a5dfab467d4f58fb266648cae769503cec9580.png"
      },
      TPT: {
        name: "TokenPocket",
        symbol: "TPT",
        address: "0xECa41281c24451168a37211F0bc2b8645AF45092",
        chainId: 56,
        decimals: 4,
        website: "https://tokenpocket.pro/",
        description: "TPT is an applicational token representing TokenPocket users and developers\u2019 rights in the TP ecosystem.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xeca41281c24451168a37211f0bc2b8645af45092.png"
      },
      WATCH: {
        name: "Yieldwatch",
        symbol: "WATCH",
        address: "0x7A9f28EB62C791422Aa23CeAE1dA9C847cBeC9b0",
        chainId: 56,
        decimals: 18,
        website: "https://www.yieldwatch.net/",
        description: "Yieldwatch.net is a smart yield farming dashboard that lets you monitor your liquidity pools, yield farming and token staking performance with a casual and sleek UI, which is optimised for mobile use.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x7a9f28eb62c791422aa23ceae1da9c847cbec9b0.png"
      },
      DEXE: {
        name: "DeXe",
        symbol: "DEXE",
        address: "0x039cB485212f996A9DBb85A9a75d898F94d38dA6",
        chainId: 56,
        decimals: 18,
        website: "https://dexe.network/",
        description: "Dexe is a decentralized social trading platform designed to copy the best traders strategies.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x039cb485212f996a9dbb85a9a75d898f94d38da6.png"
      },
      RAMP: {
        name: "Ramp DEFI",
        symbol: "RAMP",
        address: "0x8519EA49c997f50cefFa444d240fB655e89248Aa",
        chainId: 56,
        decimals: 18,
        website: "https://www.rampdefi.com/",
        description: "RAMP DeFi is a multi-chain DeFi protocol that helps asset owners achieve capital efficiency by offering a powerful and comprehensive solution to multi-task users\u2019 crypto-assets, maximizing the value and returns.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x8519ea49c997f50ceffa444d240fb655e89248aa.png"
      },
      BELT: {
        name: "Belt",
        symbol: "BELT",
        address: "0xE0e514c71282b6f4e823703a39374Cf58dc3eA4f",
        chainId: 56,
        decimals: 18,
        website: "https://belt.fi/bsc",
        description: "Belt.fi is a protocol that allows users to retain the stability of their asset positions and get maximum yields with minimal risk, including automated vault compounding and yield optimization strategies.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xE0e514c71282b6f4e823703a39374Cf58dc3eA4f.png"
      },
      BAT: {
        name: "Basic Attention Token",
        symbol: "BAT",
        address: "0x101d82428437127bF1608F699CD651e6Abf9766E",
        chainId: 56,
        decimals: 18,
        website: "https://basicattentiontoken.org/",
        description: "Basic Attention Token, or BAT, is the token that powers a new blockchain-based digital advertising platform designed to fairly reward users for their attention, while providing advertisers with a better return on their ad spend.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x101d82428437127bf1608f699cd651e6abf9766e.png"
      },
      BUX: {
        name: "BUX",
        symbol: "BUX",
        address: "0x211FfbE424b90e25a15531ca322adF1559779E45",
        chainId: 56,
        decimals: 18,
        website: "https://bux-c.com/",
        description: "The BUX Token (BUX) is a Binance Smart Chain powered BEP20 utility token that can be used on the BUX Crypto platform to trade with 0% commission and access premium features.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x211ffbe424b90e25a15531ca322adf1559779e45.png"
      },
      ALICE: {
        name: "My Neigbor Alice",
        symbol: "ALICE",
        address: "0xAC51066d7bEC65Dc4589368da368b212745d63E8",
        chainId: 56,
        decimals: 6,
        website: "https://www.myneighboralice.com/",
        description: "My Neighbor Alice is a multiplayer builder game, where anyone can buy and own virtual islands, collect and build exciting items and meet new friends.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xac51066d7bec65dc4589368da368b212745d63e8.png"
      },
      BUNNY: {
        name: "Pancake Bunny",
        symbol: "BUNNY",
        address: "0xC9849E6fdB743d08fAeE3E34dd2D1bc69EA11a51",
        chainId: 56,
        decimals: 18,
        website: "https://pancakebunny.finance/",
        description: "PancakeBunny is a decentralized finance (DeFi) yield aggregator and optimizer for the Binance Smart Chain.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xc9849e6fdb743d08faee3e34dd2d1bc69ea11a51.png"
      },
      COS: {
        name: "Contentos",
        symbol: "COS",
        address: "0x96Dd399F9c3AFda1F194182F71600F1B65946501",
        chainId: 56,
        decimals: 18,
        website: "https://www.contentos.io/",
        description: 'The vision of Contentos is to build a "decentralized digital content community that allows content to be freely produced, distributed, rewarded, and traded, while protecting author rights".',
        logoURI: "https://tokens.pancakeswap.finance/images/0x96dd399f9c3afda1f194182f71600f1b65946501.png"
      },
      ALPACA: {
        name: "Alpaca",
        symbol: "ALPACA",
        address: "0x8F0528cE5eF7B51152A59745bEfDD91D97091d2F",
        chainId: 56,
        decimals: 18,
        website: "https://www.alpacafinance.org/",
        description: "Alpaca Finance helps lenders earn safe and stable yields, and offers borrowers undercollateralized loans for leveraged yield farming positions, vastly multiplying their farming principals and resulting profits.\u200C",
        logoURI: "https://tokens.pancakeswap.finance/images/0x8f0528ce5ef7b51152a59745befdd91d97091d2f.png"
      },
      DUSK: {
        name: "Dusk",
        symbol: "DUSK",
        address: "0xB2BD0749DBE21f623d9BABa856D3B0f0e1BFEc9C",
        chainId: 56,
        decimals: 18,
        website: "https://dusk.network/",
        description: "Dusk Network is technology for securities. An open source and secure blockchain (DLT) infrastructure that businesses use to tokenize financial instruments and automate costly processes.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xb2bd0749dbe21f623d9baba856d3b0f0e1bfec9c.png"
      },
      bDIGG: {
        name: "bDIGG",
        symbol: "bDIGG",
        address: "0x5986D5c77c65e5801a5cAa4fAE80089f870A71dA",
        chainId: 56,
        decimals: 18,
        website: "https://badger.finance/",
        description: "An elastic BTC-pegged token governed by the Badger DAO.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x5986d5c77c65e5801a5caa4fae80089f870a71da.png"
      },
      bBADGER: {
        name: "bBADGER",
        symbol: "bBADGER",
        address: "0x1F7216fdB338247512Ec99715587bb97BBf96eae",
        chainId: 56,
        decimals: 18,
        website: "https://badger.finance/",
        description: "Badger DAO is an open-source, decentralized automated organization that is dedicated to building products and infrastructure of simplifying the use of Bitcoin (BTC) as collateral across many smart contract platforms.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x1f7216fdb338247512ec99715587bb97bbf96eae.png"
      },
      pBTC: {
        name: "pBTC",
        symbol: "pBTC",
        address: "0xeD28A457A5A76596ac48d87C0f577020F6Ea1c4C",
        chainId: 56,
        decimals: 18,
        website: "https://p.network/",
        description: "pBTC is a 1:1 pegged ERC777 Bitcoin representation on Ethereum.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xed28a457a5a76596ac48d87c0f577020f6ea1c4c.png"
      },
      MIR: {
        name: "Mirror Finance",
        symbol: "MIR",
        address: "0x5B6DcF557E2aBE2323c48445E8CC948910d8c2c9",
        chainId: 56,
        decimals: 18,
        website: "https://mirror.finance/",
        description: "MIR is the governance token of Mirror Protocol, a synthetic assets protocol built by Terraform Labs (TFL) on the Terra blockchain.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x5b6dcf557e2abe2323c48445e8cc948910d8c2c9.png"
      },
      ZIL: {
        name: "Zilliqa",
        symbol: "ZIL",
        address: "0xb86AbCb37C3A4B64f74f59301AFF131a1BEcC787",
        chainId: 56,
        decimals: 12,
        website: "https://www.zilliqa.com/",
        description: "Zilliqa is mainly based on the concept of Sharding and primarily aims at improving the scalability of the cryptocurrency networks as in case of Bitcoin or Ethereum.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xb86abcb37c3a4b64f74f59301aff131a1becc787.png"
      },
      SWTH: {
        name: "Switcheo",
        symbol: "SWTH",
        address: "0x250b211EE44459dAd5Cd3bCa803dD6a7EcB5d46C",
        chainId: 56,
        decimals: 8,
        website: "https://switcheo.org/",
        description: "SWTH is the native token of Switcheo, a decentralized exchange based in Singapore.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x250b211EE44459dAd5Cd3bCa803dD6a7EcB5d46C.png"
      },
      EPS: {
        name: "Ellipsis",
        symbol: "EPS",
        address: "0xA7f552078dcC247C2684336020c03648500C6d9F",
        chainId: 56,
        decimals: 18,
        website: "https://ellipsis.finance/",
        description: "Ellipsis protocol enables extremely efficient stable coin exchanges.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xa7f552078dcc247c2684336020c03648500c6d9f.png"
      },
      DFT: {
        name: "DFuture",
        symbol: "DFT",
        address: "0x42712dF5009c20fee340B245b510c0395896cF6e",
        chainId: 56,
        decimals: 18,
        website: "https://dfuture.com/",
        description: "Dfuture is a decentralization futures trading platform that revolutionizes the existing trading model, so that traders, LP and arbitrageurs can have a fairer, safer and more profitable trading environment.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x42712dF5009c20fee340B245b510c0395896cF6e.png"
      },
      GUM: {
        name: "Gourmet Galaxy",
        symbol: "GUM",
        address: "0xc53708664b99DF348dd27C3Ac0759d2DA9c40462",
        chainId: 56,
        decimals: 18,
        website: "https://gourmetgalaxy.io/",
        description: "Gourmet Galaxy is an innovative Yield Farming platform, a combination of DeFi and NFTs in a gaming experience.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xc53708664b99DF348dd27C3Ac0759d2DA9c40462.png"
      },
      ONE: {
        name: "Harmony One",
        symbol: "ONE",
        address: "0x03fF0ff224f904be3118461335064bB48Df47938",
        chainId: 56,
        decimals: 18,
        website: "https://www.harmony.one/",
        description: "Harmony is a blockchain platform designed to facilitate the creation and use of decentralized applications (DApps). The network aims to innovate the way decentralized applications work by focusing on random state sharding, which allows creating blocks in seconds.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x03ff0ff224f904be3118461335064bb48df47938.png"
      },
      EASY: {
        name: "Easyfi Network",
        symbol: "EASY",
        address: "0x7C17c8bED8d14bAccE824D020f994F4880D6Ab3B",
        chainId: 56,
        decimals: 18,
        website: "https://easyfi.network/",
        description: "EasyFi is a multi chain layer 2 money markets with structured lending products to accelerate liquidity deployment at remarkably lowest cost & unimaginable fast speed.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x7c17c8bed8d14bacce824d020f994f4880d6ab3b.png"
      },
      SAFEMOON: {
        name: "SafeMoon",
        symbol: "SAFEMOON",
        address: "0x8076C74C5e3F5852037F31Ff0093Eeb8c8ADd8D3",
        chainId: 56,
        decimals: 9,
        website: "https://safemoon.net/",
        description: "The SafeMoon Protocol is a community driven, fair launched DeFi Token. Three simple functions occur during each trade: Reflection, LP Acquisition, and Burn.",
        logoURI: "https://assets.trustwalletapp.com/blockchains/smartchain/assets/0x8076C74C5e3F5852037F31Ff0093Eeb8c8ADd8D3/logo.png"
      },
      ODDZ: {
        name: "Oddz",
        symbol: "ODDZ",
        address: "0xCD40F2670CF58720b694968698A5514e924F742d",
        chainId: 56,
        decimals: 18,
        website: "https://oddz.fi/",
        description: "Oddz is the Multi-chain options trading platform on Binance Smart Chain, Polkadot & Ethereum.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xcd40f2670cf58720b694968698a5514e924f742d.png"
      },
      APYS: {
        name: "APYSwap",
        symbol: "APYS",
        address: "0x37dfACfaeDA801437Ff648A1559d73f4C40aAcb7",
        chainId: 56,
        decimals: 18,
        website: "https://apyswap.com/",
        description: "ApySwap is a single point of entry for all the most popular and profitable services from such blockchains as Ethereum, Polkadot, Binance Smart Chain, HECO, Tezos, Solana and others.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x37dfACfaeDA801437Ff648A1559d73f4C40aAcb7.png"
      },
      TKO: {
        name: "TokoCrypto",
        symbol: "TKO",
        address: "0x9f589e3eabe42ebC94A44727b3f3531C0c877809",
        chainId: 56,
        decimals: 18,
        website: "https://www.tokocrypto.com/",
        description: "The token serves several purposes on the Tokocrypto blockchain platform and allows users to participate in crypto exchanges, deposit and savings programs, cross-platform DeFi applications, and NFT marketplaces.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x9f589e3eabe42ebc94a44727b3f3531c0c877809.png"
      },
      ITAM: {
        name: "Itam",
        symbol: "ITAM",
        address: "0x04C747b40Be4D535fC83D09939fb0f626F32800B",
        chainId: 56,
        decimals: 18,
        website: "https://itam.network/",
        description: "The project claims to support game developers with blockchain technology and provide an easy way for existing games to be integrated with blockchain.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x04c747b40be4d535fc83d09939fb0f626f32800b.png"
      },
      ARPA: {
        name: "ARPA",
        symbol: "ARPA",
        address: "0x6F769E65c14Ebd1f68817F5f1DcDb61Cfa2D6f7e",
        chainId: 56,
        decimals: 18,
        website: "https://arpachain.io/",
        description: "ARPA is a blockchain-based layer 2 solution for privacy-preserving computation, enabled by Multi-Party Computation (\u201CMPC\u201D).",
        logoURI: "https://tokens.pancakeswap.finance/images/0x6f769e65c14ebd1f68817f5f1dcdb61cfa2d6f7e.png"
      },
      JGN: {
        name: "Juggernaut Finance",
        symbol: "JGN",
        address: "0xC13B7a43223BB9Bf4B69BD68Ab20ca1B79d81C75",
        chainId: 56,
        decimals: 18,
        website: "https://jgndefi.com/",
        description: "JGN is described to be an unstoppable commerce network that offers custom synthetic DeFi assets to fit any business use case.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xc13b7a43223bb9bf4b69bd68ab20ca1b79d81c75.png"
      },
      TLM: {
        name: "Alien Worlds",
        symbol: "TLM",
        address: "0x2222227E22102Fe3322098e4CBfE18cFebD57c95",
        chainId: 56,
        decimals: 4,
        website: "https://alienworlds.io/",
        description: "Alien Worlds is a game where you can earn Trilium (TLM) for mining and have a chance to mine an NFT game card each time you mine.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x2222227e22102fe3322098e4cbfe18cfebd57c95.png"
      },
      ALPA: {
        name: "AlpaToken",
        symbol: "ALPA",
        address: "0xc5E6689C9c8B02be7C49912Ef19e79cF24977f03",
        chainId: 56,
        decimals: 18,
        website: "https://bsc.alpaca.city/",
        description: "Alpaca City is endeavoring to create a more accessible DeFi ecosystem by combining the power of yield farming and NFT.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xc5e6689c9c8b02be7c49912ef19e79cf24977f03.png"
      },
      HZN: {
        name: "Horizon Protocol",
        symbol: "HZN",
        address: "0xC0eFf7749b125444953ef89682201Fb8c6A917CD",
        chainId: 56,
        decimals: 18,
        website: "https://horizonprotocol.com/",
        description: "Horizon protocol is a defi platform facilitating the creation of on-chain synthetic assets representing the real economy.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xC0eFf7749b125444953ef89682201Fb8c6A917CD.png"
      },
      QKC: {
        name: "QuarkChain Token",
        symbol: "QKC",
        address: "0xA1434F1FC3F437fa33F7a781E041961C0205B5Da",
        chainId: 56,
        decimals: 18,
        website: "https://quarkchain.io/",
        description: "QuarkChain is a flexible, scalable, and user-oriented blockchain infrastructure by using blockchain sharding technology.",
        logoURI: ""
      },
      BCFX: {
        name: "BSC Conflux",
        symbol: "BCFX",
        address: "0x045c4324039dA91c52C55DF5D785385Aab073DcF",
        chainId: 56,
        decimals: 18,
        website: "https://www.confluxnetwork.org/",
        description: "Conflux Network enables the secure and interoperable flow of assets and data to create an internet of value for all.",
        logoURI: "https://bscscan.com/token/images/conflux_32.png"
      },
      "AMPL-BSC-mp": {
        name: "Ample BSC (BRG Meter Passport)",
        symbol: "AMPL-BSC-mp",
        address: "0xDB021b1B247fe2F1fa57e0A87C748Cc1E321F07F",
        chainId: 56,
        decimals: 9,
        website: "https://www.ampleforth.org/",
        description: "AMPL is a cryptocurrency and financial building-block. Much like Bitcoin, it is algorithmic and uncollateralized. However unlike Bitcoin, AMPL can be used to denominate stable contracts.",
        logoURI: ""
      },
      dBTC: {
        name: "Diamond-Peg BTC",
        symbol: "dBTC",
        address: "0x6b77F51d4C474EFB15b72B829e6a0806bbc33724",
        chainId: 56,
        decimals: 18,
        website: "https://diamondhand.fi/",
        description: "dBTC is a synthetic token pegged to BTC developed by Diamonhand.fi.",
        logoURI: "https://app.iron.finance/static/media/DBTC.2bb24d53.png"
      },
      dBNB: {
        name: "Diamond-Peg BNB",
        symbol: "dBNB",
        address: "0x4101fe75F547A65F6BB054A35F027c16562a45C3",
        chainId: 56,
        decimals: 18,
        website: "https://diamondhand.fi/",
        description: "dBNB is a synthetic token pegged to BNB developed by Diamonhand.fi.",
        logoURI: "https://app.iron.finance/static/media/DBNB.57de3f13.png"
      },
      dETH: {
        name: "Diamond-Peg ETH",
        symbol: "dETH",
        address: "0xf633DEb2452918FA5248070C1986BE7a3895F3fC",
        chainId: 56,
        decimals: 18,
        website: "https://diamondhand.fi/",
        description: "dETH is a synthetic token pegged to ETH developed by Diamonhand.fi.",
        logoURI: "https://app.iron.finance/static/media/DETH.4802e6eb.png"
      },
      dADA: {
        name: "Diamond-Peg ADA",
        symbol: "dADA",
        address: "0x68169d96a20dFe968B0fe714578969118c08484A",
        chainId: 56,
        decimals: 18,
        website: "https://diamondhand.fi/",
        description: "dADA is a synthetic token pegged to ADA developed by Diamonhand.fi.",
        logoURI: "https://app.iron.finance/static/media/DADA.d9b1a86c.png"
      },
      dDOT: {
        name: "Diamond-Peg DOT",
        symbol: "dDOT",
        address: "0x3E3434F57ADF4e07Dc2d75c6F109c20Ac96a1557",
        chainId: 56,
        decimals: 18,
        website: "https://diamondhand.fi/",
        description: "dDOT is a synthetic token pegged to DOT developed by Diamonhand.fi.",
        logoURI: ""
      },
      KROWN: {
        name: "Krown",
        symbol: "KRW",
        address: "0x1446f3CEdf4d86a9399E49f7937766E6De2A3AAB",
        chainId: 56,
        decimals: 18,
        website: "https://kingdefi.io/",
        description: "KingDeFi is a DeFi project combining two main areas: analytics and monitoring where they provide a market overview, liquidity pool search engine and portfolio tracking to users and farming as they are a yield optimizer project on BSC and Solana.",
        logoURI: "https://kingdefi.io/assets/images/KRW@2x.png"
      },
      CARROT: {
        name: "CARROT",
        symbol: "CARROT",
        address: "0xA5043373edC09f3f7d87Fe35CA933e0a7B59D005",
        chainId: 56,
        decimals: 18,
        logoURI: "https://mdex.co/token-icons/bsc/0xa5043373edc09f3f7d87fe35ca933e0a7b59d005.png",
        description: "Rabbit Finance is a cross-chain leveraged lending protocol, allowing users to multiply (like Rabbits \u{1F430}\u{1F430}\u{1F430}) their funds up to 9x, thereby maximizing interest and liquidity farming yields.",
        website: "https://rabbitfinance.io/"
      },
      PERA: {
        name: "PERA",
        symbol: "PERA",
        address: "0xb9D8592E16A9c1a3AE6021CDDb324EaC1Cbc70d6",
        chainId: 56,
        decimals: 18,
        logoURI: "https://app.pera.finance/logo-full.png",
        description: "Pera Finance is a DeFi platform where traders, liquidity providers and holders yield farm together through the DeFi's first decentralized trading competition.",
        website: "https://app.pera.finance/"
      },
      HERO: {
        name: "FarmHero HERO",
        symbol: "HERO",
        address: "0x9B26e16377ad29A6CCC01770bcfB56DE3A36d8b2",
        chainId: 56,
        decimals: 18,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/10620.png",
        description: "FarmHero.io is a novel protocol that mixes NFT, gaming and DEFI concepts.",
        website: "https://bsc.farmhero.io/"
      },
      NFT: {
        name: "APENFT",
        symbol: "NFT",
        address: "0x1fC9004eC7E5722891f5f38baE7678efCB11d34D",
        chainId: 56,
        decimals: 6,
        logoURI: "https://www.apenft.org/img/logo.svg",
        description: "APENFT GALLERY ART FOR EVERYONE",
        website: "https://www.apenft.org/"
      },
      MCB: {
        name: "MCDEX Token",
        symbol: "MCB",
        address: "0x5fE80d2CD054645b9419657d3d10d26391780A7B",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x5fE80d2CD054645b9419657d3d10d26391780A7B.svg",
        website: "https://mcdex.io/homepage/",
        description: "MCDEX is the first fully-permissionless DEX for trading perpetual contracts, powered by MCDEXs revolutionary AMM technology"
      },
      RPG: {
        name: "Rangers Protocol Gas",
        symbol: "RPG",
        address: "0xc2098a8938119A52B1F7661893c0153A6CB116d5",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xc2098a8938119A52B1F7661893c0153A6CB116d5.svg",
        website: "https://rangersprotocol.com/",
        description: "Rangers Protocol can realize a high-performance blockchain group with cross-chain contract interoperability among the EVM systems of multiple blockchains."
      },
      LAZIO: {
        name: "FC Lazio Fan Token",
        symbol: "LAZIO",
        address: "0x77d547256A2cD95F32F67aE0313E450Ac200648d",
        chainId: 56,
        decimals: 8,
        logoURI: "https://tokens.pancakeswap.finance/images/0x77d547256A2cD95F32F67aE0313E450Ac200648d.svg",
        website: "https://www.sslazio.it/en",
        description: "The Lazio Fan Token is a BEP-20 utility token designed to revolutionize the fan experience for all S.S. Lazio supporters."
      },
      DKT: {
        name: "Duelist King Token",
        symbol: "DKT",
        address: "0x7Ceb519718A80Dd78a8545AD8e7f401dE4f2faA7",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x7Ceb519718A80Dd78a8545AD8e7f401dE4f2faA7.svg",
        website: "https://duelistking.com/",
        description: "Powered by in-house Decentralized Autonomous Organization (DAO), Oracle and Random Number Generator on DKDAO platform, Duelist King offers dual values for investors from token utilities and card sales (projected at roughly 40 million USD)."
      },
      DAR: {
        name: "Mines of Dalarnia Token",
        symbol: "DAR",
        address: "0x23CE9e926048273eF83be0A3A8Ba9Cb6D45cd978",
        chainId: 56,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x23CE9e926048273eF83be0A3A8Ba9Cb6D45cd978.svg",
        website: "https://www.minesofdalarnia.com/",
        description: "Mines of Dalarnia is a free action game with a unique blockchain real-estate market."
      },
      XWG: {
        name: "XWG",
        symbol: "XWG",
        address: "0x6b23C89196DeB721e6Fd9726E6C76E4810a464bc",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x6b23C89196DeB721e6Fd9726E6C76E4810a464bc.svg",
        website: "https://xwg.games/#/",
        description: "A true decentralized ownership of a gaming world via DAO.  Games that hold XWG tokens get to decide the platform governance policy or the next in-game development, including reward mechanisms and tokenomic systems."
      },
      ETERNAL: {
        name: "CryptoMines Eternal",
        symbol: "ETERNAL",
        address: "0xD44FD09d74cd13838F137B590497595d6b3FEeA4",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xD44FD09d74cd13838F137B590497595d6b3FEeA4.svg",
        website: "https://cryptomines.app/",
        description: "CryptoMines is a SciFi play-to-earn NFT game designed to provide the users with a fun experience by collecting and Spaceships to travel through the universe searching for , this mineral allows them to live another day and make some profits along the way."
      },
      PORTO: {
        name: "FC Porto Fan Token",
        symbol: "PORTO",
        address: "0x49f2145d6366099e13B10FbF80646C0F377eE7f6",
        chainId: 56,
        decimals: 8,
        logoURI: "https://tokens.pancakeswap.finance/images/0x49f2145d6366099e13B10FbF80646C0F377eE7f6.svg",
        website: "https://www.fcporto.pt/",
        description: "FC Porto Fan Token"
      },
      KART: {
        name: "Dragon Kart",
        symbol: "KART",
        address: "0x8BDd8DBcBDf0C066cA5f3286d33673aA7A553C10",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x8BDd8DBcBDf0C066cA5f3286d33673aA7A553C10.svg",
        website: "https://dragonkart.com/",
        description: "In 2088, the planet Kart is invaded by forces from outer space who are called Kaman. They sealed and reorganized the entire planet Kart in order to dominate and plunder their wealth and divide it into many different lands. Each land is run by a Boss. Kaman tries to destroy the entire planet, plunder the wealth to bring back to his planet and exhaust the resources of Kart."
      },
      bQI: {
        name: "BENQI",
        symbol: "QI",
        address: "0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5.svg",
        website: "https://app.benqi.fi/overview",
        description: "BenQI is lending protocol on the Avalanche blockchain"
      },
      Zoo: {
        name: "ZooToken",
        symbol: "Zoo",
        address: "0x1D229B958D5DDFca92146585a8711aECbE56F095",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x1D229B958D5DDFca92146585a8711aECbE56F095.svg",
        website: "https://zoogame.app/#/farm",
        description: "Swap, Stake, Battle, Mine - ZOO Crypto World is revolutionising the GameFi space by gamifying DeFi. Battle against your foes, stake in pools or have action-packed fights with mega bosses! ZOO Crypto World is based on the decentralized chain, Binance Smart Chain, which guarantees superior speed and much lower network transaction cost for all ZOO warriors."
      },
      QUIDD: {
        name: "QUIDD",
        symbol: "QUIDD",
        address: "0x7961Ade0a767c0E5B67Dd1a1F78ba44F727642Ed",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x7961Ade0a767c0E5B67Dd1a1F78ba44F727642Ed.svg",
        website: "https://www.quiddtoken.com/",
        description: "Collect officially-licensed digital collectibles from 325 of the worlds most beloved brands."
      },
      SANTOS: {
        name: "FC Santos Fan Token",
        symbol: "SANTOS",
        address: "0xA64455a4553C9034236734FadDAddbb64aCE4Cc7",
        chainId: 56,
        decimals: 8,
        logoURI: "https://tokens.pancakeswap.finance/images/0xA64455a4553C9034236734FadDAddbb64aCE4Cc7.svg",
        website: "https://www.santosfc.com.br/en/",
        description: "FC Santos Fan Token"
      },
      NABOX: {
        name: "Nabox Token",
        symbol: "NABOX",
        address: "0x755f34709E369D37C6Fa52808aE84A32007d1155",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x755f34709E369D37C6Fa52808aE84A32007d1155.svg",
        website: "https://nabox.io/",
        description: "Cross-Chain DeFi Wallet with Decentralized Identifier for Web 3.0"
      },
      MILK: {
        name: "MILK Token",
        symbol: "MILK",
        address: "0xBf37f781473f3b50E82C668352984865eac9853f",
        chainId: 56,
        decimals: 18,
        logoURI: "https://bscscan.com/token/images/thecryptoyou-milk_32.png",
        website: "https://thecryptoyou.io/",
        description: "The Crypto You is the first Baby Metaverse blockchain game on Binance Smart Chain (BSC). Players can summon characters, complete daily mining missions, conquer the Dark Force, loot rare items to play and earn."
      },
      IDIA: {
        name: "Impossible Decentralized Incubator Access Token",
        symbol: "IDIA",
        address: "0x0b15Ddf19D47E6a86A56148fb4aFFFc6929BcB89",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x0b15ddf19d47e6a86a56148fb4afffc6929bcb89.svg",
        website: "https://impossible.finance/",
        description: "Impossible Finance is a multi-chain incubator, launchpad, and swap platform which offers a robust product-first ecosystem that supports top-tier blockchain projects to targeted user audiences."
      },
      XCV: {
        name: "XCarnival Token",
        symbol: "XCV",
        address: "0x4be63a9b26EE89b9a3a13fd0aA1D0b2427C135f8",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4be63a9b26EE89b9a3a13fd0aA1D0b2427C135f8.svg",
        website: "https://impossible.finance/",
        description: "The Metaverse Assets Liquidity Aggregator for Everyone"
      },
      THG: {
        name: "Thetan Gem",
        symbol: "THG",
        address: "0x9fD87aEfe02441B123c3c32466cD9dB4c578618f",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x9fD87aEfe02441B123c3c32466cD9dB4c578618f.svg",
        website: "https://thetanarena.com/",
        description: "Thetan Arena is an esport game based on blockchain technology. You can gather your friends, form a team, battle with others and earn money with just your skills."
      },
      DPT: {
        name: "Diviner Protocol",
        symbol: "DPT",
        address: "0xE69cAef10A488D7AF31Da46c89154d025546e990",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xE69cAef10A488D7AF31Da46c89154d025546e990.svg",
        website: "https://www.diviner.finance/",
        description: "Diviner Protocol aims to build a Metaverse \u201CDiviner Harbour City\u201D to offer users a gamified & diversified prediction marketplace."
      },
      CCAR: {
        name: "CryptoCars",
        symbol: "CCAR",
        address: "0x50332bdca94673F33401776365b66CC4e81aC81d",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x50332bdca94673F33401776365b66CC4e81aC81d.svg",
        website: "https://cryptocars.me/",
        description: "CryptoCars is inspired by: Movie Cars - A 2006 American computer-animated sports comedy film produced by Pixar Animation Studios and released by Walt Disney Pictures. The NFT Blockchain Technology helps to prove your ownership of digital assets. We know that many of us, especially man players, love role-playing games and intensive racing matches with other players. We do too, this is why we create the CryptoCars Blockchain-based game to make your cars more unique and special from others. Going along with that is the diverse racing mode for you to enjoy every moment with CryptoCars from Virtual Race, Players vs. Computers, Players vs. Players, Tournaments"
      },
      HIGH: {
        name: "Highstreet Token",
        symbol: "HIGH",
        address: "0x5f4Bde007Dc06b867f86EBFE4802e34A1fFEEd63",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x5f4Bde007Dc06b867f86EBFE4802e34A1fFEEd63.svg",
        website: "https://www.highstreet.market/",
        description: "Highstreet is created from LumiereVR, a computer vision based VR retail company established in 2015. The team has built a commerce based metaverse over the years by piecing together components built by various household names from brands like Hershey\u2019s Chocolate to Victoria Secrets, bigger groups like L\u2019Oreal to Madison Square Garden as well."
      },
      WOOP: {
        name: "Woonkly Power",
        symbol: "WOOP",
        address: "0x8b303d5BbfBbf46F1a4d9741E491e06986894e18",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x8b303d5BbfBbf46F1a4d9741E491e06986894e18.svg",
        website: "https://mainnet.woonkly.com/",
        description: "A decentralized Social Network based on NFTs and IPFS. Create NFTs in Seconds, start gaining followers and capitalize on your inspiration and best moments."
      },
      GM: {
        name: "GoldMiner",
        symbol: "GM",
        address: "0xe2604C9561D490624AA35e156e65e590eB749519",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xe2604C9561D490624AA35e156e65e590eB749519.svg",
        website: "https://goldminer.games/#/",
        description: "GoldMiner is a Free-to-Play Third-person shooter NFT game where everyone can start playing without the need to pay. GoldMiner also employs the Play-to-Earn model to reward players with tokens and equipment through dynamic gameplay and participation in PvP tournaments. With this seamless combination of the DeFi and P2E models, GoldMiner gives players the opportunity to play and earn rewards at the same time. To create a friendly environment for players who are unfamiliar with Cryptocurrency market and NFTs, a mechanism called Crypto Play against is incorporated into the gameplay to give incentives to such players to do their own research and learn about the market"
      },
      INSUR: {
        name: "Bsc-Peg INSUR Token",
        symbol: "INSUR",
        address: "0x3192CCDdf1CDcE4Ff055EbC80f3F0231b86A7E30",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x3192CCDdf1CDcE4Ff055EbC80f3F0231b86A7E30.svg",
        website: "https://app.insurace.io/Insurance/Cart?id=110&chain=BSC&referrer=95244279533280151623141934507761661103282646845",
        description: "InsurAce.io is a leading decentralized multi-chain insurance protocol that provides reliable, robust and secure insurance services to DeFi users, allowing them to protect their investment funds against various risks. "
      },
      LAC: {
        name: "La Cucina",
        symbol: "LAC",
        address: "0xe6f079E74000a0AFc517c1EFf9624d866d163B75",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xe6f079E74000a0AFc517c1EFf9624d866d163B75.svg",
        website: "https://www.lacucina.io/",
        description: "LaCucina will offer you new and exciting ways to succeed in DeFi with NFTs"
      },
      SAND: {
        name: "The Sandbox",
        symbol: "SAND",
        address: "0x67b725d7e342d7B611fa85e859Df9697D9378B2e",
        chainId: 56,
        decimals: 18,
        logoURI: "https://biswap.org/images/tokens/sand.svg",
        website: "https://www.sandbox.game/",
        description: "SAND is the utility token used throughout The Sandbox ecosystem as the basis for transactions and interactions."
      },
      OLE: {
        name: "OpenLeverage",
        symbol: "OLE",
        address: "0xa865197A84E780957422237B5D152772654341F3",
        chainId: 56,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xa865197A84E780957422237B5D152772654341F3.png",
        website: "https://openleverage.finance/",
        description: "OpenLeverage is a permissionless margin trading protocol that enables traders or other applications to long or short any trading pair on DEXs efficiently and securely."
      },
      BLID: {
        name: "Bolide",
        symbol: "BLID",
        address: "0x766AFcf83Fd5eaf884B3d529b432CA27A6d84617",
        chainId: 56,
        decimals: 18,
        logoURI: "https://invest.bolide.fi/img/token_logo_255x255.png",
        website: "https://bolide.fi/",
        description: "Bolide is a next-generation decentralized yield aggregator that optimizes the deployment of digital assets across multiple DeFi investment platforms to save investors time, money and earn them the highest possible yields."
      },
      HEC: {
        name: "Hector Network",
        symbol: "HEC",
        address: "0x638EEBe886B0e9e7C6929E69490064a6C94d204d",
        chainId: 56,
        decimals: 9,
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/HEC.svg",
        website: "https://hector.network/",
        description: "Hector Network is an expansive decentralized ecosystem run by a utility token, HEC, and complemented by the TOR stablecoin. The company is committed to developing the future of web3 by pioneering decentralized offerings ranging from Tokenomics to Defi Gaming. Hector Network believes that crosschain expansion, lowering the barrier to entry and providing trusted sources for information are key in mass adoption of this technology."
      },
      TOR: {
        name: "TOR Stablecoin",
        symbol: "TOR",
        address: "0x1d6Cbdc6b29C6afBae65444a1f65bA9252b8CA83",
        chainId: 56,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ApeSwapFinance/apeswap-token-lists/main/assets/TOR.svg",
        website: "https://tor.hector.network/",
        description: "TOR is a fully collateralized stablecoin which acts as a foundational pillar within the Hector Network Ecosystem. Its unique smart contracts made it the first of its kind, creating positive price action for the HEC token each time a TOR coin is minted and empowering Hector Network to become deflationary."
      },
      "USD+": {
        name: "USD+ Stablecoin",
        symbol: "USD+",
        address: "0xe80772Eaf6e2E18B651F160Bc9158b2A5caFCA65",
        chainId: 56,
        decimals: 6,
        website: "https://overnight.fi/",
        description: "USD+ is USDC that pays you yield daily via rebase. It is 100% collateralized with assets immediately convertible into USDC. Yield is generated via strategies such as lending and stable-to-stable pools. Initial strategies include Aave, Rubicon, and Pika.",
        logoURI: "",
        documentation: "https://docs.overnight.fi/"
      },
      USDD: {
        name: "Decentralized USD",
        symbol: "USDD",
        address: "0xd17479997F34dd9156Deef8F95A52D81D265be9c",
        chainId: 56,
        decimals: 18,
        logoURI: "",
        website: "https://usdd.io/",
        description: "The USDD protocol aims to provide the blockchain industry with the most stable, decentralized, tamper-proof, and freeze-free stablecoin system, a perpetual system independent from any centralized entity.",
        documentation: "https://usdd.io/docs/"
      },
      frxETH: {
        name: "Frax Ether",
        symbol: "frxETH",
        address: "0x64048A7eEcF3a2F1BA9e144aAc3D7dB6e58F555e",
        chainId: 56,
        decimals: 18,
        website: "https://app.frax.finance/frxeth/mint",
        description: "frxETH acts as a stablecoin loosely pegged to ETH, so that 1 frxETH always represents 1 ETH and the amount of frxETH in circulation matches the amount of ETH in the Frax ETH system. When ETH is sent to the frxETHMinter, an equivalent amount of frxETH is minted. Holding frxETH on its own is not eligible for staking yield and should be thought of as analogous as holding ETH.",
        logoURI: "",
        documentation: "https://docs.frax.finance/frax-ether/frxeth-and-sfrxeth"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/bsc/index.js
var require_bsc = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/bsc/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bsc = void 0;
    var ape_1 = require_ape();
    var babyswap_1 = require_babyswap();
    var chainlink_1 = require_chainlink2();
    var bakery_1 = require_bakery();
    var beefyfinance_1 = require_beefyfinance2();
    var pancake_1 = require_pancake();
    var ironfinance_1 = require_ironfinance();
    var farmhero_1 = require_farmhero2();
    var ellipsis_1 = require_ellipsis();
    var elk_1 = require_elk();
    var wault_1 = require_wault2();
    var kebab_1 = require_kebab();
    var jet_1 = require_jet();
    var mdex_1 = require_mdex();
    var biswap_1 = require_biswap();
    var emp_1 = require_emp();
    var cone_1 = require_cone();
    var bolide_1 = require_bolide();
    var swapfish_1 = require_swapfish();
    var thena_1 = require_thena();
    var tokens_1 = require_tokens2();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _bsc = {
      platforms: {
        babyswap: babyswap_1.babyswap,
        ape: ape_1.ape,
        chainlink: chainlink_1.chainlink,
        bakery: bakery_1.bakery,
        beefyfinance: beefyfinance_1.beefyfinance,
        pancake: pancake_1.pancake,
        ironfinance: ironfinance_1.ironfinance,
        farmhero: farmhero_1.farmhero,
        ellipsis: ellipsis_1.ellipsis,
        elk: elk_1.elk,
        wault: wault_1.wault,
        kebab: kebab_1.kebab,
        jet: jet_1.jet,
        mdex: mdex_1.mdex,
        biswap: biswap_1.biswap,
        emp: emp_1.emp,
        bolide: bolide_1.bolide,
        cone: cone_1.cone,
        swapfish: swapfish_1.swapfish,
        thena: thena_1.thena
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.bsc = _bsc;
  }
});

// node_modules/blockchain-addressbook/build/address-book/avax/platforms/beefyfinance.js
var require_beefyfinance3 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/avax/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0x3A0b8B7a3ea8D1670e000b1Da5bD41373bF8da42";
    var treasuryMultisig = "0x26dE4EBffBE8d3d632A292c972E3594eFc2eCeEd";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0x37DC61A76113E7840d4A8F1c1B799cC9ac5Aa854",
      vaultOwner: "0x690216f462615b749bEEB5AA3f1d89a2BEc45Ecf",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0x86d38c6b6313c5A3021D68D1F57CF5e69197592A",
      treasury: "0xA3e3Af161943CfB3941B631676134bb048739727",
      beefyFeeRecipient: "0x48beD04cBC52B5676C04fa94be5786Cdc9f266f5",
      multicall: "0x6FfF95AC47b586bDDEea244b3c2fe9c4B07b9F76",
      bifiMaxiStrategy: "0xca077eEC87e2621F5B09AFE47C42BAF88c6Af18c",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      beefyFeeConfig: "0xBb0c0A821D1F9bC7405f5370DE5f9D2F11975073",
      vaultFactory: "0xee78529E158E82AC54c89608A9664F5597050526",
      wrapperFactory: "0x1Fa046d28FF749b9D7CF7E9a41BEecd1260F11eD"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/avax/platforms/lydia.js
var require_lydia = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/avax/platforms/lydia.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lydia = void 0;
    exports.lydia = {
      router: "0xFb26525B14048B7BB1F3794F6129176195Db7766"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/avax/platforms/pangolin.js
var require_pangolin = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/avax/platforms/pangolin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pangolin = void 0;
    exports.pangolin = {
      router: "0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106",
      minichef: "0x1f806f7C8dED893fd3caE279191ad7Aa3798E928"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/avax/platforms/joe.js
var require_joe = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/avax/platforms/joe.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.joe = void 0;
    exports.joe = {
      router: "0x60aE616a2155Ee3d9A68541Ba4544862310933d4",
      chef: "0xd6a4F121CA35509aF06A0Be99093d08462f53052",
      masterchefV3: "0x188bED1968b795d5c9022F6a0bb5931Ac4c18F00",
      boostedMasterChef: "0x4483f0b6e2F5486D06958C20f8C39A7aBe87bf8F",
      boostStaker: "0x1F2A8034f444dc55F963fb5925A9b6eb744EeE2c",
      avaxBifiLp: "0x361221991B3B6282fF3a62Bc874d018bfAF1f8C8"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/avax/platforms/synapse.js
var require_synapse = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/avax/platforms/synapse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.synapse = void 0;
    exports.synapse = {
      chef: "0x3a01521F8E7F012eB37eAAf1cb9490a5d9e18249"
      // MiniChefV2
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/avax/platforms/mai.js
var require_mai2 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/avax/platforms/mai.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mai = void 0;
    exports.mai = {
      chef: "0x7754b08aB3b73021736985e90163aCC68484F54A"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/avax/tokens/tokens.js
var require_tokens3 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/avax/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var AVAX = {
      chainId: 43114,
      address: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
      decimals: 18,
      name: "Wrapped AVAX",
      symbol: "WAVAX",
      website: "https://www.avalabs.org/",
      description: "Avalanche is the fastest smart contracts platform in the blockchain industry, as measured by time-to-finality, and has the most validators securing its activity of any proof-of-stake protocol.",
      logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7/logo.png"
    };
    var _tokens = {
      "USD+": {
        name: "USD+ Stablecoin",
        symbol: "USD+",
        address: "0xe80772Eaf6e2E18B651F160Bc9158b2A5caFCA65",
        chainId: 43114,
        decimals: 6,
        website: "https://overnight.fi/",
        description: "USD+ is USDC that pays you yield daily via rebase.  It is 100% collateralized with assets immediately convertible into USDC.  Yield is generated via strategies such as lending and stable-to-stable pools. Initial strategies include Aave, Rubicon, and Pika.",
        logoURI: "",
        documentation: "https://docs.overnight.fi/"
      },
      CAI: {
        name: "Colony Avalanche Index CAI",
        symbol: "CAI",
        address: "0x48f88A3fE843ccb0b5003e70B4192c1d7448bEf0",
        chainId: 43114,
        decimals: 18,
        logoURI: "",
        website: "https://www.colonylab.io/cai.html",
        description: "Colony Avalanche Index - The easist way to invest in Avalanche. CAI is an index token investing in Avalanche's AVAX token and other ecosystem projects including BENQI and Trader Joe. The index excludes any rebasing or deflationary tokens."
      },
      POPS: {
        name: "Swapsicle",
        symbol: "POPS",
        address: "0x240248628B7B6850352764C5dFa50D1592A033A8",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x152b9d0FdC40C096757F570A51E494bd4b943E50.svg",
        website: "https://swapsicle.io/",
        description: "Swapsicle is a decentralised exchange and its own utility token POPS. "
      },
      BTCb: {
        name: "Bitcoin",
        symbol: "BTCb",
        address: "0x152b9d0FdC40C096757F570A51E494bd4b943E50",
        chainId: 43114,
        decimals: 8,
        logoURI: "https://tokens.pancakeswap.finance/images/0x152b9d0FdC40C096757F570A51E494bd4b943E50.svg",
        website: "https://bridge.avax.network/",
        description: "official AVAX BRIDGE bridged BTC"
      },
      BPT: {
        name: "Bold Point BPT",
        symbol: "BPT",
        address: "0x1111111111182587795eF1098ac7da81a108C97a",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x1111111111182587795eF1098ac7da81a108C97a/logo.png",
        website: "https://bp.yay.games/",
        description: "Bold Point is a NFT-based RPG game where players slash enemies, play against other players and get rewards from their crafting skills in the real world."
      },
      DBY: {
        name: "Metaderby DBY",
        symbol: "DBY",
        address: "0x5085434227aB73151fAd2DE546210Cbc8663dF96",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x5085434227aB73151fAd2DE546210Cbc8663dF96/logo.png",
        website: "https://metaderby.com/",
        description: "MetaDerby is the first free-to-play-and-earn horse racing metaverse where anyone can earn tokens through skilled gameplay and contribute to building the MetaDerby universe."
      },
      beJOE: {
        name: "Beefy JOE",
        symbol: "beJOE",
        address: "0x1F2A8034f444dc55F963fb5925A9b6eb744EeE2c",
        chainId: 43114,
        decimals: 18,
        logoURI: "",
        website: "https://beefy.com",
        description: "beJOE is a Beefy-wrapped version of veJOE. Holding beJOE will be a great way to earn a bunch of JOE. Beefy will max out emissions on boosted farms, 5% of emissions will then be distributed to beJOE stakers on Beefy."
      },
      YETI: {
        name: "Yeti YETI",
        symbol: "YETI",
        address: "0x77777777777d4554c39223C354A05825b2E8Faa3",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://1786218689-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F4OftjbgGWmJOiwFRkFKr%2Fuploads%2FQWL5FOA2bShRZVnkrVL9%2Fyetitoken.png?alt=media&token=7e2a9b4a-4682-4438-ba58-9196e6cfcdc4",
        website: "https://yeti.finance/",
        description: "The best borrowing experience on Avalanche. Borrow against your entire Avalanche portfolio interest-free."
      },
      YUSD: {
        name: "Yeti YUSD",
        symbol: "YUSD",
        address: "0x111111111111ed1D73f860F57b2798b683f2d325",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://1786218689-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F4OftjbgGWmJOiwFRkFKr%2Fuploads%2FxBkrBV3R1T4fxCWIY2qJ%2Fyusdtoken.png?alt=media&token=a5acaa5c-a32b-480e-930b-5bd3def36adc",
        website: "https://yeti.finance/",
        description: "The best borrowing experience on Avalanche. Borrow against your entire Avalanche portfolio interest-free."
      },
      axlATOM: {
        name: "Axelar Wrapped ATOM",
        symbol: "ATOM",
        address: "0x80D18b1c9Ab0c9B5D6A6d5173575417457d00a12",
        chainId: 43114,
        decimals: 6,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/3794.png",
        website: "https://cosmos.network/",
        description: "The Internet of Blockchains. Cosmos is an ever-expanding ecosystem of interconnected apps and services, built for a decentralized future."
      },
      LOST: {
        name: "Lost Worlds LOST",
        symbol: "LOST",
        address: "0x449674B82F05d498E126Dd6615a1057A9c088f2C",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x449674B82F05d498E126Dd6615a1057A9c088f2C/logo.png",
        website: "https://lostworlds.io/",
        description: "Lost Worlds is a 1st of its kind NFT platform experience where NFTs are geographically bound to real world locations for collectors to discover and mint."
      },
      AVAXL: {
        name: "Top Shelf AVAX L-Token",
        symbol: "AVAXL",
        address: "0xe0237F9E2aaABd7Ffb8630BE5203D573a045Bca7",
        chainId: 43114,
        decimals: 18,
        website: "https://topshelf.finance/",
        description: "Mint fully decentralized sythentic assets on Binance Smart Chain, Fantom & Avalanche.",
        logoURI: ""
      },
      MONEY: {
        name: "Moremoney USD",
        symbol: "MONEY",
        address: "0x0f577433Bf59560Ef2a79c124E9Ff99fCa258948",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/24237/large/money.png",
        website: "https://moremoney.finance/",
        description: "Moremoney is a protocol for borrowing stablecoin while earning interest on liquidity pool tokens and other collateral assets."
      },
      USTw: {
        name: "TerraUSD (Wormhole)",
        symbol: "USTw",
        address: "0xb599c3590F42f8F995ECfa0f85D2980B76862fc1",
        chainId: 43114,
        decimals: 6,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x260Bbf5698121EB85e7a74f2E45E16Ce762EbE11/logo.png",
        website: "https://www.terra.money/",
        description: "Terra stablecoins offer instant settlements, low fees and seamless cross-border exchange - loved by millions of users and merchants."
      },
      saUSDC: {
        name: "Stargate USD Coin LP",
        address: "0x1205f31718499dBf1fCa446663B532Ef87481fe1",
        symbol: "saUSDC",
        decimals: 6,
        website: "https://www.circle.com/usdc",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        chainId: 43114,
        logoURI: "https://ftmscan.com/token/images/USDC_32.png",
        documentation: "https://developers.circle.com/docs"
      },
      saUSDT: {
        name: "Stargate Tether USD LP",
        symbol: "saUSDT",
        address: "0x29e38769f23701A2e4A8Ef0492e19dA4604Be62c",
        chainId: 43114,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem."
      },
      STG: {
        name: "Stargate",
        symbol: "STG",
        address: "0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590/logo.png",
        website: "https://stargate.finance/",
        description: "Stargate is a community-driven organization building the first fully composable native asset bridge, and the first dApp built on LayerZero."
      },
      FLY: {
        name: "Hoppers Game FLY",
        symbol: "FLY",
        address: "0x78Ea3fef1c1f07348199Bf44f45b803b9B0Dbe28",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x78Ea3fef1c1f07348199Bf44f45b803b9B0Dbe28/logo.png",
        website: "https://hoppersgame.io/",
        description: "Hoppers Game is an idle game where players stake their Hopper NFTs in different adventures to earn $FLY."
      },
      APE: {
        name: "ApeCoin APE",
        symbol: "APE",
        address: "0x0802d66f029c46E042b74d543fC43B6705ccb4ba",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x0802d66f029c46E042b74d543fC43B6705ccb4ba/logo.png",
        website: "https://apecoin.com/",
        description: "ApeCoin is the APE Ecosystems governance token, allowing token holders to participate in ApeCoin DAO and giving its participants a shared and open currency that can be used without centralized intermediaries."
      },
      DEG: {
        name: "DegisToken",
        symbol: "DEG",
        address: "0x9f285507Ea5B4F33822CA7aBb5EC8953ce37A645",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/18840.png",
        website: "https://degis.io/",
        description: "Blockchain is miserable, where risk and reward are widely extended. DEGIS is the shield to protect you. With innovative protection products, DEGIS is attractive to both on-chain and off-chain buyers."
      },
      EGG: {
        name: "Chikn Egg",
        symbol: "EGG",
        address: "0x7761E2338B35bCEB6BdA6ce477EF012bde7aE611",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/21811/large/EggToken_200_Transparent.png",
        website: "https://chikn.farm/",
        description: "Chikn is an ecosystem based around NFTs that lay EGGs."
      },
      FEED: {
        name: "Chikn Feed",
        symbol: "FEED",
        address: "0xab592d197ACc575D16C3346f4EB70C703F308D1E",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/22417/large/bJIvBemg_400x400.jpg",
        website: "https://chikn.farm/",
        description: "Chikn is an ecosystem based around NFTs that lay EGGs."
      },
      ECD: {
        name: "Echidna ECD",
        symbol: "ECD",
        address: "0xeb8343D5284CaEc921F035207ca94DB6BAaaCBcd",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0xeb8343d5284caec921f035207ca94db6baaacbcd/logo.png",
        website: "https://www.echidna.finance/",
        description: "Echidna Finance is the ultimate yield boosting protocol for Platypus Finance, Avalanches native stableswap."
      },
      VTX: {
        name: "Vector",
        symbol: "VTX",
        address: "0x5817D4F0b62A59b17f75207DA1848C2cE75e7AF4",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x5817D4F0b62A59b17f75207DA1848C2cE75e7AF4/logo.png",
        website: "https://vectorfinance.io/",
        description: "Vector allows users to deposit stablecoins and earn boosted yield from the Platypus platform, without having to stake their PTP and worry about accruing vePTP."
      },
      PAE: {
        name: "Ripae",
        symbol: "PAE",
        address: "0x9466Ab927611725B9AF76b9F31B2F879Ff14233d",
        chainId: 43114,
        decimals: 18,
        website: "https://ripae.finance/",
        description: "Ripae Finances full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: "https://avax.ripae.finance/static/media/ripae_pftm.3832b2f1.svg"
      },
      pAVAX: {
        name: "pAVAX",
        symbol: "pAVAX",
        address: "0x6ca558bd3eaB53DA1B25aB97916dd14bf6CFEe4E",
        chainId: 43114,
        decimals: 18,
        website: "https://ripae.finance/",
        description: "Ripae Finances full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: "https://avax.ripae.finance/static/media/ripae_pae.e914457b.svg"
      },
      FIEF: {
        name: "Fief FIEF",
        symbol: "FIEF",
        address: "0x65Def5029A0e7591e46B38742bFEdd1Fb7b24436",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0xeA068Fba19CE95f12d252aD8Cb2939225C4Ea02D/logo.png",
        website: "https://fief.finance/",
        description: "Fief is the economic guild of the metaverse with the primary objectives to acquire key assets from across the metaverse and drive the value of those assets through the combination of a highly-gamified guild faction system and decentralized protocols."
      },
      BRIBE: {
        name: "Police & Thief Game BRIBE",
        symbol: "BRIBE",
        address: "0xCe2fbed816E320258161CeD52c2d0CEBcdFd8136",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/pangolindex/tokens/main/assets/0xCe2fbed816E320258161CeD52c2d0CEBcdFd8136/logo.png",
        website: "https://policeandthief.game/",
        description: "BRIBE represents the latest token rollout in the Tri-Token Tokenomics of the police & thief game."
      },
      TUS: {
        name: "Treasure Under Sea TUS",
        symbol: "TUS",
        address: "0xf693248F96Fe03422FEa95aC0aFbBBc4a8FdD172",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/pangolindex/tokens/main/assets/0xf693248F96Fe03422FEa95aC0aFbBBc4a8FdD172/logo.png",
        website: "https://crabada.com",
        description: "TUS is the in-game currency earned via playing the game in the form of Mining, Looting and Lending Crabada via the Tavern."
      },
      ACRE: {
        name: "Arable Protocol ACRE",
        symbol: "ACRE",
        address: "0x00EE200Df31b869a321B10400Da10b561F3ee60d",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/pangolindex/tokens/main/assets/0x00EE200Df31b869a321B10400Da10b561F3ee60d/logo.png",
        website: "https://www.arablefi.com/",
        description: "Arable is a synthetic yield farming protocol that is dedicated to helping yield farmers access multiple blockchains (such as Ethereum, Avalanche, Solana, or Polygon) assets and yields on a single chain."
      },
      FIRE: {
        name: "The Phoenix FIRE",
        symbol: "FIRE",
        address: "0xfcc6CE74f4cd7eDEF0C5429bB99d38A3608043a5",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/pangolindex/tokens/main/assets/0xfcc6CE74f4cd7eDEF0C5429bB99d38A3608043a5/logo.png",
        website: "https://thephoenix.finance/",
        description: "Phoenix Community Capital is a community investment project focused on using a shared asset pool to perform on-chain and off-chain investments into yield bearing instruments."
      },
      sAVAX: {
        name: "Staked Avax",
        symbol: "sAVAX",
        address: "0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE/logo.png",
        website: "https://benqi.fi/",
        description: "BENQI Liquid Staking is a protocol enabling users to stake AVAX to receive sAVAX, an interest bearing version of AVAX"
      },
      LUNA: {
        name: "Axelar Wrapped LUNA",
        symbol: "LUNA",
        address: "0x120AD3e5A7c796349e591F1570D9f7980F4eA9cb",
        chainId: 43114,
        decimals: 6,
        logoURI: "https://raw.githubusercontent.com/pangolindex/tokens/main/assets/0x120AD3e5A7c796349e591F1570D9f7980F4eA9cb/logo.png",
        website: "https://www.terra.money/",
        description: "The Terra protocols native staking token that absorbs the price volatility of Terra. Luna is used for governance and in mining. Users stake Luna to validators who record and verify transactions on the blockchain in exchange for rewards from transaction fees. The more Terra is used, the more Luna is worth."
      },
      DOMI: {
        name: "DOMI Online DOMI",
        symbol: "DOMI",
        address: "0xFc6Da929c031162841370af240dEc19099861d3B",
        chainId: 43114,
        decimals: 6,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0xFc6Da929c031162841370af240dEc19099861d3B/logo.png",
        website: "https://domionline.io/",
        description: "Domi Online is a play to earn 3D Blockchain MMORPG underpinned by NFTs."
      },
      LOOT: {
        name: "Police and Thief Game LOOT",
        symbol: "LOOT",
        address: "0x7f041ce89A2079873693207653b24C15B5e6A293",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/pangolindex/tokens/main/assets/0x7f041ce89A2079873693207653b24C15B5e6A293/logo.png",
        website: "https://policeandthief.game/",
        description: "Police and Thief Game is a NFT P2E game on Avalanche, a Wolf Game derivative. The game incorporates probability based derivatives and decision making possibilities to allow players to make various decisions to come out on top."
      },
      WINE: {
        name: "WINE",
        symbol: "WINE",
        address: "0xC55036B5348CfB45a932481744645985010d3A44",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/22739/small/gshare.png",
        website: "https://grapefinance.app/",
        description: "GRAPE is an algorithmic stable coin designed to maintain a 1:1 peg to MIM."
      },
      GRAPE: {
        name: "GRAPE",
        symbol: "GRAPE",
        address: "0x5541D83EFaD1f281571B343977648B75d95cdAC2",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/22718/small/grape.png",
        website: "https://grapefinance.app/",
        description: "GRAPE is an algorithmic stable coin designed to maintain a 1:1 peg to MIM."
      },
      DCAU: {
        name: "Dragon Crypto Aurum DCAU",
        symbol: "DCAU",
        address: "0x100Cc3a819Dd3e8573fD2E46D1E66ee866068f30",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x100Cc3a819Dd3e8573fD2E46D1E66ee866068f30/logo.png",
        website: "https://aurum.dragoncrypto.io/",
        description: "Dragon Crypto Gaming (DCG), a Game-Fi platform which offers NFTs, play-to-earn games and yield farming."
      },
      HEC: {
        name: "HeroesChained HEC",
        symbol: "HEC",
        address: "0xC7f4debC8072e23fe9259A5C0398326d8EfB7f5c",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0xC7f4debC8072e23fe9259A5C0398326d8EfB7f5c/logo.png",
        website: "https://heroeschained.com/",
        description: "Heroes Chained is a fantasy action RPG game, where the player becomes a Guild Master and gathers heroes."
      },
      COOK: {
        name: "Cook COOK",
        symbol: "COOK",
        address: "0x637afeff75ca669fF92e4570B14D6399A658902f",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x637afeff75ca669fF92e4570B14D6399A658902f/logo.png",
        website: "https://app.cook.finance/",
        description: "Cook Protocol establishes a transparent and flexible asset management platform suited to diverse investors and asset management service providers alike."
      },
      UST: {
        name: "Axelar Wrapped UST",
        symbol: "UST",
        address: "0x260Bbf5698121EB85e7a74f2E45E16Ce762EbE11",
        chainId: 43114,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x260Bbf5698121EB85e7a74f2E45E16Ce762EbE11.svg",
        website: "https://www.terra.money/",
        description: "Terra stablecoins offer instant settlements, low fees and seamless cross-border exchange - loved by millions of users and merchants."
      },
      MORE: {
        name: "More Token",
        symbol: "MORE",
        address: "0xd9D90f882CDdD6063959A9d837B05Cb748718A05",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xd9D90f882CDdD6063959A9d837B05Cb748718A05.svg",
        website: "https://app.moremoney.finance/",
        description: "Moremoney is a lending protocol for opening interest-free collateralised debt positions (CDP) using liquidity pool tokens, interest-bearing tokens (ibTKNs) and other major tokens as collateral. Borrowers mint MONEY, a USD softly pegged stablecoin backed by an over-collateralised debt position as well as the yield earned by the collateral.  After minting MONEY, borrowers can use it across the DeFi landscape, for interest free leverage, or simply use it to farm MORE. Moremoney is designed to support the further conversion of base tokens like ETH, AVAX, USDT into ibTKNs. Upon depositing, collateral assets are forwarded to trusted partner protocols where these tokens earn yield, which is either compounded into collateral token or into $MONEY to automatically repay debts owed by a vault."
      },
      FRM: {
        name: "Ferrum Network Token",
        symbol: "FRM",
        address: "0xE5CAeF4Af8780E59Df925470b050Fb23C43CA68C",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xE5CAeF4Af8780E59Df925470b050Fb23C43CA68C.svg",
        website: "https://ferrum.network/",
        description: "Ferrum Network is a cross-chain Blockchain as a Service DeFi company that specializes in adding deflationary token utility and advisory services to projects across the crypto space. With the mission of breaking down barriers to mass adoption in mind, Ferrum builds white-label blockchain solutions that empower startups and established organizations, enabling them to get their core products to market faster.Become Cross-Chain Compatible Today"
      },
      JEWEL: {
        chainId: 43114,
        address: "0x4f60a160D8C2DDdaAfe16FCC57566dB84D674BD6",
        decimals: 18,
        name: "DeFi Kingdoms",
        symbol: "JEWEL",
        website: "https://defikingdoms.com/",
        description: "JEWEL is the governance token that powers DeFi Kingdoms which can be used to purchase NFTs such as items, heroes, and kingdoms. Holders can also stake them into liquidity mining pools to earn a yield from the protocol.",
        logoURI: "https://assets.coingecko.com/coins/images/18570/large/fAisLIV.png?1632449282"
      },
      gOHM: {
        chainId: 43114,
        address: "0x321E7092a180BB43555132ec53AaA65a5bF84251",
        decimals: 18,
        name: "Governance OHM",
        symbol: "gOHM",
        website: "https://www.olympusdao.finance/",
        description: "Olympus is building a community-owned decentralized financial infrastructure to bring more stability and transparency for the world.",
        logoURI: "https://assets.coingecko.com/coins/images/14483/large/token_OHM_%281%29.png?1628311611"
      },
      QI: {
        chainId: 43114,
        address: "0xA56F9A54880afBc30CF29bB66d2D9ADCdcaEaDD6",
        decimals: 18,
        name: "Qi Dao",
        symbol: "QI",
        website: "https://www.mai.finance/",
        description: "QiDao is a self-sustaining, community-governed protocol that allows you to borrow stablecoins interest-free against your crypto assets used as collateral. Loans are paid out and repaid in miTokens (stablecoin soft pegged to the USD).",
        logoURI: "https://raw.githubusercontent.com/0xlaozi/qidao/main/images/qi.png",
        documentation: "https://docs.mai.finance/"
      },
      BOO: {
        chainId: 43114,
        address: "0xbD83010eB60F12112908774998F65761cf9f6f9a",
        decimals: 18,
        name: "Spooky Token",
        symbol: "BOO",
        website: "https://spookyswap.finance/",
        description: "SpookySwap is an automated market-making (AMM) decentralized exchange (DEX) for the Fantom Opera network. Different from other DEXs, we're invested in building a strong foundation with our BOO token as a governance token, diverse farms, grants to encourage a healthy ecology of other Fantom projects, and user-centered service.",
        logoURI: "https://assets.spookyswap.finance/tokens/BOO.png"
      },
      BLZZ: {
        chainId: 43114,
        address: "0x0f34919404a290e71fc6A510cB4a6aCb8D764b24",
        decimals: 18,
        name: "BLIZZ",
        symbol: "BLZZ",
        website: "https://blizz.finance/",
        description: "Blizz is a decentralised non-custodial liquidity market protocol where users can participate as depositors or borrowers.",
        logoURI: "https://pbs.twimg.com/profile_images/1456581025392377856/FEA_z1P0_x96.jpg"
      },
      CRV: {
        chainId: 43114,
        address: "0x47536F17F4fF30e64A96a7555826b8f9e66ec468",
        decimals: 18,
        name: "Curve",
        symbol: "CRV",
        website: "https://curve.fi/",
        description: "Curve is an exchange liquidity pool on Ethereum. Curve is designed for extremely efficient stablecoin trading and low risk, supplemental fee income for liquidity providers, without an opportunity cost.",
        logoURI: "https://external-content.duckduckgo.com/ip3/resources.curve.fi.ico"
      },
      aSING: {
        chainId: 43114,
        address: "0xF9A075C9647e91410bF6C402bDF166e1540f67F0",
        decimals: 18,
        name: "Sing Token",
        symbol: "SING",
        website: "https://singular.farm/",
        description: "Singular is a multichain, decentralized, strategic yield farm running on Polygon, BSC, Fantom and Okchain. Users are incentivized with a triple farming system.",
        logoURI: "https://github.com/singularfarm/assets/blob/main/400.png?raw=true"
      },
      TEDDY: {
        chainId: 43114,
        address: "0x094bd7B2D99711A1486FB94d4395801C6d0fdDcC",
        decimals: 18,
        name: "TEDDY",
        symbol: "TEDDY",
        website: "https://teddy.cash/",
        description: "TEDDY is a token that captures the fee revenue generated by the Teddy Cash Protocol via staking. Teddy Cash is a decentralized borrowing protocol that allows you to draw 0% interest loans against AVAX used as collateral.",
        logoURI: "https://teddy.cash/teddy-cash-final.png"
      },
      TSD: {
        chainId: 43114,
        address: "0x4fbf0429599460D327BD5F55625E30E4fC066095",
        decimals: 18,
        name: "TSD Stablecoin",
        symbol: "TSD",
        website: "https://teddy.cash/",
        description: "The Teddy Dollar (TSD) is the first stablecoin on the Avalanche network that uses AVAX as collateral.",
        logoURI: "https://app.teddy.cash/tsd.png"
      },
      TIME: {
        chainId: 43114,
        address: "0xb54f16fB19478766A268F172C9480f8da1a7c9C3",
        decimals: 9,
        name: "Time",
        symbol: "TIME",
        website: "https://app.wonderland.money/#/stake",
        description: "Wonderland is the first decentralized reserve currency protocol available on the Avalanche Network based on the TIME token. Each TIME token is backed by a basket of assets (e.g., MIM, TIME-AVAX LP Tokens etc etc) in the Wonderland treasury, giving it an intrinsic value that it cannot fall below. Wonderland also introduces economic and game-theoretic dynamics into the market through staking and bonding.",
        logoURI: "https://gblobscdn.gitbook.com/assets%2F-MhzA-YXhEZ1wM1iWJEo%2F-MiQzpjkumrqycMXcTj6%2F-MiR0TC116IqSmoKpkwX%2FTime%20Token.png?alt=media&token=9ba1004c-5e23-4e6e-b4f8-19f109c557d0"
      },
      AMPL: {
        chainId: 43114,
        address: "0x027dbcA046ca156De9622cD1e2D907d375e53aa7",
        decimals: 9,
        name: "Ampleforth secured by Meter Passport",
        symbol: "AMPL",
        website: "https://www.ampleforth.org/",
        description: "Meter Passport is a N-way blockchain router that allows assets and information to flow directly from one blockchain to another within minutes or even seconds",
        logoURI: "https://cryptologos.cc/logos/ampleforth-ampl-logo.png"
      },
      MAI: {
        chainId: 43114,
        address: "0x5c49b268c9841AFF1Cc3B0a418ff5c3442eE3F3b",
        decimals: 18,
        name: "Mai Stablecoin",
        symbol: "MAI",
        website: "https://www.mai.finance/",
        description: "MAI is a stablecoin collateralized by your crypto holdings. It's powered by Qi Dao, a protocol that enables any cryptocurrency community to create stablecoins backed by their native tokens.",
        logoURI: "https://raw.githubusercontent.com/0xlaozi/qidao/main/images/mimatic-red.png",
        documentation: "https://docs.mai.finance/"
      },
      miMatic: {
        chainId: 43114,
        address: "0x3B55E45fD6bd7d4724F5c47E0d1bCaEdd059263e",
        decimals: 18,
        name: "MiMatic",
        symbol: "MAI",
        website: "https://www.mai.finance/",
        description: "MAI is a stablecoin collateralized by your crypto holdings. It's powered by Qi Dao, a protocol that enables any cryptocurrency community to create stablecoins backed by their native tokens.",
        logoURI: "https://raw.githubusercontent.com/0xlaozi/qidao/main/images/mimatic-red.png",
        documentation: "https://docs.mai.finance/"
      },
      aQI: {
        chainId: 43114,
        address: "0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5",
        decimals: 18,
        name: "BenQi",
        symbol: "QI",
        website: "https://app.benqi.fi/overview",
        description: "BenQI is lending protocol on the Avalanche blockchain",
        logoURI: "https://raw.githubusercontent.com/pangolindex/tokens/main/assets/0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5/logo.png"
      },
      BIFI: {
        chainId: 43114,
        address: "0xd6070ae98b8069de6B494332d1A1a81B6179D960",
        decimals: 18,
        name: "Binance Smart Chain",
        symbol: "BIFI",
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      BNB: {
        chainId: 43114,
        address: "0x264c1383EA520f73dd837F915ef3a732e204a493",
        decimals: 18,
        name: "Binance Smart Chain",
        symbol: "BNB",
        website: "https://www.binance.com/",
        description: "Binance Coin (BNB) is an exchange-based token created and issued by the cryptocurrency exchange Binance. Initially created on the Ethereum blockchain as an ERC-20 token in July 2017, BNB was migrated over to Binance Chain in February 2019 and became the native coin of the Binance Chain.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c.png"
      },
      PNG: {
        chainId: 43114,
        address: "0x60781C2586D68229fde47564546784ab3fACA982",
        decimals: 18,
        name: "Pangolin",
        symbol: "PNG",
        website: "https://pangolin.exchange/",
        description: "Pangolin is a community-driven decentralized exchange for Avalanche and Ethereum assets with fast settlement, low transaction fees, and a democratic distribution\u2013powered by Avalanche.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x60781C2586D68229fde47564546784ab3fACA982/logo.png"
      },
      AVAX,
      WAVAX: AVAX,
      WNATIVE: AVAX,
      ETH: {
        chainId: 43114,
        address: "0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15",
        decimals: 18,
        name: "Ether",
        symbol: "ETH",
        website: "https://ethereum.org/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15/logo.png"
      },
      WETHe: {
        chainId: 43114,
        address: "0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB",
        decimals: 18,
        name: "Ether",
        symbol: "ETH",
        website: "https://ethereum.org/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15/logo.png",
        documentation: "https://ethereum.org/en/developers/docs/"
      },
      POOLZ: {
        chainId: 43114,
        address: "0x96CE026f10890f4836937e6FDe75f13252fdf414",
        decimals: 18,
        name: "Poolz Finance",
        symbol: "POOLZ",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x96CE026f10890f4836937e6FDe75f13252fdf414/logo.png"
      },
      ROPE: {
        chainId: 43114,
        address: "0xa99DFda608D5c9E7f091e857EfB256cEDA48D57e",
        decimals: 18,
        name: "ROPE",
        symbol: "ROPE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xa99DFda608D5c9E7f091e857EfB256cEDA48D57e/logo.png"
      },
      ZRX: {
        chainId: 43114,
        address: "0xC8E94215b75F5B9c3b5fB041eC3A97B7D17a37Ff",
        decimals: 18,
        name: "0x Protocol Token",
        symbol: "ZRX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xC8E94215b75F5B9c3b5fB041eC3A97B7D17a37Ff/logo.png"
      },
      "0xMR": {
        chainId: 43114,
        address: "0xC309fd43f845A46AA2A4C75459b076543C6E9F4a",
        decimals: 18,
        name: "0xMonero",
        symbol: "0xMR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xC309fd43f845A46AA2A4C75459b076543C6E9F4a/logo.png"
      },
      "1INCH": {
        chainId: 43114,
        address: "0xE54EB2C3009Fa411BF24fB017F9725b973CE36F0",
        decimals: 18,
        name: "1INCH Token",
        symbol: "1INCH",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xE54EB2C3009Fa411BF24fB017F9725b973CE36F0/logo.png"
      },
      MPH: {
        chainId: 43114,
        address: "0xa477b670C46fe58cF48708D9519a5E8875a48062",
        decimals: 18,
        name: "88mph.app",
        symbol: "MPH",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xa477b670C46fe58cF48708D9519a5E8875a48062/logo.png"
      },
      AAVEe: {
        chainId: 43114,
        address: "0x63a72806098Bd3D9520cC43356dD78afe5D386D9",
        decimals: 18,
        name: "Aave Token",
        symbol: "AAVE",
        website: "https://app.aave.com/markets",
        description: "Aave is a decentralised non-custodial liquidity market protocol where users can participate as depositors or borrowers.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8cE2Dee54bB9921a2AE0A63dBb2DF8eD88B91dD9/logo.png"
      },
      AAVE: {
        chainId: 43114,
        address: "0x8cE2Dee54bB9921a2AE0A63dBb2DF8eD88B91dD9",
        decimals: 18,
        name: "Aave Token",
        symbol: "AAVE",
        website: "https://app.aave.com/markets",
        description: "Aave is a decentralised non-custodial liquidity market protocol where users can participate as depositors or borrowers.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8cE2Dee54bB9921a2AE0A63dBb2DF8eD88B91dD9/logo.png"
      },
      ABYSS: {
        chainId: 43114,
        address: "0x2C4Ac7ABe6D09F81a775DE153E5593c8C56884eb",
        decimals: 18,
        name: "ABYSS",
        symbol: "ABYSS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x2C4Ac7ABe6D09F81a775DE153E5593c8C56884eb/logo.png"
      },
      AceD: {
        chainId: 43114,
        address: "0x0A15ed1B1F1BE0b2024b4d22B4f19Ebb99A6fd11",
        decimals: 18,
        name: "AceD",
        symbol: "AceD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x0A15ed1B1F1BE0b2024b4d22B4f19Ebb99A6fd11/logo.png"
      },
      ADX: {
        chainId: 43114,
        address: "0xEdd6ce14626B228D90aF0fB126a432e4b2174844",
        decimals: 18,
        name: "AdEx Network",
        symbol: "ADX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xEdd6ce14626B228D90aF0fB126a432e4b2174844/logo.png"
      },
      AGRI: {
        chainId: 43114,
        address: "0xcc6421b76190b5e7D1029824F6C988456C798291",
        decimals: 18,
        name: "AgriChain Utility Token",
        symbol: "AGRI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xcc6421b76190b5e7D1029824F6C988456C798291/logo.png"
      },
      AID: {
        chainId: 43114,
        address: "0x2e1Bc9fA6F579471e7e09084a054a858d792D981",
        decimals: 18,
        name: "AidCoin",
        symbol: "AID",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x2e1Bc9fA6F579471e7e09084a054a858d792D981/logo.png"
      },
      AKRO: {
        chainId: 43114,
        address: "0x086A23685F2A33BfdeDF4dEd738e9afDdfb854Ed",
        decimals: 18,
        name: "Akropolis",
        symbol: "AKRO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x086A23685F2A33BfdeDF4dEd738e9afDdfb854Ed/logo.png"
      },
      ADEL: {
        chainId: 43114,
        address: "0x98E1cF8b9D1DEb2F0C9F2a0A59Ee2fB60a6F10C9",
        decimals: 18,
        name: "Akropolis Delphi",
        symbol: "ADEL",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x98E1cF8b9D1DEb2F0C9F2a0A59Ee2fB60a6F10C9/logo.png"
      },
      ALEPH: {
        chainId: 43114,
        address: "0x969A3f4481583843dB706332E344412235c0892a",
        decimals: 18,
        name: "aleph.im v2",
        symbol: "ALEPH",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x969A3f4481583843dB706332E344412235c0892a/logo.png"
      },
      ALBT: {
        chainId: 43114,
        address: "0xC0c9b6714a482AAD7b11327cCf4d7a0545A828a5",
        decimals: 18,
        name: "AllianceBlock Token",
        symbol: "ALBT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xC0c9b6714a482AAD7b11327cCf4d7a0545A828a5/logo.png"
      },
      ALPHA: {
        chainId: 43114,
        address: "0x8Ea071D1903B27Ee57c82710B3a7cF660f285Bb8",
        decimals: 18,
        name: "AlphaToken",
        symbol: "ALPHA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8Ea071D1903B27Ee57c82710B3a7cF660f285Bb8/logo.png"
      },
      AMN: {
        chainId: 43114,
        address: "0xC95F62A06BA7Fb11389474EE1d4aA606A2A0D125",
        decimals: 18,
        name: "Amon",
        symbol: "AMN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xC95F62A06BA7Fb11389474EE1d4aA606A2A0D125/logo.png"
      },
      AMP: {
        chainId: 43114,
        address: "0x74A13926Df3e38a7BB7D12f566694f2E66Ba145E",
        decimals: 18,
        name: "Amp",
        symbol: "AMP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x74A13926Df3e38a7BB7D12f566694f2E66Ba145E/logo.png"
      },
      ANKR: {
        chainId: 43114,
        address: "0xd09Af6A3C12EC24CeD114A0829F5Bf73D40dC5A8",
        decimals: 18,
        name: "Ankr Network",
        symbol: "ANKR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xd09Af6A3C12EC24CeD114A0829F5Bf73D40dC5A8/logo.png"
      },
      ANRX: {
        chainId: 43114,
        address: "0x68Fa782392ff75689b6EE6E1559de2Afc634DCe8",
        decimals: 18,
        name: "AnRKey X",
        symbol: "ANRX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x68Fa782392ff75689b6EE6E1559de2Afc634DCe8/logo.png"
      },
      API3: {
        chainId: 43114,
        address: "0xBf853B96F95Fae6883E9cBC813B4021FCcF1eED4",
        decimals: 18,
        name: "API3",
        symbol: "API3",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xBf853B96F95Fae6883E9cBC813B4021FCcF1eED4/logo.png"
      },
      APY: {
        chainId: 43114,
        address: "0x524CefBaD8aa1e7921d465A9f056fc52FF6a284F",
        decimals: 18,
        name: "APY Governance Token",
        symbol: "APY",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x524CefBaD8aa1e7921d465A9f056fc52FF6a284F/logo.png"
      },
      ANT: {
        chainId: 43114,
        address: "0x6C67e7D38570d6c7FFFdbB930cF204D97C62C470",
        decimals: 18,
        name: "Aragon Network Token",
        symbol: "ANT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x6C67e7D38570d6c7FFFdbB930cF204D97C62C470/logo.png"
      },
      ASKO: {
        chainId: 43114,
        address: "0xaDCfCb796ab61Ebcd0676c6B6e13a270Fd55b402",
        decimals: 18,
        name: "Askobar Network",
        symbol: "ASKO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xaDCfCb796ab61Ebcd0676c6B6e13a270Fd55b402/logo.png"
      },
      ASTRO: {
        chainId: 43114,
        address: "0xaDA58D37D13EF5B665C46e474ac4D1AEf12EBdB1",
        decimals: 18,
        name: "AstroTools.io",
        symbol: "ASTRO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xaDA58D37D13EF5B665C46e474ac4D1AEf12EBdB1/logo.png"
      },
      ATIS: {
        chainId: 43114,
        address: "0x77619878ccDd644Dd5e67cA0f8F04Dfaae42D542",
        decimals: 18,
        name: "ATIS Token",
        symbol: "ATIS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x77619878ccDd644Dd5e67cA0f8F04Dfaae42D542/logo.png"
      },
      AUC: {
        chainId: 43114,
        address: "0xAeaDfDc09c284E848aeBA876FF086Ed06A95B4b2",
        decimals: 18,
        name: "Auctus Token",
        symbol: "AUC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xAeaDfDc09c284E848aeBA876FF086Ed06A95B4b2/logo.png"
      },
      AUDIO: {
        chainId: 43114,
        address: "0x8e32F45c87b39F15529787A77cFa7bA48CFAC7f0",
        decimals: 18,
        name: "Audius",
        symbol: "AUDIO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8e32F45c87b39F15529787A77cFa7bA48CFAC7f0/logo.png"
      },
      AXS: {
        chainId: 43114,
        address: "0x860d87C4EE3bf2F001a641e32FbeF8F0342Ba924",
        decimals: 18,
        name: "Axie Infinity Shard",
        symbol: "AXS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x860d87C4EE3bf2F001a641e32FbeF8F0342Ba924/logo.png"
      },
      BAC: {
        chainId: 43114,
        address: "0x17002A182B20F7a393808c5E013EC5fe770C9302",
        decimals: 18,
        name: "BAC",
        symbol: "BAC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x17002A182B20F7a393808c5E013EC5fe770C9302/logo.png"
      },
      BAL: {
        chainId: 43114,
        address: "0xA2A035Dd93b0e963864FA14A240401d6CeAc5558",
        decimals: 18,
        name: "Balancer",
        symbol: "BAL",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xA2A035Dd93b0e963864FA14A240401d6CeAc5558/logo.png"
      },
      BNT: {
        chainId: 43114,
        address: "0xeD44979561a797515767B0201121afC4b5eE2838",
        decimals: 18,
        name: "Bancor Network Token",
        symbol: "BNT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xeD44979561a797515767B0201121afC4b5eE2838/logo.png"
      },
      USDB: {
        chainId: 43114,
        address: "0x764CC68cd46cB00644216682C3ee120b2f1EB5F6",
        decimals: 18,
        name: "Bancor USD Token",
        symbol: "USDB",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x764CC68cd46cB00644216682C3ee120b2f1EB5F6/logo.png"
      },
      BAND: {
        chainId: 43114,
        address: "0x6Fd02c0789797e595751208a2446faF721B9f3C2",
        decimals: 18,
        name: "BandToken",
        symbol: "BAND",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x6Fd02c0789797e595751208a2446faF721B9f3C2/logo.png"
      },
      VLT: {
        chainId: 43114,
        address: "0xd02D849512780BF29Cf48D56900a4B025e478D3E",
        decimals: 18,
        name: "Bankroll Vault",
        symbol: "VLT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xd02D849512780BF29Cf48D56900a4B025e478D3E/logo.png"
      },
      BAO: {
        chainId: 43114,
        address: "0x353Be78373b6b75B5A61d952fccCb95C1d3e0bc8",
        decimals: 18,
        name: "BaoToken",
        symbol: "BAO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x353Be78373b6b75B5A61d952fccCb95C1d3e0bc8/logo.png"
      },
      BOND: {
        chainId: 43114,
        address: "0x59Cd8bb3E49930F313eD744585E4067bc45cF85d",
        decimals: 18,
        name: "BarnBridge Governance Token",
        symbol: "BOND",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x59Cd8bb3E49930F313eD744585E4067bc45cF85d/logo.png"
      },
      BAS: {
        chainId: 43114,
        address: "0x3f4409c13C3BB310317643C6ee15576b3d427Ddd",
        decimals: 18,
        name: "BAS",
        symbol: "BAS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3f4409c13C3BB310317643C6ee15576b3d427Ddd/logo.png"
      },
      BAT: {
        chainId: 43114,
        address: "0x6b329326E0F6b95B93b52229b213334278D6f277",
        decimals: 18,
        name: "Basic Attention Token",
        symbol: "BAT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x6b329326E0F6b95B93b52229b213334278D6f277/logo.png"
      },
      BCS: {
        chainId: 43114,
        address: "0xF7427e4A97f3c68fEbC6E6a90632c369524db9Ea",
        decimals: 18,
        name: "BCS",
        symbol: "BCS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xF7427e4A97f3c68fEbC6E6a90632c369524db9Ea/logo.png"
      },
      BETR: {
        chainId: 43114,
        address: "0xa6c55D876E920e34203072891c720Ac19f425a2B",
        decimals: 18,
        name: "Better Betting",
        symbol: "BETR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xa6c55D876E920e34203072891c720Ac19f425a2B/logo.png"
      },
      BUSD: {
        chainId: 43114,
        address: "0x9C9e5fD8bbc25984B178FdCE6117Defa39d2db39",
        decimals: 18,
        name: "Binance USD",
        symbol: "BUSD",
        description: "Binance USD (BUSD) is a 1:1 USD-backed stable coin issued by Binance (in partnership with Paxos), Approved and regulated by the New York State Department of Financial Services (NYDFS), The BUSD Monthly Audit Report can be viewed from the official website.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xaEb044650278731Ef3DC244692AB9F64C78FfaEA/logo.png"
      },
      BIRD: {
        chainId: 43114,
        address: "0xC83F0172352692A4481dBf07Ddd9F0e3dC5c70D1",
        decimals: 18,
        name: "Bird.Money",
        symbol: "BIRD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xC83F0172352692A4481dBf07Ddd9F0e3dC5c70D1/logo.png"
      },
      CAT: {
        chainId: 43114,
        address: "0x024fC8Fe444CFf7682499c08F5bb14241E082d49",
        decimals: 18,
        name: "BitClave",
        symbol: "CAT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x024fC8Fe444CFf7682499c08F5bb14241E082d49/logo.png"
      },
      BTSG: {
        chainId: 43114,
        address: "0xc5bac6dc06d1FC9F5eD7b0a04D08747b4c938B6d",
        decimals: 18,
        name: "BitSong",
        symbol: "BTSG",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xc5bac6dc06d1FC9F5eD7b0a04D08747b4c938B6d/logo.png"
      },
      XBP: {
        chainId: 43114,
        address: "0x1F5AE9F37A18Aa6797cdb58838F2E05160082Ae7",
        decimals: 18,
        name: "BlitzPredict",
        symbol: "XBP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x1F5AE9F37A18Aa6797cdb58838F2E05160082Ae7/logo.png"
      },
      BLY: {
        chainId: 43114,
        address: "0xEEE72b81fc4cf5A4bf9dC10c1d12F73C440ff7e9",
        decimals: 18,
        name: "Blocery Token",
        symbol: "BLY",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xEEE72b81fc4cf5A4bf9dC10c1d12F73C440ff7e9/logo.png"
      },
      BCDT: {
        chainId: 43114,
        address: "0x57D4A335260af430F5e0754D99d20Da2f1528BdF",
        decimals: 18,
        name: "Blockchain Certified Data Token",
        symbol: "BCDT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x57D4A335260af430F5e0754D99d20Da2f1528BdF/logo.png"
      },
      VEE: {
        chainId: 43114,
        address: "0xFE017733FF7E4D2AE17C98B2774fB4d5E3EA46DD",
        decimals: 18,
        name: "BLOCKv Token",
        symbol: "VEE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xFE017733FF7E4D2AE17C98B2774fB4d5E3EA46DD/logo.png"
      },
      BLZ: {
        chainId: 43114,
        address: "0x6572450E88918154B6f059aa7fCAbA37f5ddc490",
        decimals: 18,
        name: "Bluzelle Token",
        symbol: "BLZ",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x6572450E88918154B6f059aa7fCAbA37f5ddc490/logo.png"
      },
      BONDLY: {
        chainId: 43114,
        address: "0xD61B293AEFb71f9B83670133d1FAad8487567a53",
        decimals: 18,
        name: "Bondly Token",
        symbol: "BONDLY",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xD61B293AEFb71f9B83670133d1FAad8487567a53/logo.png"
      },
      BOOST: {
        chainId: 43114,
        address: "0x7Ffc73532E29Ac0845E494ec021F1A0791EBd4A7",
        decimals: 18,
        name: "Boosted Finance",
        symbol: "BOOST",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x7Ffc73532E29Ac0845E494ec021F1A0791EBd4A7/logo.png"
      },
      BOT: {
        chainId: 43114,
        address: "0x4AcEA0eB348a6DB49cb3F8A1D62625342D5f8751",
        decimals: 18,
        name: "Bounce Token",
        symbol: "BOT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x4AcEA0eB348a6DB49cb3F8A1D62625342D5f8751/logo.png"
      },
      BTU: {
        chainId: 43114,
        address: "0x211960f8260DB1B0171c33931a2aeFd9562592B0",
        decimals: 18,
        name: "BTU Protocol",
        symbol: "BTU",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x211960f8260DB1B0171c33931a2aeFd9562592B0/logo.png"
      },
      CAP: {
        chainId: 43114,
        address: "0xb2Fb27f45189F3c621545e5E3aAe668A9B1BDf1d",
        decimals: 18,
        name: "Cap",
        symbol: "CAP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xb2Fb27f45189F3c621545e5E3aAe668A9B1BDf1d/logo.png"
      },
      CTSI: {
        chainId: 43114,
        address: "0x71C677beD0DF55AF6d6b19114Dab10E1dE45d9F7",
        decimals: 18,
        name: "Cartesi Token",
        symbol: "CTSI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x71C677beD0DF55AF6d6b19114Dab10E1dE45d9F7/logo.png"
      },
      CBIX7: {
        chainId: 43114,
        address: "0xeeD4DcDFaE91D39d2b851338433F0013AF5D1406",
        decimals: 18,
        name: "CBI Index 7",
        symbol: "CBIX7",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xeeD4DcDFaE91D39d2b851338433F0013AF5D1406/logo.png"
      },
      LINK: {
        chainId: 43114,
        address: "0xB3fe5374F67D7a22886A0eE082b2E2f9d2651651",
        decimals: 18,
        name: "ChainLink Token",
        symbol: "LINK",
        website: "https://chain.link/",
        description: "Link is the currency used to pay the Chainlink node operators for their work. Chainlink node operators have to stake LINK in the network in order to participate and provide data services.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xB3fe5374F67D7a22886A0eE082b2E2f9d2651651/logo.png"
      },
      LINKe: {
        chainId: 43114,
        address: "0x5947BB275c521040051D82396192181b413227A3",
        decimals: 18,
        name: "ChainLink Token",
        symbol: "LINK",
        website: "https://chain.link/",
        description: "Link is the currency used to pay the Chainlink node operators for their work. Chainlink node operators have to stake LINK in the network in order to participate and provide data services.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xB3fe5374F67D7a22886A0eE082b2E2f9d2651651/logo.png"
      },
      COL: {
        chainId: 43114,
        address: "0xEFb603A7844f11D17aDA15B63e3A876AB443372C",
        decimals: 18,
        name: "COL",
        symbol: "COL",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xEFb603A7844f11D17aDA15B63e3A876AB443372C/logo.png"
      },
      COMP: {
        chainId: 43114,
        address: "0x53CEedB4f6f277edfDDEdB91373B044FE6AB5958",
        decimals: 18,
        name: "Compound",
        symbol: "COMP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x53CEedB4f6f277edfDDEdB91373B044FE6AB5958/logo.png"
      },
      CVP: {
        chainId: 43114,
        address: "0xDF9A6628235C90da0a475519D85C9CFFa2a11D4C",
        decimals: 18,
        name: "Concentrated Voting Power",
        symbol: "CVP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xDF9A6628235C90da0a475519D85C9CFFa2a11D4C/logo.png"
      },
      NCASH: {
        chainId: 43114,
        address: "0xc69Eba65e87889f0805dB717Af06797055A0BA07",
        decimals: 18,
        name: "Nitro Network",
        symbol: "NCASH",
        website: "https://nitro.network/",
        description: "NCash is the native cryptocurrency and protocol token of the Nitro Network. Nitro Network is building a world of private communication networks powered by IoT together with LoRaWAN/3G/4G and 5G.",
        logoURI: "https://raw.githubusercontent.com/pangolindex/tokens/main/assets/0xc69Eba65e87889f0805dB717Af06797055A0BA07/logo_48.png"
      },
      COT: {
        chainId: 43114,
        address: "0xa8cE5107A2770959edB27529E56E84e11eF55a58",
        decimals: 18,
        name: "CoTrader",
        symbol: "COT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xa8cE5107A2770959edB27529E56E84e11eF55a58/logo.png"
      },
      COVER: {
        chainId: 43114,
        address: "0xE0976dCa075C4055cADa33C2452429572885aE7E",
        decimals: 18,
        name: "Cover Protocol",
        symbol: "COVER",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xE0976dCa075C4055cADa33C2452429572885aE7E/logo.png"
      },
      "COVER-Cover Protocol Governance Token": {
        chainId: 43114,
        address: "0xe35f68f3DE8590F3FD6884Eef166AF9f414D75F7",
        decimals: 18,
        name: "Cover Protocol Governance Token",
        symbol: "COVER",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xe35f68f3DE8590F3FD6884Eef166AF9f414D75F7/logo.png"
      },
      CREAM: {
        chainId: 43114,
        address: "0xb9AB39F9b4E3af0c97aE55EA48A960656C681A88",
        decimals: 18,
        name: "Cream",
        symbol: "CREAM",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xb9AB39F9b4E3af0c97aE55EA48A960656C681A88/logo.png"
      },
      cyUSD: {
        chainId: 43114,
        address: "0x3a9ea8880643211413609A7B717e3884816D15e7",
        decimals: 18,
        name: "CreamY USD",
        symbol: "cyUSD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3a9ea8880643211413609A7B717e3884816D15e7/logo.png"
      },
      XCHF: {
        chainId: 43114,
        address: "0x3E8a3b1db5401938F6F34E4e6f2560354C182c46",
        decimals: 18,
        name: "CryptoFranc",
        symbol: "XCHF",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3E8a3b1db5401938F6F34E4e6f2560354C182c46/logo.png"
      },
      CUDOS: {
        chainId: 43114,
        address: "0x422b2328A16b41ecCA56E1854be9943526aD7647",
        decimals: 18,
        name: "CudosToken",
        symbol: "CUDOS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x422b2328A16b41ecCA56E1854be9943526aD7647/logo.png"
      },
      CUR: {
        chainId: 43114,
        address: "0x06f9FD59D9E009E7e47a07Df79BC994A07dcFb95",
        decimals: 18,
        name: "CurToken",
        symbol: "CUR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x06f9FD59D9E009E7e47a07Df79BC994A07dcFb95/logo.png"
      },
      CORE: {
        chainId: 43114,
        address: "0x424587becE1A7436Ae4a38eD9E8686992236618B",
        decimals: 18,
        name: "cVault.finance",
        symbol: "CORE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x424587becE1A7436Ae4a38eD9E8686992236618B/logo.png"
      },
      CFi: {
        chainId: 43114,
        address: "0xd77b301D644608eE1E3dC56C3CF8540E6C9EC60F",
        decimals: 18,
        name: "CyberFi Token",
        symbol: "CFi",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xd77b301D644608eE1E3dC56C3CF8540E6C9EC60F/logo.png"
      },
      DAI: {
        chainId: 43114,
        address: "0xbA7dEebBFC5fA1100Fb055a87773e1E99Cd3507a",
        decimals: 18,
        name: "Dai Stablecoin",
        symbol: "DAI",
        website: "https://makerdao.com/en/",
        description: "Dai is a stablecoin cryptocurrency which aims to keep its value as close to one United States dollar as possible through an automated system of smart contracts on the Ethereum blockchain",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xbA7dEebBFC5fA1100Fb055a87773e1E99Cd3507a/logo.png"
      },
      GEN: {
        chainId: 43114,
        address: "0x2263483B187d8C99d1E7D1f737183097c7071fe2",
        decimals: 18,
        name: "DAOstack",
        symbol: "GEN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x2263483B187d8C99d1E7D1f737183097c7071fe2/logo.png"
      },
      DEBASE: {
        chainId: 43114,
        address: "0xA449DE69B549B416690aB15D2E67E7fCcD464347",
        decimals: 18,
        name: "Debase",
        symbol: "DEBASE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xA449DE69B549B416690aB15D2E67E7fCcD464347/logo.png"
      },
      DEC: {
        chainId: 43114,
        address: "0xdC6D33821606f6c5FfceD7Bb315152210F3f31d9",
        decimals: 18,
        name: "Decentr",
        symbol: "DEC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xdC6D33821606f6c5FfceD7Bb315152210F3f31d9/logo.png"
      },
      MANA: {
        chainId: 43114,
        address: "0x332877d7b83D98eFC3e22C203c54E6e62F7f35e9",
        decimals: 18,
        name: "Decentraland MANA",
        symbol: "MANA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x332877d7b83D98eFC3e22C203c54E6e62F7f35e9/logo.png"
      },
      DIP: {
        chainId: 43114,
        address: "0xa571971CD50b3c17c9F82f43965319907D50341E",
        decimals: 18,
        name: "Decentralized Insurance Protocol",
        symbol: "DIP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xa571971CD50b3c17c9F82f43965319907D50341E/logo.png"
      },
      DUSD: {
        chainId: 43114,
        address: "0x71645323F647488209eAAB8d08900576502160c8",
        decimals: 18,
        name: "DefiDollar",
        symbol: "DUSD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x71645323F647488209eAAB8d08900576502160c8/logo.png"
      },
      DFD: {
        chainId: 43114,
        address: "0x30EB0D35147B7a40dB1A54a98F25317E844670e5",
        decimals: 18,
        name: "DefiDollar DAO",
        symbol: "DFD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x30EB0D35147B7a40dB1A54a98F25317E844670e5/logo.png"
      },
      FIN: {
        chainId: 43114,
        address: "0x7FA965Ebd5bBBee983681E571091A31dDDB2E510",
        decimals: 18,
        name: "DeFiner",
        symbol: "FIN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x7FA965Ebd5bBBee983681E571091A31dDDB2E510/logo.png"
      },
      PIE: {
        chainId: 43114,
        address: "0x8320c3cd3a0d671650F5600Cc9d907749AeDa7E1",
        decimals: 18,
        name: "DeFiPIE Token",
        symbol: "PIE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8320c3cd3a0d671650F5600Cc9d907749AeDa7E1/logo.png"
      },
      DPI: {
        chainId: 43114,
        address: "0x150DC9795908a27988aBf71C30E9B1647922A7B3",
        decimals: 18,
        name: "DefiPulse Index",
        symbol: "DPI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x150DC9795908a27988aBf71C30E9B1647922A7B3/logo.png"
      },
      DTH: {
        chainId: 43114,
        address: "0x5eC7E661fB06ccFBC371Fb463a284705D53DF32a",
        decimals: 18,
        name: "Dether",
        symbol: "DTH",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5eC7E661fB06ccFBC371Fb463a284705D53DF32a/logo.png"
      },
      DEV: {
        chainId: 43114,
        address: "0xD7c26758CA255fb1d7559B02Ff36295be61f6822",
        decimals: 18,
        name: "Dev",
        symbol: "DEV",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xD7c26758CA255fb1d7559B02Ff36295be61f6822/logo.png"
      },
      DEXE: {
        chainId: 43114,
        address: "0x5574eDff4EF9Fce15B22DDB37A7F419b2Abd729E",
        decimals: 18,
        name: "Dexe",
        symbol: "DEXE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5574eDff4EF9Fce15B22DDB37A7F419b2Abd729E/logo.png"
      },
      DEXT: {
        chainId: 43114,
        address: "0x618B994F06F7168bd3e24C05321cCf0Afd30D6bc",
        decimals: 18,
        name: "DEXTools",
        symbol: "DEXT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x618B994F06F7168bd3e24C05321cCf0Afd30D6bc/logo.png"
      },
      BUIDL: {
        chainId: 43114,
        address: "0x30D26864af10565CEdD9E4d5b1fdBd52B49144DD",
        decimals: 18,
        name: "DFOHub",
        symbol: "BUIDL",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x30D26864af10565CEdD9E4d5b1fdBd52B49144DD/logo.png"
      },
      buidl: {
        chainId: 43114,
        address: "0x933753c297aDe672D68fa3296FdafFD76Db7DFA2",
        decimals: 18,
        name: "dfohub",
        symbol: "buidl",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x933753c297aDe672D68fa3296FdafFD76Db7DFA2/logo.png"
      },
      GOLDx: {
        chainId: 43114,
        address: "0xe3EDb25E952e9b3575EFb71DE14651EF3F2e8FaF",
        decimals: 18,
        name: "dForce",
        symbol: "GOLDx",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xe3EDb25E952e9b3575EFb71DE14651EF3F2e8FaF/logo.png"
      },
      DHT: {
        chainId: 43114,
        address: "0xeE33c5804b759cCf3A9de88c9E772374147dCdEE",
        decimals: 18,
        name: "dHedge DAO Token",
        symbol: "DHT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xeE33c5804b759cCf3A9de88c9E772374147dCdEE/logo.png"
      },
      DIA: {
        chainId: 43114,
        address: "0xd072dEcEb5FD919bF8853CeB1068438652a06c00",
        decimals: 18,
        name: "DIAToken",
        symbol: "DIA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xd072dEcEb5FD919bF8853CeB1068438652a06c00/logo.png"
      },
      mDAI: {
        chainId: 43114,
        address: "0x6CB5008Ca0CC13862CB47906F541672e8f51A6EF",
        decimals: 18,
        name: "DMM - DAI",
        symbol: "mDAI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x6CB5008Ca0CC13862CB47906F541672e8f51A6EF/logo.png"
      },
      mETH: {
        chainId: 43114,
        address: "0x6FEC3a5e49748088C2b9b1Ef9A6a762ABdD07805",
        decimals: 18,
        name: "DMM - ETH",
        symbol: "mETH",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x6FEC3a5e49748088C2b9b1Ef9A6a762ABdD07805/logo.png"
      },
      DMG: {
        chainId: 43114,
        address: "0xe9925Cd8639c21DFcEA667D40dD2c8f54f420618",
        decimals: 18,
        name: "DMM - Governance",
        symbol: "DMG",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xe9925Cd8639c21DFcEA667D40dD2c8f54f420618/logo.png"
      },
      DMST: {
        chainId: 43114,
        address: "0xF64DBa678d653D5Bb743b1E764De0A11fAb0f0a3",
        decimals: 18,
        name: "DMScript",
        symbol: "DMST",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xF64DBa678d653D5Bb743b1E764De0A11fAb0f0a3/logo.png"
      },
      DODO: {
        chainId: 43114,
        address: "0x480d6193B2a2Db2702F3ce6FE5Bc1F0c8a95336B",
        decimals: 18,
        name: "DODO bird",
        symbol: "DODO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x480d6193B2a2Db2702F3ce6FE5Bc1F0c8a95336B/logo.png"
      },
      DONUT: {
        chainId: 43114,
        address: "0xb2Ef3c8A2b27C219FC3396F0e9320df0E29Ec037",
        decimals: 18,
        name: "Donut",
        symbol: "DONUT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xb2Ef3c8A2b27C219FC3396F0e9320df0E29Ec037/logo.png"
      },
      DOS: {
        chainId: 43114,
        address: "0x2C05b134888419b497fE5489D2762031a2de8031",
        decimals: 18,
        name: "DOS Network Token",
        symbol: "DOS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x2C05b134888419b497fE5489D2762031a2de8031/logo.png"
      },
      DDIM: {
        chainId: 43114,
        address: "0xF40920212A74387387328Db8e30726C0cc62ae33",
        decimals: 18,
        name: "DuckDaoDime",
        symbol: "DDIM",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xF40920212A74387387328Db8e30726C0cc62ae33/logo.png"
      },
      DSD: {
        chainId: 43114,
        address: "0xcE4Af1de4A61C02E590cA8AD2a1493FF2A3D5fB5",
        decimals: 18,
        name: "Dynamic Set Dollar",
        symbol: "DSD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xcE4Af1de4A61C02E590cA8AD2a1493FF2A3D5fB5/logo.png"
      },
      eXRD: {
        chainId: 43114,
        address: "0x535E15B13f2A82350E8C02d62BDbA385a6307c30",
        decimals: 18,
        name: "E-RADIX",
        symbol: "eXRD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x535E15B13f2A82350E8C02d62BDbA385a6307c30/logo.png"
      },
      WOZX: {
        chainId: 43114,
        address: "0x1830DD37A0ddd3207fFAc9013E4F4D60FEC22036",
        decimals: 18,
        name: "EFFORCE IEO",
        symbol: "WOZX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x1830DD37A0ddd3207fFAc9013E4F4D60FEC22036/logo.png"
      },
      ELF: {
        chainId: 43114,
        address: "0xfCDf63735c1Cf3203CE64fEf59DcA6A7aC9A6D54",
        decimals: 18,
        name: "ELF Token",
        symbol: "ELF",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xfCDf63735c1Cf3203CE64fEf59DcA6A7aC9A6D54/logo.png"
      },
      ESD: {
        chainId: 43114,
        address: "0x455b3FD5eF7bcA83C0c1Cd71695Ec7aEda773E4f",
        decimals: 18,
        name: "Empty Set Dollar",
        symbol: "ESD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x455b3FD5eF7bcA83C0c1Cd71695Ec7aEda773E4f/logo.png"
      },
      EWTB: {
        chainId: 43114,
        address: "0x3447d187934d323bDd1BCc6EDC643D3C8d05D86c",
        decimals: 18,
        name: "Energy Web Token Bridged",
        symbol: "EWTB",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3447d187934d323bDd1BCc6EDC643D3C8d05D86c/logo.png"
      },
      ENJ: {
        chainId: 43114,
        address: "0xCde255522146ddF36d57BA5Cd8D74695bD13C994",
        decimals: 18,
        name: "Enjin Coin",
        symbol: "ENJ",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xCde255522146ddF36d57BA5Cd8D74695bD13C994/logo.png"
      },
      EQMT: {
        chainId: 43114,
        address: "0x964A11836e6Ac44E07F8632a9FF6C380Ef0113fd",
        decimals: 18,
        name: "EQUUSMiningToken",
        symbol: "EQMT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x964A11836e6Ac44E07F8632a9FF6C380Ef0113fd/logo.png"
      },
      ETHRSIAPY: {
        chainId: 43114,
        address: "0xD7b63a3Cf593E72c385A72e28029Bcae6db766D5",
        decimals: 18,
        name: "ETH RSI 60/40 Yield II",
        symbol: "ETHRSIAPY",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xD7b63a3Cf593E72c385A72e28029Bcae6db766D5/logo.png"
      },
      LEND: {
        chainId: 43114,
        address: "0xaeF85E9F467b2Dc187351b37BF63124C0A9bB913",
        decimals: 18,
        name: "EthLend Token",
        symbol: "LEND",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xaeF85E9F467b2Dc187351b37BF63124C0A9bB913/logo.png"
      },
      ETHV: {
        chainId: 43114,
        address: "0xb98B8Ea9E894Caa5155Da32646152303839890a3",
        decimals: 18,
        name: "Ethverse Token",
        symbol: "ETHV",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xb98B8Ea9E894Caa5155Da32646152303839890a3/logo.png"
      },
      EVO: {
        chainId: 43114,
        address: "0xC636AD16dd87C2D412d2c62276813dFC35558A81",
        decimals: 18,
        name: "Evolution",
        symbol: "EVO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xC636AD16dd87C2D412d2c62276813dFC35558A81/logo.png"
      },
      XED: {
        chainId: 43114,
        address: "0x0DCE209Cd97C8bd136E433703645Dc431eF93075",
        decimals: 18,
        name: "Exeedme",
        symbol: "XED",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x0DCE209Cd97C8bd136E433703645Dc431eF93075/logo.png"
      },
      FSW: {
        chainId: 43114,
        address: "0x479914df5B637aa9d439246116d49245Db678f97",
        decimals: 18,
        name: "FalconSwap Token",
        symbol: "FSW",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x479914df5B637aa9d439246116d49245Db678f97/logo.png"
      },
      FARM: {
        chainId: 43114,
        address: "0x5E92Fb74d337cd3914E0E48a7E679f87f2585471",
        decimals: 18,
        name: "FARM Reward Token",
        symbol: "FARM",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5E92Fb74d337cd3914E0E48a7E679f87f2585471/logo.png"
      },
      FERA: {
        chainId: 43114,
        address: "0x5dc1E85C8Db7F79bbd63e6Ae35AbEb50AD55756D",
        decimals: 18,
        name: "FERA",
        symbol: "FERA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5dc1E85C8Db7F79bbd63e6Ae35AbEb50AD55756D/logo.png"
      },
      FET: {
        chainId: 43114,
        address: "0x23D7e6Af758883F4976617DAB2641af94FF7CA1F",
        decimals: 18,
        name: "Fetch",
        symbol: "FET",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x23D7e6Af758883F4976617DAB2641af94FF7CA1F/logo.png"
      },
      FNX: {
        chainId: 43114,
        address: "0x85B87e0A36865dbdeF50bdFAFB49B272077E0026",
        decimals: 18,
        name: "FinNexus",
        symbol: "FNX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x85B87e0A36865dbdeF50bdFAFB49B272077E0026/logo.png"
      },
      FTX: {
        chainId: 43114,
        address: "0xaD4c2Ba8C983E6A06685b6F90D0c517cD3C4301e",
        decimals: 18,
        name: "FintruX Network",
        symbol: "FTX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xaD4c2Ba8C983E6A06685b6F90D0c517cD3C4301e/logo.png"
      },
      FXC: {
        chainId: 43114,
        address: "0xE9C418927B36F2668dC4fe02028Aa08535a8E347",
        decimals: 18,
        name: "Flexacoin",
        symbol: "FXC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xE9C418927B36F2668dC4fe02028Aa08535a8E347/logo.png"
      },
      FLIXX: {
        chainId: 43114,
        address: "0x5d1CE423031a2661F960740f15a93073e6ccAb13",
        decimals: 18,
        name: "Flixx",
        symbol: "FLIXX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5d1CE423031a2661F960740f15a93073e6ccAb13/logo.png"
      },
      FOAM: {
        chainId: 43114,
        address: "0x23F3C4fF7ef5C752593966BDe70de2Db81398Aa6",
        decimals: 18,
        name: "FOAM Token",
        symbol: "FOAM",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x23F3C4fF7ef5C752593966BDe70de2Db81398Aa6/logo.png"
      },
      FOX: {
        chainId: 43114,
        address: "0x7e7034845b581B959Ad90a6D7424382DDd70C196",
        decimals: 18,
        name: "FOX",
        symbol: "FOX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x7e7034845b581B959Ad90a6D7424382DDd70C196/logo.png"
      },
      FRAX: {
        chainId: 43114,
        address: "0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64",
        decimals: 18,
        name: "Frax",
        symbol: "FRAX",
        website: "https://frax.finance/",
        description: "Frax is the first fractional-algorithmic stablecoin protocol.",
        logoURI: "https://raw.githubusercontent.com/pangolindex/tokens/main/assets/0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64/logo.png"
      },
      FXS: {
        chainId: 43114,
        address: "0xb1BA5Cf8EAa4D3c3439e91c190553E9c92e98E30",
        decimals: 18,
        name: "Frax Share",
        symbol: "FXS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xb1BA5Cf8EAa4D3c3439e91c190553E9c92e98E30/logo.png"
      },
      IME: {
        chainId: 43114,
        address: "0xF891214fdcF9cDaa5fdC42369eE4F27F226AdaD6",
        decimals: 18,
        name: " Imperium Empires Token",
        symbol: "IME",
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0xF891214fdcF9cDaa5fdC42369eE4F27F226AdaD6/logo.png"
      },
      FRONT: {
        chainId: 43114,
        address: "0x3441061CbfDF2351E010DF5D962f1cF0626CF19F",
        decimals: 18,
        name: "Frontier Token",
        symbol: "FRONT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3441061CbfDF2351E010DF5D962f1cF0626CF19F/logo.png"
      },
      iDAI: {
        chainId: 43114,
        address: "0x8A8DD8dd5639174F032877b2D6c7467D8B51D561",
        decimals: 18,
        name: "Fulcrum DAI iToken",
        symbol: "iDAI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8A8DD8dd5639174F032877b2D6c7467D8B51D561/logo.png"
      },
      iETH: {
        chainId: 43114,
        address: "0x2Ae2CD4e23c09a2B68a24D56D5cf3c4e887Da849",
        decimals: 18,
        name: "Fulcrum ETH iToken",
        symbol: "iETH",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x2Ae2CD4e23c09a2B68a24D56D5cf3c4e887Da849/logo.png"
      },
      COMBO: {
        chainId: 43114,
        address: "0xF8fc972343698Ac3C466858ce6CF48bBc83a0852",
        decimals: 18,
        name: "Furucombo",
        symbol: "COMBO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xF8fc972343698Ac3C466858ce6CF48bBc83a0852/logo.png"
      },
      FUSE: {
        chainId: 43114,
        address: "0xd3974AE5A9BCD4AE4c9037a25A67374a11df4154",
        decimals: 18,
        name: "Fuse Token",
        symbol: "FUSE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xd3974AE5A9BCD4AE4c9037a25A67374a11df4154/logo.png"
      },
      GEEQ: {
        chainId: 43114,
        address: "0x3326235Ec1AFf2799dE463413114b800d251089d",
        decimals: 18,
        name: "Geeq",
        symbol: "GEEQ",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3326235Ec1AFf2799dE463413114b800d251089d/logo.png"
      },
      GVT: {
        chainId: 43114,
        address: "0x9D3b7a5e30654Ab86039c929880b078B34c41625",
        decimals: 18,
        name: "Genesis Vision Token",
        symbol: "GVT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x9D3b7a5e30654Ab86039c929880b078B34c41625/logo.png"
      },
      GYSR: {
        chainId: 43114,
        address: "0x6419e589dB783c5396d94f3237879a010fdB5C44",
        decimals: 18,
        name: "Geyser",
        symbol: "GYSR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x6419e589dB783c5396d94f3237879a010fdB5C44/logo.png"
      },
      GHOST: {
        chainId: 43114,
        address: "0x4F229fF652D4dB584BF4b3512aE430edECb85971",
        decimals: 18,
        name: "GHOST",
        symbol: "GHOST",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x4F229fF652D4dB584BF4b3512aE430edECb85971/logo.png"
      },
      GNO: {
        chainId: 43114,
        address: "0xBAA66822055AD37EC05638eC5AAfDC6Ef0e96445",
        decimals: 18,
        name: "Gnosis Token",
        symbol: "GNO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xBAA66822055AD37EC05638eC5AAfDC6Ef0e96445/logo.png"
      },
      MNTP: {
        chainId: 43114,
        address: "0x56f45Ca7C6e8d5550b36f4C69a0dEA44defEe3Ef",
        decimals: 18,
        name: "Goldmint MNT Prelaunch Token",
        symbol: "MNTP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x56f45Ca7C6e8d5550b36f4C69a0dEA44defEe3Ef/logo.png"
      },
      GOF: {
        chainId: 43114,
        address: "0x44D24Df9732DA8b230c819b0bf22b6C6377B42c4",
        decimals: 18,
        name: "Golff.finance",
        symbol: "GOF",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x44D24Df9732DA8b230c819b0bf22b6C6377B42c4/logo.png"
      },
      GRT: {
        chainId: 43114,
        address: "0x46C54b16aF7747067f412c78eBaDaE203a26aDa0",
        decimals: 18,
        name: "Graph Token",
        symbol: "GRT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x46C54b16aF7747067f412c78eBaDaE203a26aDa0/logo.png"
      },
      GRO: {
        chainId: 43114,
        address: "0xBAd7b06c436200dB693Dd49418A96E2bF857f9a2",
        decimals: 18,
        name: "Growth",
        symbol: "GRO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xBAd7b06c436200dB693Dd49418A96E2bF857f9a2/logo.png"
      },
      HAKKA: {
        chainId: 43114,
        address: "0xf21074038dc2ea2A280EC890be55Ae3Be84616e3",
        decimals: 18,
        name: "Hakka Finance",
        symbol: "HAKKA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xf21074038dc2ea2A280EC890be55Ae3Be84616e3/logo.png"
      },
      HEGIC: {
        chainId: 43114,
        address: "0x20642e9cdd6BFe701817A7b50dE89777C8F2b208",
        decimals: 18,
        name: "Hegic",
        symbol: "HEGIC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x20642e9cdd6BFe701817A7b50dE89777C8F2b208/logo.png"
      },
      HEZ: {
        chainId: 43114,
        address: "0x79c340eAFaC9Cc81d9BF128aa1785E669e06FBe2",
        decimals: 18,
        name: "Hermez Network Token",
        symbol: "HEZ",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x79c340eAFaC9Cc81d9BF128aa1785E669e06FBe2/logo.png"
      },
      HOT: {
        chainId: 43114,
        address: "0xA471033610995EEdF0D6E4C598a4A9b4EC99c700",
        decimals: 18,
        name: "HoloToken",
        symbol: "HOT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xA471033610995EEdF0D6E4C598a4A9b4EC99c700/logo.png"
      },
      HOLY: {
        chainId: 43114,
        address: "0x2167d6A882e9beB324D08e6663d4D419ac578792",
        decimals: 18,
        name: "Holyheld",
        symbol: "HOLY",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x2167d6A882e9beB324D08e6663d4D419ac578792/logo.png"
      },
      HBTC: {
        chainId: 43114,
        address: "0x8c1632b83D9E2D3C31B0728e953A22B7B33348A3",
        decimals: 18,
        name: "Huobi BTC",
        symbol: "HBTC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8c1632b83D9E2D3C31B0728e953A22B7B33348A3/logo.png"
      },
      HT: {
        chainId: 43114,
        address: "0x421b2a69b886BA17a61C7dAd140B9070d5Ef300B",
        decimals: 18,
        name: "HuobiToken",
        symbol: "HT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x421b2a69b886BA17a61C7dAd140B9070d5Ef300B/logo.png"
      },
      IDEX: {
        chainId: 43114,
        address: "0x59535b9BA6029edb7588dF41Ed388584FBEA706C",
        decimals: 18,
        name: "IDEX Token",
        symbol: "IDEX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x59535b9BA6029edb7588dF41Ed388584FBEA706C/logo.png"
      },
      INDEX: {
        chainId: 43114,
        address: "0x3d26cefE5fAE96FFd48801e1E61975b3CB75036B",
        decimals: 18,
        name: "Index",
        symbol: "INDEX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3d26cefE5fAE96FFd48801e1E61975b3CB75036B/logo.png"
      },
      NDX: {
        chainId: 43114,
        address: "0x7633b4710042F9Dd22e3FC63E59E4BFDcb6813B9",
        decimals: 18,
        name: "Indexed",
        symbol: "NDX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x7633b4710042F9Dd22e3FC63E59E4BFDcb6813B9/logo.png"
      },
      IND: {
        chainId: 43114,
        address: "0xB9d0574a8049e5fd4331ACDc1CF3ce2FF3261bE9",
        decimals: 18,
        name: "Indorse Token",
        symbol: "IND",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xB9d0574a8049e5fd4331ACDc1CF3ce2FF3261bE9/logo.png"
      },
      INFI: {
        chainId: 43114,
        address: "0x1d590AD61A7b56071A5858301aCe7DD3D31f0Dd0",
        decimals: 18,
        name: "INFI",
        symbol: "INFI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x1d590AD61A7b56071A5858301aCe7DD3D31f0Dd0/logo.png"
      },
      INJ: {
        chainId: 43114,
        address: "0xfE057C0496eF3CCa8d85d847dA99c9815ba9981F",
        decimals: 18,
        name: "Injective Token",
        symbol: "INJ",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xfE057C0496eF3CCa8d85d847dA99c9815ba9981F/logo.png"
      },
      XNK: {
        chainId: 43114,
        address: "0x703a3cC60E5E7ed2b28Bdc50D66C260b4aAB03dC",
        decimals: 18,
        name: "Ink Protocol",
        symbol: "XNK",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x703a3cC60E5E7ed2b28Bdc50D66C260b4aAB03dC/logo.png"
      },
      JUL: {
        chainId: 43114,
        address: "0xC839E0D590BBb1b64A46A3F6aB6Feb596ced7439",
        decimals: 18,
        name: "JUL",
        symbol: "JUL",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xC839E0D590BBb1b64A46A3F6aB6Feb596ced7439/logo.png"
      },
      KAI: {
        chainId: 43114,
        address: "0x1D81360dADf2E1756FaeAe46072dD12997170F46",
        decimals: 18,
        name: "KardiaChain Token",
        symbol: "KAI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x1D81360dADf2E1756FaeAe46072dD12997170F46/logo.png"
      },
      KEEP: {
        chainId: 43114,
        address: "0x73945347fbCBFed872D590110f817621440a9d39",
        decimals: 18,
        name: "KEEP Token",
        symbol: "KEEP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x73945347fbCBFed872D590110f817621440a9d39/logo.png"
      },
      KP3R: {
        chainId: 43114,
        address: "0xB42F2c83b4ee3C3620789B5603f4bdf01792e0a0",
        decimals: 18,
        name: "Keep3rV1",
        symbol: "KP3R",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xB42F2c83b4ee3C3620789B5603f4bdf01792e0a0/logo.png"
      },
      KP4R: {
        chainId: 43114,
        address: "0xEeB395dEc67742cCF7E6Aea920DC2b7FCF01e725",
        decimals: 18,
        name: "Keep4r",
        symbol: "KP4R",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xEeB395dEc67742cCF7E6Aea920DC2b7FCF01e725/logo.png"
      },
      KEN: {
        chainId: 43114,
        address: "0x833A32E28Bbb289C0ba13c69A08dB9E9526D4907",
        decimals: 18,
        name: "Kenysians Network",
        symbol: "KEN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x833A32E28Bbb289C0ba13c69A08dB9E9526D4907/logo.png"
      },
      kSEED: {
        chainId: 43114,
        address: "0x47e4c63922766e1b386fa7296c994aC474062Bd4",
        decimals: 18,
        name: "KUSH.FINANCE",
        symbol: "kSEED",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x47e4c63922766e1b386fa7296c994aC474062Bd4/logo.png"
      },
      KNC: {
        chainId: 43114,
        address: "0xb7f7C9347f55d6d6265e152c636cD29aB17Dc9F6",
        decimals: 18,
        name: "Kyber Network Crystal",
        symbol: "KNC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xb7f7C9347f55d6d6265e152c636cD29aB17Dc9F6/logo.png"
      },
      TAU: {
        chainId: 43114,
        address: "0x4D49159F233506087426094CDa371B5817f30331",
        decimals: 18,
        name: "Lamden Tau",
        symbol: "TAU",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x4D49159F233506087426094CDa371B5817f30331/logo.png"
      },
      LDC: {
        chainId: 43114,
        address: "0x78c703129FA14c96164c6e14497edAB6CF215A93",
        decimals: 18,
        name: "LEADCOIN",
        symbol: "LDC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x78c703129FA14c96164c6e14497edAB6CF215A93/logo.png"
      },
      LST: {
        chainId: 43114,
        address: "0x4E0226a638adCBB43C99131c743B9Aba15Ff3040",
        decimals: 18,
        name: "Lendroid Support Token",
        symbol: "LST",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x4E0226a638adCBB43C99131c743B9Aba15Ff3040/logo.png"
      },
      LGCY: {
        chainId: 43114,
        address: "0x548A24D7eB18ea8A771645651EE799807d41F2dF",
        decimals: 18,
        name: "LGCY Network",
        symbol: "LGCY",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x548A24D7eB18ea8A771645651EE799807d41F2dF/logo.png"
      },
      LAR: {
        chainId: 43114,
        address: "0xc162e489C7f39676F6376CA79df3e728f101a895",
        decimals: 18,
        name: "Linkart",
        symbol: "LAR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xc162e489C7f39676F6376CA79df3e728f101a895/logo.png"
      },
      LID: {
        chainId: 43114,
        address: "0xB9b00fbac0F8B7c25a360664CE0Bf819771B4144",
        decimals: 18,
        name: "Liquidity Dividends Protocol",
        symbol: "LID",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xB9b00fbac0F8B7c25a360664CE0Bf819771B4144/logo.png"
      },
      LPT: {
        chainId: 43114,
        address: "0x2c67EC45B2E7138823dee0576D0d17Ac6Aa36b74",
        decimals: 18,
        name: "Livepeer Token",
        symbol: "LPT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x2c67EC45B2E7138823dee0576D0d17Ac6Aa36b74/logo.png"
      },
      LOC: {
        chainId: 43114,
        address: "0xb7617ad97645729f41cfd969312532e080f03864",
        decimals: 18,
        name: "LockChain",
        symbol: "LOC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xb7617ad97645729f41cfd969312532e080f03864/logo.png"
      },
      LOOM: {
        chainId: 43114,
        address: "0xfA178938Da2d58e55e52dc6dB92B99d9B2102EaE",
        decimals: 18,
        name: "LoomToken",
        symbol: "LOOM",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xfA178938Da2d58e55e52dc6dB92B99d9B2102EaE/logo.png"
      },
      LRC: {
        chainId: 43114,
        address: "0x628A9639cc78F46604A625452C0242c7B487BA3c",
        decimals: 18,
        name: "LoopringCoin V2",
        symbol: "LRC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x628A9639cc78F46604A625452C0242c7B487BA3c/logo.png"
      },
      LUA: {
        chainId: 43114,
        address: "0xeCd99fe115553493C6BF41C27da69E131766baAd",
        decimals: 18,
        name: "LuaToken",
        symbol: "LUA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xeCd99fe115553493C6BF41C27da69E131766baAd/logo.png"
      },
      LYXe: {
        chainId: 43114,
        address: "0xcd82B8f5f145abb08f8c495BDB675d1Ac4D40Eb2",
        decimals: 18,
        name: "LUKSO Token",
        symbol: "LYXe",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xcd82B8f5f145abb08f8c495BDB675d1Ac4D40Eb2/logo.png"
      },
      LMY: {
        chainId: 43114,
        address: "0x8a86e6dC6611c34d5c92fC563f426D2E378b3f1C",
        decimals: 18,
        name: "Lunch Money",
        symbol: "LMY",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8a86e6dC6611c34d5c92fC563f426D2E378b3f1C/logo.png"
      },
      MCX: {
        chainId: 43114,
        address: "0x8CFD9b30B18B3aF9Ce905561F749626ef06B1717",
        decimals: 18,
        name: "MachiX Token",
        symbol: "MCX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8CFD9b30B18B3aF9Ce905561F749626ef06B1717/logo.png"
      },
      MAHA: {
        chainId: 43114,
        address: "0xb0cb6B9C9B47a3974044AE906E8865165D2e0889",
        decimals: 18,
        name: "MahaDAO",
        symbol: "MAHA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xb0cb6B9C9B47a3974044AE906E8865165D2e0889/logo.png"
      },
      MFT: {
        chainId: 43114,
        address: "0x254Aa21D2996400b19CeE93623C307D6E973Ea3f",
        decimals: 18,
        name: "Mainframe Token",
        symbol: "MFT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x254Aa21D2996400b19CeE93623C307D6E973Ea3f/logo.png"
      },
      OM: {
        chainId: 43114,
        address: "0x33d6584872635e1BA681Ad814B98b57198cf33eF",
        decimals: 18,
        name: "MANTRA DAO",
        symbol: "OM",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x33d6584872635e1BA681Ad814B98b57198cf33eF/logo.png"
      },
      POND: {
        chainId: 43114,
        address: "0xbeeA21cC5D10e21dF6aB42Bd2D5e748e4EF59293",
        decimals: 18,
        name: "Marlin POND",
        symbol: "POND",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xbeeA21cC5D10e21dF6aB42Bd2D5e748e4EF59293/logo.png"
      },
      MATH: {
        chainId: 43114,
        address: "0x374C62a3B07350de41C4A95c4094474f84d7BF66",
        decimals: 18,
        name: "MATH Token",
        symbol: "MATH",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x374C62a3B07350de41C4A95c4094474f84d7BF66/logo.png"
      },
      MATIC: {
        chainId: 43114,
        address: "0x885ca6663E1E19DAD31c1e08D9958a2b8F538D53",
        decimals: 18,
        name: "Matic Token",
        symbol: "MATIC",
        website: "https://polygon.technology/",
        description: "The MATIC token serves dual purposes: securing the Polygon network via staking and being used for the payment of transaction fees.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x885ca6663E1E19DAD31c1e08D9958a2b8F538D53/logo.png"
      },
      MCB: {
        chainId: 43114,
        address: "0xD4355F4608277a616111B35A77E6C58F4B4B69c6",
        decimals: 18,
        name: "MCDEX Token",
        symbol: "MCB",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xD4355F4608277a616111B35A77E6C58F4B4B69c6/logo.png"
      },
      MDT: {
        chainId: 43114,
        address: "0x66a41BAD9103435c57E1dABE10093Dc5a19ee99f",
        decimals: 18,
        name: "Measurable Data Token",
        symbol: "MDT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x66a41BAD9103435c57E1dABE10093Dc5a19ee99f/logo.png"
      },
      MEGA: {
        chainId: 43114,
        address: "0x0C452CCc765Ac4A5d90E40585487c482597dFDdE",
        decimals: 18,
        name: "MegaCryptoPolis MEGA Token",
        symbol: "MEGA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x0C452CCc765Ac4A5d90E40585487c482597dFDdE/logo.png"
      },
      MLN: {
        chainId: 43114,
        address: "0x2bD2e0C3d39d6c82EaCA300958aa2E4be6740223",
        decimals: 18,
        name: "Melon Token",
        symbol: "MLN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x2bD2e0C3d39d6c82EaCA300958aa2E4be6740223/logo.png"
      },
      LOCK: {
        chainId: 43114,
        address: "0xDC59a3AC96dc1e86bB93Ed0248fB4bA6127BA64c",
        decimals: 18,
        name: "Meridian Network",
        symbol: "LOCK",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xDC59a3AC96dc1e86bB93Ed0248fB4bA6127BA64c/logo.png"
      },
      MTA: {
        chainId: 43114,
        address: "0x61EDA5B986b9da6A67a2a128e67ee7CED890DEAb",
        decimals: 18,
        name: "Meta",
        symbol: "MTA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x61EDA5B986b9da6A67a2a128e67ee7CED890DEAb/logo.png"
      },
      eMTRG: {
        chainId: 43114,
        address: "0x99B1b197D53511929A082EE66e7aC7E23257a4c4",
        decimals: 18,
        name: "Meter Governance mapped by Meter.io",
        symbol: "eMTRG",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x99B1b197D53511929A082EE66e7aC7E23257a4c4/logo.png"
      },
      MET: {
        chainId: 43114,
        address: "0x74F691fe2F89055cb1E641b840C8e7f12552dd6A",
        decimals: 18,
        name: "Metronome",
        symbol: "MET",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x74F691fe2F89055cb1E641b840C8e7f12552dd6A/logo.png"
      },
      MIC: {
        chainId: 43114,
        address: "0x3C4dd53806347D37aF1F9CCA08C5aCA7363abADe",
        decimals: 18,
        name: "MIC",
        symbol: "MIC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3C4dd53806347D37aF1F9CCA08C5aCA7363abADe/logo.png"
      },
      MILK2: {
        chainId: 43114,
        address: "0x1A4a456DcB9415D6FBac1148A656BD93a78c43e1",
        decimals: 18,
        name: "MilkyWay Token by SpaceSwap v2",
        symbol: "MILK2",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x1A4a456DcB9415D6FBac1148A656BD93a78c43e1/logo.png"
      },
      MINI: {
        chainId: 43114,
        address: "0xF553b0fA370E11d945D1eDA4267437C9e4C51D8a",
        decimals: 18,
        name: "MINISWAP",
        symbol: "MINI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xF553b0fA370E11d945D1eDA4267437C9e4C51D8a/logo.png"
      },
      MIS: {
        chainId: 43114,
        address: "0x7823dAa7A5B86dd4E7a54c1ae70A14cf15758316",
        decimals: 18,
        name: "MIS",
        symbol: "MIS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x7823dAa7A5B86dd4E7a54c1ae70A14cf15758316/logo.png"
      },
      MXT: {
        chainId: 43114,
        address: "0x77d208c2b37051957C2B7D88a3682C280d70e7e6",
        decimals: 18,
        name: "MixTrust",
        symbol: "MXT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x77d208c2b37051957C2B7D88a3682C280d70e7e6/logo.png"
      },
      mUSD: {
        chainId: 43114,
        address: "0x4D06D5296c0BE7857a9C43B5EB1770909d40CB25",
        decimals: 18,
        name: "mStable USD",
        symbol: "mUSD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x4D06D5296c0BE7857a9C43B5EB1770909d40CB25/logo.png"
      },
      MYB: {
        chainId: 43114,
        address: "0x3D7af5Cc0143402A65d0dDC7E4C559fed65AE78c",
        decimals: 18,
        name: "MyBit",
        symbol: "MYB",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3D7af5Cc0143402A65d0dDC7E4C559fed65AE78c/logo.png"
      },
      NEXO: {
        chainId: 43114,
        address: "0xfe87Aba89d58da09d5bC13b4A1dC873C1b901806",
        decimals: 18,
        name: "Nexo",
        symbol: "NEXO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xfe87Aba89d58da09d5bC13b4A1dC873C1b901806/logo.png"
      },
      NBT: {
        chainId: 43114,
        address: "0x3E6867bB936e83BC686A89fdBfab3FD0D6ee3DE8",
        decimals: 18,
        name: "NIX Bridge Token",
        symbol: "NBT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3E6867bB936e83BC686A89fdBfab3FD0D6ee3DE8/logo.png"
      },
      Nsure: {
        chainId: 43114,
        address: "0x6169F17c609D14F253d0d54a96df6eFD2A44147a",
        decimals: 18,
        name: "Nsure Network Token",
        symbol: "Nsure",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x6169F17c609D14F253d0d54a96df6eFD2A44147a/logo.png"
      },
      NU: {
        chainId: 43114,
        address: "0x32141622A7C79790176670ffFcA17154678A9A24",
        decimals: 18,
        name: "NuCypher",
        symbol: "NU",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x32141622A7C79790176670ffFcA17154678A9A24/logo.png"
      },
      NMR: {
        chainId: 43114,
        address: "0x57541c10591Df7568BDc9D93f769d44eAc1e3c3a",
        decimals: 18,
        name: "Numeraire",
        symbol: "NMR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x57541c10591Df7568BDc9D93f769d44eAc1e3c3a/logo.png"
      },
      OCEAN: {
        chainId: 43114,
        address: "0x0057371Cd534577b6040E140654DE0958116Cf3A",
        decimals: 18,
        name: "Ocean Token",
        symbol: "OCEAN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x0057371Cd534577b6040E140654DE0958116Cf3A/logo.png"
      },
      OCTO: {
        chainId: 43114,
        address: "0xC0735F8b43B6879FED7070044211bFcd9C3d633B",
        decimals: 18,
        name: "Octo.fi",
        symbol: "OCTO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xC0735F8b43B6879FED7070044211bFcd9C3d633B/logo.png"
      },
      "OM-OM Token": {
        chainId: 43114,
        address: "0x27850FcbCfF7DAFB16176144B9193C6D310DCF72",
        decimals: 18,
        name: "OM Token",
        symbol: "OM",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x27850FcbCfF7DAFB16176144B9193C6D310DCF72/logo.png"
      },
      OMG: {
        chainId: 43114,
        address: "0x276C6670b97F22cE7Ad754b08CB330DECb6a3332",
        decimals: 18,
        name: "OMGToken",
        symbol: "OMG",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x276C6670b97F22cE7Ad754b08CB330DECb6a3332/logo.png"
      },
      ONG: {
        chainId: 43114,
        address: "0xbAeE145A92A0c7C2FEd63d62d61E9B7eAe0396d9",
        decimals: 18,
        name: "onG",
        symbol: "ONG",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xbAeE145A92A0c7C2FEd63d62d61E9B7eAe0396d9/logo.png"
      },
      OPT: {
        chainId: 43114,
        address: "0x2378B1EEb109bd40FF585AB9A92aC3Fd9E90cee3",
        decimals: 18,
        name: "Open Predict Token",
        symbol: "OPT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x2378B1EEb109bd40FF585AB9A92aC3Fd9E90cee3/logo.png"
      },
      ORAI: {
        chainId: 43114,
        address: "0xD9A0B28305951758b9CdBbf7e18CC85B868f973C",
        decimals: 18,
        name: "Oraichain Token",
        symbol: "ORAI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xD9A0B28305951758b9CdBbf7e18CC85B868f973C/logo.png"
      },
      OGN: {
        chainId: 43114,
        address: "0x9A1712dBEd062dB70c6c4C235Be9dCd10a9Dac59",
        decimals: 18,
        name: "OriginToken",
        symbol: "OGN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x9A1712dBEd062dB70c6c4C235Be9dCd10a9Dac59/logo.png"
      },
      ORO: {
        chainId: 43114,
        address: "0x2796213bd26CE2270839b6d40E8D5904d8cDAA42",
        decimals: 18,
        name: "ORO Token",
        symbol: "ORO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x2796213bd26CE2270839b6d40E8D5904d8cDAA42/logo.png"
      },
      OWL: {
        chainId: 43114,
        address: "0xe49403892253A3d7952A45d43C630126D0b8D1f2",
        decimals: 18,
        name: "OWL Token",
        symbol: "OWL",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xe49403892253A3d7952A45d43C630126D0b8D1f2/logo.png"
      },
      PAMP: {
        chainId: 43114,
        address: "0x5b1cdDC4e6C9E6864832954d0cF43f91952CD7B9",
        decimals: 18,
        name: "Pamp Network",
        symbol: "PAMP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5b1cdDC4e6C9E6864832954d0cF43f91952CD7B9/logo.png"
      },
      PAN: {
        chainId: 43114,
        address: "0xF6Ef95FaD0CdddfCCC312679779516107a980E0a",
        decimals: 18,
        name: "Panvala pan",
        symbol: "PAN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xF6Ef95FaD0CdddfCCC312679779516107a980E0a/logo.png"
      },
      PAR: {
        chainId: 43114,
        address: "0x53b464Bb9EfEBe9b314f97e631b47e1C0300FE21",
        decimals: 18,
        name: "Parachute",
        symbol: "PAR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x53b464Bb9EfEBe9b314f97e631b47e1C0300FE21/logo.png"
      },
      PARETO: {
        chainId: 43114,
        address: "0x54266edA68834321B5BB81a8A8a48d5459c92456",
        decimals: 18,
        name: "Pareto Network Token",
        symbol: "PARETO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x54266edA68834321B5BB81a8A8a48d5459c92456/logo.png"
      },
      PRQ: {
        chainId: 43114,
        address: "0x6A8E6794ab77C63c3C90A62F1088F16AC61F463D",
        decimals: 18,
        name: "Parsiq Token",
        symbol: "PRQ",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x6A8E6794ab77C63c3C90A62F1088F16AC61F463D/logo.png"
      },
      PAXG: {
        chainId: 43114,
        address: "0x1687b16087B576E403C8d6926fBc0798e48FD0de",
        decimals: 18,
        name: "Paxos Gold",
        symbol: "PAXG",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x1687b16087B576E403C8d6926fBc0798e48FD0de/logo.png"
      },
      PAX: {
        chainId: 43114,
        address: "0x403985fD6628E44b6fca9876575b9503cB80A47A",
        decimals: 18,
        name: "Paxos Standard",
        symbol: "PAX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x403985fD6628E44b6fca9876575b9503cB80A47A/logo.png"
      },
      PERX: {
        chainId: 43114,
        address: "0x02f8a8e78E02768A5c2f9Cf1Bfa8Ec2f821E869d",
        decimals: 18,
        name: "PeerEx Network",
        symbol: "PERX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x02f8a8e78E02768A5c2f9Cf1Bfa8Ec2f821E869d/logo.png"
      },
      PERL: {
        chainId: 43114,
        address: "0x8f4Dee85B841723bdCEcdc9Ed68Cda662f56e82A",
        decimals: 18,
        name: "Perlin",
        symbol: "PERL",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8f4Dee85B841723bdCEcdc9Ed68Cda662f56e82A/logo.png"
      },
      PERP: {
        chainId: 43114,
        address: "0x88Af8D172e64326A71C1a7756CB4F6125D98F2A5",
        decimals: 18,
        name: "Perpetual",
        symbol: "PERP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x88Af8D172e64326A71C1a7756CB4F6125D98F2A5/logo.png"
      },
      PHA: {
        chainId: 43114,
        address: "0x5535483ed8781784b1b1cC431c4dc9c25D39eCB5",
        decimals: 18,
        name: "Phala",
        symbol: "PHA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5535483ed8781784b1b1cC431c4dc9c25D39eCB5/logo.png"
      },
      PICKLE: {
        chainId: 43114,
        address: "0xD9eD8258c3ECBB5E4ECf3b91dc0ca693e80934CC",
        decimals: 18,
        name: "PickleToken",
        symbol: "PICKLE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xD9eD8258c3ECBB5E4ECf3b91dc0ca693e80934CC/logo.png"
      },
      PLR: {
        chainId: 43114,
        address: "0xD523c90aCb4415A48e1504BaAd3a2Aa8fd86dEF9",
        decimals: 18,
        name: "PILLAR",
        symbol: "PLR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xD523c90aCb4415A48e1504BaAd3a2Aa8fd86dEF9/logo.png"
      },
      PPAY: {
        chainId: 43114,
        address: "0x3B295608d13083270214C0778624BCebCa5df3DA",
        decimals: 18,
        name: "Plasma",
        symbol: "PPAY",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3B295608d13083270214C0778624BCebCa5df3DA/logo.png"
      },
      PLOT: {
        chainId: 43114,
        address: "0x5643c59d08d9ac382EeB224894608D52c7fcd908",
        decimals: 18,
        name: "PLOT",
        symbol: "PLOT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5643c59d08d9ac382EeB224894608D52c7fcd908/logo.png"
      },
      PLU: {
        chainId: 43114,
        address: "0x680e3f5d629ECF176150E343D9EfA1aA1062659D",
        decimals: 18,
        name: "Pluton",
        symbol: "PLU",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x680e3f5d629ECF176150E343D9EfA1aA1062659D/logo.png"
      },
      PLT: {
        chainId: 43114,
        address: "0xBc6e632244FD9a79e863B87841FFD9962B725895",
        decimals: 18,
        name: "PlutusDeFi",
        symbol: "PLT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xBc6e632244FD9a79e863B87841FFD9962B725895/logo.png"
      },
      PNT: {
        chainId: 43114,
        address: "0xa4EFc8d7007851CFE5313c02aC2516f33f199364",
        decimals: 18,
        name: "pNetwork Token",
        symbol: "PNT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xa4EFc8d7007851CFE5313c02aC2516f33f199364/logo.png"
      },
      POA20: {
        chainId: 43114,
        address: "0x153446d731f6a23661BebCD3e86431c36bA440fB",
        decimals: 18,
        name: "POA ERC20 on Foundation",
        symbol: "POA20",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x153446d731f6a23661BebCD3e86431c36bA440fB/logo.png"
      },
      PBR: {
        chainId: 43114,
        address: "0x3c09D70fB667e2B680d4FeE2951d6BCD3f8Fbaf9",
        decimals: 18,
        name: "PolkaBridge",
        symbol: "PBR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3c09D70fB667e2B680d4FeE2951d6BCD3f8Fbaf9/logo.png"
      },
      CVR: {
        chainId: 43114,
        address: "0x606E714710b0426d3E786394Ada61d5B1492C39f",
        decimals: 18,
        name: "PolkaCover",
        symbol: "CVR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x606E714710b0426d3E786394Ada61d5B1492C39f/logo.png"
      },
      POLS: {
        chainId: 43114,
        address: "0xE1463E8991c8A62e64b77b5Fb6B22F190344C2A9",
        decimals: 18,
        name: "PolkastarterToken",
        symbol: "POLS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xE1463E8991c8A62e64b77b5Fb6B22F190344C2A9/logo.png"
      },
      POLY: {
        chainId: 43114,
        address: "0x1676C3D77ac75741678d6Ca28f288352a57D0973",
        decimals: 18,
        name: "Polymath",
        symbol: "POLY",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x1676C3D77ac75741678d6Ca28f288352a57D0973/logo.png"
      },
      PIPT: {
        chainId: 43114,
        address: "0x606f5C16c01372C28345de54cf6F4ff901d934B6",
        decimals: 18,
        name: "Power Index Pool Token",
        symbol: "PIPT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x606f5C16c01372C28345de54cf6F4ff901d934B6/logo.png"
      },
      PTF: {
        chainId: 43114,
        address: "0x01cC32A282050740a88c43DAc0B56bf90f6435eF",
        decimals: 18,
        name: "PowerTrade Fuel Token",
        symbol: "PTF",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x01cC32A282050740a88c43DAc0B56bf90f6435eF/logo.png"
      },
      PRDX: {
        chainId: 43114,
        address: "0x693656BE08A4C74236110ccdf4da42Ef31379E25",
        decimals: 18,
        name: "Predix Network",
        symbol: "PRDX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x693656BE08A4C74236110ccdf4da42Ef31379E25/logo.png"
      },
      PROPS: {
        chainId: 43114,
        address: "0x2A5A930d00110a4970bC68cF4Bcb207588cA0D2d",
        decimals: 18,
        name: "Props Token",
        symbol: "PROPS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x2A5A930d00110a4970bC68cF4Bcb207588cA0D2d/logo.png"
      },
      pBTC: {
        chainId: 43114,
        address: "0xe6338226c321f3089c645ab526f844713C2F7Be3",
        decimals: 18,
        name: "pTokens BTC",
        symbol: "pBTC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xe6338226c321f3089c645ab526f844713C2F7Be3/logo.png"
      },
      NPXS: {
        chainId: 43114,
        address: "0x07d83B7101c540fcC1720c3d51923f218Ae9b6Ac",
        decimals: 18,
        name: "Pundi X Token",
        symbol: "NPXS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x07d83B7101c540fcC1720c3d51923f218Ae9b6Ac/logo.png"
      },
      QDAO: {
        chainId: 43114,
        address: "0xc57719864387B11B8915eDE8f84A8d2CCA282451",
        decimals: 18,
        name: "Q DAO Governance token v1.0",
        symbol: "QDAO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xc57719864387B11B8915eDE8f84A8d2CCA282451/logo.png"
      },
      eQUAD: {
        chainId: 43114,
        address: "0xA8990B4FA2ba67f3B14814Be106B88f251397D3F",
        decimals: 18,
        name: "QuadrantProtocol",
        symbol: "eQUAD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xA8990B4FA2ba67f3B14814Be106B88f251397D3F/logo.png"
      },
      QNT: {
        chainId: 43114,
        address: "0x4fcC1E009ef85B35d39B3Fe533d27751e4CFa8f7",
        decimals: 18,
        name: "Quant",
        symbol: "QNT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x4fcC1E009ef85B35d39B3Fe533d27751e4CFa8f7/logo.png"
      },
      QKC: {
        chainId: 43114,
        address: "0xa9B41c348717F755101189b907F37Ee4ec703E8C",
        decimals: 18,
        name: "QuarkChain Token",
        symbol: "QKC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xa9B41c348717F755101189b907F37Ee4ec703E8C/logo.png"
      },
      QRX: {
        chainId: 43114,
        address: "0xBB9a99de392Fb34d9f4F59c2b7Ea72cE7f1570e4",
        decimals: 18,
        name: "QuiverX",
        symbol: "QRX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xBB9a99de392Fb34d9f4F59c2b7Ea72cE7f1570e4/logo.png"
      },
      RAE: {
        chainId: 43114,
        address: "0x4732Cc19937e4DaF4BDcA6698f2552b2E9F04813",
        decimals: 18,
        name: "RAE Token",
        symbol: "RAE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x4732Cc19937e4DaF4BDcA6698f2552b2E9F04813/logo.png"
      },
      RDN: {
        chainId: 43114,
        address: "0x4A8918352cCB78CF6bd34Bf89D501d5578ee6504",
        decimals: 18,
        name: "Raiden Token",
        symbol: "RDN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x4A8918352cCB78CF6bd34Bf89D501d5578ee6504/logo.png"
      },
      RAMP: {
        chainId: 43114,
        address: "0x182795eE69b458930633A60DA79E8F9787A4828c",
        decimals: 18,
        name: "RAMP DEFI",
        symbol: "RAMP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x182795eE69b458930633A60DA79E8F9787A4828c/logo.png"
      },
      RGT: {
        chainId: 43114,
        address: "0x337e4Ff263BC2E8dFb9a1a8a1AF883f0AdF953f0",
        decimals: 18,
        name: "Rari Governance Token",
        symbol: "RGT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x337e4Ff263BC2E8dFb9a1a8a1AF883f0AdF953f0/logo.png"
      },
      RARI: {
        chainId: 43114,
        address: "0x10D56b868A32670f27478Ac628a2376A235F9bB8",
        decimals: 18,
        name: "Rarible",
        symbol: "RARI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x10D56b868A32670f27478Ac628a2376A235F9bB8/logo.png"
      },
      REEF: {
        chainId: 43114,
        address: "0x90557E63339cAed393ee15Cb6236Bb746DeD11D3",
        decimals: 18,
        name: "Reef.finance",
        symbol: "REEF",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x90557E63339cAed393ee15Cb6236Bb746DeD11D3/logo.png"
      },
      REL: {
        chainId: 43114,
        address: "0x8FF91E20Aab3D5A21b0c5ecd45FC942c52f578b3",
        decimals: 18,
        name: "Relevant",
        symbol: "REL",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8FF91E20Aab3D5A21b0c5ecd45FC942c52f578b3/logo.png"
      },
      REN: {
        chainId: 43114,
        address: "0xAc6C38f2DeC391b478144Ae7F078D08B08d0a284",
        decimals: 18,
        name: "Republic Token",
        symbol: "REN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xAc6C38f2DeC391b478144Ae7F078D08B08d0a284/logo.png"
      },
      REPv2: {
        chainId: 43114,
        address: "0xBe7AFAa2833d7F461D8751f1f46bF259fc4459C6",
        decimals: 18,
        name: "Reputation",
        symbol: "REPv2",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xBe7AFAa2833d7F461D8751f1f46bF259fc4459C6/logo.png"
      },
      REP: {
        chainId: 43114,
        address: "0xb9924372Ddc7e7F13757C8B9ae0F03906a684D65",
        decimals: 18,
        name: "Reputation",
        symbol: "REP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xb9924372Ddc7e7F13757C8B9ae0F03906a684D65/logo.png"
      },
      REQ: {
        chainId: 43114,
        address: "0x8E729Ad67D81d220B7aB6e00440f785bD08187fE",
        decimals: 18,
        name: "Request Token",
        symbol: "REQ",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8E729Ad67D81d220B7aB6e00440f785bD08187fE/logo.png"
      },
      RSR: {
        chainId: 43114,
        address: "0x91C20a30ebA9795BBdEd46df9ad5b215DFa04fcD",
        decimals: 18,
        name: "Reserve Rights",
        symbol: "RSR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x91C20a30ebA9795BBdEd46df9ad5b215DFa04fcD/logo.png"
      },
      RFuel: {
        chainId: 43114,
        address: "0x3361a925eCBa04e4De70C0Fa6310e710a2079a28",
        decimals: 18,
        name: "Rio Fuel Token",
        symbol: "RFuel",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3361a925eCBa04e4De70C0Fa6310e710a2079a28/logo.png"
      },
      RCN: {
        chainId: 43114,
        address: "0xd2427C8a8dA88c0Ea24370A971Dad6EEd2ff63b7",
        decimals: 18,
        name: "Ripio Credit Network Token",
        symbol: "RCN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xd2427C8a8dA88c0Ea24370A971Dad6EEd2ff63b7/logo.png"
      },
      RWS: {
        chainId: 43114,
        address: "0x0Cb3Fe222303e1419EE73216e90322ae4635Fc5E",
        decimals: 18,
        name: "Robonomics Web Services - V1",
        symbol: "RWS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x0Cb3Fe222303e1419EE73216e90322ae4635Fc5E/logo.png"
      },
      RPL: {
        chainId: 43114,
        address: "0x5cDAD843078930C8fEB1d50bE474acCf11B7ada1",
        decimals: 18,
        name: "Rocket Pool",
        symbol: "RPL",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5cDAD843078930C8fEB1d50bE474acCf11B7ada1/logo.png"
      },
      ROOK: {
        chainId: 43114,
        address: "0x052c1e9de172366F30F300e805707a6520615977",
        decimals: 18,
        name: "ROOK",
        symbol: "ROOK",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x052c1e9de172366F30F300e805707a6520615977/logo.png"
      },
      RBC: {
        chainId: 43114,
        address: "0x88f87bb181cd974f3AaE5002F5E6D4E1EB463f9C",
        decimals: 18,
        name: "Rubic",
        symbol: "RBC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x88f87bb181cd974f3AaE5002F5E6D4E1EB463f9C/logo.png"
      },
      RVT: {
        chainId: 43114,
        address: "0x26526EBD75Ed27d5B553d06d6bcE8210bA0bc50b",
        decimals: 18,
        name: "RvT",
        symbol: "RVT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x26526EBD75Ed27d5B553d06d6bcE8210bA0bc50b/logo.png"
      },
      SAFE2: {
        chainId: 43114,
        address: "0x2a1F8a24575261919f839f4254FdE9bc4b8edE7A",
        decimals: 18,
        name: "SAFE2",
        symbol: "SAFE2",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x2a1F8a24575261919f839f4254FdE9bc4b8edE7A/logo.png"
      },
      SAND: {
        chainId: 43114,
        address: "0xA29d60Ef9706571bBDa9b505A117e1D36a0D683C",
        decimals: 18,
        name: "SAND",
        symbol: "SAND",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xA29d60Ef9706571bBDa9b505A117e1D36a0D683C/logo.png"
      },
      SAN: {
        chainId: 43114,
        address: "0x8ae71C763700F22f1bb137F1D8767826d7f02d3a",
        decimals: 18,
        name: "SANtiment network token",
        symbol: "SAN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8ae71C763700F22f1bb137F1D8767826d7f02d3a/logo.png"
      },
      KEY: {
        chainId: 43114,
        address: "0x858950767B333d45B90C28709e97605e1829f907",
        decimals: 18,
        name: "SelfKey",
        symbol: "KEY",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x858950767B333d45B90C28709e97605e1829f907/logo.png"
      },
      SHAKE: {
        chainId: 43114,
        address: "0x0680298EEA69e413eD02b393Fc269C2757033Ab0",
        decimals: 18,
        name: "SHAKE token by SpaceSwap v2",
        symbol: "SHAKE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x0680298EEA69e413eD02b393Fc269C2757033Ab0/logo.png"
      },
      SHIP: {
        chainId: 43114,
        address: "0xCCD9a2fa0A31506E5D881981B702e9476feFAE56",
        decimals: 18,
        name: "ShipChain SHIP",
        symbol: "SHIP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xCCD9a2fa0A31506E5D881981B702e9476feFAE56/logo.png"
      },
      SPI: {
        chainId: 43114,
        address: "0xDCd9b9b00a7bA3afb6E8F5058945a1A946810D29",
        decimals: 18,
        name: "Shopping.io",
        symbol: "SPI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xDCd9b9b00a7bA3afb6E8F5058945a1A946810D29/logo.png"
      },
      ST: {
        chainId: 43114,
        address: "0x7De7dFE1A594BCBab1C0cd2AE0a530A019cE14Ed",
        decimals: 18,
        name: "Simple Token",
        symbol: "ST",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x7De7dFE1A594BCBab1C0cd2AE0a530A019cE14Ed/logo.png"
      },
      SRN: {
        chainId: 43114,
        address: "0x3365A191353a7670CaAC8B4BE19C2F34DcD07320",
        decimals: 18,
        name: "SIRIN",
        symbol: "SRN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3365A191353a7670CaAC8B4BE19C2F34DcD07320/logo.png"
      },
      SNOW: {
        chainId: 43114,
        address: "0x40eB65be917e7A5AE529B2e1279E4b548A36C465",
        decimals: 18,
        name: "SnowSwap",
        symbol: "SNOW",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x40eB65be917e7A5AE529B2e1279E4b548A36C465/logo.png"
      },
      XOR: {
        chainId: 43114,
        address: "0x307A2a7127429f0C24c607E4633d17B6E98E8372",
        decimals: 18,
        name: "Sora Token",
        symbol: "XOR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x307A2a7127429f0C24c607E4633d17B6E98E8372/logo.png"
      },
      VAL: {
        chainId: 43114,
        address: "0x7583FD3Aa918896700F4F106Df7387e1943a31aa",
        decimals: 18,
        name: "Sora Validator Token",
        symbol: "VAL",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x7583FD3Aa918896700F4F106Df7387e1943a31aa/logo.png"
      },
      SPC: {
        chainId: 43114,
        address: "0x9E692659CdEDf13e85eADC38fCf7bC9F6329Db69",
        decimals: 18,
        name: "SpaceChainV2",
        symbol: "SPC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x9E692659CdEDf13e85eADC38fCf7bC9F6329Db69/logo.png"
      },
      SPANK: {
        chainId: 43114,
        address: "0xAdcE0b08127EFd11d4A6CDAA82feDe77b0Fa57F9",
        decimals: 18,
        name: "SPANK",
        symbol: "SPANK",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xAdcE0b08127EFd11d4A6CDAA82feDe77b0Fa57F9/logo.png"
      },
      SFI: {
        chainId: 43114,
        address: "0xC386282f66c090A1e42c39e83dBD2c2d447dE506",
        decimals: 18,
        name: "Spice",
        symbol: "SFI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xC386282f66c090A1e42c39e83dBD2c2d447dE506/logo.png"
      },
      SPICE: {
        chainId: 43114,
        address: "0x9F7841A719e26cE4Ab7374806857f91C83F05f33",
        decimals: 18,
        name: "Spice",
        symbol: "SPICE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x9F7841A719e26cE4Ab7374806857f91C83F05f33/logo.png"
      },
      SPD: {
        chainId: 43114,
        address: "0x3BfCDB1Ec986430ffF0e35C00D71888D305E48f3",
        decimals: 18,
        name: "SPINDLE",
        symbol: "SPD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3BfCDB1Ec986430ffF0e35C00D71888D305E48f3/logo.png"
      },
      STBZ: {
        chainId: 43114,
        address: "0x5a21a9e09667A67a898dE061D4bC61e92f20404e",
        decimals: 18,
        name: "Stabilize Token",
        symbol: "STBZ",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5a21a9e09667A67a898dE061D4bC61e92f20404e/logo.png"
      },
      STAKE: {
        chainId: 43114,
        address: "0x540641C9B0fcb979496A8c03C711033239C841d5",
        decimals: 18,
        name: "STAKE",
        symbol: "STAKE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x540641C9B0fcb979496A8c03C711033239C841d5/logo.png"
      },
      SDT: {
        chainId: 43114,
        address: "0xC19CD5D80B52118A99B23941Eaf1bb58Bb79f1fa",
        decimals: 18,
        name: "Stake DAO Token",
        symbol: "SDT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xC19CD5D80B52118A99B23941Eaf1bb58Bb79f1fa/logo.png"
      },
      STA: {
        chainId: 43114,
        address: "0x8194f4FE1fb50A945eB5dB226689066BE5E208D4",
        decimals: 18,
        name: "Statera",
        symbol: "STA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8194f4FE1fb50A945eB5dB226689066BE5E208D4/logo.png"
      },
      STONK: {
        chainId: 43114,
        address: "0x571FB151CC10F76d5A9a4b48f6D568Fb7E1eEbF8",
        decimals: 18,
        name: "STONK",
        symbol: "STONK",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x571FB151CC10F76d5A9a4b48f6D568Fb7E1eEbF8/logo.png"
      },
      STMX: {
        chainId: 43114,
        address: "0xD6C7f1C0b553B820739A9bEFa30e1A4990DB67dC",
        decimals: 18,
        name: "StormX",
        symbol: "STMX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xD6C7f1C0b553B820739A9bEFa30e1A4990DB67dC/logo.png"
      },
      STX: {
        chainId: 43114,
        address: "0x232F79C05CB34de19C79104068E76452B624baB3",
        decimals: 18,
        name: "Stox",
        symbol: "STX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x232F79C05CB34de19C79104068E76452B624baB3/logo.png"
      },
      STM: {
        chainId: 43114,
        address: "0xA62CBCB4F5485Ee6EF6B44083c561f9E1f2B740a",
        decimals: 18,
        name: "Streamity",
        symbol: "STM",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xA62CBCB4F5485Ee6EF6B44083c561f9E1f2B740a/logo.png"
      },
      DATA: {
        chainId: 43114,
        address: "0x7b73CEEed704556355D03aF8888da3bCD4434CF9",
        decimals: 18,
        name: "Streamr DATAcoin",
        symbol: "DATA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x7b73CEEed704556355D03aF8888da3bCD4434CF9/logo.png"
      },
      STRONG: {
        chainId: 43114,
        address: "0xCf68248eeF35b725512724178Da55ad7DB59A5F1",
        decimals: 18,
        name: "Strong",
        symbol: "STRONG",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xCf68248eeF35b725512724178Da55ad7DB59A5F1/logo.png"
      },
      SURF: {
        chainId: 43114,
        address: "0xfa0bDf9dF8bb8b3d7687a44dAD2F69Bc7a7B294f",
        decimals: 18,
        name: "SURF.Finance",
        symbol: "SURF",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xfa0bDf9dF8bb8b3d7687a44dAD2F69Bc7a7B294f/logo.png"
      },
      SUSHIe: {
        chainId: 43114,
        address: "0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76",
        decimals: 18,
        name: "SushiToken",
        symbol: "SUSHI",
        website: "https://sushi.com/",
        description: "Sushi is the home of DeFi. Their community is building a comprehensive, decentralized trading platform for the future of finance. Swap, earn, stack yields, lend, borrow, leverage all on one decentralized, community driven platform.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc/logo.png"
      },
      SUSHI: {
        chainId: 43114,
        address: "0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc",
        decimals: 18,
        name: "SushiToken",
        symbol: "SUSHI",
        website: "https://sushi.com/",
        description: "Sushi is the home of DeFi. Their community is building a comprehensive, decentralized trading platform for the future of finance. Swap, earn, stack yields, lend, borrow, leverage all on one decentralized, community driven platform.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc/logo.png"
      },
      SWAG: {
        chainId: 43114,
        address: "0xE8ddE6E36ae86E3c61Dc13DFf908B4a12d50F754",
        decimals: 18,
        name: "Swag Token",
        symbol: "SWAG",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xE8ddE6E36ae86E3c61Dc13DFf908B4a12d50F754/logo.png"
      },
      SWFL: {
        chainId: 43114,
        address: "0x733793e8F93afD40d9322a4FBA46de661e4F8B83",
        decimals: 18,
        name: "Swapfolio",
        symbol: "SWFL",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x733793e8F93afD40d9322a4FBA46de661e4F8B83/logo.png"
      },
      SXP: {
        chainId: 43114,
        address: "0x3AfAD3EB65DeAf28f594958717530bC66D6Cdd1c",
        decimals: 18,
        name: "Swipe",
        symbol: "SXP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3AfAD3EB65DeAf28f594958717530bC66D6Cdd1c/logo.png"
      },
      ESH: {
        chainId: 43114,
        address: "0xCff97feeC839C59BA94FA453D47263a9Cf4d4C28",
        decimals: 18,
        name: "Switch",
        symbol: "ESH",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xCff97feeC839C59BA94FA453D47263a9Cf4d4C28/logo.png"
      },
      SYN: {
        chainId: 43114,
        address: "0x1f1E7c893855525b303f99bDF5c3c05Be09ca251",
        decimals: 18,
        name: "Synapse Protocol",
        symbol: "SYN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x09f60a231C989d0c5AdC9d3609936A3409885Bd0/logo.png"
      },
      SNX: {
        chainId: 43114,
        address: "0x68e44C4619db40ae1a0725e77C02587bC8fBD1c9",
        decimals: 18,
        name: "Synthetix Network Token",
        symbol: "SNX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x68e44C4619db40ae1a0725e77C02587bC8fBD1c9/logo.png"
      },
      TBTC: {
        chainId: 43114,
        address: "0x1c24D4ef397F6F8c80403f52E9D11Bef1D129a93",
        decimals: 18,
        name: "tBTC",
        symbol: "TBTC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x1c24D4ef397F6F8c80403f52E9D11Bef1D129a93/logo.png"
      },
      TEND: {
        chainId: 43114,
        address: "0x9D8CA87A15230b112D90f9eEE7C1C6fDAB92cAed",
        decimals: 18,
        name: "Tendies Token",
        symbol: "TEND",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x9D8CA87A15230b112D90f9eEE7C1C6fDAB92cAed/logo.png"
      },
      PAY: {
        chainId: 43114,
        address: "0xBdFc6443428DEcf3cCDc7472DF5d96c2FA8C2E70",
        decimals: 18,
        name: "TenX Pay Token",
        symbol: "PAY",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xBdFc6443428DEcf3cCDc7472DF5d96c2FA8C2E70/logo.png"
      },
      TVK: {
        chainId: 43114,
        address: "0xbE53F019a8786227E3D258A47a0D96BCf24A09A6",
        decimals: 18,
        name: "Terra Virtua Kolect",
        symbol: "TVK",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xbE53F019a8786227E3D258A47a0D96BCf24A09A6/logo.png"
      },
      USDT: {
        chainId: 43114,
        address: "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7",
        decimals: 6,
        name: "Tether USD (native)",
        symbol: "USDT",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        logoURI: "https://snowtrace.io/token/images/tether_32.png"
      },
      USDTo: {
        chainId: 43114,
        address: "0xde3A24028580884448a5397872046a019649b084",
        decimals: 6,
        name: "Tether USD (bridged)",
        symbol: "USDTo",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem. From Avalanche Bridge.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xde3A24028580884448a5397872046a019649b084/logo.png"
      },
      RUNE: {
        chainId: 43114,
        address: "0x390ba0fb0Bd3Aa2a5484001606329701148074e6",
        decimals: 18,
        name: "THORChain ETH.RUNE",
        symbol: "RUNE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x390ba0fb0Bd3Aa2a5484001606329701148074e6/logo.png"
      },
      TBX: {
        chainId: 43114,
        address: "0xbAb918cfBD3c53Ce1516E6AA97c8342B15c26BcC",
        decimals: 18,
        name: "Tokenbox",
        symbol: "TBX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xbAb918cfBD3c53Ce1516E6AA97c8342B15c26BcC/logo.png"
      },
      TOMOE: {
        chainId: 43114,
        address: "0x7657F9ee5f31868CcaC0EC4306a92B0E2F5660d2",
        decimals: 18,
        name: "TomoChain",
        symbol: "TOMOE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x7657F9ee5f31868CcaC0EC4306a92B0E2F5660d2/logo.png"
      },
      TORN: {
        chainId: 43114,
        address: "0x7CCF19824c351e57C00633b46bbbff495E12d89d",
        decimals: 18,
        name: "TornadoCash",
        symbol: "TORN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x7CCF19824c351e57C00633b46bbbff495E12d89d/logo.png"
      },
      DIS: {
        chainId: 43114,
        address: "0xf981547a1D9A0c59C9aba1e2b826BF01a2e5E263",
        decimals: 18,
        name: "TosDis",
        symbol: "DIS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xf981547a1D9A0c59C9aba1e2b826BF01a2e5E263/logo.png"
      },
      TRAC: {
        chainId: 43114,
        address: "0xdEA3Da33bDee64487358DB66d9AbC9EC256D1BFb",
        decimals: 18,
        name: "Trace Token",
        symbol: "TRAC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xdEA3Da33bDee64487358DB66d9AbC9EC256D1BFb/logo.png"
      },
      TNS: {
        chainId: 43114,
        address: "0x6b944c575376460edC27Be19c999654E5982D971",
        decimals: 18,
        name: "Transcodium",
        symbol: "TNS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x6b944c575376460edC27Be19c999654E5982D971/logo.png"
      },
      TRND: {
        chainId: 43114,
        address: "0x3a2d191AE83223ed0668d9AAF180Be147Ec05ad3",
        decimals: 18,
        name: "Trendering",
        symbol: "TRND",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3a2d191AE83223ed0668d9AAF180Be147Ec05ad3/logo.png"
      },
      TAUD: {
        chainId: 43114,
        address: "0x82913383A48712C6A876E611A0412395B86e74B1",
        decimals: 18,
        name: "TrueAUD",
        symbol: "TAUD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x82913383A48712C6A876E611A0412395B86e74B1/logo.png"
      },
      TCAD: {
        chainId: 43114,
        address: "0xbf65c0f333954EBC49aab45fB6F04Bee27F72495",
        decimals: 18,
        name: "TrueCAD",
        symbol: "TCAD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xbf65c0f333954EBC49aab45fB6F04Bee27F72495/logo.png"
      },
      TGBP: {
        chainId: 43114,
        address: "0x9018775d36d3e39AE5d88a5F502d4cBe430734C5",
        decimals: 18,
        name: "TrueGBP",
        symbol: "TGBP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x9018775d36d3e39AE5d88a5F502d4cBe430734C5/logo.png"
      },
      THKD: {
        chainId: 43114,
        address: "0xc8Eb95dac0033024B4b3fc87569824C4416F495d",
        decimals: 18,
        name: "TrueHKD",
        symbol: "THKD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xc8Eb95dac0033024B4b3fc87569824C4416F495d/logo.png"
      },
      TRUST: {
        chainId: 43114,
        address: "0x0B483a7E8119d9f9FbFF4a86cd751c51B6a81af9",
        decimals: 18,
        name: "TRUST DAO",
        symbol: "TRUST",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x0B483a7E8119d9f9FbFF4a86cd751c51B6a81af9/logo.png"
      },
      TLN: {
        chainId: 43114,
        address: "0xC394FBa894e6cD201478BC0F2EF121Acb3182EB4",
        decimals: 18,
        name: "Trustlines Network Token",
        symbol: "TLN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xC394FBa894e6cD201478BC0F2EF121Acb3182EB4/logo.png"
      },
      SWAP: {
        chainId: 43114,
        address: "0x17908a369a1884Ce287Bf79c269a16F0Fb84082E",
        decimals: 18,
        name: "TrustSwap Token",
        symbol: "SWAP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x17908a369a1884Ce287Bf79c269a16F0Fb84082E/logo.png"
      },
      "2KEY": {
        chainId: 43114,
        address: "0x3F6372f530203daA26eF31F55017a36d6f7405E5",
        decimals: 18,
        name: "TwoKeyEconomy",
        symbol: "2KEY",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3F6372f530203daA26eF31F55017a36d6f7405E5/logo.png"
      },
      PHOON: {
        chainId: 43114,
        address: "0xFb59DE6961D7D7D153bb82FCBCc2a7F5Da8Db56D",
        decimals: 18,
        name: "Typhoon",
        symbol: "PHOON",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xFb59DE6961D7D7D153bb82FCBCc2a7F5Da8Db56D/logo.png"
      },
      uDOO: {
        chainId: 43114,
        address: "0xeaa4F0C8bDC6109C92f0A5bE88A035ee11D40928",
        decimals: 18,
        name: "uDOO",
        symbol: "uDOO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xeaa4F0C8bDC6109C92f0A5bE88A035ee11D40928/logo.png"
      },
      UMA: {
        chainId: 43114,
        address: "0xC84d7bfF2555955b44BDF6A307180810412D751B",
        decimals: 18,
        name: "UMA Voting Token v1",
        symbol: "UMA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xC84d7bfF2555955b44BDF6A307180810412D751B/logo.png"
      },
      UCAP: {
        chainId: 43114,
        address: "0x8C32D46C073694045E8409251BE1FFD6720a94F3",
        decimals: 18,
        name: "UniCap.finance",
        symbol: "UCAP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8C32D46C073694045E8409251BE1FFD6720a94F3/logo.png"
      },
      UNC: {
        chainId: 43114,
        address: "0xD084b89B8f04f3E2360EBd600360C358aA122BfB",
        decimals: 18,
        name: "UniCrypt",
        symbol: "UNC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xD084b89B8f04f3E2360EBd600360C358aA122BfB/logo.png"
      },
      LAYER: {
        chainId: 43114,
        address: "0xF8342EBdc7C4860Fe16eaB3318ddA110305F6597",
        decimals: 18,
        name: "Unilayer",
        symbol: "LAYER",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xF8342EBdc7C4860Fe16eaB3318ddA110305F6597/logo.png"
      },
      UFT: {
        chainId: 43114,
        address: "0xF5182C77B4a5Dd11a59a83FB54aBaf7Dd3099041",
        decimals: 18,
        name: "UniLend Finance Token",
        symbol: "UFT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xF5182C77B4a5Dd11a59a83FB54aBaf7Dd3099041/logo.png"
      },
      POWER: {
        chainId: 43114,
        address: "0xFBD70543a1456ECa6570743256dc2D6E5CE43a2e",
        decimals: 18,
        name: "UniPower",
        symbol: "POWER",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xFBD70543a1456ECa6570743256dc2D6E5CE43a2e/logo.png"
      },
      UNIe: {
        chainId: 43114,
        address: "0x8eBAf22B6F053dFFeaf46f4Dd9eFA95D89ba8580",
        decimals: 18,
        name: "Uniswap",
        symbol: "UNI",
        website: "https://uniswap.org/",
        description: "UNI is the governance token for Uniswap. UNI was introduced on 16th September 2020 through a retrospective airdrop to users who have interacted with the protocol either by swapping tokens or by providing liquidity.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xf39f9671906d8630812f9d9863bBEf5D523c84Ab/logo.png"
      },
      UNI: {
        chainId: 43114,
        address: "0xf39f9671906d8630812f9d9863bBEf5D523c84Ab",
        decimals: 18,
        name: "Uniswap",
        symbol: "UNI",
        website: "https://uniswap.org/",
        description: "UNI is the governance token for Uniswap. UNI was introduced on 16th September 2020 through a retrospective airdrop to users who have interacted with the protocol either by swapping tokens or by providing liquidity.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xf39f9671906d8630812f9d9863bBEf5D523c84Ab/logo.png"
      },
      TRADE: {
        chainId: 43114,
        address: "0xc95d97181857469f7d3CcACB20a84fC0Dfd69a1b",
        decimals: 18,
        name: "UniTrade",
        symbol: "TRADE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xc95d97181857469f7d3CcACB20a84fC0Dfd69a1b/logo.png"
      },
      "1UP": {
        chainId: 43114,
        address: "0x7fB11D8945653F0978cCA2Ef51442bF31c84e142",
        decimals: 18,
        name: "Uptrennd",
        symbol: "1UP",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x7fB11D8945653F0978cCA2Ef51442bF31c84e142/logo.png"
      },
      USDK: {
        chainId: 43114,
        address: "0x28A9f61B5dB4F4349C2edFE7a9B234f71e4ad2A7",
        decimals: 18,
        name: "USDK",
        symbol: "USDK",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x28A9f61B5dB4F4349C2edFE7a9B234f71e4ad2A7/logo.png"
      },
      USDQ: {
        chainId: 43114,
        address: "0x4247beA779fE14dabD38547A7eA49d7f57bd1bea",
        decimals: 18,
        name: "USDQ Stablecoin by Q DAO v1.0",
        symbol: "USDQ",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x4247beA779fE14dabD38547A7eA49d7f57bd1bea/logo.png"
      },
      UTK: {
        chainId: 43114,
        address: "0x994921baDc83D4F16eEde22B81b64162c50A49EB",
        decimals: 18,
        name: "Utrust Token",
        symbol: "UTK",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x994921baDc83D4F16eEde22B81b64162c50A49EB/logo.png"
      },
      VALOR: {
        chainId: 43114,
        address: "0x5499B77D5Ddc35680A26Ff270D96A5c2eB859df4",
        decimals: 18,
        name: "ValorToken",
        symbol: "VALOR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5499B77D5Ddc35680A26Ff270D96A5c2eB859df4/logo.png"
      },
      VALUE: {
        chainId: 43114,
        address: "0x05Fe3039ecc7E03342521f583e9B3bb8B1bf5EB1",
        decimals: 18,
        name: "Value Liquidity",
        symbol: "VALUE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x05Fe3039ecc7E03342521f583e9B3bb8B1bf5EB1/logo.png"
      },
      VIB: {
        chainId: 43114,
        address: "0x81C8d264f14bF69a083446Fd19fFE9A8fE80E3C0",
        decimals: 18,
        name: "Vibe",
        symbol: "VIB",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x81C8d264f14bF69a083446Fd19fFE9A8fE80E3C0/logo.png"
      },
      VIDT: {
        chainId: 43114,
        address: "0xE1Df06E09531aeD339Cf6C97bEb59De94675d5a8",
        decimals: 18,
        name: "VIDT Datalink",
        symbol: "VIDT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xE1Df06E09531aeD339Cf6C97bEb59De94675d5a8/logo.png"
      },
      VSN: {
        chainId: 43114,
        address: "0x3aCf5DfE16cE85ED98339Dfebf2283537F2229d0",
        decimals: 18,
        name: "Vision Network",
        symbol: "VSN",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3aCf5DfE16cE85ED98339Dfebf2283537F2229d0/logo.png"
      },
      WINGS: {
        chainId: 43114,
        address: "0xB6F1A43ccc654026DEAd1b566b948dBFBa23f75A",
        decimals: 18,
        name: "WINGS",
        symbol: "WINGS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xB6F1A43ccc654026DEAd1b566b948dBFBa23f75A/logo.png"
      },
      WISE: {
        chainId: 43114,
        address: "0x5940b937d1dc86Bd44E535b75C95e9bA10e1ac33",
        decimals: 18,
        name: "Wise Token",
        symbol: "WISE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5940b937d1dc86Bd44E535b75C95e9bA10e1ac33/logo.png"
      },
      wANATHA: {
        chainId: 43114,
        address: "0xD3e6c7E9Dc08173276A17d23546cb9C24D7cD7b0",
        decimals: 18,
        name: "Wrapped ANATHA",
        symbol: "wANATHA",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xD3e6c7E9Dc08173276A17d23546cb9C24D7cD7b0/logo.png"
      },
      WBTC: {
        chainId: 43114,
        address: "0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB",
        decimals: 8,
        name: "Wrapped BTC",
        symbol: "WBTC",
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB/logo.png"
      },
      WBTCe: {
        chainId: 43114,
        address: "0x50b7545627a5162F82A992c33b87aDc75187B218",
        decimals: 8,
        name: "Wrapped BTC",
        symbol: "WBTCe",
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB/logo.png"
      },
      renBTC: {
        chainId: 43114,
        address: "0xDBf31dF14B66535aF65AaC99C32e9eA844e14501",
        decimals: 8,
        name: "renBTC",
        symbol: "RENBTC",
        website: "https://renproject.io/",
        description: "renBTC is a synthetic asset that represents the value of bitcoin and it is created by the Ren protocol. renBTC allows for bitcoin transfers to be conducted quicker on the Ethereum blockchain and opens up the possibility for bitcoin to be used in the Ethereum ecosystem. Bitcoin is held in custody by a network of decentralized nodes; it can be converted to renBTC and vice versa easily.",
        logoURI: "https://raw.githubusercontent.com/renproject/bridge-v2/master/src/assets/icons/tokens/bitcoin-dashed-icon.svg"
      },
      wNXM: {
        chainId: 43114,
        address: "0x3585E1f43Af5A0E5a9429A8058BDf999ED67f81d",
        decimals: 18,
        name: "Wrapped NXM",
        symbol: "wNXM",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3585E1f43Af5A0E5a9429A8058BDf999ED67f81d/logo.png"
      },
      X8X: {
        chainId: 43114,
        address: "0x974E0e514D1413001201D5a629fF8dEfd188E3fd",
        decimals: 18,
        name: "X8XToken",
        symbol: "X8X",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x974E0e514D1413001201D5a629fF8dEfd188E3fd/logo.png"
      },
      XDCE: {
        chainId: 43114,
        address: "0x3a162d08Fbfa687Ca00F5682c5c4F51b3aEe181C",
        decimals: 18,
        name: "XinFin XDCE",
        symbol: "XDCE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x3a162d08Fbfa687Ca00F5682c5c4F51b3aEe181C/logo.png"
      },
      XIO: {
        chainId: 43114,
        address: "0x1Ce24Ac9EC3fbc4BA0c3836123953EA0c86336b9",
        decimals: 18,
        name: "XIO Network",
        symbol: "XIO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x1Ce24Ac9EC3fbc4BA0c3836123953EA0c86336b9/logo.png"
      },
      YAX: {
        chainId: 43114,
        address: "0x977788025632E20360E4bB4867ef2C498A4EE4a6",
        decimals: 18,
        name: "yAxis",
        symbol: "YAX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x977788025632E20360E4bB4867ef2C498A4EE4a6/logo.png"
      },
      "yyDAI+yUSDC+yUSDT": {
        chainId: 43114,
        address: "0x23f717b177eaf0bB93a726D2b8C4Bd11d4c4950b",
        decimals: 18,
        name: "yearn Curve.fi yDAI/yUSDC/yUSDT/yTUSD",
        symbol: "yyDAI+yUSDC+yUSDT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x23f717b177eaf0bB93a726D2b8C4Bd11d4c4950b/logo.png"
      },
      YFIe: {
        chainId: 43114,
        address: "0x9eAaC1B23d935365bD7b542Fe22cEEe2922f52dc",
        decimals: 18,
        name: "yearn.finance",
        symbol: "YFI",
        website: "https://yearn.finance/",
        description: "Yearn Finance is a suite of products in Decentralized Finance (DeFi) that provides lending aggregation, yield generation, and insurance on the Ethereum blockchain. The protocol is maintained by various independent developers and is governed by YFI holders.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x99519AcB025a0e0d44c3875A4BbF03af65933627/logo.png"
      },
      YFI: {
        chainId: 43114,
        address: "0x99519AcB025a0e0d44c3875A4BbF03af65933627",
        decimals: 18,
        name: "yearn.finance",
        symbol: "YFI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x99519AcB025a0e0d44c3875A4BbF03af65933627/logo.png"
      },
      YFM: {
        chainId: 43114,
        address: "0xFC492B9DC6aDE871c20e9169f2600DFd2718dF4E",
        decimals: 18,
        name: "yfarm.finance",
        symbol: "YFM",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xFC492B9DC6aDE871c20e9169f2600DFd2718dF4E/logo.png"
      },
      "Yf-DAI": {
        chainId: 43114,
        address: "0xE09CD46BBE2144b53C6265c2D1B3d01cfDadB786",
        decimals: 18,
        name: "YfDAI.finance",
        symbol: "Yf-DAI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xE09CD46BBE2144b53C6265c2D1B3d01cfDadB786/logo.png"
      },
      YFFI: {
        chainId: 43114,
        address: "0x5777E014b585A5F05dB9902ef944Df9C45F2054C",
        decimals: 18,
        name: "yffi.finance",
        symbol: "YFFI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5777E014b585A5F05dB9902ef944Df9C45F2054C/logo.png"
      },
      YFII: {
        chainId: 43114,
        address: "0xA0e1645A594a3ac2556Ad0707D89B908B1A17d03",
        decimals: 18,
        name: "YFII.finance",
        symbol: "YFII",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xA0e1645A594a3ac2556Ad0707D89B908B1A17d03/logo.png"
      },
      YFL: {
        chainId: 43114,
        address: "0xE3a13E41eCAdcc611a5D8415c2b8C0802197bA96",
        decimals: 18,
        name: "YFLink",
        symbol: "YFL",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xE3a13E41eCAdcc611a5D8415c2b8C0802197bA96/logo.png"
      },
      YFV: {
        chainId: 43114,
        address: "0xd79FA6aC3D484CbbcbE3208518bD4Ae03519E0DB",
        decimals: 18,
        name: "YFValue",
        symbol: "YFV",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xd79FA6aC3D484CbbcbE3208518bD4Ae03519E0DB/logo.png"
      },
      SAFE: {
        chainId: 43114,
        address: "0x0439b92098Bf71Dd4AbF1bA73B974a8c52f1F5F3",
        decimals: 18,
        name: "yieldfarming.insure",
        symbol: "SAFE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x0439b92098Bf71Dd4AbF1bA73B974a8c52f1F5F3/logo.png"
      },
      ZERO: {
        chainId: 43114,
        address: "0x9Bdd302e506C3F6c23c085C37789cce6d3C1a233",
        decimals: 18,
        name: "Zero.Exchange Token",
        symbol: "ZERO",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x9Bdd302e506C3F6c23c085C37789cce6d3C1a233/logo.png"
      },
      ZEE: {
        chainId: 43114,
        address: "0x58DC26DA5bfc714F73fD4a4dc768901ed9B8Ed1a",
        decimals: 18,
        name: "ZeroSwapToken",
        symbol: "ZEE",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x58DC26DA5bfc714F73fD4a4dc768901ed9B8Ed1a/logo.png"
      },
      ZINC: {
        chainId: 43114,
        address: "0x14B1f37c46ECf29C9657585DF0Dd7CEe1eC7C569",
        decimals: 18,
        name: "ZINC",
        symbol: "ZINC",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x14B1f37c46ECf29C9657585DF0Dd7CEe1eC7C569/logo.png"
      },
      ZIPT: {
        chainId: 43114,
        address: "0x5ED880a1a8e25515D2e881eEBa115462b824Ac5B",
        decimals: 18,
        name: "Zippie",
        symbol: "ZIPT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x5ED880a1a8e25515D2e881eEBa115462b824Ac5B/logo.png"
      },
      ZKS: {
        chainId: 43114,
        address: "0x40871A08cd7b9751639a0831e5a83808F4c7EBA9",
        decimals: 18,
        name: "Zks",
        symbol: "ZKS",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x40871A08cd7b9751639a0831e5a83808F4c7EBA9/logo.png"
      },
      zLOT: {
        chainId: 43114,
        address: "0xF9F0BB57D247a8c55c463b9a231de7E998bdc9a0",
        decimals: 18,
        name: "zLOT",
        symbol: "zLOT",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xF9F0BB57D247a8c55c463b9a231de7E998bdc9a0/logo.png"
      },
      "DAI-Dai Stablecoin v1.0": {
        chainId: 43114,
        address: "0x095370AE41FF23798d96c1ADF7D58Ae6a2b05b18",
        decimals: 18,
        name: "Dai Stablecoin v1.0",
        symbol: "DAI",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x095370AE41FF23798d96c1ADF7D58Ae6a2b05b18/logo.png"
      },
      MKR: {
        chainId: 43114,
        address: "0x8DF92E9C0508aB0030d432DA9F2C65EB1Ee97620",
        decimals: 18,
        name: "Maker",
        symbol: "MKR",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x8DF92E9C0508aB0030d432DA9F2C65EB1Ee97620/logo.png"
      },
      "PNG-Pangolin": {
        address: "0x60781C2586D68229fde47564546784ab3fACA982",
        chainId: 43114,
        name: "Pangolin",
        symbol: "PNG",
        website: "https://pangolin.exchange/",
        description: "A community-driven decentralized exchange for Avalanche and Ethereum assets with fast settlement, low transaction fees, and a democratic distribution\u2013powered by Avalanche. Pangolin brings you the best trading opportunities to find and maximize your yield.",
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x60781C2586D68229fde47564546784ab3fACA982/logo.png"
      },
      COM: {
        chainId: 43114,
        address: "0x3711c397B6c8F7173391361e27e67d72F252cAad",
        decimals: 18,
        name: "COMPLUS",
        symbol: "COM",
        website: "https://complus.exchange/",
        description: "Complus Network is a multi-chain exchange protocol for ERC-20 tokens on several blockchains.",
        logoURI: "https://raw.githubusercontent.com/complusnetwork/default-token-list/master/src/ava/0x3711c397B6c8F7173391361e27e67d72F252cAad/logo.png"
      },
      YTS: {
        chainId: 43114,
        address: "0x488F73cddDA1DE3664775fFd91623637383D6404",
        decimals: 18,
        name: "YetiSwap",
        symbol: "YTS",
        logoURI: "https://raw.githubusercontent.com/YetiSwap/yetiswap.app/master/src/assets/image/YTSCoin.png"
      },
      "ZERO-Zero.Exchange Token": {
        chainId: 43114,
        address: "0x008E26068B3EB40B443d3Ea88c1fF99B789c10F7",
        decimals: 18,
        name: "Zero.Exchange Token",
        symbol: "ZERO"
      },
      SNOB: {
        chainId: 43114,
        address: "0xC38f41A296A4493Ff429F1238e030924A1542e50",
        decimals: 18,
        name: "Snowball",
        symbol: "SNOB",
        website: "https://snowball.network/",
        description: "Snowball combines multiple DeFi protocols to create an interconnected experience. Swap stablecoins, deposit liquidity, or auto-compound liquidity rewards.",
        logoURI: "https://raw.githubusercontent.com/Snowball-Finance/Assets/main/Uphill%20snowball.png"
      },
      "SFI-sled.finance": {
        chainId: 43114,
        address: "0x1F1FE1eF06ab30a791d6357FdF0a7361B39b1537",
        decimals: 9,
        name: "sled.finance",
        symbol: "SFI",
        logoURI: "https://raw.githubusercontent.com/sled-finance/media/main/sled_token_fl.png"
      },
      SPORE: {
        chainId: 43114,
        address: "0x6e7f5C0b9f4432716bDd0a77a3601291b9D9e985",
        decimals: 9,
        name: "Spore",
        symbol: "SPORE",
        logoURI: "https://raw.githubusercontent.com/sporeproject/Spore-frontend/master/src/utils/SPORE.png"
      },
      PEFI: {
        chainId: 43114,
        address: "0xe896CDeaAC9615145c0cA09C8Cd5C25bced6384c",
        decimals: 18,
        name: "Penguin Finance",
        symbol: "PEFI",
        logoURI: "https://raw.githubusercontent.com/Penguin-Finance/png-files/main/PEFILOGOPNG.png"
      },
      aaBLOCK: {
        address: "0xC931f61B1534EB21D8c11B24f3f5Ab2471d4aB50",
        chainId: 43114,
        name: "Blocknet",
        symbol: "aaBLOCK",
        decimals: 8,
        logoURI: "https://github.com/blocknetdx/documentation/blob/master/docs/img/icons/Blocknet_symbol_dark_RGB.png"
      },
      LYD: {
        chainId: 43114,
        address: "0x4C9B4E1AC6F24CdE3660D5E4Ef1eBF77C710C084",
        decimals: 18,
        name: "Lydia Finance",
        symbol: "LYD",
        website: "https://www.lydia.finance/",
        description: "Lydia Finance is a decentralized exchange (DEX) running on Avalanche.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x4C9B4E1AC6F24CdE3660D5E4Ef1eBF77C710C084/logo.png"
      },
      VSO: {
        chainId: 43114,
        address: "0x846D50248BAf8b7ceAA9d9B53BFd12d7D7FBB25a",
        decimals: 18,
        name: "Verso",
        symbol: "VSO",
        logoURI: "https://raw.githubusercontent.com/VersoOfficial/pr/master/icon_blue.png"
      },
      AVME: {
        chainId: 43114,
        address: "0x1ECd47FF4d9598f89721A2866BFEb99505a413Ed",
        decimals: 18,
        name: "AV Me",
        symbol: "AVME",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x1ECd47FF4d9598f89721A2866BFEb99505a413Ed/logo.png"
      },
      CRACK: {
        chainId: 43114,
        address: "0xE9D00cBC5f02614d7281D742E6E815A47ce31107",
        decimals: 9,
        name: "Crack.Fi",
        symbol: "CRACK",
        logoURI: "https://raw.githubusercontent.com/crackfi/logo/master/crackfi_png.png"
      },
      HUSKY: {
        chainId: 43114,
        address: "0x65378b697853568dA9ff8EaB60C13E1Ee9f4a654",
        decimals: 18,
        name: "Husky Avalanche",
        symbol: "HUSKY",
        logoURI: "https://raw.githubusercontent.com/safepoint-be/project-husky/main/img/logo.png"
      },
      GDL: {
        chainId: 43114,
        address: "0xD606199557c8Ab6F4Cc70bD03FaCc96ca576f142",
        decimals: 18,
        name: "Gondola",
        symbol: "GDL",
        logoURI: "https://raw.githubusercontent.com/gondola-finance/frontend/master/src/assets/icons/brand_logo_darkmode.png"
      },
      CYCLE: {
        chainId: 43114,
        address: "0x81440C939f2C1E34fc7048E518a637205A632a74",
        decimals: 18,
        name: "Cycle Protocol",
        symbol: "CYCLE",
        logoURI: "https://raw.githubusercontent.com/CycleProtocol/assets/master/cycle-logo-round-small.png"
      },
      "BIRD-Birdy Finance": {
        chainId: 43114,
        address: "0x4480B4DdFb15fE6518817ef024D8B493afF2Db54",
        decimals: 18,
        name: "Birdy Finance",
        symbol: "BIRD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x4480B4DdFb15fE6518817ef024D8B493afF2Db54/logo.png"
      },
      XAVA: {
        chainId: 43114,
        address: "0xd1c3f94DE7e5B45fa4eDBBA472491a9f4B166FC4",
        decimals: 18,
        name: "Avalaunch",
        symbol: "XAVA",
        website: "https://avalaunch.app/",
        description: "Interoperable Token Pools & Auctions for the Avalanche Blockchain.",
        logoURI: "https://raw.githubusercontent.com/avalaunch-app/xava-protocol/master/logo.png"
      },
      TESLABTC: {
        chainId: 43114,
        address: "0x8349088C575cA45f5A63947FEAeaEcC41136fA01",
        decimals: 9,
        name: "TeslaBitcoin",
        symbol: "TESLABTC",
        logoURI: "https://raw.githubusercontent.com/crackfi/tesla_btc_logo/master/Tesla_Bitcoin_logo.png"
      },
      USDTe: {
        chainId: 43114,
        address: "0xc7198437980c041c805A1EDcbA50c1Ce5db95118",
        decimals: 6,
        name: "Tether USD",
        symbol: "USDTe",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.  This version is bridged from Ethereum.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xde3A24028580884448a5397872046a019649b084/logo.png"
      },
      TUSD: {
        chainId: 43114,
        address: "0x1C20E891Bab6b1727d14Da358FAe2984Ed9B59EB",
        decimals: 18,
        name: "TrueUSD",
        symbol: "TUSD",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x1C20E891Bab6b1727d14Da358FAe2984Ed9B59EB/logo.png"
      },
      DAIe: {
        chainId: 43114,
        address: "0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",
        decimals: 18,
        name: "Dai Stablecoin",
        symbol: "DAI",
        website: "https://makerdao.com/en/",
        description: "DAI is an Ethereum-based stablecoin (stable-price cryptocurrency) whose issuance and development is managed by the Maker Protocol and the MakerDAO decentralized autonomous organization.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xbA7dEebBFC5fA1100Fb055a87773e1E99Cd3507a/logo.png"
      },
      BUSDe: {
        chainId: 43114,
        address: "0x19860CCB0A68fd4213aB9D8266F7bBf05A8dDe98",
        decimals: 18,
        name: "Binance USD",
        symbol: "BUSD",
        website: "https://www.binance.com/en/busd",
        description: "Binance USD (BUSD) is a 1:1 USD-backed stable coin issued by Binance (in partnership with Paxos). BUSD is approved and regulated by the New York State Department of Financial Services (NYDFS). The BUSD Monthly Audit Report can be viewed from the official website.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/avalanche-bridge-resources/main/tokens/BUSD/logo.png"
      },
      "FRAX-Frax": {
        chainId: 43114,
        address: "0xDC42728B0eA910349ed3c6e1c9Dc06b5FB591f98",
        decimals: 18,
        name: "Frax",
        symbol: "FRAX",
        website: "https://frax.finance/",
        description: "Frax is the world\u2019s first fractional-algorithmic stablecoin. The Frax Protocol introduced the world to the concept of a cryptocurrency being partially backed by collateral and partially stabilized algorithmically.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xDC42728B0eA910349ed3c6e1c9Dc06b5FB591f98/logo.png"
      },
      OLIVE: {
        chainId: 43114,
        address: "0x617724974218A18769020A70162165A539c07E8a",
        decimals: 18,
        name: "Olive",
        symbol: "OLIVE",
        website: "https://avax.olive.cash/",
        description: "OLIVE token is at the heart of the OliveCash ecosystem. Buy it, win it, farm it, spend it, stake it... heck, you can even vote with it!",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x617724974218A18769020A70162165A539c07E8a/logo.png"
      },
      JOE: {
        chainId: 43114,
        address: "0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd",
        decimals: 18,
        name: "Joe Token",
        symbol: "JOE",
        website: "https://www.traderjoexyz.com/#/home",
        description: "Trader Joe is your one-stop decentralized trading platform on the Avalanche network, of which JOE is the governance token that rewards its holders with a share of exchange revenues.",
        logoURI: "https://www.traderjoexyz.com/static/media/logo.bc60f78d.png"
      },
      SHIBX: {
        chainId: 43114,
        address: "0x440aBbf18c54b2782A4917b80a1746d3A2c2Cce1",
        decimals: 18,
        name: "SHIBA",
        symbol: "SHIBX",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x617724974218A18769020A70162165A539c07E8a/logo.png"
      },
      USDCe: {
        chainId: 43114,
        address: "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
        decimals: 6,
        name: "USD Coin",
        symbol: "USDCe",
        website: "https://www.circle.com/usdc",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d.png",
        documentation: "https://developers.circle.com/docs"
      },
      MIM: {
        name: "Magic Internet Money",
        address: "0x130966628846BFd36ff31a822705796e8cb8C18D",
        symbol: "MIM",
        decimals: 18,
        chainId: 43114,
        website: "https://abracadabra.money/",
        description: "You, the Spellcaster, can provide collateral in the form of various interest bearing crypto assets such as yvYFI, yvUSDT, yvUSDC, xSUSHI and more. With this, you can borrow magic internet money (MIM) which is a stable coin that you can swap for any other traditional stable coin.",
        logoURI: "",
        documentation: "https://docs.abracadabra.money/"
      },
      SPELL: {
        name: "Spell Token",
        address: "0xCE1bFFBD5374Dac86a2893119683F4911a2F7814",
        symbol: "SPELL",
        decimals: 18,
        chainId: 43114,
        website: "https://abracadabra.money/",
        description: "You, the Spellcaster, can provide collateral in the form of various interest bearing crypto assets such as yvYFI, yvUSDT, yvUSDC, xSUSHI and more. With this, you can borrow magic internet money (MIM) which is a stable coin that you can swap for any other traditional stable coin.",
        logoURI: "",
        documentation: "https://docs.abracadabra.money/"
      },
      CRA: {
        name: "CRA",
        symbol: "CRA",
        address: "0xA32608e873F9DdEF944B24798db69d80Bbb4d1ed",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xA32608e873F9DdEF944B24798db69d80Bbb4d1ed.svg",
        website: "https://www.crabada.com/",
        description: "Rediscover the prosperous ancient Crabada Kingdom once ruled by Crustaco, King of the Crabada. Mine. Loot. Breed. Expand your forces. Earn CRA tokens by playing and use them to determine the future of the Kingdom!"
      },
      aWOOL: {
        name: "AWOOL",
        symbol: "aWOOL",
        address: "0x5eDE350E84223fb50775fD91a723F2ca71034cf7",
        chainId: 43114,
        decimals: 9,
        logoURI: "https://tokens.pancakeswap.finance/images/0x5eDE350E84223fb50775fD91a723F2ca71034cf7.svg",
        website: "https://www.sheepgamexyz.com/",
        description: "Wolf.Game pioneered new types of NFT mechanics BUT SheepGame brings it to Avalanche! Fully decentralized. Low Fees and Sub Second Finality and fully functional! SheepGame shows what\u2019s possible with interactions between the ERC-20 and ERC-721 protocols on Avalanche. For the very first time, your NFT can steal other NFTs (ERC-721) for you. The rarer your NFT, the more tokens youll accumulate probabilistically!"
      },
      MEAD: {
        name: "THORS MEAD",
        symbol: "MEAD",
        address: "0x245C2591403e182e41d7A851eab53B01854844CE",
        chainId: 43114,
        decimals: 8,
        logoURI: "https://tokens.pancakeswap.finance/images/0x245C2591403e182e41d7A851eab53B01854844CE.svg",
        website: "https://asgarddao.fi/",
        description: "Asgard also introduces economic and game-theoretic dynamics into the market through forging (Staking) and pledging (Minting). Our goal is to build a policy-controlled currency system, native on the Avalanche Network, that is based on the VOLT token! "
      },
      KLO: {
        name: "Kalao Token",
        symbol: "KLO",
        address: "0xb27c8941a7Df8958A1778c0259f76D1F8B711C35",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xb27c8941a7Df8958A1778c0259f76D1F8B711C35.svg",
        website: "https://www.kalao.io/",
        description: "Kalao is an NFT ecosystem. We offer a cost-effective and easy-to-use Marketplace, powered by a combination of the Avalanche blockchain technology and outstanding Kalao VR capabilities. The Kalao framework will accelerate the adoption of VR technology to develop virtual worlds and sustain the digital transformation of business use cases."
      },
      CRAFT: {
        name: "CRAFT",
        symbol: "CRAFT",
        address: "0x8aE8be25C23833e0A01Aa200403e826F611f9CD2",
        chainId: 43114,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x8aE8be25C23833e0A01Aa200403e826F611f9CD2.svg",
        website: "https://talecraft.io/",
        description: "TaleCraft is a PVP, play-to-earn card board game, driven by a unique mint and craft mechanic, where players grow more powerful through gamified NFT alchemy. Elemental base cards are sold weekly, allowing only the most skilled alchemists to thrive and progress in this medieval metaverse. All NFT holders will receive AVAX yield generated by the game ecosystem, rewarding the most loyal and skilled holders. NFT & Token Deflation System TaleCraft leverages a brand new type of NFT minting process that balances game design and scarcity, designed to produce a sustainable, long-term economy. Crafting Technology achieves this, in part, by burning base cards to craft higher-tier cards, combing scarcity with game theory. Additionally, when chests are opened with $CRAFT, they are both burnt and used for vital liquidity--bolstering the entire game economy. The NFT\u2019s total supply will be determined and balanced by community demand driven by free market principles."
      },
      MELT: {
        name: "Defrost Finance Token",
        symbol: "MELT",
        address: "0x47EB6F7525C1aA999FBC9ee92715F5231eB1241D",
        chainId: 43114,
        decimals: 18,
        logoURI: "",
        website: "https://www.defrost.finance/home",
        description: "Defrost Finance is the platform behind the next generation stablecoin and provides remunerative investment opportunities. A fully fair launch, decentralized project, its aim is to change the world of finance for good."
      },
      PTP: {
        chainId: 43114,
        address: "0x22d4002028f537599bE9f666d1c4Fa138522f9c8",
        decimals: 18,
        name: "Platypus",
        symbol: "PTP",
        website: "https://platypus.finance/",
        description: "Platypus invents a whole new AMM on Avalanche - Open liquidity single-sided AMM managing risk autonomously based on the coverage ratio, allowing maximal capital efficiency.",
        logoURI: "https://img.api.cryptorank.io/coins/platypus%20finance1639051361866.png"
      },
      CLY: {
        chainId: 43114,
        address: "0xec3492a2508DDf4FDc0cD76F31f340b30d1793e6",
        decimals: 18,
        name: "Colony Token",
        symbol: "CLY",
        website: "https://www.colonylab.io/",
        description: "Colony is a community-driven Avalanche ecosystem accelerator, powered by Colony\u2019s CLY token.",
        logoURI: "https://assets.coingecko.com/coins/images/21358/large/colony.PNG?1639013005"
      },
      USDC: {
        chainId: 43114,
        address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
        decimals: 6,
        name: "USD Coin",
        symbol: "USDC",
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d.png"
      },
      ROCO: {
        chainId: 43114,
        address: "0xb2a85C5ECea99187A977aC34303b80AcbDdFa208",
        decimals: 18,
        name: "Roco Finance",
        symbol: "ROCO",
        website: "https://roco.finance/",
        description: "ROCO is a decentralized GAMEFI platform which provide blockchain services to game developers, content creators and player communities through the blockchain network.",
        logoURI: "https://assets.coingecko.com/coins/images/19234/large/86109466.png?1634769540"
      },
      HON: {
        chainId: 43114,
        address: "0xEd2b42D3C9c6E97e11755BB37df29B6375ede3EB",
        decimals: 18,
        name: "Heroes of NFT",
        symbol: "HON",
        website: "https://heroesofnft.com/",
        description: "Heroes of NFT is an online card game where you can attend tournaments and defeat your opponents to rise to victory.",
        logoURI: "https://assets.coingecko.com/coins/images/23527/small/tokenlogo200.png?1644368289"
      },
      FITFI: {
        chainId: 43114,
        address: "0x714f020C54cc9D104B6F4f6998C63ce2a31D1888",
        decimals: 18,
        name: "STEP.APP",
        symbol: "FITFI",
        website: "https://step.app/",
        description: "Step App is creating a gamified metaverse for the fitness economy. Walk, jog, and run to socialize, play, and earn. - Stake to earn portion of ecosystem fees. - Stake includes a cooldown, breaking which causes a penalty. - Tiered stakers acquire discounts on NFT market.",
        logoURI: "https://assets.coingecko.com/coins/images/25015/small/801485424e1f49bc8d0facff9287eb9b_photo.png?1649827972"
      },
      GLP: {
        name: "GLP",
        symbol: "GLP",
        address: "0xaE64d55a6f09E4263421737397D1fdFA71896a69",
        chainId: 43114,
        decimals: 18,
        website: "https://app.gmx.io/#/trade/?ref=beefy",
        description: "GLP consists of an index of assets used for swaps and leverage trading on GMX. GLP holders will make a profit when leverage traders make a loss and vice versa. Staked GLP also earns escrowed GMX rewards and 70% of platform fees distributed in ETH.",
        logoURI: "https://github.com/gmx-io/gmx-assets/blob/main/GMX-Assets/SVG/GLP_LOGO%20ONLY.svg",
        documentation: "https://gmxio.gitbook.io/gmx/glp"
      },
      GMX: {
        name: "GMX",
        symbol: "GMX",
        address: "0x62edc0692BD897D2295872a9FFCac5425011c661",
        chainId: 43114,
        decimals: 18,
        website: "https://app.gmx.io/#/trade/?ref=beefy",
        description: "GMX is the utility and governance token of the GMX decentralized spot and perpetual exchange that supports low swap fees, zero price impact trades and up to 30x leverage. Staked GMX earns escrowed GMX and 30% of platform fees in the form of ETH.",
        logoURI: "https://github.com/gmx-io/gmx-assets/blob/main/GMX-Assets/SVG/GMX_LOGO%20ONLY.svg",
        documentation: "https://gmxio.gitbook.io/"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/avax/index.js
var require_avax = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/avax/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.avax = void 0;
    var beefyfinance_1 = require_beefyfinance3();
    var lydia_1 = require_lydia();
    var pangolin_1 = require_pangolin();
    var joe_1 = require_joe();
    var synapse_1 = require_synapse();
    var mai_1 = require_mai2();
    var tokens_1 = require_tokens3();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _avax = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        lydia: lydia_1.lydia,
        pangolin: pangolin_1.pangolin,
        joe: joe_1.joe,
        synapse: synapse_1.synapse,
        mai: mai_1.mai
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.avax = _avax;
  }
});

// node_modules/blockchain-addressbook/build/address-book/fantom/platforms/beefyfinance.js
var require_beefyfinance4 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fantom/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0x238dc3781DD668abd5135e233e395885657D304A";
    var treasuryMultisig = "0xdFf234670038dEfB2115Cf103F86dA5fB7CfD2D2";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0x847298aC8C28A9D66859E750456b92C2A67b876D",
      vaultOwner: "0x4560a83b7eED32EB78C48A5bedE9B608F3184df0",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0x7fB900C14c9889A559C777D016a885995cE759Ee",
      treasury: "0xe6CcE165Aa3e52B2cC55F17b1dBC6A8fe5D66610",
      beefyFeeRecipient: "0x35F43b181957824f2b5C0EF9856F85c90fECb3c8",
      multicall: "0xC9F6b1B53E056fd04bE5a197ce4B2423d456B982",
      bifiMaxiStrategy: "0x230691a28C8290A553BFBC911Ab2AbA0b2df152D",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      beefyFeeConfig: "0x3b282a104794c5d256D285B4ba9ed27375c0b359",
      vaultFactory: "0x740CE0674aF6eEC113A435fAa53B297536A3e89B",
      wrapperFactory: "0x985CA8C1B4Ff5a15E1162BaE1669A928e5a6bD49"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/fantom/platforms/beethovenx.js
var require_beethovenx = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fantom/platforms/beethovenx.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beethovenx = void 0;
    exports.beethovenx = {
      router: "0x20dd72Ed959b6147912C2e529F0a0C651c33c9ce",
      masterchef: "0x8166994d9ebBe5829EC86Bd81258149B87faCfd3"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/fantom/platforms/spookyswap.js
var require_spookyswap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fantom/platforms/spookyswap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.spookyswap = void 0;
    exports.spookyswap = {
      router: "0xF491e7B69E4244ad4002BC14e878a34207E38c29",
      masterchef: "0x2b2929E785374c651a81A63878Ab22742656DcDd",
      masterchefV2: "0x18b4f774fdC7BF685daeeF66c2990b1dDd9ea6aD",
      masterchefV3: "0x9C9C920E51778c4ABF727b8Bb223e78132F00aA4",
      wftmBifiLp: "0x1656728af3a14e1319F030Dc147fAbf6f627059e"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/fantom/platforms/spiritswap.js
var require_spiritswap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fantom/platforms/spiritswap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.spiritswap = void 0;
    exports.spiritswap = {
      router: "0x09855B4ef0b9df961ED097EF50172be3e6F13665",
      oldRouter: "0x16327E3FbDaCA3bcF7E38F5Af2599D2DDc33aE52",
      masterchef: "0x9083EA3756BDE6Ee6f27a6e996806FBD37F6F093",
      gaugeStaker: "0x44e314190D9E4cE6d4C0903459204F8E21ff940A",
      gaugeProxy: "0x420b17f69618610DE18caCd1499460EFb29e1d8f",
      feeDistributor: "0x18CeF75C2b032D7060e9Cf96F29aDF74a9a17ce6",
      volatileVoter: "0xfe1C8A68351B52E391e10106BD3bf2d0759AFf4e",
      stableVoter: "0xad29B1060Dded121F4596b09F13Fa44c9d62BB49",
      ve: "0x2FBFf41a9efAEAE77538bd63f1ea489494acdc08"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/fantom/platforms/sushiFtm.js
var require_sushiFtm = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fantom/platforms/sushiFtm.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sushiFtm = void 0;
    exports.sushiFtm = {
      minichef: "0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5",
      complexRewarderTime: "0xeaf76e3bD36680D98d254B378ED706cb0DFBfc1B",
      router: "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/fantom/platforms/solidly.js
var require_solidly = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fantom/platforms/solidly.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.solidly = void 0;
    exports.solidly = {
      router: "0xa38cd27185a464914D3046f0AB9d43356B34829D",
      voter: "0xdC819F5d05a6859D2faCbB4A44E5aB105762dbaE"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/fantom/platforms/tombswap.js
var require_tombswap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fantom/platforms/tombswap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tombswap = void 0;
    exports.tombswap = {
      router: "0x6D0176C5ea1e44b08D3dd001b0784cE42F47a3A7",
      masterchef: "0xcc0a87F7e7c693042a9Cc703661F5060c80ACb43"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/fantom/platforms/solace.js
var require_solace2 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fantom/platforms/solace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.solace = void 0;
    exports.solace = {
      rewards: "0x501ACee6350BB566EBE4A0dABDC9901100B8c445",
      xSolace: "0x501Ace47c5b0C2099C4464f681c3fa2ECD3146C1"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/fantom/platforms/equalizer.js
var require_equalizer = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fantom/platforms/equalizer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.equalizer = void 0;
    exports.equalizer = {
      router: "0x1A05EB736873485655F29a37DEf8a0AA87F5a447",
      voter: "0x4bebEB8188aEF8287f9a7d1E4f01d76cBE060d5b"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/fantom/tokens/tokens.js
var require_tokens4 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fantom/tokens/tokens.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var ETH = {
      name: "Wrapped Ether",
      address: "0x74b23882a30290451A17c44f4F05243b6b58C76d",
      symbol: "ETH",
      decimals: 18,
      chainId: 250,
      website: "https://ethereum.org/",
      description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network.",
      logoURI: "https://ftmscan.com/token/images/wETH_32.png",
      documentation: "https://ethereum.org/en/developers/docs/"
    };
    var BTC = {
      name: "Wrapped Bitcoin",
      address: "0x321162Cd933E2Be498Cd2267a90534A804051b11",
      symbol: "BTC",
      decimals: 8,
      chainId: 250,
      website: "https://wbtc.network/",
      description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
      logoURI: "https://ftmscan.com/token/images/wBTC_32.png"
    };
    var FTM = {
      name: "Wrapped Fantom",
      address: "0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",
      symbol: "WFTM",
      decimals: 18,
      chainId: 250,
      website: "https://fantom.foundation/",
      description: "Fantom is a fast, high-throughput open-source smart contract platform for digital assets and dApps.",
      logoURI: "https://ftmscan.com/token/images/wFtm_32.png"
    };
    var _tokens = {
      "bb-yv-FTM": {
        name: "Beets Yearn Boosted FTM Linear Pool",
        symbol: "bb-yv-FTM",
        address: "0xC3BF643799237588b7a6B407B3fc028Dd4e037d2",
        chainId: 250,
        decimals: 18,
        logoURI: "",
        website: "https://beets.fi/#/",
        description: "Balancer linear pool that consist of yvWFTM and WFTM.",
        documentation: "https://docs.beets.fi/balancer-v2-1/pools#boosted-pools"
      },
      yvWFTM: {
        name: "WFTM yVault",
        symbol: "yvWFTM",
        address: "0x0DEC85e74A92c52b7F708c4B10207D9560CEFaf0",
        chainId: 250,
        decimals: 18,
        logoURI: "",
        website: "https://yearn.finance/",
        description: "yVault tokens represent a user's share in a yVault. These vaults contain a pool of underlying assets, such as WFTM, that generate profits for the users. The more profit the yVault generates, the higher the value of the user's yVault Token. When a user withdraws their liquidity from the yVault, their yVault Token is burned, and they receive the equivalent value in the underlying asset.",
        documentation: "https://docs.yearn.finance/"
      },
      SYN: {
        name: "Synapse Protocol",
        symbol: "SYN",
        address: "0xE55e19Fb4F2D85af758950957714292DAC1e25B2",
        chainId: 250,
        decimals: 18,
        logoURI: "",
        website: "https://synapseprotocol.com/",
        description: "Synapse is a cross-chain layer \u221E protocol powering frictionless interoperability between blockchains. By providing decentralized, permissionless transactions between any L1, sidechain, or L2 ecosystem, Synapse powers integral blockchain activities such as asset transfers, swaps, and generalized messaging with cross-chain functionality - and in so doing enables new primitives based off of its cross-chain architecture."
      },
      alUSD: {
        name: "Alchemix USD",
        symbol: "alUSD",
        address: "0xB67FA6deFCe4042070Eb1ae1511Dcd6dcc6a532E",
        chainId: 250,
        decimals: 18,
        logoURI: "",
        website: "https://alchemix.fi/",
        description: "Alchemix Self-Repaying Loans allow you to leverage a range of tokens without risk of liquidation."
      },
      POTS: {
        name: "Moonpot",
        symbol: "POTS",
        address: "0xF7554D17d1c3F09899dCc8B404beCAE6dFA584Fa",
        chainId: 250,
        decimals: 18,
        logoURI: "https://assets.trustwalletapp.com/blockchains/smartchain/assets/0x3Fcca8648651E5b974DD6d3e50F61567779772A8/logo.png",
        website: "https://moonpot.com/",
        description: "Stake Crypto, Earn Interest and Win Prizes. The greatest win-win savings game this side of the galaxy, where even the smallest of stakes wins the biggest prizes."
      },
      COMB: {
        name: "Comb Finance",
        symbol: "COMB",
        address: "0xaE45a827625116d6C0C40B5D7359EcF68F8e9AFD",
        chainId: 250,
        decimals: 18,
        logoURI: "https://app.spiritswap.finance/images/tokens/COMB.png",
        website: "https://comb.financial/",
        description: "COMB is a protocol aimed towards establishing a suite of financial products built on top of the Fantom blockchain. Diversify your portfolio with one token."
      },
      SINGLE: {
        name: "SINGLE Token",
        symbol: "SINGLE",
        address: "0x8cc97B50Fe87f31770bcdCd6bc8603bC1558380B",
        chainId: 250,
        decimals: 18,
        logoURI: "https://mm.finance/images/tokens/0x0804702a4E749d39A35FDe73d1DF0B1f1D6b8347.svg",
        website: "https://singlefinance.io/",
        description: "Single-click pseudo market-neutral strategy with a human touch."
      },
      gALCX: {
        name: "Governance ALCX",
        symbol: "gALCX",
        address: "0x70F9fd19f857411b089977E7916c05A0fc477Ac9",
        chainId: 250,
        decimals: 18,
        logoURI: "https://assets.spooky.fi/tokens/gALCX.png",
        website: "https://alchemix.fi/",
        description: "Alchemix Self-Repaying Loans allow you to leverage a range of tokens without risk of liquidation."
      },
      ALPACA: {
        name: "Alpaca Token",
        symbol: "ALPACA",
        address: "0xaD996A45fd2373ed0B10Efa4A8eCB9de445A4302",
        chainId: 250,
        decimals: 18,
        logoURI: "https://ftmscan.com/token/images/alpacafinance2_32.png",
        website: "https://www.alpacafinance.org/",
        description: "Alpaca Finance is the largest lending protocol allowing leveraged yield farming on BNB Chain and Fantom."
      },
      PGK: {
        name: "Penguin Karts",
        symbol: "PGK",
        address: "0x188a168280589bC3E483d77aae6b4A1d26bD22dC",
        chainId: 250,
        decimals: 18,
        logoURI: "https://ftmscan.com/token/images/penguinkarts_32.png",
        website: "https://penguinkarts.com/",
        description: "A battle-racing 3D multiplayer game built on the Blockchain. It combines the best elements of arcade style kart racing, mobile gaming and Play-to-Earn NFT dynamics."
      },
      SOLACE: {
        name: "solace",
        symbol: "SOLACE",
        address: "0x501acE9c35E60f03A2af4d484f49F9B1EFde9f40",
        chainId: 250,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x501acE9c35E60f03A2af4d484f49F9B1EFde9f40.svg",
        website: "https://solace.fi/",
        description: "Solace is building a community around making this space safe, secure and trusted so that we can onboard and de-risk DeFi and other crypto applications while opening the space to millions of users. We recently launched a coverage policy protocol that enables protection for liquidity providers, Defi protocols or DAOs to mitigate loss from hacks, bugs and exploits. Our purpose is to transform DeFi by delivering intelligent and empowering tools for a safe, secure and trusted industry."
      },
      FUSD: {
        name: "Fantom USD",
        symbol: "FUSD",
        address: "0xAd84341756Bf337f5a0164515b1f6F993D194E1f",
        chainId: 250,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/22230/large/fUSD_32.png?1641246519",
        website: "https://fantom.foundation/defi/",
        description: "Mint fUSD, the stablecoin on Fantom pegged 1:1 to the USD price, using your FTM."
      },
      MIDAS: {
        name: "MIDAS",
        symbol: "MIDAS",
        address: "0xb37528DA6b4D378305d000a66Ad91bd88E626761",
        chainId: 250,
        decimals: 18,
        logoURI: "",
        website: "https://midas.investments/",
        description: "Earn the highest yields on BTC, ETH, USDT, and DeFi assets."
      },
      TOR: {
        name: "TOR",
        symbol: "TOR",
        address: "0x74E23dF9110Aa9eA0b6ff2fAEE01e740CA1c642e",
        chainId: 250,
        decimals: 18,
        logoURI: "",
        website: "https://tor.hector.network/",
        description: "TOR is a fully collateralized stablecoin which acts as a foundational pillar within the Hector Network Ecosystem. Its unique smart contracts made it the first of its kind, creating positive price action for the HEC token each time a TOR coin is minted and empowering Hector Network to become deflationary."
      },
      sFTMx: {
        name: "sFTMx",
        symbol: "sFTMx",
        address: "0xd7028092c830b5C8FcE061Af2E593413EbbC1fc1",
        chainId: 250,
        decimals: 18,
        logoURI: "https://assets.spookyswap.finance/tokens/sFTMX.png",
        website: "https://fantom.staderlabs.com/liquid-staking/pools",
        description: "sFTMX is a liquid staking derivative token that gains value relative to FTM as staking rewards accrue. sFTMX offers 4.7% APY and maximum DeFi interoperability. Staking with Stader results in a decentralized distribution of assets across a curated pool of validators, while liquidity options are maintained through DEX liquidity pools."
      },
      SD: {
        name: "Stader SD",
        symbol: "SD",
        address: "0x412a13C109aC30f0dB80AD3Bd1DeFd5D0A6c0Ac6",
        chainId: 250,
        decimals: 18,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/12623.png",
        website: "https://staderlabs.com/",
        description: "Stader (SD) token is the native governance and value accrual token for Stader."
      },
      ORKAN: {
        name: "Orkan",
        symbol: "ORKAN",
        address: "0xfB66e49e303A186a4c57414Ceeed651a7a78161a",
        chainId: 250,
        decimals: 9,
        logoURI: "https://app.spiritswap.finance/images/tokens/ORKAN.png",
        website: "https://orkan.finance/#/dashboard",
        description: "The Orkan ($ORK) is a meta-governance protocol that aims to bootstrap liquidity flow on the Fantom Opera Blockchain."
      },
      USDB: {
        name: "USD Balance",
        symbol: "USDB",
        address: "0x6Fc9383486c163fA48becdEC79d6058f984f62cA",
        chainId: 250,
        decimals: 18,
        website: "http://www.usdbalance.com/",
        description: "USDB provides a wide range of financial tools and services to individuals and institutions",
        logoURI: ""
      },
      GEL: {
        name: "Gelato",
        symbol: "GEL",
        address: "0x15b7c0c907e4C6b9AdaAaabC300C08991D6CEA05",
        chainId: 250,
        decimals: 18,
        website: "https://www.gelato.network/",
        description: "Automate your smart contracts.  Outsource your web3 DevOps needs and enjoy the perks of Ethereum's most reliable bot network at your fingertips.",
        logoURI: ""
      },
      FTML: {
        name: "Top Shelf Fantom L-Token",
        symbol: "FTML",
        address: "0xC0d9784FDba39746919Bbf236eB73bc015fD351D",
        chainId: 250,
        decimals: 18,
        website: "https://topshelf.finance/",
        description: "Mint fully decentralized sythentic assets on Binance Smart Chain, Fantom & Avalanche.",
        logoURI: ""
      },
      USDL: {
        name: "Top Shelf USD L-Token",
        symbol: "USDL",
        address: "0x4A89338A2079A01eDBF5027330EAC10B615024E5",
        chainId: 250,
        decimals: 18,
        website: "https://topshelf.finance/",
        description: "Mint fully decentralized sythentic assets on Binance Smart Chain, Fantom & Avalanche.",
        logoURI: ""
      },
      STG: {
        name: "Stargate",
        symbol: "STG",
        address: "0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590",
        chainId: 250,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/traderjoe-xyz/joe-tokenlists/main/logos/0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590/logo.png",
        website: "https://stargate.finance/",
        description: "Stargate is a community-driven organization building the first fully composable native asset bridge, and the first dApp built on LayerZero.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      APE: {
        name: "ApeCoin APE",
        symbol: "APE",
        address: "0x2d72A97a31Dc920dB03330780d30074626e39C8A",
        chainId: 250,
        decimals: 18,
        logoURI: "https://assets.spookyswap.finance/tokens/APE.png",
        website: "http://apecoin.com/",
        description: "ApeCoin is for the Web3 Economy. Culture has found new expression in web3 through art, gaming, entertainment, and events."
      },
      SHRAP: {
        name: "Shrapnel SHRAP",
        symbol: "SHRAP",
        address: "0xbf4906762C38F50bC7Be0A11BB452C944f6C72E1",
        chainId: 250,
        decimals: 18,
        logoURI: "https://app.fbomb.finance/images/tokens/0xbf4906762C38F50bC7Be0A11BB452C944f6C72E1.png",
        website: "https://app.fbomb.finance/",
        description: "Shrapnel is an inflationary token launched along with BombSwap."
      },
      BSHARE: {
        name: "BSHARE",
        symbol: "BSHARE",
        address: "0x49C290Ff692149A4E16611c694fdED42C954ab7a",
        chainId: 250,
        decimals: 18,
        website: "https://basedfinance.io/",
        description: "Based Finance the first algorithmic token pegged to TOMB on the FTM Network.",
        logoURI: "https://assets.coingecko.com/coins/images/23507/small/based.PNG"
      },
      BASED: {
        name: "BASED",
        symbol: "BASED",
        address: "0x8D7d3409881b51466B483B11Ea1B8A03cdEd89ae",
        chainId: 250,
        decimals: 18,
        website: "https://basedfinance.io/",
        description: "Based Finance the first algorithmic token pegged to TOMB on the FTM Network.",
        logoURI: "https://assets.coingecko.com/coins/images/23535/small/BASED_TOKEN.109291b9.png"
      },
      ATLAS: {
        name: "Atlas Cloud",
        symbol: "ATLAS",
        address: "0x92df3eaBf7c1c2A6b3D5793f6d53778eA78c48b2",
        chainId: 250,
        decimals: 18,
        website: "https://atlascloud.network/",
        description: "Atlas Cloud is a Nodes-as-a-service protocol on a Fantom chain.",
        logoURI: "https://assets.spookyswap.finance/tokens/Atlas.png"
      },
      SOLID: {
        name: "Solidly",
        symbol: "SOLID",
        address: "0x888EF71766ca594DED1F0FA3AE64eD2941740A20",
        chainId: 250,
        decimals: 18,
        website: "https://solidly.exchange/",
        description: "Solidly is an AMM allowing fully decentralized token swapping with support for low slippage trades between pegged assets like stablecoins.",
        logoURI: "https://assets.spookyswap.finance/tokens/SOLID.png"
      },
      KAE: {
        name: "Kanpeki KAE",
        symbol: "KAE",
        address: "0x65Def5029A0e7591e46B38742bFEdd1Fb7b24436",
        chainId: 250,
        decimals: 18,
        logoURI: "https://assets.spookyswap.finance/tokens/KAE.png",
        website: "https://kanpeki.finance/",
        description: "Kanpeki is an incentivized, non-custodial, individualized, fixed-rate borrowing, and lending platform."
      },
      CRE8R: {
        name: "CRE8R DAO",
        symbol: "CRE8R",
        address: "0x2aD402655243203fcfa7dCB62F8A08cc2BA88ae0",
        chainId: 250,
        decimals: 18,
        website: "https://cre8r.vip/",
        description: "The worlds first & only decentralized Web3 content marketing agency DAO. Massively scalable. Fueled by DeFi.",
        logoURI: "https://app.spiritswap.finance/images/tokens/CRE8R.png"
      },
      DEI_OLD: {
        name: "DEI_OLD",
        symbol: "DEI_OLD",
        address: "0xDE12c7959E1a72bbe8a5f7A1dc8f8EeF9Ab011B3",
        chainId: 250,
        decimals: 18,
        website: "https://deus.finance/",
        description: "DEI is an advanced algorithmic cross-chain fractional-reserve stablecoin, with one native bridge that will connect to all chains within the DEUS ecosystem. The collateral ratio of DEI is constantly monitored and adjusted via arbitrage bots.",
        logoURI: "https://app.deus.finance/tokens/dei.svg",
        documentation: "https://docs.deus.finance/"
      },
      DEI: {
        name: "DEI",
        symbol: "DEI",
        address: "0xDE1E704dae0B4051e80DAbB26ab6ad6c12262DA0",
        chainId: 250,
        decimals: 18,
        website: "https://deus.finance/",
        description: "DEI is an advanced algorithmic cross-chain fractional-reserve stablecoin, with one native bridge that will connect to all chains within the DEUS ecosystem. The collateral ratio of DEI is constantly monitored and adjusted via arbitrage bots.",
        logoURI: "https://app.deus.finance/tokens/dei.svg",
        documentation: "https://docs.deus.finance/"
      },
      DEUS: {
        name: "DEUS",
        symbol: "DEUS",
        address: "0xDE5ed76E7c05eC5e4572CfC88d1ACEA165109E44",
        chainId: 250,
        decimals: 18,
        website: "https://deus.finance/",
        description: "DEUS Finance Evolution is a marketplace of decentralized financial services. We provide the infrastructure for others to build financial instruments, such as synthetic stock trading platforms, options and futures trading, and more.",
        logoURI: "https://app.deus.finance/tokens/deus.svg",
        documentation: "https://docs.deus.finance/"
      },
      WIGO: {
        name: "WigoSwap",
        symbol: "WIGO",
        address: "0xE992bEAb6659BFF447893641A378FbbF031C5bD6",
        chainId: 250,
        decimals: 18,
        website: "https://wigoswap.io/",
        description: "WigoSwap is a DeFi hub with lifetime farming earnings powered by Gamified Burning Mechanism (GBM).",
        logoURI: "https://wigoswap.io/images/tokens/0xE992bEAb6659BFF447893641A378FbbF031C5bD6.svg"
      },
      PAE: {
        name: "Ripae",
        symbol: "PAE",
        address: "0x8a41f13a4FaE75ca88B1ee726ee9D52B148b0498",
        chainId: 250,
        decimals: 18,
        website: "https://ripae.finance/",
        description: "Ripae Finance\u2019s full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: "https://ripae.finance/logo_pae.svg"
      },
      pFTM: {
        name: "pFTM",
        symbol: "pFTM",
        address: "0x112dF7E3b4B7Ab424F07319D4E92F41e6608c48B",
        chainId: 250,
        decimals: 18,
        website: "https://ripae.finance/",
        description: "Ripae Finance\u2019s full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: "https://ripae.finance/logo_pftm.svg"
      },
      MST: {
        name: "Monster",
        symbol: "MST",
        address: "0x152888854378201e173490956085c711f1DeD565",
        chainId: 250,
        decimals: 18,
        website: "https://www.metaland.game/",
        description: "MetaLand is an RPG in monsters' perspective based on the D20 rules. It balances casual and strategy, with a complete social system and an extremely strong meta-universe immersion.",
        logoURI: "https://assets.spookyswap.finance/tokens/MST.png"
      },
      FS: {
        name: "FantomStarter",
        symbol: "FS",
        address: "0xC758295Cd1A564cdb020a78a681a838CF8e0627D",
        chainId: 250,
        decimals: 18,
        website: "https://fantomstarter.io/",
        description: "With FantomStarter, you can raise and invest capital on any blockchain while the decentralized investment app manages all the regulatory, compliance, and multi network responsibilities.",
        logoURI: "https://assets.spookyswap.finance/tokens/FS.png"
      },
      PILLS: {
        name: "Morpheus Swap",
        symbol: "PILLS",
        address: "0xB66b5D38E183De42F21e92aBcAF3c712dd5d6286",
        chainId: 250,
        decimals: 18,
        website: "https://www.morpheusswap.app/",
        description: "A community DEX powered by Fantom.",
        logoURI: "https://assets.coingecko.com/coins/images/18306/small/pills.png?1639992136"
      },
      binSPIRIT: {
        name: "binSPIRIT",
        symbol: "binSPIRIT",
        address: "0x44e314190D9E4cE6d4C0903459204F8E21ff940A",
        chainId: 250,
        decimals: 18,
        website: "https://www.beefy.finance/",
        description: "binSPIRIT is the Beefy wrapped version of inSPIRIT which boosts Spirit vaults on Beefy. binSPIRIT can be traded or minted 1:1 with SPIRIT.",
        logoURI: "https://app.spiritswap.finance/images/tokens/BINSPIRIT.png"
      },
      CREDIT: {
        name: "Creditum",
        symbol: "CREDIT",
        address: "0x77128DFdD0ac859B33F44050c6fa272F34872B5E",
        chainId: 250,
        decimals: 18,
        website: "https://revenant.finance/creditum",
        description: "Creditum is a lending and borrowing protocol within the Fantom Ecosystem that allows users to borrow (or mint) cUSD, a stablecoin pegged at $1 USD, by posting different tokens as collateral.",
        logoURI: "https://revenant.finance/img/tokens/creditum.png"
      },
      xCREDIT: {
        name: "xCREDIT",
        symbol: "xCREDIT",
        address: "0xd9e28749e80D867d5d14217416BFf0e668C10645",
        chainId: 250,
        decimals: 18,
        website: "https://revenant.finance/creditum/farm",
        description: "As users farm the Creditum LP rewards, 10% of the rewards are added to the xCREDIT contract to increase the staked CREDIT pool size for all xCREDIT holders.",
        logoURI: "https://revenant.finance/img/tokens/creditum.png"
      },
      cUSD: {
        name: "Creditum USD",
        symbol: "cUSD",
        address: "0xE3a486C1903Ea794eED5d5Fa0C9473c7D7708f40",
        chainId: 250,
        decimals: 18,
        website: "https://revenant.finance/creditum/cusd",
        description: "Users can deposit collateral into the Creditum platform and then borrow (mint) cUSD based on the USD value of the collateral deposited.",
        logoURI: "https://revenant.finance/img/tokens/cUSD.png"
      },
      gOHM: {
        name: "Governance OHM",
        symbol: "gOHM",
        address: "0x91fa20244Fb509e8289CA630E5db3E9166233FDc",
        chainId: 250,
        decimals: 18,
        website: "https://www.olympusdao.finance/",
        description: "Olympus is building a community-owned decentralized financial infrastructure to bring more stability and transparency for the world.",
        logoURI: "https://assets.coingecko.com/coins/images/14483/large/token_OHM_%281%29.png?1628311611"
      },
      OXD: {
        name: "0xDAO",
        symbol: "OXD",
        address: "0xc165d941481e68696f43EE6E99BFB2B23E0E3114",
        chainId: 250,
        decimals: 18,
        website: "https://www.oxdao.fi/",
        description: "The aim of 0xDAO is to provide a fully decentralized infrastructure, one that maximizes profits, capital efficiency and voting power for 0xDAO, creating a free market for established protocols on Fantom looking to increase liquidity.",
        logoURI: "https://assets.spookyswap.finance/tokens/OXD.png"
      },
      fBEETS: {
        name: "Fresh BEETS",
        symbol: "fBEETS",
        address: "0xfcef8a994209d6916EB2C86cDD2AFD60Aa6F54b1",
        chainId: 250,
        decimals: 18,
        website: "https://beets.fi/#/stake",
        description: "30% of Beethoven X protocol revenue is used to reward fBEETS holders. When you stake your Fidelio Duetto BPTs, you receive fBEETS in return.",
        logoURI: "https://beets.fi/img/fBEETS.a3146dd6.png"
      },
      xSCREAM: {
        name: "xSCREAM",
        symbol: "xSCREAM",
        address: "0xe3D17C7e840ec140a7A51ACA351a482231760824",
        chainId: 250,
        decimals: 18,
        website: "https://scream.sh/stake",
        description: "When SCREAM is deposited for xSCREAM, your share of xSCREAM increases your holding of SCREAM as fees are accumulated to do buybacks of SCREAM tokens.",
        logoURI: "https://scream.sh/img/scream-multi.png"
      },
      xBOO: {
        name: "BOO MirrorWorld",
        symbol: "xBOO",
        address: "0xa48d959AE2E88f1dAA7D5F611E01908106dE7598",
        chainId: 250,
        decimals: 18,
        website: "https://spookyswap.finance/pools",
        description: "When you stake your BOOs into xBOO (in the Buyback BOO Pool) and then into a pool listed, you are earning a sum of the APRs!",
        logoURI: "https://assets.coingecko.com/coins/images/22609/large/xboo.png?1642220445"
      },
      MULTI: {
        name: "Multichain",
        symbol: "MULTI",
        address: "0x9Fb9a33956351cf4fa040f65A13b835A3C8764E3",
        chainId: 250,
        decimals: 18,
        website: "https://multichain.org/",
        description: "Multichain is the ultimate Router for web3. It is an infrastructure developed for arbitrary cross-chain interactions.",
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/17050.png"
      },
      JEWEL: {
        name: "Jewels",
        symbol: "JEWEL",
        address: "0xD97F9674E2597e7a252de4875985f4385B9608fB",
        chainId: 250,
        decimals: 18,
        website: "https://defikingdoms.com/",
        description: "The JEWEL token can be used to purchase the most useful items and unique NFTs such as Heroes and Kingdoms in the game DefiKingdoms. JEWEL is also a governance token, so holders will have a say in the growth and evolution of the project.",
        logoURI: "https://assets.coingecko.com/coins/images/18570/small/fAisLIV.png?1632449282"
      },
      "2SHARES": {
        name: "2SHARES",
        symbol: "2SHARES",
        address: "0xc54A1684fD1bef1f077a336E6be4Bd9a3096a6Ca",
        chainId: 250,
        decimals: 18,
        website: "https://2omb.finance/",
        description: "A fork of tomb.finance, pegged to the price of 1 FTM via seigniorage.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/2SHARES.png"
      },
      "2OMB": {
        name: "2OMB",
        symbol: "2OMB",
        address: "0x7a6e4E3CC2ac9924605DCa4bA31d1831c84b44aE",
        chainId: 250,
        decimals: 18,
        website: "https://2omb.finance/",
        description: "A fork of tomb.finance, pegged to the price of 1 FTM via seigniorage.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/2OMB.png"
      },
      BRUSH: {
        name: "PaintSwap",
        symbol: "BRUSH",
        address: "0x85dec8c4B2680793661bCA91a8F129607571863d",
        chainId: 250,
        decimals: 18,
        website: "https://paintswap.finance/",
        description: "PaintSwap combines an open NFT marketplace with a decentralized exchange (AMM) on the Fantom Opera Network.",
        logoURI: "https://assets.spookyswap.finance/tokens/BRUSH.png"
      },
      WSTA: {
        name: "Wrapped STA",
        symbol: "WSTA",
        address: "0xCEeBDE49eC95E21F7eE63C5c6f98CaB3519570de",
        chainId: 250,
        decimals: 18,
        website: "https://www.stateratoken.com/",
        description: "Statera (consisting of the STA and wSTA tokens) is a smart contract powered Indexed Deflationary Ecosystem, which synergizes with a trustless and community-driven portfolio of class-leading cryptocurrencies.",
        logoURI: "https://ftmscan.com/token/images/stateratoken_32.png"
      },
      CHARM: {
        name: "CHARM",
        symbol: "CHARM",
        address: "0x248CB87DDA803028dfeaD98101C9465A2fbdA0d4",
        chainId: 250,
        decimals: 18,
        website: "https://spartacadabra.money/",
        description: "Spartacadabra unlocks yield bearing assets and conjures magic stable coin Lambda (\u03BB).",
        logoURI: "https://assets.coingecko.com/coins/images/21208/small/vXl4xT-P_400x400.png?1638567924"
      },
      LUNAw: {
        name: "LUNA (Wormhole)",
        symbol: "LUNA",
        address: "0x593AE1d34c8BD7587C11D539E4F42BFf242c82Af",
        chainId: 250,
        decimals: 6,
        website: "https://www.terra.money/",
        description: "Terras native token, LUNA, is used to stabilize the price of the protocols stablecoins.",
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/4172.png"
      },
      UST: {
        name: "USD Terra (anyswap)",
        symbol: "UST",
        address: "0xe2D27f06F63d98b8e11b38b5b08A75D0c8dD62B9",
        chainId: 250,
        decimals: 18,
        website: "https://www.terra.money/",
        description: "Terra stablecoins offer instant settlements, low fees and seamless cross-border exchange - loved by millions of users and merchants.",
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/7129.png"
      },
      USTw: {
        name: "TerraUSD (Wormhole)",
        symbol: "UST",
        address: "0x846e4D51d7E2043C1a87E0Ab7490B93FB940357b",
        chainId: 250,
        decimals: 6,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/7129.png",
        website: "https://coinmarketcap.com/currencies/terrausd-wormhole/",
        description: "Terra stablecoins offer instant settlements, low fees and seamless cross-border exchange - loved by millions of users and merchants."
      },
      USTaxl: {
        name: "TerraUSD (Axelar)",
        symbol: "UST",
        address: "0x2B9d3F168905067D88d93F094C938BACEe02b0cB",
        chainId: 250,
        decimals: 6,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/7129.png",
        website: "https://coinmarketcap.com/currencies/terrausd-wormhole/",
        description: "Terra stablecoins offer instant settlements, low fees and seamless cross-border exchange - loved by millions of users and merchants."
      },
      SOL: {
        name: "Solana",
        symbol: "SOL",
        address: "0x44F7237df00E386af8e79B817D05ED9f6FE0f296",
        decimals: 18,
        chainId: 250,
        website: "https://solana.com/",
        description: "Solana is the fastest blockchain in the world and the fastest growing ecosystem in crypto, with over 400 projects spanning DeFi, NFTs, Web3 and more.",
        logoURI: "https://assets.coingecko.com/coins/images/4128/large/Solana.jpg?1635329178"
      },
      TUSD: {
        name: "True USD",
        symbol: "TUSD",
        address: "0x9879aBDea01a879644185341F7aF7d8343556B7a",
        decimals: 18,
        chainId: 250,
        website: "https://www.trueusd.com/",
        description: "TrueUSD is one of a number of cryptocurrency stablecoins administered by TrustToken, a platform for tokenizing real-world assets.",
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/200x200/2563.png"
      },
      JOE: {
        name: "Joe Token",
        symbol: "JOE",
        address: "0x9F47F313ACFd4bdC52F4373b493EaE7d5aC5b765",
        decimals: 18,
        chainId: 250,
        website: "https://www.traderjoexyz.com/#/home",
        description: "Trader Joe is your one-stop decentralized trading platform on the Avalanche network, of which JOE is the governance token that rewards its holders with a share of exchange revenues.",
        logoURI: "https://www.traderjoexyz.com/static/media/logo.bc60f78d.png"
      },
      SUMMIT: {
        name: "SUMMIT",
        symbol: "SUMMIT",
        address: "0x8F9bCCB6Dd999148Da1808aC290F2274b13D7994",
        decimals: 18,
        chainId: 250,
        logoURI: "https://assets.coingecko.com/coins/images/19389/small/CE2Sdy2.png",
        description: 'Introducing "Yield Multiplying" to the world of DeFi.',
        website: "https://summitdefi.com/"
      },
      PEAR: {
        name: "PearZap",
        symbol: "PEAR",
        address: "0x7C10108d4B7f4bd659ee57A53b30dF928244b354",
        decimals: 18,
        chainId: 250,
        logoURI: "https://assets.coingecko.com/coins/images/17173/small/pear200.png",
        description: "High yields farms & pools on the Polygon chain & Binance Smart Chain",
        website: "https://fantom.pearzap.com/"
      },
      TAROT: {
        name: "Tarot",
        symbol: "TAROT",
        address: "0xC5e2B037D30a390e62180970B3aa4E91868764cD",
        chainId: 250,
        decimals: 18,
        website: "https://www.tarot.to/",
        description: "Tarot is a decentralized lending protocol on Fantom Opera where users can participate as lenders or borrowers in isolated lending pools.",
        logoURI: "https://assets.coingecko.com/coins/images/17881/large/tarot-200px.png?1629704943"
      },
      MAI: {
        name: "Mai",
        symbol: "miMATIC",
        address: "0xfB98B335551a418cD0737375a2ea0ded62Ea213b",
        chainId: 250,
        decimals: 18,
        website: "https://www.mai.finance/",
        description: "MAI is a stablecoin collateralized by your crypto holdings. It's powered by Qi Dao, a protocol that enables any cryptocurrency community to create stablecoins backed by their native tokens.",
        logoURI: "https://raw.githubusercontent.com/0xlaozi/qidao/main/images/mimatic-red.png",
        documentation: "https://docs.mai.finance/"
      },
      BEETS: {
        name: "Beethoven X Token",
        symbol: "BEETS",
        address: "0xF24Bcf4d1e507740041C9cFd2DddB29585aDCe1e",
        chainId: 250,
        decimals: 18,
        website: "https://beethovenx.io/",
        description: "BEETS is the governance token for the Beethoven X protocol. Built on Balancer V2, Beethoven X is the first next-generation AMM protocol on Fantom.",
        logoURI: "https://assets.coingecko.com/coins/images/19158/small/beets-icon-large.png?1634545465"
      },
      fSING: {
        name: "Sing Token",
        symbol: "SING",
        address: "0x53D831e1db0947c74e8a52618f662209ec5dE0cE",
        chainId: 250,
        decimals: 18,
        website: "https://singular.farm/",
        description: "Singular is a multichain, decentralized, strategic yield farm running on Polygon, BSC, Fantom and Okchain. Users are incentivized with a triple farming system.",
        logoURI: "https://github.com/singularfarm/assets/blob/main/400.png?raw=true"
      },
      GEIST: {
        name: "GEIST",
        symbol: "GEIST",
        address: "0xd8321AA83Fb0a4ECd6348D4577431310A6E0814d",
        chainId: 250,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/18832/small/GEIST-token.png?1633560935",
        website: "https://geist.finance/",
        description: "Geist is a decentralised non-custodial liquidity market protocol where users can participate as depositors or borrowers."
      },
      fWINGS: {
        name: "fWINGS",
        symbol: "fWINGS",
        address: "0x3D8f1ACCEe8e263F837138829B6C4517473d0688",
        chainId: 250,
        decimals: 18,
        logoURI: "https://fantom-exchange.jetswap.finance/images/coins/wings.png",
        website: "https://fantom.jetswap.finance/",
        description: "JetSwap AMM"
      },
      STEAK: {
        name: "SteakToken",
        symbol: "STEAK",
        address: "0x05848B832E872d9eDd84AC5718D58f21fD9c9649",
        chainId: 250,
        decimals: 18,
        logoURI: "https://assets.spookyswap.finance/tokens/STEAK.png",
        website: "https://stakesteak.com/",
        description: "StakeSteak's mission is to build lasting infrastructure to stabilize fUSD at $1.00"
      },
      FOO: {
        name: "Fantums of Opera Token",
        symbol: "FOO",
        address: "0xFbc3c04845162F067A0B6F8934383E63899c3524",
        chainId: 250,
        decimals: 18,
        logoURI: "https://assets.spookyswap.finance/tokens/FOO.png",
        website: "https://fantums.com/",
        description: "Fantums are Opera themed digital collectibles (NFTs) on the Fantom blockchain."
      },
      ZOO: {
        name: "ZooCoin",
        address: "0x09e145A1D53c0045F41aEEf25D8ff982ae74dD56",
        symbol: "ZOO",
        decimals: 0,
        chainId: 250,
        website: "https://zoocoin.cash/",
        description: "Zoo is an ecosystem of decentralized applications powered by Fantom network. Primary projects token (ZOO) is utilized within the ecosystem among various of developed and planned projects - portfolio monitoring solution ZooWallet, ZooPet (first ever NFT marketplace released on Fantom), charting provider ZooCharts, decentralized exchange ZooDex, trading insights aggregator ZooTrade and other.",
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/200x200/9007.png"
      },
      MIM: {
        name: "Magic Internet Money",
        address: "0x82f0B8B456c1A451378467398982d4834b6829c1",
        symbol: "MIM",
        decimals: 18,
        chainId: 250,
        website: "https://abracadabra.money/",
        description: "You, the Spellcaster, can provide collateral in the form of various interest bearing crypto assets such as yvYFI, yvUSDT, yvUSDC, xSUSHI and more. With this, you can borrow magic internet money (MIM) which is a stable coin that you can swap for any other traditional stable coin.",
        logoURI: "",
        documentation: "https://docs.abracadabra.money/"
      },
      DIS: {
        name: "TosDis",
        symbol: "DIS",
        address: "0x0e121961DD741C9D49C9A04379da944A9D2FAc7a",
        chainId: 250,
        decimals: 18,
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xf981547a1D9A0c59C9aba1e2b826BF01a2e5E263/logo.png",
        website: "https://tosdis.finance/",
        description: "The One Stop Defi Interoperable Solution powered with Liquid Staking"
      },
      BUSD: {
        name: "Binance USD",
        address: "0xC931f61B1534EB21D8c11B24f3f5Ab2471d4aB50",
        symbol: "BUSD",
        decimals: 18,
        chainId: 250,
        website: "https://www.binance.com/en/busd/",
        description: "These are digitised US Dollars and are always purchased and redeemed at 1 BUSD for 1 US dollar.",
        logoURI: ""
      },
      SPIRIT: {
        name: "SpiritSwap",
        address: "0x5Cc61A78F164885776AA610fb0FE1257df78E59B",
        symbol: "SPIRIT",
        decimals: 18,
        chainId: 250,
        website: "https://app.spiritswap.finance/#/",
        description: "SpiritSwap is a decentralized exchange (DEX) on the Fantom Opera Chain. SpiritSwap's design is based on the Uniswap constant-product automated market maker (AMM).",
        logoURI: "https://raw.githubusercontent.com/Layer3Org/spiritswap-tokens-list-icon/master/token-list/images/0x5Cc61A78F164885776AA610fb0FE1257df78E59B.png"
      },
      TSHARE: {
        name: "TSHARE",
        address: "0x4cdF39285D7Ca8eB3f090fDA0C069ba5F4145B37",
        symbol: "TSHARE",
        decimals: 18,
        chainId: 250,
        website: "https://tomb.finance/",
        description: "TOMB Shares (TSHARE) are one of the ways to measure the value of the TOMB Protocol and shareholder trust in its ability to maintain TOMB close to peg. During epoch expansions the protocol mints TOMB and distributes it proportionally to all TSHARE holders who have staked their tokens in the Masonry (boardroom).",
        logoURI: "https://assets.spookyswap.finance/tokens/TSHARE.png"
      },
      TOMB: {
        name: "TOMB",
        address: "0x6c021Ae822BEa943b2E66552bDe1D2696a53fbB7",
        symbol: "TOMB",
        decimals: 18,
        chainId: 250,
        website: "https://tomb.finance/",
        description: "The first algorithmic stablecoin on Fantom Opera, pegged to the price of 1 FTM via seigniorage",
        logoURI: "https://assets.spookyswap.finance/tokens/TOMB.png"
      },
      FTM,
      WFTM: FTM,
      WNATIVE: FTM,
      sFTM: {
        name: "Staked FTM",
        address: "0x69c744D3444202d35a2783929a0F930f2FBB05ad",
        symbol: "sFTM",
        decimals: 18,
        chainId: 250,
        website: "https://fantom.foundation/defi/?__cf_chl_jschl_tk__=pmd_vfkYw1Z8PZor5oxGKrd9bxYd66paY0bLiQmy1dKOLpY-1633331752-0-gqNtZGzNAdCjcnBszQlR",
        description: "Fantom offers the first DeFi stack built on an aBFT consensus. It\u2019s much faster, cheaper, and more reliable and secure than its predecessors.",
        logoURI: "https://repository.fantom.network/logos/sftm.svg"
      },
      fWTIOIL: {
        name: "fWTI Oil",
        address: "0xe297e06761a5489380538A0308B6F9b4A53Bea45",
        symbol: "fWTIOIL",
        decimals: 18,
        chainId: 250,
        website: "https://fantom.foundation/defi/",
        description: "Fantom offers the first DeFi stack built on an aBFT consensus. It\u2019s much faster, cheaper, and more reliable and secure than its predecessors.",
        logoURI: "https://repository.fantom.network/logos/wti.svg"
      },
      fSILVER: {
        name: "fSilver",
        address: "0xf15e88EEf35BF4709A4C3E99c00358F9247D4531",
        symbol: "fSILVER",
        decimals: 18,
        chainId: 250,
        website: "https://fantom.foundation/defi/",
        description: "Frapped an innovative wrapper for silver tokens.",
        logoURI: "https://repository.fantom.network/logos/silver.svg"
      },
      fLINK: {
        name: "fLINK",
        address: "0xA649A19423052dC6b320360B3C760884E095AC57",
        symbol: "fLINK",
        decimals: 18,
        chainId: 250,
        website: "https://fantom.foundation/defi/",
        description: "Frapped an innovative wrapper for LINK tokens.",
        logoURI: "https://repository.fantom.network/logos/link.svg"
      },
      fKRW: {
        name: "fKRW",
        address: "0x2b9C073Ec670b70F417bbaf3BbB052AA563A0a23",
        symbol: "fKRW",
        decimals: 18,
        chainId: 250,
        logoURI: "https://repository.fantom.network/logos/krw.svg"
      },
      fJPY: {
        name: "fJPY",
        address: "0x3B74389bc23057325BaB96523DBec8c445F55799",
        symbol: "fJPY",
        decimals: 18,
        chainId: 250,
        logoURI: "https://repository.fantom.network/logos/jpy.svg"
      },
      fGOLD: {
        name: "fGold",
        address: "0x2202C52C9076A49400aaccf159e1956269eaa673",
        symbol: "fGOLD",
        decimals: 18,
        chainId: 250,
        logoURI: "https://repository.fantom.network/logos/gold.svg"
      },
      fGBP: {
        name: "fGBP",
        address: "0xcDE58e4B6c7b78B04da664Edb0a9752CC5FEDBd5",
        symbol: "fGBP",
        decimals: 18,
        chainId: 250,
        logoURI: "https://repository.fantom.network/logos/gbp.svg"
      },
      fEUR: {
        name: "fEUR",
        address: "0xe105621721D1293c27be7718e041a4Ce0EbB227E",
        symbol: "fEUR",
        decimals: 18,
        chainId: 250,
        logoURI: "https://repository.fantom.network/logos/euro.svg"
      },
      fETH: {
        name: "fETH",
        address: "0x658b0c7613e890EE50B8C4BC6A3f41ef411208aD",
        symbol: "fETH",
        decimals: 18,
        chainId: 250,
        logoURI: "https://repository.fantom.network/logos/eth.svg"
      },
      fCNY: {
        name: "fCNY",
        address: "0x24d39324CF3697Fd9Fd78714E8cdeB5Df66E3DCd",
        symbol: "fCNY",
        decimals: 18,
        chainId: 250,
        logoURI: "https://repository.fantom.network/logos/cny.svg"
      },
      fCHF: {
        name: "fCHF",
        address: "0x81740D647493a61329E1c574A11ee7577659fb14",
        symbol: "fCHF",
        decimals: 18,
        chainId: 250,
        logoURI: "https://repository.fantom.network/logos/chf.svg"
      },
      fBTC: {
        name: "fBTC",
        address: "0xe1146b9AC456fCbB60644c36Fd3F868A9072fc6E",
        symbol: "fBTC",
        decimals: 18,
        chainId: 250,
        logoURI: "https://repository.fantom.network/logos/bitcoin.svg"
      },
      fBNB: {
        name: "fBNB",
        address: "0x27f26F00e1605903645BbaBC0a73E35027Dccd45",
        symbol: "fBNB",
        decimals: 18,
        chainId: 250,
        logoURI: "https://repository.fantom.network/logos/bnb.svg"
      },
      fBAND: {
        name: "fBAND",
        address: "0x078EEF5A2fb533e1a4d487ef64b27DF113d12C32",
        symbol: "fBAND",
        decimals: 18,
        chainId: 250,
        logoURI: "https://repository.fantom.network/logos/band.svg"
      },
      LINK: {
        name: "ChainLink",
        address: "0xb3654dc3D10Ea7645f8319668E8F54d2574FBdC8",
        symbol: "LINK",
        decimals: 18,
        website: "https://chain.link/",
        description: "Link is the currency used to pay the Chainlink node operators for their work. Chainlink node operators have to stake LINK in the network in order to participate and provide data services.",
        chainId: 250,
        logoURI: "https://ftmscan.com/token/images/chainlink_32.png"
      },
      USDC: {
        name: "USD Coin",
        address: "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
        symbol: "USDC",
        decimals: 6,
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        chainId: 250,
        logoURI: "https://ftmscan.com/token/images/USDC_32.png"
      },
      WBTC: __assign(__assign({}, BTC), { symbol: "WBTC", website: "https://wbtc.network/", description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led." }),
      BTC,
      AAVE: {
        name: "Aave",
        address: "0x6a07A792ab2965C72a5B8088d3a069A7aC3a993B",
        symbol: "AAVE",
        decimals: 18,
        chainId: 250,
        website: "https://aave.com/",
        description: "Aave is a decentralized non-custodial liquidity protocol where users can participate as depositors or borrowers. Depositors provide liquidity to the market to earn a passive income, while borrowers are able to borrow in an overcollateralized (perpetually) or undercollateralized (one-block liquidity) fashion.",
        logoURI: "https://ftmscan.com/token/images/aave_32.png"
      },
      DAI: {
        name: "Dai Stablecoin",
        address: "0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E",
        symbol: "DAI",
        decimals: 18,
        chainId: 250,
        website: "https://makerdao.com/en/",
        description: "Dai is a stable, decentralized currency that does not discriminate. Any individual or business can realize the advantages of digital money.",
        logoURI: "https://ftmscan.com/token/images/MCDDai_32.png"
      },
      SUSHI: {
        name: "Sushi",
        address: "0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC",
        symbol: "SUSHI",
        decimals: 18,
        chainId: 250,
        website: "https://sushi.com/",
        description: "Sushi is the home of DeFi. Their community is building a comprehensive, decentralized trading platform for the future of finance. Swap, earn, stack yields, lend, borrow, leverage all on one decentralized, community driven platform.",
        logoURI: "https://ftmscan.com/token/images/sushiswap_32.png"
      },
      YFI: {
        name: "yearn.finance",
        address: "0x29b0Da86e484E1C0029B56e817912d778aC0EC69",
        symbol: "YFI",
        decimals: 18,
        chainId: 250,
        website: "https://yearn.finance/",
        description: "Yearn Finance is a suite of products in Decentralized Finance (DeFi) that provides lending aggregation, yield generation, and insurance on the Ethereum blockchain. The protocol is maintained by various independent developers and is governed by YFI holders.",
        logoURI: "https://ftmscan.com/token/images/YFI_32.png"
      },
      CRV: {
        name: "Curve DAO",
        address: "0x1E4F97b9f9F913c46F1632781732927B9019C68b",
        symbol: "CRV",
        decimals: 18,
        chainId: 250,
        website: "https://curve.fi/",
        description: "Curve is an exchange liquidity pool on Ethereum. Curve is designed for extremely efficient stablecoin trading and low risk, supplemental fee income for liquidity providers, without an opportunity cost.",
        logoURI: "https://ftmscan.com/token/images/CurveFi_32.png"
      },
      BAND: {
        name: "Band",
        address: "0x46E7628E8b4350b2716ab470eE0bA1fa9e76c6C5",
        symbol: "BAND",
        decimals: 18,
        chainId: 250,
        website: "https://bandprotocol.com/",
        description: "Band Protocol is a cross-chain data oracle platform that aggregates and connects real-world data and APIs to smart contracts.",
        logoURI: "https://ftmscan.com/token/images/bandprotocol_32.png"
      },
      SFI: {
        name: "Spice",
        address: "0x924828a9Fb17d47D0eb64b57271D10706699Ff11",
        symbol: "SFI",
        decimals: 18,
        chainId: 250,
        website: "https://scifi.finance/",
        description: "The SPICE DAO is a decentralised community that launches and governs tokenised investment funds.",
        logoURI: "https://ftmscan.com/token/images/saffron_32.png"
      },
      HEGIC: {
        name: "Hegic",
        address: "0x44B26E839eB3572c5E959F994804A5De66600349",
        symbol: "HEGIC",
        decimals: 18,
        chainId: 250,
        website: "https://www.hegic.co/",
        description: "Trade non-custodial options for profits or to hedge your positions. Enjoy fixed price and unlimited upside of the options contracts.",
        logoURI: "https://ftmscan.com/token/images/hegic_32.png"
      },
      anyFRAX: {
        name: "Frax",
        address: "0xaf319E5789945197e365E7f7fbFc56B130523B33",
        symbol: "FRAX",
        decimals: 18,
        chainId: 250,
        website: "https://frax.finance/",
        description: "The Frax Protocol introduced the world to the concept of a cryptocurrency being partially backed by collateral and partially stabilized algorithmically.",
        logoURI: "https://ftmscan.com/token/images/fraxfinance_32.png"
      },
      FRAX: {
        name: "Frax",
        address: "0xdc301622e621166BD8E82f2cA0A26c13Ad0BE355",
        symbol: "FRAX",
        decimals: 18,
        chainId: 250,
        website: "https://frax.finance/",
        description: "The Frax Protocol introduced the world to the concept of a cryptocurrency being partially backed by collateral and partially stabilized algorithmically.",
        logoURI: "https://ftmscan.com/token/images/fraxfinance_32.png",
        documentation: "https://docs.frax.finance/"
      },
      FXS: {
        name: "Frax Share",
        symbol: "FXS",
        address: "0x7d016eec9c25232b01F23EF992D98ca97fc2AF5a",
        chainId: 250,
        decimals: 18,
        logoURI: "",
        website: "https://frax.finance/",
        description: "The Frax Protocol introduced the world to the concept of a cryptocurrency being partially backed by collateral and partially stabilized algorithmically.",
        documentation: "https://docs.frax.finance/"
      },
      COVER: {
        name: "Cover",
        address: "0xB01E8419d842beebf1b70A7b5f7142abbaf7159D",
        symbol: "COVER",
        decimals: 18,
        chainId: 250,
        website: "https://www.coverprotocol.com/",
        description: "Cover Protocol provides peer to peer coverage with fungible tokens. It lets the market set coverage prices as opposed to a bonding curve.",
        logoURI: "https://ftmscan.com/token/images/cover_32.png"
      },
      KP3R: {
        name: "Keep3r",
        address: "0x2A5062D22adCFaAfbd5C541d4dA82E4B450d4212",
        symbol: "KP3R",
        decimals: 18,
        chainId: 250,
        website: "https://keep3r.network/",
        description: "Keep3r Network is a decentralized keeper network for projects that need external devops and for external teams to find keeper jobs.",
        logoURI: "https://ftmscan.com/token/images/kp3r_32.png"
      },
      WETH: __assign(__assign({}, ETH), { symbol: "WETH" }),
      ETH,
      CREAM: {
        name: "Cream",
        address: "0x657A1861c15A3deD9AF0B6799a195a249ebdCbc6",
        symbol: "CREAM",
        decimals: 18,
        chainId: 250,
        website: "https://app.cream.finance/",
        description: "C.R.E.A.M. Finance is a decentralized lending protocol for individuals, institutions and protocols to access financial services.",
        logoURI: "https://ftmscan.com/token/images/CreamFinance_32.png"
      },
      sUSD: {
        name: "Synth sUSD",
        address: "0x0E1694483eBB3b74d3054E383840C6cf011e518e",
        symbol: "sUSD",
        decimals: 18,
        chainId: 250,
        website: "https://synthetix.io/",
        description: "Tracks the price of a single US dollar (USD). The synth always remains at a constant of 1.",
        logoURI: "https://ftmscan.com/token/images/sUSD_32.png"
      },
      SNX: {
        name: "Synthetix Network",
        address: "0x56ee926bD8c72B2d5fa1aF4d9E4Cbb515a1E3Adc",
        symbol: "SNX",
        decimals: 18,
        chainId: 250,
        website: "https://synthetix.io/",
        description: "Synthetix is the backbone for derivatives trading in DeFi, allowing anyone, anywhere to gain on-chain exposure to a vast range of assets.",
        logoURI: "https://ftmscan.com/token/images/Synthetix_SNX_32.png"
      },
      ICE: {
        name: "IceToken",
        address: "0xf16e81dce15B08F326220742020379B855B87DF9",
        symbol: "ICE",
        decimals: 18,
        chainId: 250,
        website: "https://popsicle.finance/",
        description: "Popsicle is a next-gen cross-chain yield enhancement platform focusing on Automated Market-Making (AMM) Liquidity Providers (LP).",
        logoURI: "https://raw.githubusercontent.com/sushiswap/assets/master/blockchains/ethereum/assets/0xf16e81dce15B08F326220742020379B855B87DF9/logo.png"
      },
      fUSDT: {
        name: "Frapped USDT",
        address: "0x049d68029688eAbF473097a2fC38ef61633A3C7A",
        symbol: "fUSDT",
        decimals: 6,
        chainId: 250,
        website: "https://frapped.io/",
        description: "Frapped an innovative wrapper for USDT tokens.",
        logoURI: "https://raw.githubusercontent.com/sushiswap/assets/master/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png"
      },
      BADGER: {
        name: "Badger",
        address: "0x753fbc5800a8C8e3Fb6DC6415810d627A387Dfc9",
        symbol: "BADGER",
        decimals: 18,
        chainId: 250,
        website: "https://badger.finance/",
        description: "DAO dedicated to building products and infrastructure to bring Bitcoin to DeFi.",
        logoURI: "https://raw.githubusercontent.com/sushiswap/assets/master/blockchains/ethereum/assets/0x3472A5A71965499acd81997a54BBA8D852C6E53d/logo.png"
      },
      BIFI: {
        name: "Beefy.Finance",
        symbol: "BIFI",
        address: "0xd6070ae98b8069de6B494332d1A1a81B6179D960",
        chainId: 250,
        decimals: 18,
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      ANY: {
        name: "AnySwap",
        symbol: "ANY",
        address: "0xdDcb3fFD12750B45d32E084887fdf1aABAb34239",
        chainId: 250,
        decimals: 18,
        website: "https://anyswap.exchange/dashboard",
        description: "Anyswap is a fully decentralized cross chain swap protocol, based on Fusion DCRM technology, with automated pricing and liquidity system.",
        logoURI: "https://ftmscan.com/token/images/anyswap_32.png"
      },
      WOOFY: {
        name: "Woofy",
        symbol: "WOOFY",
        address: "0xD0660cD418a64a1d44E9214ad8e459324D8157f1",
        chainId: 250,
        decimals: 12,
        website: "https://woofy.finance/",
        description: "The WOOFY token is the blue dog companion token of YFI. Utilizing special Woof technology, it allows two-way conversion between the two tokens, allowing holders to be exposed to YFI in a fluffier package.",
        logoURI: "https://raw.githubusercontent.com/yearn/yearn-assets/master/icons/tokens/0xD0660cD418a64a1d44E9214ad8e459324D8157f1/logo-128.png"
      },
      BNB: {
        name: "Binance Chain",
        symbol: "BNB",
        address: "0xD67de0e0a0Fd7b15dC8348Bb9BE742F3c5850454",
        chainId: 250,
        decimals: 18,
        website: "https://www.binance.com/",
        description: "Binance Coin (BNB) is an exchange-based token created and issued by the cryptocurrency exchange Binance. Initially created on the Ethereum blockchain as an ERC-20 token in July 2017, BNB was migrated over to Binance Chain in February 2019 and became the native coin of the Binance Chain.",
        logoURI: "https://assets.coingecko.com/coins/images/825/large/binance-coin-logo.png"
      },
      BOO: {
        name: "Spooky Swap",
        symbol: "BOO",
        address: "0x841FAD6EAe12c286d1Fd18d1d525DFfA75C7EFFE",
        chainId: 250,
        decimals: 18,
        website: "https://spookyswap.finance/",
        description: "SpookySwap is an automated market-making (AMM) decentralized exchange (DEX) for the Fantom Opera network. Different from other DEXs, we're invested in building a strong foundation with our BOO token as a governance token, diverse farms, grants to encourage a healthy ecology of other Fantom projects, and user-centered service.",
        logoURI: "https://assets.spookyswap.finance/tokens/BOO.png"
      },
      SCREAM: {
        name: "Scream Finance",
        symbol: "SCREAM",
        address: "0xe0654C8e6fd4D733349ac7E09f6f23DA256bF475",
        chainId: 250,
        decimals: 18,
        website: "https://scream.sh",
        description: "SCREAM is a highly-scalable decentralised lending protocol built and powered by the Fantom Blockchain.",
        logoURI: "https://scream.sh/img/scream-multi.png"
      },
      KEK: {
        name: "KEK",
        symbol: "KEK",
        address: "0x627524d78B4fC840C887ffeC90563c7A42b671fD",
        chainId: 250,
        decimals: 18,
        website: "https://kek.tools/",
        description: "A token tracker on the Fantom network",
        logoURI: "https://assets.spookyswap.finance/tokens/KEK.png"
      },
      TREEB: {
        name: "retreeb",
        symbol: "TREEB",
        address: "0xc60D7067dfBc6f2caf30523a064f416A5Af52963",
        chainId: 250,
        decimals: 18,
        website: "https://retreeb.io/",
        description: "Discover retreeb, a new decentralized way to pay, simple, practical, economical, which allows you to act in accordance with the universal values of ethics, sharing and solidarity.",
        logoURI: "https://assets.spookyswap.finance/tokens/TREEB.png"
      },
      WOO: {
        name: "Woo Exchange",
        symbol: "WOO",
        address: "0x6626c47c00F1D87902fc13EECfaC3ed06D5E8D8a",
        chainId: 250,
        decimals: 18,
        website: "https://woo.org/",
        description: "Featuring deep liquidity for superior order execution, zero-fee trading, and fully customizable trading workspaces.",
        logoURI: "https://assets.spookyswap.finance/tokens/WOO.png"
      },
      SHADE: {
        name: "Shade Cash",
        symbol: "SHADE",
        address: "0x3A3841f5fa9f2c283EA567d5Aeea3Af022dD2262",
        chainId: 250,
        decimals: 18,
        website: "https://shade.cash/",
        description: "A decentralized protocol for private transactions on Fantom Opera",
        logoURI: "https://assets.spookyswap.finance/tokens/SHADE.png"
      },
      JUST: {
        name: "JustYours",
        symbol: "JUST",
        address: "0x37C045bE4641328DFEB625f1Dde610D061613497",
        chainId: 250,
        decimals: 10,
        website: "https://justyours.me/",
        description: "JustYours is building a multi-functional platform that can seamlessly integrate both users and creators of Adult Content",
        logoURI: "https://app.spiritswap.finance/images/tokens/JUST.png"
      },
      SPELL: {
        name: "Spell Token",
        symbol: "SPELL",
        address: "0x468003B688943977e6130F4F68F23aad939a1040",
        chainId: 250,
        decimals: 18,
        website: "https://abracadabra.money/",
        description: "SPELL is the incentivation token of Abracadabra.money",
        logoURI: "https://app.spiritswap.finance/images/tokens/SPELL.png",
        documentation: "https://docs.abracadabra.money/"
      },
      sSPELL: {
        name: "Staked Spell Token",
        symbol: "sSPELL",
        address: "0xbB29D2A58d880Af8AA5859e30470134dEAf84F2B",
        chainId: 250,
        decimals: 18,
        website: "https://abracadabra.money/",
        description: "SPELL is the incentivation token of Abracadabra.money. sSPELL is the staked version of it",
        logoURI: "https://app.spiritswap.finance/images/tokens/SSPELL.png"
      },
      wMEMO: {
        name: "Wrapped MEMO",
        symbol: "wMEMO",
        address: "0xDDc0385169797937066bBd8EF409b5B3c0dFEB52",
        chainId: 250,
        decimals: 18,
        website: "https://abracadabra.money/",
        description: "wMEMO is a wrapped version of MEMO. MEMO (Memories) is the reciept of staked TIME.",
        logoURI: "https://app.spiritswap.finance/images/tokens/WMEMO.png"
      },
      DOLA: {
        name: "DOLA USD",
        symbol: "DOLA",
        address: "0x3129662808bEC728a27Ab6a6b9AFd3cBacA8A43c",
        chainId: 250,
        decimals: 18,
        website: "https://www.inverse.finance/",
        description: "Inverse.finance is a suite of permissionless decentralized finance tools governed by Inverse DAO, a decentralized autonomous organization running on the Ethereum blockchain.",
        logoURI: "https://assets.spookyswap.finance/tokens/DOLA.png"
      },
      INV: {
        name: "Inverse Finance",
        symbol: "INV",
        address: "0xb84527D59b6Ecb96F433029ECc890D4492C5dCe1",
        chainId: 250,
        decimals: 18,
        website: "https://www.inverse.finance/",
        description: "Inverse.finance is a suite of permissionless decentralized finance tools governed by Inverse DAO, a decentralized autonomous organization running on the Ethereum blockchain.",
        logoURI: "https://assets.spookyswap.finance/tokens/INV.png"
      },
      YOSHI: {
        name: "Yoshi.exchange",
        symbol: "YOSHI",
        address: "0x3dc57B391262e3aAe37a08D91241f9bA9d58b570",
        chainId: 250,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x3dc57B391262e3aAe37a08D91241f9bA9d58b570.svg",
        website: "https://yoshi.exchange/",
        description: "Yoshi offers users a simple way to buy crypto tokens via credit card. We use native Yoshi token to provide fast and simple buying proccess. Connect your crypto wallet via MetaMask or WalletConnect. To procced for bying you\u2019ll need to surpass a KYC and add a valid credit card. Once everything is done you\u2019ll see the actual exchange rate and get your tokens after the buying proccess is done."
      },
      wsSPA: {
        name: "Wrapped sSPA",
        symbol: "wsSPA",
        address: "0x89346B51A54263cF2e92dA79B1863759eFa68692",
        chainId: 250,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x89346B51A54263cF2e92dA79B1863759eFa68692.svg",
        website: "https://app.spartacus.finance/",
        description: 'Let\u2019s start off by saying Zeus from OlympusDAO has done a marvellous job in creating the "Protocol Owned Liquidity" (POL) concept. A community is formed when everyone bonds the underlying assets into a common reserve currency, creating a strong \u201Cbonding\u201D for the whole community. As Spartacus we carry on the legacy and we shall aim higher and something even bigger.'
      },
      wsHEC: {
        name: "Wrapped sHEC",
        symbol: "wsHEC",
        address: "0x94CcF60f700146BeA8eF7832820800E2dFa92EdA",
        chainId: 250,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x94CcF60f700146BeA8eF7832820800E2dFa92EdA.svg",
        website: "https://hector.network/",
        description: "Hector Network is developing an expansive web 3 ecosystem for a visionary future. The foundations of the ecosystem, supported by the HEC utility token and TOR stablecoin, are functionality, accessibility and community. In conjunction with their growing list of partners, Hector Network is expanding crosschain and is dedicated to mass adoption."
      },
      OOE: {
        name: "OpenOcean",
        symbol: "OOE",
        address: "0x9d8F97A3C2f9f397B6D46Cbe2d39CC1D8Cf19010",
        chainId: 250,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x9d8F97A3C2f9f397B6D46Cbe2d39CC1D8Cf19010.svg",
        website: "https://openocean.finance/",
        description: "OpenOcean is the world\u2019s first full aggregation protocol for crypto trading that sources liquidity from DeFi and CeFi markets and enables cross-chain swaps. Our intelligent routing algorithm finds the best prices from DEXes and CEXes and splits the routes to provide traders the best prices with low slippage and fast settlement. The product is free to use; OpenOcean users only need to pay the regular blockchain gas and exchange fees for the trades, which are charged by the exchanges and not OpenOcean."
      },
      AVAX: {
        name: "Avalanche",
        symbol: "AVAX",
        address: "0x511D35c52a3C244E7b8bd92c0C297755FbD89212",
        chainId: 250,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x511D35c52a3C244E7b8bd92c0C297755FbD89212.svg",
        website: "https://www.avalabs.org/",
        description: "Avalanche is the fastest smart contracts platform in the blockchain industry, as measured by time-to-finality, and has the most validators securing its activity of any proof-of-stake protocol."
      },
      LUNA: {
        name: "Terra",
        symbol: "LUNA",
        address: "0x95dD59343a893637BE1c3228060EE6afBf6F0730",
        chainId: 250,
        decimals: 6,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/4172.png",
        website: "https://www.terra.money/",
        description: "Terra's native token, LUNA, is used to stabilize the price of the protocol's stablecoins. LUNA holders are also able to submit and vote on governance proposals, giving it the functionality of a governance token."
      },
      asUSDC: {
        name: "USDC Solana",
        address: "0xb5E4D17FFD9D0DCE46D290750dad5F9437B5A16B",
        symbol: "asUSDC",
        decimals: 18,
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        chainId: 250,
        logoURI: "https://ftmscan.com/token/images/USDC_32.png"
      },
      MATIC: {
        name: "MATIC",
        address: "0x40DF1Ae6074C35047BFF66675488Aa2f9f6384F3",
        symbol: "MATIC",
        decimals: 18,
        website: "https://polygon.technology/",
        description: "Polygon is a protocol and a framework for building and connecting Ethereum-compatible blockchain networks. Aggregating scalable solutions on Ethereum supporting a multi-chain Ethereum ecosystem.",
        chainId: 250,
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0/logo.png"
      },
      HND: {
        name: "Hundred Finance",
        symbol: "HND",
        address: "0x10010078a54396F62c96dF8532dc2B4847d47ED3",
        chainId: 250,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x10010078a54396F62c96dF8532dc2B4847d47ED3.svg",
        website: "https://hundred.finance/",
        description: "Since the explosion in popularity of the decentralized finance ecosystem in 2020, borrowing and lending platforms have become core infrastructure within the cryptocurrency space. Not only do they provide users the ability to \u201Chodl\u201D or leverage their crypto assets, obtaining liquidity from their investment (a crypto-backed loan) while simultaneously earning interest, they also underpin the workings of other protocols. The movement of assets from the Ethereum mainnet to EVM-compatible blockchains and scaling solutions has done nothing to alter this. Platforms that grant the ability to borrow and lend are one of the key applications users look for in any emerging chain. Hundred Finance aims to play a central role in provisioning these services in the multi-chain environment that has flourished since early 2021, delivering the freedom to earn yield and borrow assets to a growing number of users in a trustless, secure and economically efficient manner."
      },
      LQDR: {
        name: "Liquid Driver",
        symbol: "LQDR",
        address: "0x10b620b2dbAC4Faa7D7FFD71Da486f5D44cd86f9",
        chainId: 250,
        decimals: 18,
        logoURI: "https://ftmscan.com/token/images/liquiddriver_32.png",
        website: "https://www.liquiddriver.finance/",
        description: "Incentivizing deep liquidity for SushiSwap on Fantom Opera."
      },
      beFTM: {
        name: "Beefy Escrowed Fantom",
        symbol: "beFTM",
        address: "0x7381eD41F6dE418DdE5e84B55590422a57917886",
        chainId: 250,
        decimals: 18,
        logoURI: "",
        website: "https://blog.beefy.finance/articles/introducing-beftm/",
        description: "Beefy Escrowed Fantom is 1 year perpetually lock FTM that is delegated and locked to earn the maximum validator reward"
      },
      sfUSDC: {
        name: "Stargate USD Coin LP",
        address: "0x12edeA9cd262006cC3C4E77c90d2CD2DD4b1eb97",
        symbol: "sfUSDC",
        decimals: 6,
        website: "https://www.circle.com/usdc",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        chainId: 250,
        logoURI: "https://ftmscan.com/token/images/USDC_32.png"
      },
      renBTC: {
        name: "renBTC",
        symbol: "renBTC",
        address: "0xDBf31dF14B66535aF65AaC99C32e9eA844e14501",
        chainId: 250,
        decimals: 8,
        website: "https://renproject.io/",
        description: "RenBTC is an ERC-20 token built on the Ethereum network, pegged to Bitcoin. This means that each RenBTC can be always redeemed for one Bitcoin, and hence tends to maintain its value at close to the Bitcoin market rate.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xfCe146bF3146100cfe5dB4129cf6C82b0eF4Ad8c.png"
      },
      EQUAL: {
        name: "Equalizer",
        symbol: "EQUAL",
        address: "0x3Fd3A0c85B70754eFc07aC9Ac0cbBDCe664865A6",
        chainId: 250,
        decimals: 18,
        logoURI: "",
        website: "https://equalizer.exchange/home",
        description: "Equalizer was derived from the initial concept of Andre Cronje. The mechanism that was used to create a perpetual decentralized exchange was unique and ingenious. The launch of this platform is to take the concept and apply it to a more natural style DEX. Equalizer will become the trading mechanism for the Fantom network, utilizing the Solidly perpetual model with some tweaks to fee structures and emissions.",
        documentation: "https://equalizer0x.gitbook.io/equalizer-exchange-docs/guides/equalizer-exchange"
      },
      ANKR: {
        name: "Ankr",
        symbol: "ANKR",
        address: "0x0615Dbba33Fe61a31c7eD131BDA6655Ed76748B1",
        chainId: 250,
        decimals: 18,
        website: "https://www.ankr.com/",
        description: "Ankr originates as a solution that utilizes shared resources in order to provide easy and affordable blockchain node hosting solutions.",
        logoURI: "",
        documentation: "https://www.ankr.com/about-network/token/"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/fantom/index.js
var require_fantom = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fantom/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fantom = void 0;
    var beefyfinance_1 = require_beefyfinance4();
    var beethovenx_1 = require_beethovenx();
    var spookyswap_1 = require_spookyswap();
    var spiritswap_1 = require_spiritswap();
    var sushiFtm_1 = require_sushiFtm();
    var solidly_1 = require_solidly();
    var tombswap_1 = require_tombswap();
    var solace_1 = require_solace2();
    var equalizer_1 = require_equalizer();
    var tokens_1 = require_tokens4();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _fantom = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        beethovenx: beethovenx_1.beethovenx,
        spookyswap: spookyswap_1.spookyswap,
        spiritswap: spiritswap_1.spiritswap,
        sushiFtm: sushiFtm_1.sushiFtm,
        solidly: solidly_1.solidly,
        tombswap: tombswap_1.tombswap,
        solace: solace_1.solace,
        equalizer: equalizer_1.equalizer
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.fantom = _fantom;
  }
});

// node_modules/blockchain-addressbook/build/address-book/heco/platforms/beefyfinance.js
var require_beefyfinance5 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/heco/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var zeroAddress = "0x0000000000000000000000000000000000000000";
    var hw = "0x3Eb7fB70C03eC4AEEC97C6C6C1B59B014600b7F7";
    exports.beefyfinance = {
      devMultisig: zeroAddress,
      treasuryMultisig: "0xdbB72c8B7eBdD52A4813B9D262386dfDAB69c9bA",
      strategyOwner: "0x587479672077fBD7cb08EE1fd13fca6a9ef69d9e",
      vaultOwner: "0xBB54a8F862e2D4Cc03634a26974c5C3bEfd06836",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: hw,
      launchpoolOwner: hw,
      rewardPool: "0x5f7347fedfD0b374e8CE8ed19Fc839F59FB59a3B",
      treasury: "0xf4859A3f36fBcA24BF8299bf56359fB441b03034",
      beefyFeeRecipient: "0x250EB557D7a767ee711c7C11988470669a5306BB",
      multicall: "0x2776CF9B6E2Fa7B33A37139C3CB1ee362Ff0356e",
      bifiMaxiStrategy: "0xfdF1088F5B9Bd338D5197aCfB00b468f04bCC374",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/heco/platforms/mdex.js
var require_mdex2 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/heco/platforms/mdex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mdex = void 0;
    exports.mdex = {
      router: "0xED7d5F38C79115ca12fe6C0041abb22F0A06C300",
      usdtBifiLp: "0xe6F7b06ad8B93A21f78E4aCD59f2dac169eA704B"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/heco/tokens/tokens.js
var require_tokens5 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/heco/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var HT = {
      name: "Wrapped HT",
      symbol: "WHT",
      address: "0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F",
      chainId: 128,
      decimals: 18,
      website: "https://www.huobi.com/en-us/",
      description: 'HT (Huobi Token) is a blockchain-powered loyalty point system. It is the only token that Huobi officially launched. HT supports Huobi Global business and all products, such as VIP discount, HT exclusive events, trading against popular coins and "let your voice be heard".',
      logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/8524.png"
    };
    var _tokens = {
      HT,
      WHT: HT,
      WNATIVE: HT,
      ETH: {
        name: "Etheruem",
        symbol: "ETH",
        address: "0x64FF637fB478863B7468bc97D30a5bF3A428a1fD",
        chainId: 128,
        decimals: 18,
        website: "https://ethereum.org/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network.",
        logoURI: "https://hecoinfo.com/token/images/HETH_32.png"
      },
      USDT: {
        name: "Heco USDT",
        symbol: "USDT",
        address: "0xa71EdC38d189767582C38A3145b5873052c3e47a",
        chainId: 128,
        decimals: 18,
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        logoURI: "https://hecoinfo.com/token/images/USDTHECO_32.png"
      },
      LHB: {
        name: "Lendhub",
        symbol: "LHB",
        address: "0x8F67854497218043E1f72908FFE38D0Ed7F24721",
        chainId: 128,
        website: "https://www.lendhub.org/",
        description: "LendHub is a decentralized lending platform based on the Huobi Ecological Chain. It supports pledged lending of multiple currencies on the Heco chain. Users can obtain incentive token LHB rewards by borrowing on LendHub.",
        decimals: 18,
        logoURI: "https://hecoinfo.com/token/images/lendhub_32.png"
      },
      BIFI: {
        name: "Beefy.Finance",
        symbol: "BIFI",
        address: "0x765277EebeCA2e31912C9946eAe1021199B39C61",
        chainId: 128,
        decimals: 18,
        website: "https://www.beefy.finance/",
        description: "Beefy.Finance (BIFI), is a multi-chain yield optimization tool that helps maximize the return from yield farming.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      SNX: {
        name: "Synthetix",
        symbol: "SNX",
        address: "0x777850281719d5a96C29812ab72f822E0e09F3Da",
        chainId: 128,
        decimals: 18,
        website: "https://www.synthetix.io/",
        description: "Synthetix is the backbone for derivatives trading in DeFi, allowing anyone, anywhere to gain on-chain exposure to a vast range of assets.",
        logoURI: "https://hecoinfo.com/token/images/snx_32.png"
      },
      MDX: {
        name: "Mdex",
        symbol: "MDX",
        address: "0x25D2e80cB6B86881Fd7e07dd263Fb79f4AbE033c",
        chainId: 128,
        decimals: 18,
        website: "https://mdex.com/",
        description: "MDEX.COM is a decentralized platform for cross-chain transactions and deployed on BSC, HECO and Ethereum.",
        logoURI: "https://hecoinfo.com/token/images/mdex_32.png"
      },
      HBTC: {
        name: "Huobi Bitcoin",
        symbol: "HBTC",
        address: "0x66a79D23E58475D2738179Ca52cd0b41d73f0BEa",
        chainId: 128,
        decimals: 18,
        website: "https://www.htokens.finance/en-us/",
        description: "HBTC is a ERC20 token backed 1:1 with BTC. H-tokens are a suite of assets issued on Ethereum and backed by cryptocurrencies from other blockchains.",
        logoURI: "https://hecoinfo.com/token/images/HBTC_32.png"
      },
      AAVE: {
        name: "Aave",
        symbol: "AAVE",
        address: "0x202b4936fE1a82A4965220860aE46d7d3939Bb25",
        chainId: 128,
        decimals: 18,
        website: "https://aave.com/",
        description: "Aave is an open source and non-custodial liquidity protocol for earning interest on deposits and borrowing assets.",
        logoURI: "https://hecoinfo.com/token/images/aave_32.png"
      },
      BAL: {
        name: "Balancer",
        symbol: "BAL",
        address: "0x045De15Ca76e76426E8Fc7cba8392A3138078D0F",
        chainId: 128,
        decimals: 18,
        website: "https://balancer.fi/",
        description: "Balancer turns the concept of an index fund on its head: instead of a paying fees to portfolio managers to rebalance your portfolio, you collect fees from traders, who rebalance your portfolio by following arbitrage opportunities.",
        logoURI: "https://hecoinfo.com/token/images/bal_32.png"
      },
      HUSD: {
        name: "Huobi USD",
        symbol: "HUSD",
        address: "0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047",
        chainId: 128,
        decimals: 18,
        website: "https://www.htokens.finance/en-us/",
        description: "HUSD is a ERC20 token backed 1:1 with USD. H-tokens are a suite of assets issued on Ethereum and backed by cryptocurrencies from other blockchains.",
        logoURI: "https://hecoinfo.com/token/images/HUSD_32.png"
      },
      YFI: {
        name: "Yearn.finance",
        symbol: "YFI",
        address: "0xB4F019bEAc758AbBEe2F906033AAa2f0F6Dacb35",
        chainId: 128,
        decimals: 18,
        website: "https://yearn.finance/",
        description: "Yearn.finance is an aggregator service for decentralized finance (DeFi) investors, using automation to allow them to maximize profits from yield farming.",
        logoURI: "https://hecoinfo.com/token/images/yfi_32.png"
      },
      HDOT: {
        name: "Huobi Polkadot",
        symbol: "HDOT",
        address: "0xA2c49cEe16a5E5bDEFDe931107dc1fae9f7773E3",
        chainId: 128,
        decimals: 18,
        website: "https://www.htokens.finance/en-us/",
        description: "HDOT is a ERC20 token backed 1:1 with DOT. H-tokens are a suite of assets issued on Ethereum and backed by cryptocurrencies from other blockchains.",
        logoURI: "https://hecoinfo.com/token/images/HDOT_32.png"
      },
      SHIB: {
        name: "Shiba Inu",
        symbol: "SHIB",
        address: "0xC38072AA3F8E049De541223A9c9772132bB48634",
        chainId: 128,
        decimals: 18,
        website: "https://shibatoken.com/",
        description: "According to the SHIBA INU website, SHIB is the \u201CDOGECOIN KILLER\u201D and will be listed on their own ShibaSwap, a decentralized exchange.",
        logoURI: "https://bscscan.com/token/images/shibatoken_32.png"
      },
      HFI: {
        name: "Heco FI",
        symbol: "HFI",
        address: "0x98fc3b60Ed4A504F588342A53746405E355F9347",
        chainId: 128,
        decimals: 18,
        website: "https://hfi.one/",
        description: "HFI.one is a decentralized aggregate mining platform based on the Huobi ecological chain HECO.",
        logoURI: "https://hecoinfo.com/token/images/hecofi_32.png"
      },
      LINK: {
        name: "Chainlink",
        symbol: "LINK",
        address: "0x9e004545c59D359F6B7BFB06a26390b087717b42",
        chainId: 128,
        decimals: 18,
        website: "https://chain.link/",
        description: "Link is the currency used to pay the Chainlink node operators for their work. Chainlink node operators have to stake LINK in the network in order to participate and provide data services.",
        logoURI: "https://hecoinfo.com/token/images/chainlink_32.png"
      },
      HLTC: {
        name: "Huobi Litecoin",
        symbol: "HLTC",
        address: "0xecb56cf772B5c9A6907FB7d32387Da2fCbfB63b4",
        chainId: 128,
        decimals: 18,
        website: "https://www.htokens.finance/en-us/",
        description: "HLTC is a ERC20 token backed 1:1 with LTC. H-tokens are a suite of assets issued on Ethereum and backed by cryptocurrencies from other blockchains.",
        logoURI: "https://hecoinfo.com/token/images/HLTC_32.png"
      },
      HBCH: {
        name: "Huobi Bitcoin Cash",
        symbol: "HBCH",
        address: "0xeF3CEBD77E0C52cb6f60875d9306397B5Caca375",
        chainId: 128,
        decimals: 18,
        website: "https://www.htokens.finance/en-us/",
        description: "HBCH is a ERC20 token backed 1:1 with BCH. H-tokens are a suite of assets issued on Ethereum and backed by cryptocurrencies from other blockchains.",
        logoURI: "https://hecoinfo.com/token/images/HBCH_32.png"
      },
      UNI: {
        name: "Uniswap",
        symbol: "UNI",
        address: "0x22C54cE8321A4015740eE1109D9cBc25815C46E6",
        chainId: 128,
        decimals: 18,
        website: "https://uniswap.org/",
        description: "UNI is the governance token for Uniswap. UNI was introduced on 16th September 2020 through a retrospective airdrop to users who have interacted with the protocol either by swapping tokens or by providing liquidity.",
        logoURI: "https://hecoinfo.com/token/images/uni_32.png"
      },
      HPT: {
        name: "Huobi Pool Token",
        symbol: "HPT",
        address: "0xE499Ef4616993730CEd0f31FA2703B92B50bB536",
        chainId: 128,
        decimals: 18,
        website: "https://www.huobipool.com/",
        description: "HPT is the global ecological token of Huobi Pool. HPT holders can participate in-depth in the future development of Huobi Pool, and they also to share the growth value of the mining pool with daily airdrops of digital assets obtained from the mining pool.",
        logoURI: "https://hecoinfo.com/token/images/HPT_32.png"
      },
      HFIL: {
        name: "Huobi Filecoin",
        symbol: "HFIL",
        address: "0xae3a768f9aB104c69A7CD6041fE16fFa235d1810",
        chainId: 128,
        decimals: 18,
        website: "https://www.htokens.finance/en-us/",
        description: "HFIL is a ERC20 token backed 1:1 with FIL. H-tokens are a suite of assets issued on Ethereum and backed by cryptocurrencies from other blockchains.",
        logoURI: "https://hecoinfo.com/token/images/HFIL_32.png"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/heco/index.js
var require_heco = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/heco/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.heco = void 0;
    var beefyfinance_1 = require_beefyfinance5();
    var mdex_1 = require_mdex2();
    var tokens_1 = require_tokens5();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _heco = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        mdex: mdex_1.mdex
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.heco = _heco;
  }
});

// node_modules/blockchain-addressbook/build/address-book/one/platforms/beefyfinance.js
var require_beefyfinance6 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/one/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0xE3c985f5e317eFd4aca1f00aa5F1DFEC40b2Af74";
    var treasuryMultisig = "0x523154a03180FD1CB26F39087441c9F91BcD0389";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0x6d28afD25a1FBC5409B1BeFFf6AEfEEe2902D89F",
      vaultOwner: "0x2e8B7aba218759C07aA6Ae051FC386D411cF99d3",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0x5B96bbAca98D777cb736dd89A519015315E00D02",
      treasury: "0xaDB9DDFA24E326dC9d337561f6c7ba2a6Ecec697",
      beefyFeeRecipient: "0x070c12844A9eB215276DbE178a92cF86157DDBaA",
      multicall: "0xBa5041B1c06e8c9cFb5dDB4b82BdC52E41EA5FC5",
      bifiMaxiStrategy: "0x5135C0af3080DF01ABF66491d5a1eD21fBEF3a7C",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/one/platforms/sushi.js
var require_sushi2 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/one/platforms/sushi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sushi = void 0;
    exports.sushi = {
      minichef: "0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287",
      router: "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506",
      complexRewarderTime: "0x25836011Bbc0d5B6db96b20361A474CbC5245b45"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/one/tokens/tokens.js
var require_tokens6 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/one/tokens/tokens.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var ONE = {
      name: "Wrapped ONE",
      address: "0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a",
      symbol: "WONE",
      decimals: 18,
      chainId: 16666e5,
      website: "https://www.harmony.one/",
      description: "Harmony is an open and fast blockchain. Our mainnet runs Ethereum applications with 2-second transaction finality and 100 times lower fees.",
      logoURI: "https://res.cloudinary.com/dnz2bkszg/image/fetch/f_auto/https://raw.githubusercontent.com/sushiswap/icons/master/token/one.jpg"
    };
    var SUSHI = {
      name: "Sushi",
      address: "0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A",
      symbol: "SUSHI",
      decimals: 18,
      chainId: 16666e5,
      website: "https://sushi.com/",
      description: "Sushi is the home of DeFi. Their community is building a comprehensive, decentralized trading platform for the future of finance. Swap, earn, stack yields, lend, borrow, leverage all on one decentralized, community driven platform.",
      logoURI: "https://ftmscan.com/token/images/sushiswap_32.png"
    };
    var _tokens = {
      ONE,
      WONE: ONE,
      WNATIVE: ONE,
      BIFI: {
        chainId: 16666e5,
        address: "0x6aB6d61428fde76768D7b45D8BFeec19c6eF91A8",
        decimals: 18,
        name: "Beefy.Finance",
        symbol: "BIFI",
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      CRV: {
        chainId: 16666e5,
        address: "0x352cd428EFd6F31B5cae636928b7B84149cF369F",
        decimals: 18,
        name: "Curve",
        symbol: "CRV",
        website: "https://curve.fi/",
        description: "Curve is an exchange liquidity pool on Ethereum. Curve is designed for extremely efficient stablecoin trading and low risk, supplemental fee income for liquidity providers, without an opportunity cost.",
        logoURI: "https://external-content.duckduckgo.com/ip3/resources.curve.fi.ico"
      },
      WBTC: {
        chainId: 16666e5,
        address: "0x3095c7557bCb296ccc6e363DE01b760bA031F2d9",
        decimals: 8,
        name: "Wrapped BTC",
        symbol: "WBTC",
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB/logo.png"
      },
      ETH: {
        chainId: 16666e5,
        address: "0x6983D1E6DEf3690C4d616b13597A09e6193EA013",
        decimals: 18,
        name: "Ether",
        symbol: "ETH",
        website: "https://ethereum.org/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15/logo.png"
      },
      USDC: {
        name: "USD Coin",
        address: "0x985458E523dB3d53125813eD68c274899e9DfAb4",
        symbol: "USDC",
        decimals: 6,
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        chainId: 16666e5,
        logoURI: "https://ftmscan.com/token/images/USDC_32.png"
      },
      SUSHI,
      oneSUSHI: __assign(__assign({}, SUSHI), { symbol: "oneSUSHI" }),
      BUSD: {
        name: "BUSD Token",
        symbol: "BUSD",
        address: "0xE176EBE47d621b984a73036B9DA5d834411ef734",
        chainId: 16666e5,
        decimals: 18,
        website: "https://www.binance.com/en/busd",
        description: "Binance USD (BUSD) is a 1:1 USD-backed stable coin issued by Binance (in partnership with Paxos), Approved and regulated by the New York State Department of Financial Services (NYDFS), The BUSD Monthly Audit Report can be viewed from the official website.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xe9e7cea3dedca5984780bafc599bd69add087d56.png"
      },
      bscBUSD: {
        name: "BUSD Token",
        symbol: "BUSD",
        address: "0x0aB43550A6915F9f67d0c454C2E90385E6497EaA",
        chainId: 16666e5,
        decimals: 18,
        website: "https://www.binance.com/en/busd",
        description: "Binance USD (BUSD) is a 1:1 USD-backed stable coin issued by Binance (in partnership with Paxos), Approved and regulated by the New York State Department of Financial Services (NYDFS), The BUSD Monthly Audit Report can be viewed from the official website.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xe9e7cea3dedca5984780bafc599bd69add087d56.png"
      },
      YGG: {
        name: "Yield Guild Games",
        symbol: "YGG",
        address: "0x63cf309500d8be0B9fDB8F1fb66C821236c0438c",
        chainId: 16666e5,
        decimals: 18,
        website: "https://yieldguild.io/",
        description: "YGG IS A PLAY-TO-EARN GAMING GUILD, BRINGING PLAYERS TOGETHER TO EARN VIA BLOCKCHAIN-BASED ECONOMIES. WE ARE THE SETTLERS OF NEW WORLDS IN THE METAVERSE",
        logoURI: "https://tokens.pancakeswap.finance/images/0xe9e7cea3dedca5984780bafc599bd69add087d56.png"
      },
      AAVE: {
        name: "Aave",
        symbol: "AAVE",
        address: "0xcF323Aad9E522B93F11c352CaA519Ad0E14eB40F",
        chainId: 16666e5,
        decimals: 18,
        website: "https://aave.com/",
        description: "Aave is an open source and non-custodial liquidity protocol for earning interest on deposits and borrowing assets.",
        logoURI: "https://dex.apeswap.finance/images/coins/AAVE.svg"
      },
      AXS: {
        name: "Axie Infinity",
        symbol: "AXS",
        address: "0x14A7B318fED66FfDcc80C1517C172c13852865De",
        chainId: 16666e5,
        decimals: 18,
        logoURI: "https://bscscan.com/token/images/axieinfinity_32.png",
        website: "https://axieinfinity.com/",
        description: "Axie Infinity is a Pok\xE9mon-inspired digital pet universe built on the Ethereum blockchain where anyone can earn token rewards through skilled gameplay and contributions to the ecosystem."
      },
      DAI: {
        name: "DAI",
        symbol: "DAI",
        address: "0xEf977d2f931C1978Db5F6747666fa1eACB0d0339",
        chainId: 16666e5,
        decimals: 18,
        website: "https://makerdao.com/en/",
        description: "DAI is an Ethereum-based stablecoin (stable-price cryptocurrency) whose issuance and development is managed by the Maker Protocol and the MakerDAO decentralized autonomous organization.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3.png"
      },
      USDT: {
        name: "USD Tether",
        symbol: "USDT",
        address: "0x3C2B8Be99c50593081EAA2A724F0B8285F5aba8f",
        chainId: 16666e5,
        decimals: 6,
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x55d398326f99059ff775485246999027b3197955.png"
      },
      FRAX: {
        name: "Frax Shares",
        symbol: "FRAX",
        address: "0xeB6C08ccB4421b6088e581ce04fcFBed15893aC3",
        chainId: 16666e5,
        decimals: 18,
        website: "https://frax.finance/",
        description: "The Frax Protocol introduced the world to the concept of a cryptocurrency being partially backed by collateral and partially stabilized algorithmically.",
        logoURI: "https://ftmscan.com/token/images/fraxfinance_32.png"
      },
      UST: {
        name: "UST",
        symbol: "UST",
        address: "0x224e64ec1BDce3870a6a6c777eDd450454068FEC",
        chainId: 16666e5,
        decimals: 18,
        website: "https://mirror.finance/",
        description: "TerraUSD (UST) is the decentralized and algorithmic stablecoin of the Terra blockchain. It is a scalable, yield-bearing coin that is value-pegged to the US Dollar.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x23396cF899Ca06c4472205fC903bDB4de249D6fC.png"
      },
      BTC: {
        name: "Harmony Bitcoin",
        symbol: "1BTC",
        address: "0xdc54046c0451f9269FEe1840aeC808D36015697d",
        chainId: 16666e5,
        decimals: 8,
        logoURI: "https://tokens.pancakeswap.finance/images/0xdc54046c0451f9269FEe1840aeC808D36015697d.svg",
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led."
      },
      "BIFI-WONE LP": {
        name: "BIFI-WONE LP",
        symbol: "BIFI-WONE LP",
        address: "0x0f9602B7E7146a9BaE16dB948281BebDb7C2D095",
        chainId: 16666e5,
        decimals: 18,
        logoURI: "",
        website: "https://app.beefy.com/",
        oracleId: "sushi-one-bifi-wone",
        oracle: "lps"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/one/index.js
var require_one = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/one/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.one = void 0;
    var beefyfinance_1 = require_beefyfinance6();
    var sushi_1 = require_sushi2();
    var tokens_1 = require_tokens6();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _one = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        sushi: sushi_1.sushi
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.one = _one;
  }
});

// node_modules/blockchain-addressbook/build/address-book/arbitrum/platforms/beefyfinance.js
var require_beefyfinance7 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/arbitrum/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var treasuryMultisig = "0x3f5eddad52C665A4AA011cd11A21E1d5107d7862";
    var devMultisig = "0xf7EC8986c660Fa8269f6440A631B22337f398Ccd";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0x6d28afD25a1FBC5409B1BeFFf6AEfEEe2902D89F",
      vaultOwner: "0x9A94784264AaAE397441c1e47fA132BE4e61BdaD",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0x48F4634c8383aF01BF71AefBC125eb582eb3C74D",
      treasury: "0xc3a4fdcba79DB04b4C3e352b1C467B3Ba909D84A",
      beefyFeeRecipient: "0xFEd99885fE647dD44bEA2B375Bd8A81490bF6E0f",
      multicall: "0x13aD51a6664973EbD0749a7c84939d973F247921",
      bifiMaxiStrategy: "0x6207536011918F1A0D8a53Bc426f4Fd54df2E5a8",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      beefyFeeConfig: "0xDC1dC2abC8775561A6065D0EE27E8fDCa8c4f7ED",
      vaultFactory: "0x8396f3d25d07531a80770Ce3DEA025932C4953f7",
      wrapperFactory: "0x48bF3a071098a09C7D00379b4DBC69Ab6Da83a36"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/arbitrum/platforms/sushi.js
var require_sushi3 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/arbitrum/platforms/sushi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sushi = void 0;
    exports.sushi = {
      minichef: "0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3",
      router: "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506",
      bifiEthLp: "0xcDA9B8e5867b5746755fE6E505B6300a76b2fAc3"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/arbitrum/platforms/swapfish.js
var require_swapfish2 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/arbitrum/platforms/swapfish.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.swapfish = void 0;
    exports.swapfish = {
      minichef: "0x33141e87ad2DFae5FBd12Ed6e61Fa2374aAeD029",
      router: "0xcDAeC65495Fa5c0545c5a405224214e3594f30d8"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/arbitrum/platforms/balancer.js
var require_balancer2 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/arbitrum/platforms/balancer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.balancer = void 0;
    exports.balancer = {
      router: "0xBA12222222228d8Ba445958a75a0704d566BF2C8"
      // balancer vault
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/arbitrum/tokens/tokens.js
var require_tokens7 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/arbitrum/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var ETH = {
      name: "Wrapped Ether",
      address: "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
      symbol: "WETH",
      decimals: 18,
      chainId: 42161,
      website: "https://weth.io/",
      description: "Ether or ETH is the native currency built on the Ethereum blockchain.",
      logoURI: "https://arbiscan.io/token/images/weth_28.png",
      documentation: "https://ethereum.org/en/developers/docs/"
    };
    var _tokens = {
      ETH,
      WETH: ETH,
      WNATIVE: ETH,
      BIFI: {
        name: "Beefy.Finance",
        symbol: "BIFI",
        address: "0x99C409E5f62E4bd2AC142f17caFb6810B8F0BAAE",
        chainId: 42161,
        decimals: 18,
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png"
      },
      USDC: {
        name: "USD Coin",
        address: "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
        symbol: "USDC",
        decimals: 6,
        website: "https://www.circle.com/usdc",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        chainId: 42161,
        logoURI: "https://ftmscan.com/token/images/USDC_32.png",
        documentation: "https://developers.circle.com/docs"
      },
      SUSHI: {
        name: "Sushi",
        address: "0xd4d42F0b6DEF4CE0383636770eF773390d85c61A",
        symbol: "SUSHI",
        decimals: 18,
        chainId: 42161,
        website: "https://sushi.com/",
        description: "Sushi is the home of DeFi. Their community is building a comprehensive, decentralized trading platform for the future of finance. Swap, earn, stack yields, lend, borrow, leverage all on one decentralized, community driven platform.",
        logoURI: "https://ftmscan.com/token/images/sushiswap_32.png"
      },
      NYAN: {
        name: "ArbiNYAN",
        address: "0xeD3fB761414DA74b74F33e5c5a1f78104b188DfC",
        symbol: "NYAN",
        decimals: 18,
        chainId: 42161,
        website: "https://arbinyan.com/",
        description: "ArbiNYAN is a fun cat token. The first fair launched token on Arbitrum with 95% of the supply distributed via farming rewards",
        logoURI: "https://icons.llama.fi/arbinyan.jpg"
      },
      MIM: {
        name: "Magic Internet Money",
        address: "0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A",
        symbol: "MIM",
        decimals: 18,
        chainId: 42161,
        website: "https://abracadabra.money/",
        description: "You, the Spellcaster, can provide collateral in the form of various interest bearing crypto assets such as yvYFI, yvUSDT, yvUSDC, xSUSHI and more. With this, you can borrow magic internet money (MIM) which is a stable coin that you can swap for any other traditional stable coin.",
        logoURI: "",
        documentation: "https://docs.abracadabra.money/"
      },
      SPELL: {
        name: "Spell Token",
        address: "0x3E6648C5a70A150A88bCE65F4aD4d506Fe15d2AF",
        symbol: "SPELL",
        decimals: 18,
        chainId: 42161,
        website: "https://abracadabra.money/",
        description: "You, the Spellcaster, can provide collateral in the form of various interest bearing crypto assets such as yvYFI, yvUSDT, yvUSDC, xSUSHI and more. With this, you can borrow magic internet money (MIM) which is a stable coin that you can swap for any other traditional stable coin.",
        logoURI: "",
        documentation: "https://docs.abracadabra.money/"
      },
      WBTC: {
        chainId: 42161,
        address: "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
        decimals: 8,
        name: "Wrapped BTC",
        symbol: "WBTC",
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB/logo.png"
      },
      LINK: {
        name: "Chainlink",
        symbol: "LINK",
        address: "0xf97f4df75117a78c1A5a0DBb814Af92458539FB4",
        chainId: 42161,
        decimals: 18,
        website: "https://chain.link/",
        description: "Link is the currency used to pay the Chainlink node operators for their work. Chainlink node operators have to stake LINK in the network in order to participate and provide data services.",
        logoURI: "https://hecoinfo.com/token/images/chainlink_32.png"
      },
      USDT: {
        name: "USDT",
        symbol: "USDT",
        address: "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
        chainId: 42161,
        decimals: 6,
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        logoURI: "https://hecoinfo.com/token/images/USDTHECO_32.png"
      },
      gOHM: {
        name: "Governance OHM",
        symbol: "gOHM",
        address: "0x8D9bA570D6cb60C7e3e0F31343Efe75AB8E65FB1",
        chainId: 42161,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x8D9bA570D6cb60C7e3e0F31343Efe75AB8E65FB1.svg",
        website: "https://www.olympusdao.finance/",
        description: "Olympus is building a community-owned decentralized financial infrastructure to bring more stability and transparency for the world."
      },
      MAGIC: {
        name: "MAGIC",
        symbol: "MAGIC",
        address: "0x539bdE0d7Dbd336b79148AA742883198BBF60342",
        chainId: 42161,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x539bdE0d7Dbd336b79148AA742883198BBF60342.svg",
        website: "https://www.treasure.lol/",
        description: "Treasure bridges the growing network of metaverses through an open and composable approach to the convergence of NFTs, DeFi and Gaming. Cross-ecosystem ties are bolstered through our interrelated resource model. $MAGIC (Power), Treasures (NFT | Resources) and Legions (NFT | Players)"
      },
      BAL: {
        name: "Balancer",
        symbol: "BAL",
        address: "0x040d1EdC9569d4Bab2D15287Dc5A4F10F56a56B8",
        chainId: 42161,
        decimals: 18,
        website: "https://balancer.fi/",
        description: "Balancer turns the concept of an index fund on its head: instead of a paying fees to portfolio managers to rebalance your portfolio, you collect fees from traders, who rebalance your portfolio by following arbitrage opportunities.",
        logoURI: "https://hecoinfo.com/token/images/bal_32.png"
      },
      sarUSDC: {
        name: "Stargate USD Coin LP",
        symbol: "sarUSDC",
        address: "0x892785f33CdeE22A30AEF750F285E18c18040c3e",
        chainId: 42161,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xef4229c8c3250C675F21BCefa42f58EfbfF6002a.svg",
        website: "https://stargate.finance/",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      sarUSDT: {
        name: "Stargate Tether USD LP",
        symbol: "sarUSDT",
        address: "0xB6CfcF89a7B22988bfC96632aC2A9D6daB60d641",
        chainId: 42161,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      sarETH: {
        name: "Stargate Ethereum LP",
        symbol: "sarETH",
        address: "0x915A55e36A01285A14f05dE6e81ED9cE89772f8e",
        chainId: 42161,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x2170ed0880ac9a755fd29b2688956bd959f933f8.png",
        website: "https://stargate.finance/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      DAI: {
        name: "Dai Stablecoin",
        address: "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
        symbol: "DAI",
        decimals: 18,
        chainId: 137,
        website: "https://makerdao.com/",
        description: "Multi-Collateral Dai, brings a lot of new and exciting features, such as support for new CDP collateral types and Dai Savings Rate.",
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x6B175474E89094C44Da98b954EedeAC495271d0F/logo.png"
      },
      VST: {
        name: "Vesta Stable",
        symbol: "VST",
        address: "0x64343594Ab9b56e99087BfA6F2335Db24c2d1F17",
        chainId: 42161,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/23621/small/vesta.png?1644809642",
        website: "https://vestafinance.xyz/",
        description: "Vesta Finance allows you to borrow collateralized stablecoin VST against supported crypto assets with no interest rate.",
        documentation: "https://docs.vestafinance.xyz/"
      },
      psETH: {
        name: "Ripae sETH",
        symbol: "psETH",
        address: "0x83EA9d8748A7AD9f2F12B2A2F7a45CE47A862ac9",
        chainId: 42161,
        decimals: 18,
        website: "https://ripae.finance/",
        description: "Ripae Finance\u2019s full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: ""
      },
      pETH: {
        name: "pETH",
        symbol: "pETH",
        address: "0xA0dF47432d9d88bcc040E9ee66dDC7E17A882715",
        chainId: 42161,
        decimals: 18,
        website: "https://ripae.finance/",
        description: "Ripae Finance\u2019s full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: ""
      },
      RDNT: {
        name: "RDNT",
        symbol: "RDNT",
        address: "0x0C4681e6C0235179ec3D4F4fc4DF3d14FDD96017",
        chainId: 42161,
        decimals: 18,
        website: "https://radiant.capital/",
        description: "Radiant aims to be the first omnichain money market, where users can deposit any major asset on any major chain and borrow a variety of supported assets across multiple chains.",
        logoURI: ""
      },
      wstETH: {
        name: "Lido Wrapped Staked ETH",
        symbol: "wstETH",
        address: "0x5979D7b546E38E414F7E9822514be443A4800529",
        chainId: 42161,
        decimals: 18,
        website: "https://lido.fi/",
        description: "Lido is a liquid staking solution for ETH backed by industry-leading staking providers. Lido lets users stake their ETH - without locking assets or maintaining infrastructure - whilst participating in on-chain activities, e.g. lending. Lido attempts to solve the problems associated with initial ETH staking - illiquidity, immovability and accessibility - making staked ETH liquid and allowing for participation with any amount of ETH to improve security of the Ethereum network.",
        logoURI: "",
        documentation: "https://docs.lido.fi/"
      },
      GLP: {
        name: "GLP",
        symbol: "GLP",
        address: "0x5402B5F40310bDED796c7D0F3FF6683f5C0cFfdf",
        chainId: 42161,
        decimals: 18,
        website: "https://app.gmx.io/#/trade/?ref=beefy",
        description: "GLP consists of an index of assets used for swaps and leverage trading on GMX. GLP holders will make a profit when leverage traders make a loss and vice versa. Staked GLP also earns escrowed GMX rewards and 70% of platform fees distributed in ETH.",
        logoURI: "https://github.com/gmx-io/gmx-assets/blob/main/GMX-Assets/SVG/GLP_LOGO%20ONLY.svg",
        documentation: "https://gmxio.gitbook.io/gmx/glp"
      },
      FISH: {
        name: "SwapFish",
        symbol: "FISH",
        address: "0xb348B87b23D5977E2948E6f36ca07E1EC94d7328",
        chainId: 42161,
        decimals: 18,
        website: "https://swapfish.fi/",
        description: "Brand new decentralized platform bringing you fresh fishing farms and more.",
        oracleId: "SWAPFISH"
      },
      GMX: {
        name: "GMX",
        symbol: "GMX",
        address: "0xfc5A1A6EB076a2C7aD06eD22C90d7E710E35ad0a",
        chainId: 42161,
        decimals: 18,
        website: "https://app.gmx.io/#/trade/?ref=beefy",
        description: "GMX is the utility and governance token of the GMX decentralized spot and perpetual exchange that supports low swap fees, zero price impact trades and up to 30x leverage. Staked GMX earns escrowed GMX and 30% of platform fees in the form of ETH.",
        logoURI: "https://github.com/gmx-io/gmx-assets/blob/main/GMX-Assets/SVG/GMX_LOGO%20ONLY.svg",
        documentation: "https://gmxio.gitbook.io/"
      },
      FRAX: {
        chainId: 42161,
        address: "0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F",
        decimals: 18,
        name: "Frax",
        symbol: "FRAX",
        website: "https://frax.finance/",
        description: "Frax is the first fractional-algorithmic stablecoin protocol.",
        logoURI: "https://raw.githubusercontent.com/pangolindex/tokens/main/assets/0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64/logo.png",
        documentation: "https://docs.frax.finance/"
      },
      UNI: {
        name: "Uniswap",
        symbol: "UNI",
        address: "0xFa7F8980b0f1E64A2062791cc3b0871572f1F7f0",
        chainId: 42161,
        decimals: 18,
        website: "https://uniswap.org/",
        description: "UNI is the governance token for Uniswap. UNI was introduced on 16th September 2020 through a retrospective airdrop to users who have interacted with the protocol either by swapping tokens or by providing liquidity.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xbf5140a22578168fd562dccf235e5d43a02ce9b1.png",
        documentation: "https://uniswap.org/developers"
      },
      HOP: {
        name: "HOP Protocol",
        symbol: "HOP",
        address: "0xc5102fE9359FD9a28f877a67E36B0F050d81a3CC",
        chainId: 42161,
        decimals: 18,
        website: "https://app.hop.exchange",
        description: "Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "https://docs.velodrome.finance/tokens/HOP.svg",
        documentation: "https://docs.hop.exchange/"
      },
      hETH: {
        name: "ETH Hop Token",
        symbol: "hETH",
        address: "0xDa7c0de432a9346bB6e96aC74e3B61A36d8a77eB",
        chainId: 42161,
        decimals: 18,
        website: "https://app.hop.exchange",
        description: "hETH is the bridge token for transferring ETH via the Hop Protocol. Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "",
        documentation: "https://docs.hop.exchange/"
      },
      hUSDC: {
        name: "USDC Hop Token",
        symbol: "hUSDC",
        address: "0x0ce6c85cF43553DE10FC56cecA0aef6Ff0DD444d",
        chainId: 42161,
        decimals: 6,
        website: "https://app.hop.exchange",
        description: "hUSDC is the bridge token for transferring USDC via the Hop Protocol. Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "",
        documentation: "https://docs.hop.exchange/"
      },
      hUSDT: {
        name: "USDT Hop Token",
        symbol: "hUSDT",
        address: "0x12e59C59D282D2C00f3166915BED6DC2F5e2B5C7",
        chainId: 42161,
        decimals: 6,
        website: "https://app.hop.exchange",
        description: "hUSDT is the bridge token for transferring USDT via the Hop Protocol. Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "",
        documentation: "https://docs.hop.exchange/"
      },
      hDAI: {
        name: "DAI Hop Token",
        symbol: "hDAI",
        address: "0x46ae9BaB8CEA96610807a275EBD36f8e916b5C61",
        chainId: 42161,
        decimals: 18,
        website: "https://app.hop.exchange",
        description: "hDAI is the bridge token for transferring DAI via the Hop Protocol. Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "",
        documentation: "https://docs.hop.exchange/"
      },
      USX: {
        name: "dForce USD",
        symbol: "USX",
        address: "0x641441c631e2F909700d2f41FD87F0aA6A6b4EDb",
        chainId: 42161,
        decimals: 18,
        logoURI: "",
        website: "https://dforce.network/",
        description: "USX is the most important DeFi primitive within dForce\u2019s protocol matrix, starting off with an over-collateralization design, where supported assets can be used as collaterals to mint USX within the respective approved LTV ratio (similar to DAI).",
        documentation: "https://docs.dforce.network/protocols/usx"
      },
      MAI: {
        name: "Mai Stablecoin",
        symbol: "MAI",
        address: "0x3F56e0c36d275367b8C502090EDF38289b3dEa0d",
        chainId: 42161,
        decimals: 18,
        logoURI: "",
        website: "https://www.mai.finance/",
        description: "MAI is a stablecoin collateralized by your crypto holdings. It's powered by Qi Dao, a protocol that enables any cryptocurrency community to create stablecoins backed by their native tokens.",
        documentation: "https://docs.mai.finance/"
      },
      "BIFI-ETH LP": {
        name: "BIFI-ETH LP",
        symbol: "BIFI-ETH LP",
        address: "0xcDA9B8e5867b5746755fE6E505B6300a76b2fAc3",
        chainId: 42161,
        decimals: 18,
        logoURI: "",
        website: "https://app.beefy.com/",
        oracleId: "sushi-arb-weth-bifi",
        oracle: "lps"
      },
      USDD: {
        name: "Decentralized USD",
        symbol: "USDD",
        address: "0x680447595e8b7b3Aa1B43beB9f6098C79ac2Ab3f",
        chainId: 42161,
        decimals: 18,
        logoURI: "",
        website: "https://usdd.io/",
        description: "The USDD protocol aims to provide the blockchain industry with the most stable, decentralized, tamper-proof, and freeze-free stablecoin system, a perpetual system independent from any centralized entity.",
        documentation: "https://usdd.io/docs/"
      },
      agEUR: {
        name: "agEUR",
        symbol: "agEUR",
        address: "0xFA5Ed56A203466CbBC2430a43c66b9D8723528E7",
        chainId: 42161,
        decimals: 18,
        logoURI: "",
        website: "https://app.angle.money/",
        description: "Angle is a decentralized, capital-efficient and over-collateralized stablecoins protocol.",
        documentation: "https://docs.angle.money/"
      },
      TUSD: {
        name: "TrueUSD",
        symbol: "TUSD",
        address: "0x4D15a3A2286D883AF0AA1B3f21367843FAc63E07",
        chainId: 42161,
        decimals: 18,
        logoURI: "",
        website: "https://www.trueusd.com/",
        description: "TrueUSD (TUSD) is the first independently-verified digital asset redeemable 1-for-1 for US Dollars."
      },
      GNS: {
        name: "Gains Network Token",
        symbol: "GNS",
        address: "0x18c11FD286C5EC11c3b683Caa813B77f5163A122",
        decimals: 18,
        chainId: 42161,
        website: "https://gainsnetwork.io/",
        description: "Decentralized leverage trading platform on Polygon and Arbitrum.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/GNS.png",
        documentation: "https://gains-network.gitbook.io/docs-home/"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/arbitrum/index.js
var require_arbitrum = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/arbitrum/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.arbitrum = void 0;
    var beefyfinance_1 = require_beefyfinance7();
    var sushi_1 = require_sushi3();
    var swapfish_1 = require_swapfish2();
    var balancer_1 = require_balancer2();
    var tokens_1 = require_tokens7();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _arbitrum = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        sushi: sushi_1.sushi,
        swapfish: swapfish_1.swapfish,
        balancer: balancer_1.balancer
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.arbitrum = _arbitrum;
  }
});

// node_modules/blockchain-addressbook/build/address-book/celo/platforms/beefyfinance.js
var require_beefyfinance8 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/celo/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var zeroAddress = "0x0000000000000000000000000000000000000000";
    var hw = "0x3Eb7fB70C03eC4AEEC97C6C6C1B59B014600b7F7";
    exports.beefyfinance = {
      devMultisig: zeroAddress,
      treasuryMultisig: zeroAddress,
      strategyOwner: "0x5B96bbAca98D777cb736dd89A519015315E00D02",
      vaultOwner: "0x8B157c6DAeC439b447337A2F08ef055F5182B817",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: hw,
      launchpoolOwner: hw,
      rewardPool: "0x2D250016E3621CfC50A0ff7e5f6E34bbC6bfE50E",
      treasury: "0xd9F2Da642FAA1307e4F70a5E3aC31b9bfe920eAF",
      beefyFeeRecipient: "0x32C82EE8Fca98ce5114D2060c5715AEc714152FB",
      multicall: "0xa9E6E271b27b20F65394914f8784B3B860dBd259",
      bifiMaxiStrategy: "0xF2f8c64691E0Be88535388675C01a58E8557D0E8",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/celo/platforms/sushiCelo.js
var require_sushiCelo = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/celo/platforms/sushiCelo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sushiCelo = void 0;
    exports.sushiCelo = {
      minichefv1: "0x0769fd68dFb93167989C6f7254cd0D766Fb2841F",
      minichef: "0x8084936982D089130e001b470eDf58faCA445008",
      router: "0x1421bDe4B10e8dd459b3BCb598810B1337D56842",
      complexRewarderTime: "0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c",
      complexRewarderTimerv2: "0xFa3de59eDd2500BA725Dad355B98E6a4346Ada7d"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/celo/tokens/tokens.js
var require_tokens8 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/celo/tokens/tokens.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var CELO = {
      name: "CELO",
      address: "0x471EcE3750Da237f93B8E339c536989b8978a438",
      symbol: "CELO",
      decimals: 18,
      chainId: 42220,
      website: "https://celo.org/",
      description: "Celo is a mobile-first platform that makes financial dApps and crypto payments accessible to anyone with a mobile phone",
      logoURI: "https://res.cloudinary.com/dnz2bkszg/image/fetch/f_auto/https://raw.githubusercontent.com/sushiswap/icons/master/token/one.jpg"
    };
    var WCELO = __assign(__assign({}, CELO), { symbol: "WCELO" });
    var SUSHIV1 = {
      name: "Sushi Swap",
      symbol: "SUSHI",
      address: "0xD15EC721C2A896512Ad29C671997DD68f9593226",
      chainId: 42220,
      decimals: 18,
      website: "https://sushi.com/",
      description: "Sushi is the home of DeFi. Their community is building a comprehensive, decentralized trading platform for the future of finance. Swap, earn, stack yields, lend, borrow, leverage all on one decentralized, community driven platform.",
      logoURI: "https://ftmscan.com/token/images/sushiswap_32.png"
    };
    var _tokens = {
      CELO,
      WCELO,
      WNATIVE: WCELO,
      BIFI: {
        chainId: 42220,
        address: "0x639A647fbe20b6c8ac19E48E2de44ea792c62c5C",
        decimals: 18,
        name: "Beefy.Finance",
        symbol: "BIFI",
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png"
      },
      cUSD: {
        name: "Celo Dollar",
        symbol: "cUSD",
        address: "0x765DE816845861e75A25fCA122bb6898B8B1282a",
        chainId: 42220,
        decimals: 18,
        logoURI: "https://res.cloudinary.com/sushi-cdn/image/fetch/w_48/https://raw.githubusercontent.com/sushiswap/logos/main/network/celo/0x765DE816845861e75A25fCA122bb6898B8B1282a.jpg",
        website: "https://celo.org/dapps",
        description: "Celo Pegged Dollar"
      },
      cEUR: {
        name: "Celo Euro",
        symbol: "cEUR",
        address: "0xD8763CBa276a3738E6DE85b4b3bF5FDed6D6cA73",
        chainId: 42220,
        decimals: 18,
        logoURI: "https://res.cloudinary.com/sushi-cdn/image/fetch/w_48/https://raw.githubusercontent.com/sushiswap/logos/main/network/celo/0xD8763CBa276a3738E6DE85b4b3bF5FDed6D6cA73.jpg",
        website: "https://celo.org/dapps",
        description: "Celo Pegged Euro"
      },
      WETHV1: {
        name: "Wrapped Ether",
        symbol: "WETH",
        address: "0xE919F65739c26a42616b7b8eedC6b5524d1e3aC4",
        chainId: 42220,
        decimals: 18,
        website: "https://ethereum.org/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15/logo.png"
      },
      WETH: {
        name: "Wrapped Ether",
        symbol: "WETH",
        address: "0x122013fd7dF1C6F636a5bb8f03108E876548b455",
        chainId: 42220,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x122013fd7dF1C6F636a5bb8f03108E876548b455.svg",
        website: "https://ethereum.org/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network.",
        documentation: "https://ethereum.org/en/developers/docs/"
      },
      DAIV1: {
        name: "Dai Stablecoin",
        symbol: "DAI",
        address: "0xE4fE50cdD716522A56204352f00AA110F731932d",
        chainId: 42220,
        decimals: 18,
        website: "https://makerdao.com/en/",
        description: "DAI is an Ethereum-based stablecoin (stable-price cryptocurrency) whose issuance and development is managed by the Maker Protocol and the MakerDAO decentralized autonomous organization.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3.png"
      },
      DAI: {
        name: "Dai Stablecoin",
        symbol: "DAI",
        address: "0xE4fE50cdD716522A56204352f00AA110F731932d",
        chainId: 42220,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xE4fE50cdD716522A56204352f00AA110F731932d.svg",
        website: "https://makerdao.com/en/",
        description: "DAI is an Ethereum-based stablecoin (stable-price cryptocurrency) whose issuance and development is managed by the Maker Protocol and the MakerDAO decentralized autonomous organization."
      },
      SUSHIV2: {
        name: "Sushi Swap",
        symbol: "SUSHI",
        address: "0x29dFce9c22003A4999930382Fd00f9Fd6133Acd1",
        chainId: 42220,
        decimals: 18,
        website: "https://sushi.com/",
        description: "Sushi is the home of DeFi. Their community is building a comprehensive, decentralized trading platform for the future of finance. Swap, earn, stack yields, lend, borrow, leverage all on one decentralized, community driven platform.",
        logoURI: "https://ftmscan.com/token/images/sushiswap_32.png"
      },
      USDC: {
        name: "USD Coin",
        symbol: "USDC",
        address: "0xef4229c8c3250C675F21BCefa42f58EfbfF6002a",
        chainId: 42220,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xef4229c8c3250C675F21BCefa42f58EfbfF6002a.svg",
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      USDT: {
        name: "Tether USD",
        symbol: "USDT",
        address: "0x88eeC49252c8cbc039DCdB394c0c2BA2f1637EA0",
        chainId: 42220,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x88eeC49252c8cbc039DCdB394c0c2BA2f1637EA0.svg",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem."
      },
      MOBI: {
        name: "Mobius DAO Token",
        symbol: "MOBI",
        address: "0x73a210637f6F6B7005512677Ba6B3C96bb4AA44B",
        chainId: 42220,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x73a210637f6F6B7005512677Ba6B3C96bb4AA44B.svg",
        website: "https://www.mobius.money/#/swap",
        description: "A cross-chain stableswap DEX on Celo"
      },
      SUSHIV1,
      cSUSHI: __assign(__assign({}, SUSHIV1), { symbol: "cSUSHI" }),
      "BIFI-CELO LP": {
        name: "BIFI-CELO LP",
        symbol: "BIFI-CELO LP",
        address: "0xa9FcF373b6bc717223d9464e8c481c9AfAe3f861",
        chainId: 42220,
        decimals: 18,
        logoURI: "",
        website: "https://app.beefy.com/",
        oracleId: "sushi-celo-bifi-weth",
        oracle: "lps"
      },
      "CSUSHI-CELO LP": {
        name: "CSUSHI-CELO LP",
        symbol: "CSUSHI-CELO LP",
        address: "0x7072a1c2c9A0cb20ae0B3C0C9023a42a49542e8B",
        chainId: 42220,
        decimals: 18,
        logoURI: "",
        website: "https://app.beefy.com/",
        oracleId: "sushi-celo-csushi-celo",
        oracle: "lps"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/celo/index.js
var require_celo = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/celo/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.celo = void 0;
    var beefyfinance_1 = require_beefyfinance8();
    var sushiCelo_1 = require_sushiCelo();
    var tokens_1 = require_tokens8();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _celo = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        sushiCelo: sushiCelo_1.sushiCelo
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.celo = _celo;
  }
});

// node_modules/blockchain-addressbook/build/address-book/moonriver/platforms/beefyfinance.js
var require_beefyfinance9 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/moonriver/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0x1FDd00B45eBA7F6d35b92803EadDD68F7Cc4A193";
    var treasuryMultisig = "0x617f12E04097F16e73934e84f35175a1B8196551";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0xc8BD4Ae3d3A69f0d75e3788d2ee557E66EBC98D8",
      vaultOwner: "0xabCF33106937Ba7f53986F2c339Dd7F1953CE136",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0x4Aabd0d73181325DD1609Ce696eF048702DE7153",
      treasury: "0xB6Fb58eea08b5539f371A744bb9Ef86283F1B3c2",
      beefyFeeRecipient: "0xD5e8D34dE3B1A6fd54e87B5d4a857CBB762d0C8A",
      multicall: "0x55f46144bC62e9Af4bAdB71842B62162e2194E90",
      bifiMaxiStrategy: "0x8DB043df791A5D9b640E0919A007994E3635291e",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      beefyFeeConfig: "0x6683B3c87913a91856c21ACF2D051dcdDf684c65",
      vaultFactory: "0xD2838C50E843afF1359011486b31697C2b1290DC"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/moonriver/platforms/solarbeam.js
var require_solarbeam = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/moonriver/platforms/solarbeam.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.solarbeam = void 0;
    exports.solarbeam = {
      masterchef: "0xf03b75831397D4695a6b9dDdEEA0E578faa30907",
      masterchefV2: "0xA3Dce528195b8D15ea166C623DB197B2C3f8D127",
      masterchefV3: "0x0329867a8c457e9F75e25b0685011291CD30904F",
      router: "0xAA30eF758139ae4a7f798112902Bf6d65612045f"
      // UniswapV2Router02
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/moonriver/platforms/sushi.js
var require_sushi4 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/moonriver/platforms/sushi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sushi = void 0;
    exports.sushi = {
      minichef: "0x3dB01570D97631f69bbb0ba39796865456Cf89A5",
      complexRewarderTime: "0x1334c8e873E1cae8467156e2A81d1C8b566B2da1",
      bifiMovrLp: "0xaC726ee53edFAe5f8f4C2c0d611Fd71D58E743bA",
      router: "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/moonriver/platforms/finn.js
var require_finn = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/moonriver/platforms/finn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.finn = void 0;
    exports.finn = {
      masterchef: "0x1f4b7660b6AdC3943b5038e3426B33c1c0e343E6",
      router: "0x2d4e873f9Ab279da9f1bb2c532d4F06f67755b77"
      // UniswapV2Router02
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/moonriver/tokens/tokens.js
var require_tokens9 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/moonriver/tokens/tokens.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var MOVR = {
      name: "Wrapped MOVR",
      address: "0x98878B06940aE243284CA214f92Bb71a2b032B8A",
      symbol: "WMOVR",
      decimals: 18,
      chainId: 1285,
      website: "https://moonbeam.network/networks/moonriver/",
      description: "Moonriver is a companion network to Moonbeam and provides a permanently incentivized canary network. New code ships to Moonriver first, where it can be tested and verified under real economic conditions. Once proven, the same code ships to Moonbeam on Polkadot.",
      logoURI: "https://app.solarbeam.io/_next/image?url=https%3A%2F%2Fapp.solarbeam.io%2Fimages%2Ftokens%2Fmovr.png&w=32&q=50"
    };
    var WMOVR_SUSHI = {
      name: "Wrapped MOVR on Sushiswap",
      address: "0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d",
      symbol: "WMOVR",
      decimals: 18,
      chainId: 1285,
      website: "https://moonbeam.network/networks/moonriver/",
      description: "Moonriver is a companion network to Moonbeam and provides a permanently incentivized canary network. New code ships to Moonriver first, where it can be tested and verified under real economic conditions. Once proven, the same code ships to Moonbeam on Polkadot.",
      logoURI: "https://app.solarbeam.io/_next/image?url=https%3A%2F%2Fapp.solarbeam.io%2Fimages%2Ftokens%2Fmovr.png&w=32&q=50"
    };
    var SUSHI = {
      name: "SUSHI",
      address: "0xf390830DF829cf22c53c8840554B98eafC5dCBc2",
      symbol: "SUSHI",
      decimals: 18,
      chainId: 1285,
      website: "https://sushi.com/",
      description: "Sushi is the home of DeFi. Their community is building a comprehensive, decentralized trading platform for the future of finance. Swap, earn, stack yields, lend, borrow, leverage all on one decentralized, community driven platform.",
      logoURI: "https://ftmscan.com/token/images/sushiswap_32.png"
    };
    var _tokens = {
      MOVR,
      WMOVR: MOVR,
      WNATIVE: MOVR,
      WMOVR_SUSHI,
      WNATIVE_SUSHI: WMOVR_SUSHI,
      BIFI: {
        chainId: 1285,
        address: "0x173fd7434B8B50dF08e3298f173487ebDB35FD14",
        decimals: 18,
        name: "Beefy.Finance",
        symbol: "BIFI",
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      MAI: {
        name: "MAI",
        symbol: "Mai Stablecoin",
        address: "0xFb2019DfD635a03cfFF624D210AEe6AF2B00fC2C",
        chainId: 1285,
        decimals: 18,
        website: "https://www.mai.finance/",
        description: "MAI is a stablecoin collateralized by your crypto holdings. It's powered by Qi Dao, a protocol that enables any cryptocurrency community to create stablecoins backed by their native tokens.",
        logoURI: "https://raw.githubusercontent.com/0xlaozi/qidao/main/images/mimatic-red.png",
        documentation: "https://docs.mai.finance/"
      },
      DOGE: {
        name: "Doge Token",
        symbol: "DOGE",
        address: "0xb668Cd490a4421F993f93be2819A922DBbB32804",
        chainId: 1285,
        decimals: 8,
        logoURI: "https://cryptologos.cc/logos/dogecoin-doge-logo.svg?v=014",
        website: "https://dogecoin.com/",
        description: "Dogecoin is an open source peer-to-peer digital currency, favored by Shiba Inus worldwide."
      },
      XRP: {
        name: "XRP Token",
        symbol: "XRP",
        address: "0x9D5bc9B873AeD984e2B6A64d4792249D68BbA2Fe",
        chainId: 1285,
        decimals: 6,
        logoURI: "https://cryptologos.cc/logos/xrp-xrp-logo.svg?v=014",
        website: "https://ripple.com/xrp/",
        description: "XRP is a digital asset built for payments. It is the native digital asset on the XRP Ledger\u2014an open-source, permissionless and decentralized blockchain technology that can settle transactions in 3-5 seconds."
      },
      WAN: {
        name: "WAN Token",
        symbol: "WAN",
        address: "0x41562ae242d194247389152aCAa7a9397136b09F",
        chainId: 1285,
        decimals: 18,
        logoURI: "https://cryptologos.cc/logos/wanchain-wan-logo.svg?v=014",
        website: "https://www.wanchain.org/",
        description: "Wanchain is a distributed ledger that allows for cross-chain transactions and the interoperability of multiple chains. Although Wanchain facilitates transactions between blockchains, it is also a stand-alone blockchain that runs autonomously."
      },
      FINN: {
        name: "FINN Token",
        symbol: "FINN",
        address: "0x9A92B5EBf1F6F6f7d93696FCD44e5Cf75035A756",
        chainId: 1285,
        decimals: 18,
        logoURI: "https://www.huckleberry.finance/static/media/02.edc46c96.png",
        website: "https://www.huckleberry.finance/#/swap",
        description: "Huckleberry is a community driven AMM crosschain DEX built on Moonriver."
      },
      DOTm: {
        name: "Polkadot Token",
        symbol: "DOTm",
        address: "0x15B9CA9659F5dfF2b7d35a98dd0790a3CBb3D445",
        chainId: 1285,
        decimals: 10,
        logoURI: "https://assets.coingecko.com/coins/images/12171/large/aJGBjJFU_400x400.jpg?1597804776",
        website: "https://polkadot.network/",
        description: 'Polkadot is an open source, blockchain-based distributed computing platform that enables the blockchains built on top of it, known as "parachains", to execute atomic inter-chain transactions between themselves in a trust-minimized way, thereby creating an interconnected internet of blockchains.'
      },
      USDCm: {
        name: "USD Coin",
        symbol: "USDCm",
        address: "0x748134b5F553F2bcBD78c6826De99a70274bDEb3",
        chainId: 1285,
        decimals: 6,
        logoURI: "https://app.solarbeam.io/_next/image?url=https%3A%2F%2Fapp.solarbeam.io%2Fimages%2Ftokens%2Fusdc.png&w=48&q=50",
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      SOLAR: {
        name: "SolarBeam Token",
        symbol: "SOLAR",
        address: "0x6bD193Ee6D2104F14F94E2cA6efefae561A4334B",
        chainId: 1285,
        decimals: 18,
        logoURI: "https://app.solarbeam.io/_next/image?url=%2Fimages%2Ftokens%2Fsolar.png&w=32&q=50",
        website: "https://app.solarbeam.io/exchange/swap",
        description: "Solarbeam is a decentralized exchange, providing liquidity and enabling peer-to-peer transactions on the Moonriver Network. We are currently the leading DEX on the network. The goal is to provide a comprehensive and convenient, one-stop platform for the cryptocurrency community."
      },
      RIB: {
        name: "RiverBoat",
        symbol: "RIB",
        address: "0xbD90A6125a84E5C512129D622a75CDDE176aDE5E",
        chainId: 1285,
        decimals: 18,
        logoURI: "https://app.solarbeam.io/_next/image?url=https%3A%2F%2Fapp.solarbeam.io%2Fimages%2Ftokens%2Frib.png&w=32&q=50",
        website: "https://seascape.finance/#/swap",
        description: "Scapes are Seascapes original series of NFTs. Unlike many of their predecessors, they are designed to be true financial assets. Players can mint, stake, and burn them in exchange for Crowns or other rewards."
      },
      USDC: {
        name: "USD Coin",
        symbol: "USDC",
        address: "0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D",
        chainId: 1285,
        decimals: 6,
        logoURI: "https://app.solarbeam.io/_next/image?url=https%3A%2F%2Fapp.solarbeam.io%2Fimages%2Ftokens%2Fusdc.png&w=48&q=50",
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      DAI: {
        name: "Dai Stablecoin",
        symbol: "DAI",
        address: "0x80A16016cC4A2E6a2CACA8a4a498b1699fF0f844",
        chainId: 1285,
        decimals: 18,
        website: "https://makerdao.com/en/",
        description: "Dai is a stablecoin cryptocurrency which aims to keep its value as close to one United States dollar as possible through an automated system of smart contracts on the Ethereum blockchain",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xbA7dEebBFC5fA1100Fb055a87773e1E99Cd3507a/logo.png"
      },
      BUSD: {
        name: "Binance-Peg BUSD Token",
        symbol: "BUSD",
        address: "0x5D9ab5522c64E1F6ef5e3627ECCc093f56167818",
        chainId: 1285,
        decimals: 18,
        website: "https://www.binance.com/en/busd",
        description: "Binance USD (BUSD) is a 1:1 USD-backed stable coin issued by Binance (in partnership with Paxos). BUSD is approved and regulated by the New York State Department of Financial Services (NYDFS). The BUSD Monthly Audit Report can be viewed from the official website.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/avalanche-bridge-resources/main/tokens/BUSD/logo.png"
      },
      ETH: {
        name: "Ethereum",
        symbol: "ETH",
        address: "0x639A647fbe20b6c8ac19E48E2de44ea792c62c5C",
        chainId: 1285,
        decimals: 18,
        website: "https://weth.io/",
        description: "Ether or ETH is the native currency built on the Ethereum blockchain.",
        logoURI: "https://arbiscan.io/token/images/weth_28.png",
        documentation: "https://ethereum.org/en/developers/docs/"
      },
      BNB: {
        name: "Binance",
        symbol: "BNB",
        address: "0x2bF9b864cdc97b08B6D79ad4663e71B8aB65c45c",
        chainId: 1285,
        decimals: 18,
        website: "https://www.binance.com/",
        description: "Binance Coin (BNB) is an exchange-based token created and issued by the cryptocurrency exchange Binance. Initially created on the Ethereum blockchain as an ERC-20 token in July 2017, BNB was migrated over to Binance Chain in February 2019 and became the native coin of the Binance Chain.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c.png"
      },
      WBTC: {
        name: "Wrapped BTC",
        symbol: "WBTC",
        address: "0x6aB6d61428fde76768D7b45D8BFeec19c6eF91A8",
        chainId: 1285,
        decimals: 8,
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB/logo.png"
      },
      USDT: {
        name: "Tether USD",
        symbol: "USDT",
        address: "0xB44a9B6905aF7c801311e8F4E76932ee959c663C",
        chainId: 1285,
        decimals: 6,
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        logoURI: "https://hecoinfo.com/token/images/USDTHECO_32.png"
      },
      MATIC: {
        name: "Matic Token",
        symbol: "MATIC",
        address: "0x682F81e57EAa716504090C3ECBa8595fB54561D8",
        chainId: 1285,
        decimals: 18,
        website: "https://polygon.technology/",
        description: "The MATIC token serves dual purposes: securing the Polygon network via staking and being used for the payment of transaction fees.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x885ca6663E1E19DAD31c1e08D9958a2b8F538D53/logo.png"
      },
      AVAX: {
        name: "Avalanche Token",
        symbol: "AVAX",
        address: "0x14a0243C333A5b238143068dC3A7323Ba4C30ECB",
        chainId: 1285,
        decimals: 18,
        website: "https://www.avalabs.org/",
        description: "Avalanche is the fastest smart contracts platform in the blockchain industry, as measured by time-to-finality, and has the most validators securing its activity of any proof-of-stake protocol.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7/logo.png"
      },
      RELAY: {
        name: "Relay Token",
        symbol: "RELAY",
        address: "0xAd7F1844696652ddA7959a49063BfFccafafEfe7",
        chainId: 1285,
        decimals: 18,
        logoURI: "https://www.relaychain.com/static/media/relay-icon.e8d6824b.svg",
        website: "https://www.relaychain.com/",
        description: "Cross-chain token transfers on the worlds top blockchains using Relays fast, secure chain bridge"
      },
      miMatic: {
        name: "MAI",
        symbol: "miMatic",
        address: "0x7f5a79576620C046a293F54FFCdbd8f2468174F1",
        chainId: 1285,
        decimals: 18,
        website: "https://www.mai.finance/",
        description: "MAI is a stablecoin collateralized by your crypto holdings. It's powered by Qi Dao, a protocol that enables any cryptocurrency community to create stablecoins backed by their native tokens.",
        logoURI: "https://raw.githubusercontent.com/0xlaozi/qidao/main/images/mimatic-red.png",
        documentation: "https://docs.mai.finance/"
      },
      FTM: {
        name: "Fantom Token",
        symbol: "FTM",
        address: "0xaD12daB5959f30b9fF3c2d6709f53C335dC39908",
        chainId: 1285,
        decimals: 18,
        website: "https://fantom.foundation/defi/?__cf_chl_jschl_tk__=pmd_vfkYw1Z8PZor5oxGKrd9bxYd66paY0bLiQmy1dKOLpY-1633331752-0-gqNtZGzNAdCjcnBszQlR",
        description: "Fantom offers the first DeFi stack built on an aBFT consensus. It\u2019s much faster, cheaper, and more reliable and secure than its predecessors.",
        logoURI: "https://repository.fantom.network/logos/sftm.svg"
      },
      MIM: {
        name: "Magic Internet Money",
        symbol: "MIM",
        address: "0x0caE51e1032e8461f4806e26332c030E34De3aDb",
        chainId: 1285,
        decimals: 18,
        website: "https://abracadabra.money/",
        description: "You, the Spellcaster, can provide collateral in the form of various interest bearing crypto assets such as yvYFI, yvUSDT, yvUSDC, xSUSHI and more. With this, you can borrow magic internet money (MIM) which is a stable coin that you can swap for any other traditional stable coin.",
        logoURI: "",
        documentation: "https://docs.abracadabra.money/"
      },
      PETS: {
        name: "PETS Token",
        symbol: "PETS",
        address: "0x1e0F2A75Be02c025Bd84177765F89200c04337Da",
        chainId: 1285,
        decimals: 18,
        logoURI: "https://www.polkapet.world/assets/img/landing/logo-1.png",
        website: "https://www.polkapet.world/",
        description: "An immersive NFT collection created in partnership with the biggest and best Polkadot projects"
      },
      SUSHI,
      mSUSHI: __assign(__assign({}, SUSHI), { symbol: "mSUSHI" }),
      anyFRAX: {
        name: "FRAX",
        symbol: "FRAX",
        address: "0x965f84D915a9eFa2dD81b653e3AE736555d945f4",
        chainId: 1285,
        decimals: 18,
        logoURI: "https://cryptologos.cc/logos/frax-frax-logo.svg?v=014",
        website: "https://frax.finance/",
        description: "The Frax Protocol introduced the world to the concept of a cryptocurrency being partially backed by collateral and partially stabilized algorithmically."
      },
      FRAX: {
        name: "FRAX",
        symbol: "FRAX",
        address: "0x1A93B23281CC1CDE4C4741353F3064709A16197d",
        chainId: 1285,
        decimals: 18,
        logoURI: "https://cryptologos.cc/logos/frax-frax-logo.svg?v=014",
        website: "https://frax.finance/",
        description: "The Frax Protocol introduced the world to the concept of a cryptocurrency being partially backed by collateral and partially stabilized algorithmically."
      },
      aROME: {
        name: "Alpha Rome",
        symbol: "aROME",
        address: "0x3D2D044E8C6dAd46b4F7896418d3d4DFaAD902bE",
        chainId: 1285,
        decimals: 9,
        logoURI: "https://tokens.pancakeswap.finance/images/0x3D2D044E8C6dAd46b4F7896418d3d4DFaAD902bE.svg",
        website: "https://romedao.finance/",
        description: "RomeDAO is a community project with no central team. It\u2019s a community project built by and for the community. This means it\u2019s up to the community contributors to build a prospering Rome."
      },
      ROME: {
        name: "Rome",
        symbol: "ROME",
        address: "0x4a436073552044D5f2f49B176853ad3Ad473d9d6",
        chainId: 1285,
        decimals: 9,
        logoURI: "https://tokens.pancakeswap.finance/images/0x3D2D044E8C6dAd46b4F7896418d3d4DFaAD902bE.svg",
        website: "https://romedao.finance/",
        description: "RomeDAO is a community project with no central team. It\u2019s a community project built by and for the community. This means it\u2019s up to the community contributors to build a prospering Rome."
      },
      BNBbsc: {
        name: "Binance",
        symbol: "BNBbsc",
        address: "0x868892CCcEdbfF0B028F3b3595205Ea91b99376B",
        chainId: 1285,
        decimals: 18,
        website: "https://www.binance.com/",
        description: "BNB from BSC wrapped by passport.meter.io",
        logoURI: "https://tokens.pancakeswap.finance/images/0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c.png"
      },
      WBTCeth: {
        name: "Wrapped Bitcoin",
        symbol: "WBTCeth",
        address: "0xE6a991Ffa8CfE62B0bf6BF72959A3d4f11B2E0f5",
        chainId: 1285,
        decimals: 8,
        website: "https://passport.meter.io/transfer#/ ",
        description: "WBTC from Etherem wrapped by passport.meter.io",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB/logo.png"
      },
      xcKSM: {
        name: "xcKSM",
        symbol: "xcKSM",
        address: "0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080",
        chainId: 1285,
        decimals: 12,
        logoURI: "https://tokens.pancakeswap.finance/images/0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080.svg",
        website: "https://kusama.network/",
        description: "xcKSM is the Moonriver bridged verison of KSM from Kusama. Kusama is an experimental and development environment for features that will eventually be deployed to Polkadot."
      },
      xcRMRK: {
        name: "xcRMRK",
        symbol: "xcRMRK",
        address: "0xffffffFF893264794d9d57E1E0E21E0042aF5A0A",
        chainId: 1285,
        decimals: 10,
        logoURI: "https://tokens.pancakeswap.finance/images/0xffffffFF893264794d9d57E1E0E21E0042aF5A0A.svg",
        website: "https://www.rmrk.app/",
        description: "ETERNALLY liquid. FORWARD compatible.Nested, conditional, & Multi-resourced NFTs."
      },
      stKSM: {
        name: "stKSM",
        symbol: "stKSM",
        address: "0xFfc7780C34B450d917d557E728f033033CB4fA8C",
        chainId: 1285,
        decimals: 12,
        logoURI: "https://github.com/solarbeamio/solarbeam-tokenlist/blob/main/assets/moonriver/0xFfc7780C34B450d917d557E728f033033CB4fA8C/logo.png",
        website: "https://kusama.lido.fi/",
        description: "Lido for Moonriver is a liquid staking solution for KSM backed by industry-leading staking providers."
      },
      xcKBTC: {
        name: "Kintsugi Wrapped BTC",
        symbol: "xcKBTC",
        address: "0xFFFfFfFfF6E528AD57184579beeE00c5d5e646F0",
        chainId: 1285,
        decimals: 8,
        logoURI: "https://moonriver.moonscan.io/token/images/kintsugibtc_32.png",
        website: "https://kusama.network/",
        description: "xckBTC is the Moonriver bridged verison of kBTC. kBTC is an overcollaterized Bitcoin stablecoin asset on Kusama."
      },
      wstKSM: {
        name: "Wrapped Staked KSM",
        symbol: "wstKSM",
        address: "0x3bfd113ad0329a7994a681236323fb16E16790e3",
        chainId: 1285,
        decimals: 12,
        logoURI: "https://github.com/solarbeamio/solarbeam-tokenlist/blob/main/assets/moonriver/0xFfc7780C34B450d917d557E728f033033CB4fA8C/logo.png",
        website: "https://kusama.lido.fi/",
        description: "Staked KSM (stKSM) is a liquid staking solution for KSM backed by industry-leading staking providers. stKSM rebases daily to receive rewards, wrapping stKSM for wstKSM will stop the rebasing mechanism, and will allow users to continue accruing staking rewards."
      },
      "BIFI-WMOVR LP": {
        name: "BIFI-WMOVR LP",
        symbol: "BIFI-WMOVR LP",
        address: "0xaC726ee53edFAe5f8f4C2c0d611Fd71D58E743bA",
        chainId: 1285,
        decimals: 18,
        logoURI: "",
        website: "https://app.beefy.com/",
        oracleId: "sushi-mr-bifi-wmovr",
        oracle: "lps"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/moonriver/index.js
var require_moonriver = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/moonriver/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.moonriver = void 0;
    var beefyfinance_1 = require_beefyfinance9();
    var solarbeam_1 = require_solarbeam();
    var sushi_1 = require_sushi4();
    var finn_1 = require_finn();
    var tokens_1 = require_tokens9();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _moonriver = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        solarbeam: solarbeam_1.solarbeam,
        sushi: sushi_1.sushi,
        finn: finn_1.finn
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.moonriver = _moonriver;
  }
});

// node_modules/blockchain-addressbook/build/address-book/cronos/platforms/beefyfinance.js
var require_beefyfinance10 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/cronos/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var treasuryMultisig = "0xa9721Ae5042482D7a884A2138f580459B680920f";
    var devMultisig = "0x87CFACB331dF29168c02A02d828e37092d588190";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0x4f4DB83d75876f34fd927d5fa78D5D7b4479E6ce",
      vaultOwner: "0x8c2839aCcC801A61f4F0F7CCf4F92D0895ad2AeC",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0x107Dbf9c9C0EF2Df114159e5C7DC2baf7C444cFF",
      treasury: "0x3f385082Ee3dFf58ca0a6a7fe44Ea0B5d6b4168E",
      beefyFeeRecipient: "0xF9eBb381dC153D0966B2BaEe776de2F400405755",
      multicall: "0x13aD51a6664973EbD0749a7c84939d973F247921",
      bifiMaxiStrategy: "0xa9E6E271b27b20F65394914f8784B3B860dBd259",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      beefyFeeConfig: "0xb13A7ec2F26f6F908D0736Ee4D1171bAc88c8cBD"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/cronos/platforms/vvs.js
var require_vvs = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/cronos/platforms/vvs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.vvs = void 0;
    exports.vvs = {
      masterchef: "0xDccd6455AE04b03d785F12196B492b18129564bc",
      router: "0x145863Eb42Cf62847A6Ca784e6416C1682b1b2Ae",
      bifiCroLp: "0x1803E360393A472beC6E1A688BDF7048d3076b1A"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/cronos/platforms/crona.js
var require_crona = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/cronos/platforms/crona.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crona = void 0;
    exports.crona = {
      masterchef: "0x77ea4a4cF9F77A034E4291E8f457Af7772c2B254",
      router: "0xcd7d16fB918511BF7269eC4f48d61D79Fb26f918"
      // UniswapV2Router02
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/cronos/tokens/tokens.js
var require_tokens10 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/cronos/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var CRO = {
      name: "Wrapped CRO",
      address: "0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23",
      symbol: "WCRO",
      decimals: 18,
      chainId: 25,
      website: "https://cronos.crypto.org/",
      description: "Crypto.com Coin",
      logoURI: "https://vvs.finance/images/tokens/0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23.svg"
    };
    var _tokens = {
      CRO,
      WCRO: CRO,
      WNATIVE: CRO,
      FIRA: {
        name: "Fira",
        symbol: "FIRA",
        address: "0x7ABa852082b6F763E13010CA33B5D9Ea4EeE2983",
        chainId: 25,
        decimals: 18,
        logoURI: "https://vvs.finance/images/tokens/0x7ABa852082b6F763E13010CA33B5D9Ea4EeE2983.svg",
        website: "https://defira.com/",
        description: "The FIRA token is the main governance token and currency for the Defiraverse. In the game world, it is known as the Fira Orb."
      },
      VERSA: {
        name: "VersaGames VERSA",
        symbol: "VERSA",
        address: "0x00D7699b71290094CcB1a5884cD835bD65a78c17",
        chainId: 25,
        decimals: 18,
        logoURI: "https://vvs.finance/images/tokens/0x00D7699b71290094CcB1a5884cD835bD65a78c17.svg",
        website: "https://versagames.io/",
        description: "VersaGames is the next-generation games marketplace."
      },
      MTD: {
        name: "Minted",
        symbol: "MTD",
        address: "0x0224010BA2d567ffa014222eD960D1fa43B8C8E1",
        chainId: 25,
        decimals: 18,
        website: "https://minted.network/",
        description: "Minted network is a decentralised NFT platform that aspires to be the digital bazaar of wonders for everyone to discover, trade, and find NFT gems, native to Ethereum and Cronos.",
        logoURI: "https://vvs.finance/images/tokens/0x0224010BA2d567ffa014222eD960D1fa43B8C8E1.svg"
      },
      FER: {
        name: "Ferro",
        symbol: "FER",
        address: "0x39bC1e38c842C60775Ce37566D03B41A7A66C782",
        chainId: 25,
        decimals: 18,
        website: "https://www.ferroprotocol.com/",
        description: "Ferro Protocol is a StableSwap AMM protocol that allows users to exchange with low slippage and minimum fee and farm tokens by creating more efficient pools consisting of highly correlated assets, as well as allowing better composability between protocols in the Cronos ecosystem.",
        logoURI: "https://vvs.finance/images/tokens/0x39bC1e38c842C60775Ce37566D03B41A7A66C782.svg"
      },
      sCRO: {
        name: "sCRO",
        symbol: "sCRO",
        address: "0xA01fAe0612a4786ec296Be7f87b292F05c68186B",
        chainId: 25,
        decimals: 18,
        website: "https://cro.ripae.finance/",
        description: "Ripae Finance\u2019s full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: "https://cro.ripae.finance/static/media/sCRO.f6637a43.svg"
      },
      pCRO: {
        name: "pCRO",
        symbol: "pCRO",
        address: "0xA5e6a847f79BA19AAF41b8e1B2e6C4741234C6b7",
        chainId: 25,
        decimals: 18,
        website: "https://cro.ripae.finance/",
        description: "Ripae Finance\u2019s full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: "https://cro.ripae.finance/static/media/pCRO.0d99b3b6.svg"
      },
      APE: {
        name: "APECoin",
        symbol: "APE",
        address: "0x9C62F89a8C9907582f21205Ce90443730361EA05",
        chainId: 25,
        decimals: 18,
        website: "https://www.apecoin.com/",
        description: "ApeCoin is an ERC-20 governance and utility token used within the APE ecosystem to empower a decentralized community building at the forefront of web3.",
        logoURI: "https://vvs.finance/images/tokens/0x9C62F89a8C9907582f21205Ce90443730361EA05.svg"
      },
      ALI: {
        name: "Alethea Artificial Liquid Intelligence Token ALI",
        symbol: "ALI",
        address: "0x45C135C1CDCE8d25A3B729A28659561385C52671",
        chainId: 25,
        decimals: 18,
        logoURI: "https://vvs.finance/images/tokens/0x45C135C1CDCE8d25A3B729A28659561385C52671.svg",
        website: "https://alethea.ai/",
        description: "Alethea AI is building a decentralized protocol to create an Intelligent Metaverse inhabited by interactive and intelligent NFTs (iNFTs)."
      },
      TUSD: {
        name: "True USD",
        symbol: "TUSD",
        address: "0x87EFB3ec1576Dec8ED47e58B832bEdCd86eE186e",
        decimals: 18,
        chainId: 25,
        website: "https://www.trueusd.com/",
        description: "TrueUSD is one of a number of cryptocurrency stablecoins administered by TrustToken, a platform for tokenizing real-world assets.",
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/200x200/2563.png"
      },
      SKY: {
        chainId: 25,
        address: "0x9D3BBb0e988D9Fb2d55d07Fe471Be2266AD9c81c",
        decimals: 18,
        name: "SKY",
        symbol: "SKY",
        website: "https://www.darkcrypto.finance/",
        description: "The first algorithmic token pegged to CRO running on the Cronos Chain",
        logoURI: "https://assets.coingecko.com/coins/images/22517/small/logo-token-2.e9c15b63.png"
      },
      DARK: {
        chainId: 25,
        address: "0x83b2AC8642aE46FC2823Bc959fFEB3c1742c48B5",
        decimals: 18,
        name: "DARK",
        symbol: "DARK",
        website: "https://www.darkcrypto.finance/",
        description: "The first algorithmic token pegged to CRO running on the Cronos Chain",
        logoURI: "https://assets.coingecko.com/coins/images/22456/small/DARK_bgWhite.png"
      },
      BIFI: {
        chainId: 25,
        address: "0xe6801928061CDbE32AC5AD0634427E140EFd05F9",
        decimals: 18,
        name: "Beefy.Finance",
        symbol: "BIFI",
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      TONIC: {
        name: "Tectonic Governance Token",
        symbol: "TONIC",
        address: "0xDD73dEa10ABC2Bff99c60882EC5b2B81Bb1Dc5B2",
        chainId: 25,
        decimals: 18,
        website: "https://tectonic.finance/",
        description: "Tectonic is a cross-chain money market for earning passive yield and accessing instant backed loans",
        logoURI: "https://vvs.finance/images/tokens/0xDD73dEa10ABC2Bff99c60882EC5b2B81Bb1Dc5B2.svg"
      },
      LIQ: {
        name: "Liquidus",
        symbol: "LIQ",
        address: "0xABd380327Fe66724FFDa91A87c772FB8D00bE488",
        chainId: 25,
        decimals: 18,
        website: "https://farm.liquidus.finance/",
        description: "Earn interest on your decentralised crypto assets",
        logoURI: "https://farm.liquidus.finance/static/media/liquidus_logo_round.f72f345a.png"
      },
      ATOM: {
        name: "Cosmos Token",
        symbol: "ATOM",
        address: "0xB888d8Dd1733d72681b30c00ee76BDE93ae7aa93",
        chainId: 25,
        decimals: 6,
        website: "https://cosmos.network/",
        description: "Cosmos is an ever-expanding ecosystem of interconnected apps and services, built for a decentralized future.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x0eb3a705fc54725037cc9e008bdede697f62f335.png"
      },
      DOGE: {
        name: "Doge Token",
        symbol: "DOGE",
        address: "0x1a8E39ae59e5556B56b76fCBA98d22c9ae557396",
        chainId: 25,
        decimals: 8,
        logoURI: "https://cryptologos.cc/logos/dogecoin-doge-logo.svg?v=014",
        website: "https://dogecoin.com/",
        description: "Dogecoin is an open source peer-to-peer digital currency, favored by Shiba Inus worldwide."
      },
      SHIB: {
        name: "Shiba Inu",
        symbol: "SHIB",
        address: "0xbED48612BC69fA1CaB67052b42a95FB30C1bcFee",
        chainId: 25,
        decimals: 18,
        website: "https://shibatoken.com/",
        description: "According to the SHIBA INU website, SHIB is the \u201CDOGECOIN KILLER\u201D and will be listed on their own ShibaSwap, a decentralized exchange.",
        logoURI: "https://bscscan.com/token/images/shibatoken_32.png"
      },
      VVS: {
        name: "VVSToken",
        symbol: "VVS",
        address: "0x2D03bECE6747ADC00E1a131BBA1469C15fD11e03",
        chainId: 25,
        decimals: 18,
        logoURI: "https://vvs.finance/images/tokens/0x2D03bECE6747ADC00E1a131BBA1469C15fD11e03.svg",
        website: "https://vvs.finance",
        description: "VVS is designed to be the simplest DeFi platform for users to swap tokens, earn high yields, and most importantly have fun!"
      },
      USDC: {
        name: "USD Coin",
        symbol: "USDC",
        address: "0xc21223249CA28397B4B6541dfFaEcC539BfF0c59",
        chainId: 25,
        decimals: 6,
        logoURI: "https://app.solarbeam.io/_next/image?url=https%3A%2F%2Fapp.solarbeam.io%2Fimages%2Ftokens%2Fusdc.png&w=48&q=50",
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      ETH: {
        name: "Ethereum",
        symbol: "ETH",
        address: "0xe44Fd7fCb2b1581822D0c862B68222998a0c299a",
        chainId: 25,
        decimals: 18,
        website: "https://weth.io/",
        description: "Ether or ETH is the native currency built on the Ethereum blockchain.",
        logoURI: "https://arbiscan.io/token/images/weth_28.png"
      },
      WBTC: {
        name: "Wrapped BTC",
        symbol: "WBTC",
        address: "0x062E66477Faf219F25D27dCED647BF57C3107d52",
        chainId: 25,
        decimals: 8,
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB/logo.png"
      },
      CRONA: {
        name: "CronaSwap Token",
        symbol: "CRONA",
        address: "0xadbd1231fb360047525BEdF962581F3eee7b49fe",
        chainId: 25,
        decimals: 18,
        website: "https://app.cronaswap.org/",
        description: "CronaSwap is the first decentralized exchange platform on the Cronos Chain and the lowest platform transaction fees (0.25%).",
        logoURI: "https://app.cronaswap.org/images/tokens/0xadbd1231fb360047525BEdF962581F3eee7b49fe.svg"
      },
      USDT: {
        name: "Tether USD",
        symbol: "USDT",
        address: "0x66e428c3f67a68878562e79A0234c1F83c208770",
        chainId: 25,
        decimals: 6,
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold. Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        logoURI: "https://app.cronaswap.org/images/tokens/0x66e428c3f67a68878562e79A0234c1F83c208770.svg"
      },
      DAI: {
        name: "DAI Token",
        symbol: "DAI",
        address: "0xF2001B145b43032AAF5Ee2884e456CCd805F677D",
        chainId: 25,
        decimals: 18,
        website: "https://makerdao.com/en/",
        description: "DAI is an Ethereum-based stablecoin (stable-price cryptocurrency) whose issuance and development is managed by the Maker Protocol and the MakerDAO decentralized autonomous organization.",
        logoURI: "https://app.cronaswap.org/images/tokens/0xF2001B145b43032AAF5Ee2884e456CCd805F677D.svg"
      },
      BUSD: {
        name: "BUSD Token",
        symbol: "BUSD",
        address: "0xC74D59A548ecf7fc1754bb7810D716E9Ac3e3AE5",
        chainId: 25,
        decimals: 18,
        website: "https://www.binance.com/en/busd",
        description: "Binance USD (BUSD) is a 1:1 USD-backed stable coin issued by Binance (in partnership with Paxos), Approved and regulated by the New York State Department of Financial Services (NYDFS), The BUSD Monthly Audit Report can be viewed from the official website.",
        logoURI: "https://app.cronaswap.org/images/tokens/0x6aB6d61428fde76768D7b45D8BFeec19c6eF91A8.svg"
      },
      BUSDb: {
        name: "BUSD Token (Multichain)",
        symbol: "BUSD",
        address: "0x6aB6d61428fde76768D7b45D8BFeec19c6eF91A8",
        chainId: 25,
        decimals: 18,
        website: "https://www.binance.com/en/busd",
        description: "Multichain bridged Binance USD (BUSD) is a 1:1 USD-backed stable coin issued by Binance (in partnership with Paxos), Approved and regulated by the New York State Department of Financial Services (NYDFS), The BUSD Monthly Audit Report can be viewed from the official website.",
        logoURI: "https://app.cronaswap.org/images/tokens/0x6aB6d61428fde76768D7b45D8BFeec19c6eF91A8.svg"
      },
      MATIC: {
        name: "MATIC Token",
        symbol: "MATIC",
        address: "0xc9BAA8cfdDe8E328787E29b4B078abf2DaDc2055",
        chainId: 25,
        decimals: 18,
        website: "https://polygon.technology/",
        description: "The MATIC token serves dual purposes: securing the Polygon network via staking and being used for the payment of transaction fees.",
        logoURI: "https://app.cronaswap.org/images/tokens/0xc9BAA8cfdDe8E328787E29b4B078abf2DaDc2055.svg"
      },
      AVAX: {
        name: "Avalanche Token",
        symbol: "AVAX",
        address: "0x765277EebeCA2e31912C9946eAe1021199B39C61",
        chainId: 25,
        decimals: 18,
        website: "https://www.avalabs.org/",
        description: "Avalanche is the fastest smart contracts platform in the blockchain industry, as measured by time-to-finality, and has the most validators securing its activity of any proof-of-stake protocol.",
        logoURI: "https://app.cronaswap.org/images/tokens/0x765277EebeCA2e31912C9946eAe1021199B39C61.svg"
      },
      FTM: {
        name: "Fantom Token",
        symbol: "FTM",
        address: "0xB44a9B6905aF7c801311e8F4E76932ee959c663C",
        chainId: 25,
        decimals: 18,
        website: "https://fantom.foundation/",
        description: "Fantom is a fast, high-throughput open-source smart contract platform for digital assets and dApps.",
        logoURI: "https://app.cronaswap.org/images/tokens/0xB44a9B6905aF7c801311e8F4E76932ee959c663C.svg"
      },
      BNB: {
        name: "Binance Token",
        symbol: "BNB",
        address: "0xfA9343C3897324496A05fC75abeD6bAC29f8A40f",
        chainId: 25,
        decimals: 18,
        website: "https://www.binance.com/",
        description: "Binance Coin (BNB) is an exchange-based token created and issued by the cryptocurrency exchange Binance. Initially created on the Ethereum blockchain as an ERC-20 token in July 2017, BNB was migrated over to Binance Chain in February 2019 and became the native coin of the Binance Chain.",
        logoURI: "https://app.cronaswap.org/images/tokens/0xfA9343C3897324496A05fC75abeD6bAC29f8A40f.svg"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/cronos/index.js
var require_cronos = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/cronos/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cronos = void 0;
    var beefyfinance_1 = require_beefyfinance10();
    var vvs_1 = require_vvs();
    var crona_1 = require_crona();
    var tokens_1 = require_tokens10();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _cronos = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        vvs: vvs_1.vvs,
        crona: crona_1.crona
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.cronos = _cronos;
  }
});

// node_modules/blockchain-addressbook/build/address-book/aurora/platforms/beefyfinance.js
var require_beefyfinance11 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/aurora/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0x7cA9E76141493Fd3B12C0376130158779fB9f8b9";
    var treasuryMultisig = "0x088C70Ddff3a3774825dd5e5EaDB356404248d83";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0x2d04969ED7D1b186797C44dF5F5634Eb9C89aF6b",
      vaultOwner: "0x19642aDA958632f5e574A6d13eAd0679BD435c20",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0xE6ab45f5e93FA377D0c4cC097187Ab7256c2AEBf",
      treasury: "0x8c2d54BA94f4638f1bb91f623F378B66d6023324",
      beefyFeeRecipient: "0x9dA9f3C6c45F1160b53D395b0A982aEEE1D212fE",
      multicall: "0x1198f78efd67DFc917510aaA07d49545f4B24f11",
      bifiMaxiStrategy: "0xD25c56DAbcda719F1c67fE8fc0760f8B942aC95C",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      beefyFeeConfig: "0xD5431d39858A86c78d72541a58acFC37b793b91d"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/aurora/platforms/trisolaris.js
var require_trisolaris = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/aurora/platforms/trisolaris.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.trisolaris = void 0;
    exports.trisolaris = {
      masterchef: "0x1f1Ed214bef5E83D8f5d0eB5D7011EB965D0D79B",
      minichef: "0x3838956710bcc9D122Dd23863a0549ca8D5675D6",
      router: "0x2CB45Edb4517d5947aFdE3BEAbF95A582506858B"
      // UniswapV2Router02
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/aurora/platforms/solace.js
var require_solace3 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/aurora/platforms/solace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.solace = void 0;
    exports.solace = {
      rewards: "0x501ace3D42f9c8723B108D4fBE29989060a91411",
      xSolace: "0x501Ace47c5b0C2099C4464f681c3fa2ECD3146C1"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/aurora/tokens/tokens.js
var require_tokens11 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/aurora/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var ETH = {
      name: "Wrapped Ether ",
      address: "0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB",
      symbol: "WETH",
      decimals: 18,
      chainId: 1313161554,
      website: "https://weth.io/",
      description: "Ether or ETH is the native currency built on the Ethereum blockchain.",
      logoURI: "https://arbiscan.io/token/images/weth_28.png",
      documentation: "https://ethereum.org/en/developers/docs/"
    };
    var _tokens = {
      ETH,
      WETH: ETH,
      WNATIVE: ETH,
      BIFI: {
        name: "Beefy.Finance",
        symbol: "BIFI",
        address: "0x218c3c3D49d0E7B37aff0D8bB079de36Ae61A4c0",
        chainId: 1313161554,
        decimals: 18,
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      NEAR: {
        name: "NEAR",
        symbol: "NEAR",
        address: "0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d",
        chainId: 1313161554,
        decimals: 24,
        logoURI: "https://tokens.pancakeswap.finance/images/0xC42C30aC6Cc15faC9bD938618BcaA1a1FaE8501d.svg",
        website: "https://near.org/",
        description: "Through simple, secure, and scalable technology, NEAR empowers millions to invent and explore new experiences. Business, creativity, and community are being reimagined for a more sustainable and inclusive future."
      },
      USDC: {
        name: "USD Coin ",
        symbol: "USDC",
        address: "0xB12BFcA5A55806AaF64E99521918A4bf0fC40802",
        chainId: 1313161554,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xB12BFcA5A55806AaF64E99521918A4bf0fC40802.svg",
        website: "https://www.circle.com/usdc",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      USDT: {
        name: "Tether USD",
        symbol: "USDT",
        address: "0x4988a896b1227218e4A686fdE5EabdcAbd91571f",
        chainId: 1313161554,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem."
      },
      WBTC: {
        name: "Wrapped BTC",
        symbol: "WBTC",
        address: "0xF4eB217Ba2454613b15dBdea6e5f22276410e89e",
        chainId: 1313161554,
        decimals: 8,
        logoURI: "https://tokens.pancakeswap.finance/images/0xF4eB217Ba2454613b15dBdea6e5f22276410e89e.svg",
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led."
      },
      TRI: {
        name: "Trisolaris",
        symbol: "TRI",
        address: "0xFa94348467f64D5A457F75F8bc40495D33c65aBB",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xFa94348467f64D5A457F75F8bc40495D33c65aBB.svg",
        website: "https://www.trisolaris.io/#/swap",
        description: "Trisolaris is #1 Dex on the Aurora engine, an EVM compatible blockchain running in the near ecosystem."
      },
      AURORA: {
        name: "Aurora",
        symbol: "AURORA",
        address: "0x8BEc47865aDe3B172A928df8f990Bc7f2A3b9f79",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x8BEc47865aDe3B172A928df8f990Bc7f2A3b9f79.svg",
        website: "https://www.aurorachain.io/",
        description: "Aurora is a decentralized application platform based on third-generation blockchain technology dedicated to providing mature blockchain technology solutions for the entire industry."
      },
      atUST: {
        name: "UST Terra",
        symbol: "UST",
        address: "0x5ce9F0B6AFb36135b5ddBF11705cEB65E634A9dC",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x5ce9F0B6AFb36135b5ddBF11705cEB65E634A9dC.svg",
        website: "https://www.terra.money/",
        description: "Terra stablecoins offer instant settlements, low fees and seamless cross-border exchange - loved by millions of users and merchants."
      },
      atLUNA: {
        name: "Luna Terra",
        symbol: "LUNA",
        address: "0xC4bdd27c33ec7daa6fcfd8532ddB524Bf4038096",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xC4bdd27c33ec7daa6fcfd8532ddB524Bf4038096.svg",
        website: "https://www.terra.money/",
        description: "Terra's native token, LUNA, is used to stabilize the price of the protocol's stablecoins. LUNA holders are also able to submit and vote on governance proposals, giving it the functionality of a governance token."
      },
      AVAX: {
        name: "Avalanche",
        symbol: "AVAX",
        address: "0x80A16016cC4A2E6a2CACA8a4a498b1699fF0f844",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x80A16016cC4A2E6a2CACA8a4a498b1699fF0f844.svg",
        website: "https://www.avalabs.org/",
        description: "Avalanche is the fastest smart contracts platform in the blockchain industry, as measured by time-to-finality, and has the most validators securing its activity of any proof-of-stake protocol."
      },
      BNB: {
        name: "Binance",
        symbol: "BNB",
        address: "0x2bF9b864cdc97b08B6D79ad4663e71B8aB65c45c",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x2bF9b864cdc97b08B6D79ad4663e71B8aB65c45c.svg",
        website: "https://www.binance.com/",
        description: "Binance Coin (BNB) is an exchange-based token created and issued by the cryptocurrency exchange Binance. Initially created on the Ethereum blockchain as an ERC-20 token in July 2017, BNB was migrated over to Binance Chain in February 2019 and became the native coin of the Binance Chain."
      },
      MATIC: {
        name: "Matic",
        symbol: "MATIC",
        address: "0x6aB6d61428fde76768D7b45D8BFeec19c6eF91A8",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x6aB6d61428fde76768D7b45D8BFeec19c6eF91A8.svg",
        website: "https://polygon.technology/",
        description: "The MATIC token serves dual purposes: securing the Polygon network via staking and being used for the payment of transaction fees."
      },
      FLX: {
        name: "Flux Token",
        symbol: "FLX",
        address: "0xea62791aa682d455614eaA2A12Ba3d9A2fD197af",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xea62791aa682d455614eaA2A12Ba3d9A2fD197af.svg",
        website: "https://www.fluxprotocol.org/",
        description: "Flux is the trustless data layer for web3. Flux is a cross-chain oracle that provides smart contracts with access to economically secure data feeds on anything."
      },
      MECHA: {
        name: "Mecha",
        symbol: "MECHA",
        address: "0xa33C3B53694419824722C10D99ad7cB16Ea62754",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xa33C3B53694419824722C10D99ad7cB16Ea62754.svg",
        website: "https://www.mechatracker.finance/#/",
        description: "Our mission is making Aurora easier, thus making it bigger. Track your assets and DeFi portfolio with #MechaDashboards, easily swap tokens on a tap, visualize your NFTs and unleash the platform full power through the MECHA token."
      },
      SOLACE: {
        name: "solace",
        symbol: "SOLACE",
        address: "0x501acE9c35E60f03A2af4d484f49F9B1EFde9f40",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x501acE9c35E60f03A2af4d484f49F9B1EFde9f40.svg",
        website: "https://solace.fi/",
        description: "Solace is building a community around making this space safe, secure and trusted so that we can onboard and de-risk DeFi and other crypto applications while opening the space to millions of users. We recently launched a coverage policy protocol that enables protection for liquidity providers, Defi protocols or DAOs to mitigate loss from hacks, bugs and exploits. Our purpose is to transform DeFi by delivering intelligent and empowering tools for a safe, secure and trusted industry."
      },
      STNEAR: {
        name: "Staked NEAR",
        symbol: "STNEAR",
        address: "0x07F9F7f963C5cD2BBFFd30CcfB964Be114332E30",
        chainId: 1313161554,
        decimals: 24,
        logoURI: "https://tokens.pancakeswap.finance/images/0x07F9F7f963C5cD2BBFFd30CcfB964Be114332E30.svg",
        website: "https://near.org/",
        description: "Staked NEAR. Through simple, secure, and scalable technology, NEAR empowers millions to invent and explore new experiences. Business, creativity, and community are being reimagined for a more sustainable and inclusive future."
      },
      xTRI: {
        name: "TriBar",
        symbol: "xTRI",
        address: "0x802119e4e253D5C19aA06A5d567C5a41596D6803",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x802119e4e253D5C19aA06A5d567C5a41596D6803.svg",
        website: "https://www.trisolaris.io/#/swap",
        description: "Staked TRI. Trisolaris is #1 Dex on the Aurora engine, an EVM compatible blockchain running in the near ecosystem."
      },
      USDO: {
        name: "aUSDO",
        symbol: "aUSDO",
        address: "0x293074789b247cab05357b08052468B5d7A23c5a",
        chainId: 1313161554,
        decimals: 8,
        logoURI: "https://tokens.pancakeswap.finance/images/0x293074789b247cab05357b08052468B5d7A23c5a.svg",
        website: "https://omnifarms.ocp.finance/",
        description: "USDO is a decentralised stablecoin backed by a verifiable collateral pool of on-chain assets."
      },
      ROSE: {
        name: "Rose",
        symbol: "ROSE",
        address: "0xdcD6D4e2B3e1D1E1E6Fa8C21C8A323DcbecfF970",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "",
        website: "https://rose.fi/",
        description: "Rose is a liquidity protocol on Aurora composed of a stablecoin & wrapped assets exchange, and a Collateralized Debt Position (CDP) based stablecoin utilizing interest bearing tokens as collateral."
      },
      MAI: {
        name: "QI DAO Stable Coin Mai",
        symbol: "MAI",
        address: "0xdFA46478F9e5EA86d57387849598dbFB2e964b02",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "",
        website: "https://mai.finance/",
        description: "MAI is a stable coin collateralized by your MATIC holdings. Its powered by Qi Dao, a protocol that enables any cryptocurrency community to create stablecoins backed by their native tokens."
      },
      PAD: {
        name: "NearPad Token",
        symbol: "PAD",
        address: "0x885f8CF6E45bdd3fdcDc644efdcd0AC93880c781",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "",
        website: "https://www.nearpad.io/",
        description: "Launchpad & DeFi hub of the NEAR ecosystem. The DeFi hub on NEAR ecosystem to bootstrap innovations, monitor and manage digital assets."
      },
      DAI: {
        name: "DAI Stablecoin",
        symbol: "DAI",
        address: "0xe3520349F477A5F6EB06107066048508498A291b",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "",
        website: "https://makerdao.com/en/",
        description: "Dai is a stablecoin cryptocurrency which aims to keep its value as close to one United States dollar as possible through an automated system of smart contracts on the Ethereum blockchain"
      },
      USN: {
        name: "USN Token",
        symbol: "USN",
        address: "0x5183e1B1091804BC2602586919E6880ac1cf2896",
        chainId: 1313161554,
        decimals: 18,
        logoURI: "",
        website: "https://decentral-bank.finance/",
        description: "USN is a NEAR-native stablecoin collateralized 1:1 by USDT."
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/aurora/index.js
var require_aurora = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/aurora/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aurora = void 0;
    var beefyfinance_1 = require_beefyfinance11();
    var trisolaris_1 = require_trisolaris();
    var solace_1 = require_solace3();
    var tokens_1 = require_tokens11();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _aurora = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        trisolaris: trisolaris_1.trisolaris,
        solace: solace_1.solace
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.aurora = _aurora;
  }
});

// node_modules/blockchain-addressbook/build/address-book/fuse/platforms/beefyfinance.js
var require_beefyfinance12 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fuse/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0xe26a8aC2936F338Fd4DAebA4BD22a7ec86465fE1";
    var treasuryMultisig = "0x1C124c2CaB83b3C3B5D0f0899CeeA5e06964599F";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0xa9E6E271b27b20F65394914f8784B3B860dBd259",
      vaultOwner: "0xaDB9DDFA24E326dC9d337561f6c7ba2a6Ecec697",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0x60a4DedF7fC45F73d9ca46222B016c2d755C79A8",
      treasury: "0x922f8807E781739DDefEe51df990457B522cBCf5",
      beefyFeeRecipient: "0x32C82EE8Fca98ce5114D2060c5715AEc714152FB",
      multicall: "0xFE40f6eAD11099D91D51a945c145CFaD1DD15Bb8",
      bifiMaxiStrategy: "0x79149B500f0d796aA7f85e0170d16C7e79BAd3C5",
      validator: "0xEc4B821541f62b63832ceE400d6c29bCc84E4e38",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/fuse/platforms/voltage.js
var require_voltage = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fuse/platforms/voltage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.voltage = void 0;
    exports.voltage = {
      router: "0xE3F85aAd0c8DD7337427B9dF5d0fB741d65EEEB5",
      masterchef: "0xE3e184a7b75D0Ae6E17B58F5283b91B4E0A2604F"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/fuse/platforms/fuseNetwork.js
var require_fuseNetwork = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fuse/platforms/fuseNetwork.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fuseNetwork = void 0;
    exports.fuseNetwork = {
      staker: "0x3014ca10b91cb3D0AD85fEf7A3Cb95BCAc9c0f79",
      rewarder: "0x63D4efeD2e3dA070247bea3073BCaB896dFF6C9B"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/fuse/platforms/sushiFuse.js
var require_sushiFuse = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fuse/platforms/sushiFuse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sushiFuse = void 0;
    exports.sushiFuse = {
      minichef: "0x182CD0C6F1FaEc0aED2eA83cd0e160c8Bd4cb063",
      complexRewarderTime: "0xEF502259Dd5d497d082498912031E027c4515563",
      router: "0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/fuse/tokens/tokens.js
var require_tokens12 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fuse/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var FUSE = {
      name: "FUSE",
      address: "0x0BE9e53fd7EDaC9F859882AfdDa116645287C629",
      symbol: "WFUSE",
      decimals: 18,
      chainId: 122,
      website: "https://fuse.io/",
      description: "Launch community-centric payment systems and token economies on an Ethereum-compatible blockchain.",
      logoURI: "https://explorer.fuse.io/images/fuse_logo-0346e93ebb763ba41076456a9f0bf943.svg?vsn=d"
    };
    var _tokens = {
      FUSE,
      WFUSE: FUSE,
      WNATIVE: FUSE,
      BIFI: {
        name: "Beefy.Finance",
        symbol: "BIFI",
        address: "0x2bF9b864cdc97b08B6D79ad4663e71B8aB65c45c",
        chainId: 122,
        decimals: 18,
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      agEUR: {
        name: "Angle Protocol agEUR",
        symbol: "agEUR",
        address: "0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73",
        chainId: 122,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/19479/thumb/agEUR.png?1635283566",
        website: "https://app.angle.money/",
        description: "Angle is a decentralized, capital-efficient and over-collateralized stablecoins protocol.",
        documentation: "https://docs.angle.money/"
      },
      xVOLT: {
        name: "VoltBar xVOLT",
        symbol: "xVOLT",
        address: "0x97a6e78c9208c21afaDa67e7E61d7ad27688eFd1",
        chainId: 122,
        decimals: 18,
        logoURI: "https://app.voltage.finance/images/pairs/xVOLT.svg",
        website: "https://voltage.finance/",
        description: "xVOLT is the main staking mechanism on the Voltage Finance platform. When you stake your VOLT, you effectively exchange your VOLT for xVOLT."
      },
      VOLT: {
        name: "Voltage Finance VOLT",
        symbol: "VOLT",
        address: "0x34Ef2Cc892a88415e9f02b91BfA9c91fC0bE6bD4",
        chainId: 122,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/21886/large/volt.jpg?1643718805",
        website: "https://voltage.finance/",
        description: "Voltage Finance is a decentralized trading protocol, known for its role in facilitating automated trading of decentralized finance (DeFi) tokens on the Fuse network."
      },
      atUST: {
        name: "UST Terra",
        symbol: "atUST",
        address: "0x0D58a44be3dCA0aB449965dcc2c46932547Fea2f",
        chainId: 122,
        decimals: 18,
        logoURI: "",
        website: "https://www.terra.money/",
        description: "Terra is a public blockchain protocol deploying a suite of algorithmic decentralized stablecoins which underpin a thriving ecosystem that brings DeFi to the masses."
      },
      atLUNA: {
        name: "Luna Terra",
        symbol: "atUST",
        address: "0x588e24DEd8f850b14BB2e62E9c50A7Cd5Ee13Da9",
        chainId: 122,
        decimals: 18,
        logoURI: "",
        website: "https://www.terra.money/",
        description: "The Terra protocols native staking token that absorbs the price volatility of Terra. Luna is used for governance and in mining. Users stake Luna to validators who record and verify transactions on the blockchain in exchange for rewards from transaction fees. The more Terra is used, the more Luna is worth."
      },
      WETH: {
        name: "Wrapped Ether on Fuse",
        symbol: "WETH",
        address: "0xa722c13135930332Eb3d749B2F0906559D2C5b99",
        chainId: 122,
        decimals: 18,
        logoURI: "",
        website: "https://weth.io/",
        description: "Ether or ETH is the native currency built on the Ethereum blockchain.",
        documentation: "https://ethereum.org/en/developers/docs/"
      },
      WBTC: {
        name: "Wrapped BTC on Fuse",
        symbol: "WBTC",
        address: "0x33284f95ccb7B948d9D352e1439561CF83d8d00d",
        chainId: 122,
        decimals: 8,
        logoURI: "",
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led."
      },
      fUSD: {
        name: "Fuse Dollar",
        symbol: "fUSD",
        address: "0x249BE57637D8B013Ad64785404b24aeBaE9B098B",
        chainId: 122,
        decimals: 18,
        logoURI: "",
        website: "https://fuse.fi/",
        description: "Fuse Dollar (fUSD) is fully backed by USDC which is a fully backed us regulated stablecoin minted by circle.com and is widely used in the decentralized finance space. The Fuse network will add more stablecoins to aggregate yield, add stability and remove friction for on boarding and off boarding between crypto and fiat. "
      },
      BNB: {
        name: "BNB on Fuse",
        symbol: "BNB",
        address: "0x6acb34b1Df86E254b544189Ec32Cf737e2482058",
        chainId: 122,
        decimals: 18,
        logoURI: "",
        website: "https://www.binance.com/",
        description: "Binance Coin (BNB) is an exchange-based token created and issued by the cryptocurrency exchange Binance. Initially created on the Ethereum blockchain as an ERC-20 token in July 2017, BNB was migrated over to Binance Chain in February 2019 and became the native coin of the Binance Chain."
      },
      BUSD: {
        name: "Binance USD on Fuse",
        symbol: "BUSD",
        address: "0x6a5F6A8121592BeCd6747a38d67451B310F7f156",
        chainId: 122,
        decimals: 18,
        logoURI: "",
        website: "https://www.binance.com/en/busd",
        description: "Binance USD (BUSD) is a 1:1 USD-backed stable coin issued by Binance (in partnership with Paxos). BUSD is approved and regulated by the New York State Department of Financial Services (NYDFS). The BUSD Monthly Audit Report can be viewed from the official website."
      },
      USDC: {
        name: "USD Coin on Fuse",
        symbol: "USDC",
        address: "0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5",
        chainId: 122,
        decimals: 6,
        logoURI: "",
        website: "https://www.circle.com/usdc",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      ELON: {
        name: "Dogelon on Fuse",
        symbol: "ELON",
        address: "0x5DD8015cec49F4dB01fd228F688BF30337d3e0A9",
        chainId: 122,
        decimals: 18,
        logoURI: "",
        website: "https://dogelonmars.com/",
        description: "Dogelon Mars is a dog-themed meme coin. Its name is a mixture of Dogecoin and Elon Musk, the billionaire entrepreneur who is an outspoken supporter of Doge."
      },
      G: {
        name: "GoodDollar",
        symbol: "G$",
        address: "0x495d133B938596C9984d462F007B676bDc57eCEC",
        chainId: 122,
        decimals: 2,
        logoURI: "",
        website: "https://www.gooddollar.org/",
        description: "The GoodDollar protocol is a community-driven, distributed framework designed to generate, fund, and distribute global basic income via the GoodDollar token (hereafter \u201CG$\u201D). G$ is an ERC-20 digital asset built on the Ethereum blockchain that operates within the emerging ecosystem of decentralized and open finance. GoodDollar leverages new protocols and smart contracts across the ecosystem to deliver its basic income economy."
      },
      SUSHI: {
        name: "SushiToken on Fuse",
        symbol: "SUSHI",
        address: "0x90708b20ccC1eb95a4FA7C8b18Fd2C22a0Ff9E78",
        chainId: 122,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x90708b20ccC1eb95a4FA7C8b18Fd2C22a0Ff9E78.svg",
        website: "https://sushi.com/",
        description: "Sushi is the home of DeFi. Their community is building a comprehensive, decentralized trading platform for the future of finance. Swap, earn, stack yields, lend, borrow, leverage all on one decentralized, community driven platform."
      },
      USDT: {
        name: "Tether USD on Fuse",
        symbol: "USDT",
        address: "0xFaDbBF8Ce7D5b7041bE672561bbA99f79c532e10",
        chainId: 122,
        decimals: 6,
        logoURI: "",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem."
      },
      "BIFI-WFUSE LP": {
        name: "BIFI-WFUSE LP",
        symbol: "BIFI-WFUSE LP",
        address: "0xbD8923A4028c5D6b6B8698ad4342104302611914",
        chainId: 16666e5,
        decimals: 18,
        logoURI: "",
        website: "https://app.beefy.com/",
        oracleId: "sushi-fuse-bifi-wfuse",
        oracle: "lps"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/fuse/index.js
var require_fuse = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/fuse/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fuse = void 0;
    var beefyfinance_1 = require_beefyfinance12();
    var voltage_1 = require_voltage();
    var fuseNetwork_1 = require_fuseNetwork();
    var sushiFuse_1 = require_sushiFuse();
    var tokens_1 = require_tokens12();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _fuse = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        voltage: voltage_1.voltage,
        fuseNetwork: fuseNetwork_1.fuseNetwork,
        sushiFuse: sushiFuse_1.sushiFuse
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.fuse = _fuse;
  }
});

// node_modules/blockchain-addressbook/build/address-book/metis/platforms/beefyfinance.js
var require_beefyfinance13 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/metis/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0xFf9810A3dA8a554B84Ed79D67461eCA6Eb3fA9BD";
    var treasuryMultisig = "0x0f9602B7E7146a9BaE16dB948281BebDb7C2D095";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0xdf68Bf80D427A5827Ff2c06A9c70D407e17DC041",
      vaultOwner: "0x41D44B276904561Ac51855159516FD4cB2c90968",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0x2a30C5e0d577108F694d2A96179cd73611Ee069b",
      treasury: treasuryMultisig,
      beefyFeeRecipient: "0x2cC364255206A7e14bF59ADB1fc5770DbA48CB3f",
      multicall: "0x13C6bCC2411861A31dcDC2f990ddbe2325482222",
      bifiMaxiStrategy: "0xEA01ca0423acb8476E1D3Bae572021c2aA9bd410",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      beefyFeeConfig: "0x11cB33Ef34C53DfcaA3aDdDE9a83f742ffFcfa27",
      vaultFactory: "0x52d998A110E447648095671bb66993461Da9ea38",
      wrapperFactory: "0xDf29382141059afD25Deb624E6c8f13A051012Be"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/metis/platforms/netswap.js
var require_netswap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/metis/platforms/netswap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.netswap = void 0;
    exports.netswap = {
      router: "0x1E876cCe41B7b844FDe09E38Fa1cf00f213bFf56",
      masterchef: "0x9d1dbB49b2744A1555EDbF1708D64dC71B0CB052"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/metis/platforms/tethys.js
var require_tethys = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/metis/platforms/tethys.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tethys = void 0;
    exports.tethys = {
      router: "0x81b9FA50D5f5155Ee17817C21702C3AE4780AD09",
      masterchef: "0x54A8fB8c634dED694D270b78Cb931cA6bF241E21"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/metis/platforms/hermes.js
var require_hermes = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/metis/platforms/hermes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hermes = void 0;
    exports.hermes = {
      router: "0x2d4F788fDb262a25161Aa6D6e8e1f18458da8441"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/metis/tokens/tokens.js
var require_tokens13 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/metis/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var METIS = {
      name: "METIS",
      address: "0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000",
      symbol: "WMETIS",
      decimals: 18,
      chainId: 1088,
      website: "https://www.metis.io/",
      description: "METIS IS SOLVING ETHEREUMS SIX BIGGEST CHALLENGES. SIMPLICITY. SPEED. STORAGE. SCALABILITY. SECURITY. SAVINGS.",
      logoURI: ""
    };
    var _tokens = {
      METIS,
      WMETIS: METIS,
      WNATIVE: METIS,
      BIFI: {
        name: "Beefy.Finance",
        symbol: "BIFI",
        address: "0xe6801928061CDbE32AC5AD0634427E140EFd05F9",
        chainId: 1088,
        decimals: 18,
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      WBTC: {
        name: "Wrapped BTC",
        symbol: "WBTC",
        address: "0xa5B55ab1dAF0F8e1EFc0eB1931a957fd89B918f4",
        chainId: 1088,
        decimals: 8,
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
        logoURI: "https://ftmscan.com/token/images/wBTC_32.png"
      },
      NETT: {
        name: "Netswap Token",
        symbol: "NETT",
        address: "0x90fE084F877C65e1b577c7b2eA64B8D8dd1AB278",
        chainId: 1088,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x90fE084F877C65e1b577c7b2eA64B8D8dd1AB278.svg",
        website: "https://netswap.io/#/swap",
        description: "Netswap is a decentralized exchange (DEX) which runs on Metis Andromeda (Layer2), uses the same automated market-making (AMM) model as Uniswap, features a native governance token called NETT that is fully community distributed and is capable of trading all tokens issued on Ethereum and Metis Andromeda. In a crowded marketplace with multiple contenders, Netswap offers four critically important benefits: fast and cheap trades, built-in leverage swap function, community-driven development, and a fair and open token distribution."
      },
      mUSDT: {
        name: "USDT Token",
        symbol: "m.USDT",
        address: "0xbB06DCA3AE6887fAbF931640f67cab3e3a16F4dC",
        chainId: 1088,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xbB06DCA3AE6887fAbF931640f67cab3e3a16F4dC.svg",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem."
      },
      mUSDC: {
        name: "USDC Token",
        symbol: "m.USDC",
        address: "0xEA32A96608495e54156Ae48931A7c20f0dcc1a21",
        chainId: 1088,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xEA32A96608495e54156Ae48931A7c20f0dcc1a21.svg",
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        oracleId: "USDC"
      },
      mDAI: {
        name: "Dai Stablecoin",
        symbol: "m.DAI",
        address: "0x4c078361FC9BbB78DF910800A991C7c3DD2F6ce0",
        chainId: 1088,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4651B38e7ec14BB3db731369BFE5B08F2466Bd0A.svg",
        website: "https://makerdao.com/en/",
        description: "Dai is a stablecoin cryptocurrency which aims to keep its value as close to one United States dollar as possible through an automated system of smart contracts on the Ethereum blockchain"
      },
      WETH: {
        name: "Ether",
        symbol: "WETH",
        address: "0x420000000000000000000000000000000000000A",
        chainId: 1088,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x420000000000000000000000000000000000000A.svg",
        website: "https://ethereum.org/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network."
      },
      BNB: {
        name: "Poly-Peg BNB",
        symbol: "BNB",
        address: "0x2692BE44A6E38B698731fDDf417d060f0d20A0cB",
        chainId: 1088,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x2692BE44A6E38B698731fDDf417d060f0d20A0cB.svg",
        website: "https://www.binance.com/",
        description: "Binance Coin (BNB) is an exchange-based token created and issued by the cryptocurrency exchange Binance. Initially created on the Ethereum blockchain as an ERC-20 token in July 2017, BNB was migrated over to Binance Chain in February 2019 and became the native coin of the Binance Chain."
      },
      TETHYS: {
        name: "Tethys",
        symbol: "TETHYS",
        address: "0x69fdb77064ec5c84FA2F21072973eB28441F43F3",
        chainId: 1088,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x69fdb77064ec5c84FA2F21072973eB28441F43F3.svg",
        website: "https://tethys.finance/swap?inputCurrency=METIS&outputCurrency=0x69fdb77064ec5c84FA2F21072973eB28441F43F3",
        description: "We believe that in the future, L2 solutions will help Ethereum with scaling. Our mission is to empower the Metis Andromeda network with a fast, secure, reliable, and advanced native decentralized exchange app to handle all kinds of trading needs. Tethys was released on the 17th of December 2021 on Metis Andromeda network."
      },
      BYTE: {
        name: "BinaryDAO",
        symbol: "BYTE",
        address: "0x721532bC0dA5ffaeB0a6A45fB24271E8098629A7",
        chainId: 1088,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x721532bC0dA5ffaeB0a6A45fB24271E8098629A7.svg",
        website: "https://binarydao.finance/",
        description: "BinaryDAO is a yield DAO that uses its treasury to bootstrap and invest in early-staged crypto projects, enabling premium DeFi yield to BYTE token holders"
      },
      FTM: {
        name: "Fantom Token",
        symbol: "FTM",
        address: "0xa9109271abcf0C4106Ab7366B4eDB34405947eED",
        chainId: 1088,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xa9109271abcf0C4106Ab7366B4eDB34405947eED.svg",
        website: "https://fantom.foundation/",
        description: "Fantom is a fast, high-throughput open-source smart contract platform for digital assets and dApps."
      },
      AVAX: {
        name: "Avalanche Token",
        symbol: "AVAX",
        address: "0xE253E0CeA0CDD43d9628567d097052B33F98D611",
        chainId: 1088,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xE253E0CeA0CDD43d9628567d097052B33F98D611.svg",
        website: "https://www.avalabs.org/",
        description: "Avalanche is the fastest smart contracts platform in the blockchain industry, as measured by time-to-finality, and has the most validators securing its activity of any proof-of-stake protocol."
      },
      DAI: {
        name: "Dai Stablecoin",
        symbol: "DAI",
        address: "0x4651B38e7ec14BB3db731369BFE5B08F2466Bd0A",
        chainId: 1088,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4651B38e7ec14BB3db731369BFE5B08F2466Bd0A.svg",
        website: "https://makerdao.com/en/",
        description: "Dai is a stablecoin cryptocurrency which aims to keep its value as close to one United States dollar as possible through an automated system of smart contracts on the Ethereum blockchain"
      },
      HUM: {
        name: "Hummus",
        symbol: "HUM",
        address: "0x4aAC94985cD83be30164DfE7e9AF7C054D7d2121",
        chainId: 1088,
        decimals: 18,
        logoURI: "https://pancakeswap.finance/images/tokens/0x4aAC94985cD83be30164DfE7e9AF7C054D7d2121.svg",
        website: "https://www.hummus.exchange/",
        description: "Next Gen Decentralized AMM for Stableswaps"
      },
      MAIA: {
        name: "Maia",
        symbol: "MAIA",
        address: "0x72c232D56542Ba082592DEE7C77b1C6CFA758BCD",
        chainId: 1088,
        decimals: 9,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/17181.png",
        website: "https://app.maiadao.io/",
        description: "MAIA is the governance token of Maia DAO, the yield powerhouse of Metis which launched the Solidly-fork Hermes. With a 100% fair launch Maia DAO is a truly community owned."
      },
      HERMES: {
        name: "Hermes",
        symbol: "HERMES",
        address: "0xb27BbeaACA2C00d6258C3118BAB6b5B6975161c8",
        chainId: 1088,
        decimals: 18,
        logoURI: "https://s2.coinmarketcap.com/static/img/coins/64x64/21272.png",
        website: "https://hermes.maiadao.io/",
        description: "HERMES is the governance token of the Solidly-fork Hermes Protocol on Metis. The token is emitted as a farming reward to liquidity providers and can be locked for a period to gain voting rights."
      },
      "BIFI-METIS LP": {
        name: "BIFI-METIS LP",
        symbol: "BIFI-METIS LP",
        address: "0x89D433e8cCC871B3f12EA17b651ff3633DFb5DC0",
        chainId: 1088,
        decimals: 18,
        logoURI: "",
        website: "https://app.beefy.com/",
        oracleId: "netswap-bifi-metis",
        oracle: "lps"
      },
      smUSDT: {
        name: "Stargate Tether USD LP",
        symbol: "smUSDT",
        address: "0x2b60473a7C41Deb80EDdaafD5560e963440eb632",
        chainId: 1088,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/metis/index.js
var require_metis = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/metis/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.metis = void 0;
    var beefyfinance_1 = require_beefyfinance13();
    var netswap_1 = require_netswap();
    var tethys_1 = require_tethys();
    var hermes_1 = require_hermes();
    var tokens_1 = require_tokens13();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _metis = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        netswap: netswap_1.netswap,
        tethys: tethys_1.tethys,
        hermes: hermes_1.hermes
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.metis = _metis;
  }
});

// node_modules/blockchain-addressbook/build/address-book/moonbeam/platforms/beefyfinance.js
var require_beefyfinance14 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/moonbeam/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0x1db98f5D37E6e0E53DCb24F558F0410086920a6e";
    var treasuryMultisig = "0x3E7F60B442CEAE0FE5e48e07EB85Cfb1Ed60e81A";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0xfcDD5a02C611ba6Fe2802f885281500EC95805d7",
      vaultOwner: "0xc8F3D9994bb1670F5f3d78eBaBC35FA8FdEEf8a2",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0x1198f78efd67DFc917510aaA07d49545f4B24f11",
      treasury: treasuryMultisig,
      beefyFeeRecipient: "0x00AeC34489A7ADE91A0507B6b9dBb0a50938B7c0",
      multicall: "0xC9F6b1B53E056fd04bE5a197ce4B2423d456B982",
      bifiMaxiStrategy: "0xb25eB9105549627050AAB3A1c909fBD454014beA",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      beefyFeeConfig: "0xeEaFF5116C09ECc20Ab72b53860A7ceAd97F0Ab4",
      vaultFactory: "0x6f6CE0f48481962599DdC6FDb0358c5849F06350"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/moonbeam/platforms/beamswap.js
var require_beamswap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/moonbeam/platforms/beamswap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beamswap = void 0;
    exports.beamswap = {
      router: "0x96b244391D98B62D19aE89b1A4dCcf0fc56970C7",
      masterchef: "0xC6ca172FC8BDB803c5e12731109744fb0200587b",
      bifiGlmrLp: "0x321e45B7134b5Ed52129027F1743c8E71DA0A339"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/moonbeam/platforms/stellaswap.js
var require_stellaswap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/moonbeam/platforms/stellaswap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stellaswap = void 0;
    exports.stellaswap = {
      routerV1: "0xd0A01ec574D1fC6652eDF79cb2F880fd47D34Ab1",
      router: "0x70085a09D30D6f8C4ecF6eE10120d1847383BB57",
      masterchef: "0xEDFB330F5FA216C9D2039B99C8cE9dA85Ea91c1E",
      masterchefV1distributorV2: "0xF3a5454496E26ac57da879bf3285Fa85DEBF0388"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/moonbeam/platforms/solarflare.js
var require_solarflare = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/moonbeam/platforms/solarflare.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.solarflare = void 0;
    exports.solarflare = {
      router: "0xd3B02Ff30c218c7f7756BA14bcA075Bf7C2C951e",
      masterchef: "0x995da7dfB96B4dd1e2bd954bE384A1e66cBB4b8c"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/moonbeam/tokens/tokens.js
var require_tokens14 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/moonbeam/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var GLMR = {
      name: "Moonbeam",
      address: "0xAcc15dC74880C9944775448304B263D191c6077F",
      symbol: "WGLMR",
      decimals: 18,
      chainId: 1284,
      website: "https://moonbeam.network/networks/moonbeam/",
      description: "A Polkadot Parachain Designed for Developers Moonbeam simplifies the developer experience by combining full Ethereum compatibility with the power of Polkadot, including scalability, cross-chain integrations, and on-chain governance.",
      logoURI: ""
    };
    var _tokens = {
      GLMR,
      WGLMR: GLMR,
      WNATIVE: GLMR,
      BIFI: {
        name: "Beefy.Finance",
        symbol: "BIFI",
        address: "0x595c8481c48894771CE8FaDE54ac6Bf59093F9E8",
        chainId: 1284,
        decimals: 18,
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      STELLA4POOL: {
        name: "Stellaswap 4Pool",
        symbol: "stella4pool",
        address: "0xB326b5189AA42Acaa3C649B120f084Ed8F4dCaA6",
        chainId: 1284,
        decimals: 18,
        website: "https://app.stellaswap.com/exchange/pool/stable",
        description: "Stellaswap Base4Pool is a Stable Pool consisting of USDC.wh, USDt.xc, BUSD.wh, and FRAX tokens.",
        logoURI: ""
      },
      wstDOT: {
        name: "Wrapped liquid staked DOT",
        symbol: "wstDOT",
        address: "0x191cf2602Ca2e534c5Ccae7BCBF4C46a704bb949",
        chainId: 1284,
        decimals: 10,
        logoURI: "https://tokens.pancakeswap.finance/images/0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080.svg",
        website: "https://polkadot.lido.fi/",
        description: "Lido for Polkadot is a liquid staking solution for DOT backed by industry-leading staking providers. wstDOT is wrapped version of stDOT",
        documentation: "https://docs.polkadot.lido.fi/"
      },
      WBTCwh: {
        name: "Wrapped BTC",
        symbol: "WBTC",
        address: "0xE57eBd2d67B462E9926e04a8e33f01cD0D64346D",
        chainId: 1284,
        decimals: 8,
        logoURI: "https://tokens.pancakeswap.finance/images/0x1DC78Acda13a8BC4408B207c9E48CDBc096D95e0.svg",
        website: "https://www.portalbridge.com/#/transfer",
        description: "WBTCwh is a bridged version of WBTC from the Wormhole(Portal) portal. Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
        documentation: "https://docs.wormhole.com/wormhole/"
      },
      WETHwh: {
        name: "Wrapped Ether",
        symbol: "WETH",
        address: "0xab3f0245B83feB11d15AAffeFD7AD465a59817eD",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xfA9343C3897324496A05fC75abeD6bAC29f8A40f.svg",
        website: "https://www.portalbridge.com/#/transfer",
        description: "WETHwh is a bridged version of native ETH from the Wormhole(Portal) portal. ETH is the native currency that flows within the Ethereum ecosystem.",
        documentation: "https://docs.wormhole.com/wormhole/"
      },
      USDCwh: {
        name: "USD Coin",
        symbol: "USDC",
        address: "0x931715FEE2d06333043d11F658C8CE934aC61D0c",
        chainId: 1284,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b.svg",
        website: "https://www.portalbridge.com/#/transfer",
        description: "USDC bridged by Wormhole(Portal). USDC is a fully collateralized US dollar stablecoin. Native USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        documentation: "https://docs.wormhole.com/wormhole/"
      },
      POOP: {
        name: "Raresama",
        symbol: "POOP",
        address: "0xFFfffFFecB45aFD30a637967995394Cc88C0c194",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://app.stellaswap.com/_next/image?url=https%3A%2F%2Fraw.githubusercontent.com%2Fstellaswap%2Fassets%2Fmain%2Fbridge%2FPOOP.png&w=64&q=50",
        website: "https://raresama.com/",
        description: "Raresama is an artist and community focused NFT marketplace with great ambitions to quickly become the leading marketplace on Moonbeam. POOP is the Raresama.com (NFT Marketplace) governance token."
      },
      xcACA: {
        name: "Acala xcACA",
        symbol: "xcACA",
        address: "0xffffFFffa922Fef94566104a6e5A35a4fCDDAA9f",
        chainId: 1284,
        decimals: 12,
        logoURI: "",
        website: "https://acala.network/",
        description: "The decentralized Stablecoin of Polkadot"
      },
      xciBTC: {
        name: "Interlay BTC",
        symbol: "xciBTC",
        address: "0xFFFFFfFf5AC1f9A51A93F5C527385edF7Fe98A52",
        chainId: 1284,
        decimals: 8,
        logoURI: "",
        website: "https://interlay.io/",
        description: "Use your Bitcoin. Anywhere. Anytime. Interlay is a decentralized bridge that allows you to use your Bitcoin on Ethereum and Polkadot."
      },
      xcINTR: {
        name: "Interlay INTR",
        symbol: "xcINTR",
        address: "0xFffFFFFF4C1cbCd97597339702436d4F18a375Ab",
        chainId: 1284,
        decimals: 10,
        logoURI: "",
        website: "https://interlay.io/",
        description: "Use your Bitcoin. Anywhere. Anytime. Interlay is a decentralized bridge that allows you to use your Bitcoin on Ethereum and Polkadot."
      },
      WELL: {
        name: "WELL",
        symbol: "WELL",
        address: "0x511aB53F793683763E5a8829738301368a2411E3",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x511aB53F793683763E5a8829738301368a2411E3.svg",
        website: "https://moonwell.fi/",
        description: "WELL is the native governance token of the Moonwell Artemis protocol"
      },
      MAI: {
        name: "Mai Stablecoin",
        symbol: "MAI",
        address: "0xdFA46478F9e5EA86d57387849598dbFB2e964b02",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xdFA46478F9e5EA86d57387849598dbFB2e964b02.svg",
        website: "https://app.mai.finance/",
        description: "MAI is a stablecoin collateralized by your crypto assets. It's powered by Qi Dao, a protocol that enables any cryptocurrency community to create stablecoins backed by their native tokens."
      },
      APE: {
        name: "ApeCoin APE",
        symbol: "APE",
        address: "0x3D632d9e1a60a0880Dd45E61f279D919b5748377",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://assets.spookyswap.finance/tokens/APE.png",
        website: "http://apecoin.com/",
        description: "ApeCoin is for the Web3 Economy. Culture has found new expression in web3 through art, gaming, entertainment, and events."
      },
      GLINT: {
        name: "Beamswap Token",
        symbol: "GLINT",
        address: "0xcd3B51D98478D53F4515A306bE565c6EebeF1D58",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xcd3B51D98478D53F4515A306bE565c6EebeF1D58.svg",
        website: "https://beamswap.io/",
        description: "Beamswap is a decentralized exchange (DEX) with an automated market maker (AMM), providing liquidity and peer-to-peer transactions. But it aims to be so much more than that. Supporting an array of services and features, it will allow you to swap crypto assets, both fungible and non-fungible, earn passive income from staking and yield farming, and even launch your own crypto projects on Moonbeam."
      },
      USDC: {
        name: "USD Coin",
        symbol: "USDC",
        address: "0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b",
        chainId: 1284,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b.svg",
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      USDCs: {
        name: "USD Coin",
        symbol: "USDC",
        address: "0x8f552a71EFE5eeFc207Bf75485b356A0b3f01eC9",
        chainId: 1284,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b.svg",
        website: "https://www.nomad.xyz/",
        description: "bridged USDC by Nomad. USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      USDTs: {
        name: "Tether USD",
        symbol: "USDT",
        address: "0x8e70cD5B4Ff3f62659049e74b6649c6603A0E594",
        chainId: 1284,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x8e70cD5B4Ff3f62659049e74b6649c6603A0E594.svg",
        website: "https://www.nomad.xyz/",
        description: "bridged USDT by Nomad. Tether converts cash into digital currency, to anchor or tether the value to the price of national currencies like the US dollar, the Euro, and the offshore Chinese yuan."
      },
      DAIs: {
        name: "Dai Stablecoin",
        symbol: "DAI",
        address: "0xc234A67a4F840E61adE794be47de455361b52413",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xc234A67a4F840E61adE794be47de455361b52413.svg",
        website: "https://www.nomad.xyz/",
        description: "bridged DAI by Nomad. Multi-Collateral Dai, brings a lot of new and exciting features, such as support for new CDP collateral types and Dai Savings Rate."
      },
      FRAX: {
        name: "Frax",
        symbol: "FRAX",
        address: "0x322E86852e492a7Ee17f28a78c663da38FB33bfb",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x322E86852e492a7Ee17f28a78c663da38FB33bfb.svg",
        website: "https://frax.finance/",
        description: "The Frax Protocol introduced the world to the concept of a cryptocurrency being partially backed by collateral and partially stabilized algorithmically.",
        documentation: "https://docs.frax.finance/"
      },
      BUSD: {
        name: "Binance-Peg BUSD Token",
        symbol: "BUSD",
        address: "0xA649325Aa7C5093d12D6F98EB4378deAe68CE23F",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xA649325Aa7C5093d12D6F98EB4378deAe68CE23F.svg",
        website: "https://www.binance.com/en/busd",
        description: "Binance USD (BUSD) is a 1:1 USD-backed stable coin issued by Binance (in partnership with Paxos). BUSD is approved and regulated by the New York State Department of Financial Services (NYDFS). The BUSD Monthly Audit Report can be viewed from the official website."
      },
      BUSDc: {
        name: "Binance-Peg BUSD Token (Celer)",
        symbol: "BUSD",
        address: "0xCb4A7569a61300C50Cf80A2be16329AD9F5F8F9e",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xA649325Aa7C5093d12D6F98EB4378deAe68CE23F.svg",
        website: "https://www.binance.com/en/busd",
        description: "Binance USD (BUSD) is a 1:1 USD-backed stable coin issued by Binance (in partnership with Paxos). BUSD is approved and regulated by the New York State Department of Financial Services (NYDFS). The BUSD Monthly Audit Report can be viewed from the official website."
      },
      BUSDwh: {
        name: "Binance-Peg BUSD Token (Wormhole)",
        symbol: "BUSD",
        address: "0x692C57641fc054c2Ad6551Ccc6566EbA599de1BA",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xA649325Aa7C5093d12D6F98EB4378deAe68CE23F.svg",
        website: "https://www.binance.com/en/busd",
        description: "BUSD bridged by Wormhole(Portal). Binance USD (BUSD) is a 1:1 USD-backed stable coin issued by Binance (in partnership with Paxos). BUSD is approved and regulated by the New York State Department of Financial Services (NYDFS). The BUSD Monthly Audit Report can be viewed from the official website.",
        documentation: "https://docs.wormhole.com/wormhole/"
      },
      BNB: {
        name: "Binance",
        symbol: "BNB",
        address: "0xc9BAA8cfdDe8E328787E29b4B078abf2DaDc2055",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xc9BAA8cfdDe8E328787E29b4B078abf2DaDc2055.svg",
        website: "https://www.binance.com/",
        description: "Binance Coin (BNB) is an exchange-based token created and issued by the cryptocurrency exchange Binance. Initially created on the Ethereum blockchain as an ERC-20 token in July 2017, BNB was migrated over to Binance Chain in February 2019 and became the native coin of the Binance Chain."
      },
      BCMC: {
        name: "Blockchain Monster Coin",
        symbol: "BCMC",
        address: "0x8ECE0D14d619fE26e2C14C4a92c2F9E8634A039E",
        chainId: 1284,
        decimals: 18,
        logoURI: "None",
        website: "https://bcmhunt.com/",
        description: "Blockchain Monster Coin (BCMC) is the ultimate treasure facilitating all game activities that all BCMHunter seeks. This multichain token can be moved onto any chain with in-house bridging technology."
      },
      ETH: {
        name: "Ethereum",
        symbol: "ETH",
        address: "0xfA9343C3897324496A05fC75abeD6bAC29f8A40f",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xfA9343C3897324496A05fC75abeD6bAC29f8A40f.svg",
        website: "https://ethereum.org/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network."
      },
      ETHs: {
        name: "Ethereum",
        symbol: "ETH",
        address: "0x30D2a9F5FDf90ACe8c17952cbb4eE48a55D916A7",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xfA9343C3897324496A05fC75abeD6bAC29f8A40f.svg",
        website: "https://www.nomad.xyz/",
        description: "Bridged ETH by Nomad. The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network."
      },
      USDT: {
        name: "Tether USD",
        symbol: "USDT",
        address: "0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73",
        chainId: 1284,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73.svg",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem."
      },
      USDTc: {
        name: "Tether USD (Celer)",
        symbol: "USDTc",
        address: "0x81ECac0D6Be0550A00FF064a4f9dd2400585FE9c",
        chainId: 1284,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73.svg",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem."
      },
      USDTxc: {
        name: "Tether USD (XCM)",
        symbol: "USDTxc",
        address: "0xFFFFFFfFea09FB06d082fd1275CD48b191cbCD1d",
        chainId: 1284,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73.svg",
        website: "https://tether.to/",
        description: "Bridged by XCM from Kusama. Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        documentation: "https://moonbeam.network/announcements/usdt-on-moonbeam/"
      },
      DAI: {
        name: "Dai Stablecoin",
        symbol: "DAI",
        address: "0x765277EebeCA2e31912C9946eAe1021199B39C61",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x765277EebeCA2e31912C9946eAe1021199B39C61.svg",
        website: "https://makerdao.com/en/",
        description: "DAI is an Ethereum-based stablecoin (stable-price cryptocurrency) whose issuance and development is managed by the Maker Protocol and the MakerDAO decentralized autonomous organization."
      },
      FTM: {
        name: "Fantom",
        symbol: "FTM",
        address: "0xC19281F22A075E0F10351cd5D6Ea9f0AC63d4327",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xC19281F22A075E0F10351cd5D6Ea9f0AC63d4327.svg",
        website: "https://fantom.foundation/",
        description: "Fantom is a fast, high-throughput open-source smart contract platform for digital assets and dApps."
      },
      axlATOM: {
        name: "Axelar Wrapped ATOM",
        symbol: "axlATOM",
        address: "0x27292cf0016E5dF1d8b37306B2A98588aCbD6fCA",
        chainId: 1284,
        decimals: 6,
        logoURI: "None",
        website: "https://cosmos.network/",
        description: "The ATOM is the Cosmos Hub's primary token and secures the Hub's valuable interchain services."
      },
      axlUST: {
        name: "Axelar Wrapped UST",
        symbol: "axlUST",
        address: "0x085416975fe14C2A731a97eC38B9bF8135231F62",
        chainId: 1284,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x085416975fe14C2A731a97eC38B9bF8135231F62.svg",
        website: "https://www.terra.money/",
        description: "Terra stablecoins offer instant settlements, low fees and seamless cross-border exchange - loved by millions of users and merchants."
      },
      MATIC: {
        name: "Matic",
        symbol: "MATIC",
        address: "0x3405A1bd46B85c5C029483FbECf2F3E611026e45",
        chainId: 1284,
        decimals: 18,
        logoURI: "None",
        website: "https://polygon.technology/",
        description: "Polygon believes in Web3 for all. Polygon is a decentralised Ethereum scaling platform that enables developers to build scalable user-friendly dApps with low transaction fees without ever sacrificing on security."
      },
      AVAX: {
        name: "Avalanche",
        symbol: "AVAX",
        address: "0x4792C1EcB969B036eb51330c63bD27899A13D84e",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4792C1EcB969B036eb51330c63bD27899A13D84e.svg",
        website: "https://www.avalabs.org/",
        description: "Avalanche is the fastest smart contracts platform in the blockchain industry, as measured by time-to-finality, and has the most validators securing its activity of any proof-of-stake protocol."
      },
      FLARE: {
        name: "Flare Token",
        symbol: "FLARE",
        address: "0xE3e43888fa7803cDC7BEA478aB327cF1A0dc11a7",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xE3e43888fa7803cDC7BEA478aB327cF1A0dc11a7.svg",
        website: "https://app.solarflare.io/exchange/swap",
        description: "Solarflare is a decentralized exchange, providing liquidity and enabling peer-to-peer transactions on the Moonbeam Network. The goal is to provide a comprehensive and convenient, one-stop platform for the cryptocurrency community."
      },
      STELLA: {
        name: "Stella Token",
        symbol: "STELLA",
        address: "0x0E358838ce72d5e61E0018a2ffaC4bEC5F4c88d2",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x0E358838ce72d5e61E0018a2ffaC4bEC5F4c88d2.svg",
        website: "https://app.stellaswap.com/exchange/swap",
        description: "Stellaswap is a decentralized exchange, providing liquidity and enabling peer-to-peer transactions on the Moonbeam Network."
      },
      xSTELLA: {
        name: "xStella",
        symbol: "xSTELLA",
        address: "0x06A3b410b681c82417A906993aCeFb91bAB6A080",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x0E358838ce72d5e61E0018a2ffaC4bEC5F4c88d2.svg",
        website: "https://app.stellaswap.com/exchange/swap",
        description: "Stellaswap is a decentralized exchange, providing liquidity and enabling peer-to-peer transactions on the Moonbeam Network."
      },
      xcDOT: {
        name: "xcDOT",
        symbol: "xcDOT",
        address: "0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080",
        chainId: 1284,
        decimals: 10,
        logoURI: "https://tokens.pancakeswap.finance/images/0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080.svg",
        website: "https://polkadot.network/",
        description: "Polkadot is an open-source sharding multichain protocol that facilitates the cross-chain transfer of any data or asset types, not just tokens, thereby making a wide range of blockchains interoperable with each other."
      },
      stDOT: {
        name: "Liquid staked DOT",
        symbol: "stDOT",
        address: "0xFA36Fe1dA08C89eC72Ea1F0143a35bFd5DAea108",
        chainId: 1284,
        decimals: 10,
        logoURI: "https://tokens.pancakeswap.finance/images/0xFfFFfFff1FcaCBd218EDc0EbA20Fc2308C778080.svg",
        website: "https://polkadot.lido.fi/",
        description: "Lido for Polkadot is a liquid staking solution for DOT backed by industry-leading staking providers."
      },
      veFLARE: {
        name: "Vested Flare Token",
        symbol: "veFLARE",
        address: "0x08c98AD2d4856BEC0a0EaF18C2a06E7201613F90",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x08c98AD2d4856BEC0a0EaF18C2a06E7201613F90.svg",
        website: "https://app.solarflare.io/exchange/swap",
        description: "Solarflare is a decentralized exchange, providing liquidity and enabling peer-to-peer transactions on the Moonbeam Network. The goal is to provide a comprehensive and convenient, one-stop platform for the cryptocurrency community."
      },
      veSOLAR: {
        name: "Vested SolarBeam Token",
        symbol: "veSOLAR",
        address: "0x0DB6729C03C85B0708166cA92801BcB5CAc781fC",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x0DB6729C03C85B0708166cA92801BcB5CAc781fC.svg",
        website: "https://app.solarbeam.io/exchange/swap",
        description: "Solarbeam is a decentralized exchange, providing liquidity and enabling peer-to-peer transactions on the Moonriver Network. We are currently the leading DEX on the network. The goal is to provide a comprehensive and convenient, one-stop platform for the cryptocurrency community."
      },
      MOVR: {
        name: "Moonriver",
        symbol: "MOVR",
        address: "0x1d4C2a246311bB9f827F4C768e277FF5787B7D7E",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x1d4C2a246311bB9f827F4C768e277FF5787B7D7E.svg",
        website: "https://moonbeam.network/networks/moonriver/",
        description: "Moonriver is a companion network to Moonbeam and provides a permanently incentivized canary network. New code ships to Moonriver first, where it can be tested and verified under real economic conditions. Once proven, the same code ships to Moonbeam on Polkadot."
      },
      WBTC: {
        name: "Wrapped BTC",
        symbol: "WBTC",
        address: "0x1DC78Acda13a8BC4408B207c9E48CDBc096D95e0",
        chainId: 1284,
        decimals: 8,
        logoURI: "https://tokens.pancakeswap.finance/images/0x1DC78Acda13a8BC4408B207c9E48CDBc096D95e0.svg",
        website: "https://www.nomad.xyz/",
        description: "WBTC bridged by Nomad. Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led."
      },
      aWBTC: {
        name: "Anyswap Wrapped BTC",
        symbol: "WBTC",
        address: "0x922D641a426DcFFaeF11680e5358F34d97d112E1",
        chainId: 1284,
        decimals: 8,
        logoURI: "https://tokens.pancakeswap.finance/images/0x922D641a426DcFFaeF11680e5358F34d97d112E1.svg",
        website: "https://wbtc.network/",
        description: "Anyswap Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led."
      },
      LUNA: {
        name: "Axelar Wrapped LUNA",
        symbol: "LUNA",
        address: "0x31DAB3430f3081dfF3Ccd80F17AD98583437B213",
        chainId: 1284,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x31DAB3430f3081dfF3Ccd80F17AD98583437B213.svg",
        website: "https://www.terra.money/",
        description: "Terra's native token, LUNA, is used to stabilize the price of the protocol's stablecoins. LUNA holders are also able to submit and vote on governance proposals, giving it the functionality of a governance token."
      },
      UST: {
        name: "Axelar Wrapped UST",
        symbol: "UST",
        address: "0x085416975fe14C2A731a97eC38B9bF8135231F62",
        chainId: 1284,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x085416975fe14C2A731a97eC38B9bF8135231F62.svg",
        website: "https://www.terra.money/",
        description: "Terra stablecoins offer instant settlements, low fees and seamless cross-border exchange - loved by millions of users and merchants."
      },
      xcaUSD: {
        name: "xcaUSD",
        symbol: "xcaUSD",
        address: "0xfFfFFFFF52C56A9257bB97f4B2b6F7B2D624ecda",
        chainId: 1284,
        decimals: 12,
        logoURI: "https://raw.githubusercontent.com/BeamSwap/beamswap-tokenlist/main/assets/chains/moonbeam/0xfFfFFFFF52C56A9257bB97f4B2b6F7B2D624ecda/logo.png",
        website: "https://acala.network/ausd",
        description: "Acala USD (aUSD). The native decentralized stablecoin of Polkadot."
      },
      LDO: {
        name: "Lido DAO",
        symbol: "LDO",
        address: "0x9Fda7cEeC4c18008096C2fE2B85F05dc300F94d0",
        chainId: 1284,
        decimals: 18,
        logoURI: "https://assets.coingecko.com/coins/images/13573/large/Lido_DAO.png?1609873644",
        website: "https://stake.lido.fi/",
        documentation: "https://docs.lido.fi/",
        description: "Lido is a liquid staking solution for ETH 2.0 backed by industry-leading staking providers."
      },
      stellaBase4pool: {
        name: "stellaBase4pool",
        symbol: "stellaswap-base4pool",
        address: "0xdA782836B65edC4E6811c7702C5E21786203Ba9d",
        chainId: 1284,
        decimals: 18,
        logoURI: "",
        website: "https://stellaswap.com/",
        description: "Stellaswap is a decentralized exchange, providing liquidity and enabling peer-to-peer transactions on the Moonbeam Network. The 4pool is a stable-swap LP consisting of USDC, USDT, DAI & FRAX.",
        documentation: "https://docs.stellaswap.com/how-to-guides/swap-pool-and-farm/how-to-add-liquidity-in-stable-amm"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/moonbeam/index.js
var require_moonbeam = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/moonbeam/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.moonbeam = void 0;
    var beefyfinance_1 = require_beefyfinance14();
    var beamswap_1 = require_beamswap();
    var stellaswap_1 = require_stellaswap();
    var solarflare_1 = require_solarflare();
    var tokens_1 = require_tokens14();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _moonbeam = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        beamswap: beamswap_1.beamswap,
        solarflare: solarflare_1.solarflare,
        stellaswap: stellaswap_1.stellaswap
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.moonbeam = _moonbeam;
  }
});

// node_modules/blockchain-addressbook/build/address-book/sys/platforms/beefyfinance.js
var require_beefyfinance15 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/sys/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0x1db98f5D37E6e0E53DCb24F558F0410086920a6e";
    var treasuryMultisig = "0x3E7F60B442CEAE0FE5e48e07EB85Cfb1Ed60e81A";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0xfcDD5a02C611ba6Fe2802f885281500EC95805d7",
      vaultOwner: "0xc8F3D9994bb1670F5f3d78eBaBC35FA8FdEEf8a2",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0x1198f78efd67DFc917510aaA07d49545f4B24f11",
      treasury: treasuryMultisig,
      beefyFeeRecipient: "0xaDB9DDFA24E326dC9d337561f6c7ba2a6Ecec697",
      multicall: "0xd08575F5F4DE7212123731088980D069CB75873D",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/sys/platforms/pegasys.js
var require_pegasys = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/sys/platforms/pegasys.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pegasys = void 0;
    exports.pegasys = {
      router: "0x017dAd2578372CAEE5c6CddfE35eEDB3728544C4",
      minichef: "0x27F037100118548c63F945e284956073D1DC76dE"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/sys/tokens/tokens.js
var require_tokens15 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/sys/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var SYS = {
      name: "Wrapped SYS ",
      address: "0xd3e822f3ef011Ca5f17D82C956D952D8d7C3A1BB",
      symbol: "WSYS",
      decimals: 18,
      chainId: 57,
      website: "https://syscoin.org/",
      description: "Syscoin is a Proof-of-Work blockchain, merged-mined with Bitcoin. At its base it is a dual-layered blockchain: the core is the Syscoin blockchain itself, and running in tandem with it is an Ethereum Virtual Machine (EVM) layer called NEVM (Network-Enhanced Virtual Machine), which provides smart contract functionality.",
      logoURI: ""
    };
    var _tokens = {
      SYS,
      WSYS: SYS,
      WNATIVE: SYS,
      BIFI: {
        name: "Beefy.Finance",
        symbol: "BIFI",
        address: "0xD7c295E399CA928A3a14b01D760E794f1AdF8990",
        chainId: 57,
        decimals: 18,
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      USDC: {
        name: "USD Coin",
        symbol: "USDC",
        address: "0x2bF9b864cdc97b08B6D79ad4663e71B8aB65c45c",
        chainId: 57,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x2bF9b864cdc97b08B6D79ad4663e71B8aB65c45c.svg",
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      WETH: {
        name: "Ethereum",
        symbol: "ETH",
        address: "0x7C598c96D02398d89FbCb9d41Eab3DF0C16F227D",
        chainId: 57,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x7C598c96D02398d89FbCb9d41Eab3DF0C16F227D.svg",
        website: "https://weth.io/",
        description: "Ether or ETH is the native currency built on the Ethereum blockchain.",
        documentation: "https://ethereum.org/en/developers/docs/"
      },
      WBTC: {
        name: "Wrapped BTC",
        symbol: "WBTC",
        address: "0xc9BAA8cfdDe8E328787E29b4B078abf2DaDc2055",
        chainId: 57,
        decimals: 8,
        logoURI: "https://tokens.pancakeswap.finance/images/0xc9BAA8cfdDe8E328787E29b4B078abf2DaDc2055.svg",
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led."
      },
      USDT: {
        name: "Tether USD",
        symbol: "USDT",
        address: "0x922D641a426DcFFaeF11680e5358F34d97d112E1",
        chainId: 57,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x922D641a426DcFFaeF11680e5358F34d97d112E1.svg",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem."
      },
      PSYS: {
        name: "Pegasys",
        symbol: "PSYS",
        address: "0xE18c200A70908c89fFA18C628fE1B83aC0065EA4",
        chainId: 57,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xE18c200A70908c89fFA18C628fE1B83aC0065EA4.svg",
        website: "https://app.pegasys.finance/#/swap",
        description: "Pegasys is an automated liquidity protocol powered by a constant product formula and implemented in a system of non-upgradeable smart contracts on the Syscoin blockchain. It obviates the need for trusted intermediaries, prioritizing decentralization, censorship resistance, and security. Pegasys is open-source software licensed under the GPL."
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/sys/index.js
var require_sys = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/sys/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sys = void 0;
    var beefyfinance_1 = require_beefyfinance15();
    var pegasys_1 = require_pegasys();
    var tokens_1 = require_tokens15();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _sys = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        pegasys: pegasys_1.pegasys
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.sys = _sys;
  }
});

// node_modules/blockchain-addressbook/build/address-book/emerald/platforms/beefyfinance.js
var require_beefyfinance16 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/emerald/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0xFD62896e88a5Da93eCC987cb0bE2501722886863";
    var treasuryMultisig = "0x8FD0869271d26E6653f5d5650685630F75b6AEDf";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0xa9E6E271b27b20F65394914f8784B3B860dBd259",
      vaultOwner: "0xaDB9DDFA24E326dC9d337561f6c7ba2a6Ecec697",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0x1198f78efd67DFc917510aaA07d49545f4B24f11",
      treasury: treasuryMultisig,
      beefyFeeRecipient: "0xaDB9DDFA24E326dC9d337561f6c7ba2a6Ecec697",
      beefyFeeConfig: "0xfb954EeEC41b174AEafec73C266674A236c17760",
      multicall: "0xFE40f6eAD11099D91D51a945c145CFaD1DD15Bb8",
      bifiMaxiStrategy: "0xd1bAb603eee03fA99A378d90d5d83186fEB81aA9",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/emerald/platforms/valleyswap.js
var require_valleyswap = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/emerald/platforms/valleyswap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.valleyswap = void 0;
    exports.valleyswap = {
      router: "0x7C0b0a525fc6A2caDf7AE37198119025C6feA28a",
      masterchef: "0xaE0aF27df228ACd8BA91AF0c917a31A9a681A097"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/emerald/platforms/yuzu.js
var require_yuzu = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/emerald/platforms/yuzu.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.yuzu = void 0;
    exports.yuzu = {
      router: "0x250d48C5E78f1E85F7AB07FEC61E93ba703aE668",
      masterchefExt: "0x8D9cC9ee11AAf865913dEeC939eEb2DC7838ab7B",
      masterchef: "0xB759803Ee7087559EB601a4939c2d5da7668385a",
      swapMining: "0xe63BBe4ef29BFFc40Fa6aE337ca2E532C9A30224"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/emerald/tokens/tokens.js
var require_tokens16 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/emerald/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var ROSE = {
      name: "Wrapped ROSE ",
      address: "0x21C718C22D52d0F3a789b752D4c2fD5908a8A733",
      symbol: "WROSE",
      decimals: 18,
      chainId: 42262,
      website: "https://oasisprotocol.org/",
      description: "Oasis Network is the leading privacy-enabled and scalable layer-1 blockchain network to propel Web3 forward",
      logoURI: ""
    };
    var _tokens = {
      ROSE,
      WROSE: ROSE,
      WNATIVE: ROSE,
      WBTC: {
        name: "Multichain Wrapped BTC",
        symbol: "WBTC",
        address: "0x5D9ab5522c64E1F6ef5e3627ECCc093f56167818",
        chainId: 42262,
        decimals: 8,
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB/logo.png"
      },
      BIFI: {
        name: "Beefy.Finance",
        symbol: "BIFI",
        address: "0x65e66a61D0a8F1e686C2D6083ad611a10D84D97A",
        chainId: 42262,
        decimals: 18,
        website: "https://www.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      ceUSDC: {
        name: "USD Coin (Celer)",
        symbol: "ceUSDC",
        address: "0x81ECac0D6Be0550A00FF064a4f9dd2400585FE9c",
        chainId: 42262,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x81ECac0D6Be0550A00FF064a4f9dd2400585FE9c.svg",
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      UST: {
        name: "UST (Wormhole)",
        symbol: "UST",
        address: "0xa1E73c01E0cF7930F5e91CB291031739FE5Ad6C2",
        chainId: 42262,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xa1E73c01E0cF7930F5e91CB291031739FE5Ad6C2.svg",
        website: "https://www.terra.money/",
        description: "Terra stablecoins offer instant settlements, low fees and seamless cross-border exchange - loved by millions of users and merchants."
      },
      FTP: {
        name: "Fountain Protocol",
        symbol: "FTP",
        address: "0xd1dF9CE4b6159441D18BD6887dbd7320a8D52a05",
        chainId: 42262,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xd1dF9CE4b6159441D18BD6887dbd7320a8D52a05.svg",
        website: "https://ftp.cash/home",
        description: "Supply, borrow, and earn. More than a DeFi lending protocol."
      },
      YUZU: {
        name: "YUZUToken",
        symbol: "YUZU",
        address: "0xf02b3e437304892105992512539F769423a515Cb",
        chainId: 42262,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xf02b3e437304892105992512539F769423a515Cb.svg",
        website: "https://yuzu-swap.com/",
        description: "An open, safe, fair DEX ecosystem with high composability built on Oasis"
      },
      USDT: {
        name: "Tether USD (Wormhole)",
        symbol: "USDT",
        address: "0xdC19A122e268128B5eE20366299fc7b5b199C8e3",
        chainId: 42262,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xdC19A122e268128B5eE20366299fc7b5b199C8e3.svg",
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem."
      },
      WETH: {
        name: "Wrapped Ether (Wormhole)",
        symbol: "WETH",
        address: "0x3223f17957Ba502cbe71401D55A0DB26E5F7c68F",
        chainId: 42262,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x3223f17957Ba502cbe71401D55A0DB26E5F7c68F.svg",
        website: "https://ethereum.org/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network.",
        documentation: "https://ethereum.org/en/developers/docs/"
      },
      VS: {
        name: "ValleySwap Token",
        symbol: "VS",
        address: "0xBC033203796CC2C8C543a5aAe93a9a643320433D",
        chainId: 42262,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xBC033203796CC2C8C543a5aAe93a9a643320433D.svg",
        website: "https://valleyswap.com/",
        description: "ValleySwap is a decentralized exchange on the Oasis Emerald paratime that includes features like liquidity farming, swap and IFO."
      },
      evoUSDT: {
        name: "Tether USD (EvoDeFi)",
        symbol: "evoUSDT",
        address: "0x6Cb9750a92643382e020eA9a170AbB83Df05F30B",
        chainId: 42262,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xdC19A122e268128B5eE20366299fc7b5b199C8e3.svg",
        website: "https://bridge.evodefi.com/",
        description: "USDT bridged via EvoDeFi: Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem."
      },
      evoUSDC: {
        name: "USD Coin (EvoDeFi)",
        symbol: "evoUSDC",
        address: "0x94fbfFe5698DB6f54d6Ca524DbE673a7729014Be",
        chainId: 42262,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x81ECac0D6Be0550A00FF064a4f9dd2400585FE9c.svg",
        website: "https://bridge.evodefi.com/",
        description: "USDC bridged via EvoDeFi: USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      evoWETH: {
        name: "Wrapped Ether (EvoDeFi)",
        symbol: "evoWETH",
        address: "0xE9b38eD157429483EbF87Cf6C002cecA5fd66783",
        chainId: 42262,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x3223f17957Ba502cbe71401D55A0DB26E5F7c68F.svg",
        website: "https://bridge.evodefi.com/",
        description: "WETH bridged via EvoDeFi: The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network."
      },
      evoWBTC: {
        name: "Wrapped BTC (EvoDeFi)",
        symbol: "evoWBTC",
        address: "0x010CDf0Db2737f9407F8CFcb4dCaECA4dE54c815",
        chainId: 42262,
        decimals: 8,
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB/logo.png",
        website: "https://bridge.evodefi.com/",
        description: "WBTC bridged via EvoDeFi: Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led."
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/emerald/index.js
var require_emerald = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/emerald/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.emerald = void 0;
    var beefyfinance_1 = require_beefyfinance16();
    var valleyswap_1 = require_valleyswap();
    var yuzu_1 = require_yuzu();
    var tokens_1 = require_tokens16();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _emerald = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        valleyswap: valleyswap_1.valleyswap,
        yuzu: yuzu_1.yuzu
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.emerald = _emerald;
  }
});

// node_modules/blockchain-addressbook/build/address-book/optimism/platforms/beefyfinance.js
var require_beefyfinance17 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/optimism/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0x2c572743B345ED750907dC95D459dbeaC499D8CF";
    var treasuryMultisig = "0x4ABa01FB8E1f6BFE80c56Deb367f19F35Df0f4aE";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0x979a73011e7AB17363d38bee7CF0e4B5032C793e",
      vaultOwner: "0xd08575F5F4DE7212123731088980D069CB75873D",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0x61645aE7BB524C2ea11cF90D673079EE2AbbB961",
      treasury: treasuryMultisig,
      beefyFeeRecipient: "0x3Cd5Ae887Ddf78c58c9C1a063EB343F942DbbcE8",
      multicall: "0x820ae7BF39792D7ce7befC70B0172F4D267F1938",
      bifiMaxiStrategy: "0xD98a4923e8B8f298028bFB1874c920059605A89a",
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      beefyFeeConfig: "0x216EEE15D1e3fAAD34181f66dd0B665f556a638d",
      vaultFactory: "0xA6D3769faC465FC0415e7E9F16dcdC96B83C240B",
      wrapperFactory: "0x182be93E1C0C4d305fe43bD093292F21fd679797"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/optimism/platforms/beethovenX.js
var require_beethovenX = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/optimism/platforms/beethovenX.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beethovenX = void 0;
    exports.beethovenX = {
      router: "0xBA12222222228d8Ba445958a75a0704d566BF2C8"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/optimism/platforms/sonne.js
var require_sonne = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/optimism/platforms/sonne.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sonne = void 0;
    exports.sonne = {
      comptroller: "0x60CF091cD3f50420d50fD7f707414d0DF4751C58"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/optimism/platforms/velodrome.js
var require_velodrome = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/optimism/platforms/velodrome.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.velodrome = void 0;
    exports.velodrome = {
      router: "0x9c12939390052919aF3155f41Bf4160Fd3666A6f",
      voter: "0x09236cfF45047DBee6B921e00704bed6D6B8Cf7e",
      bifiOpLp: "0x81f638E5d063618Fc5f6a976E48e9B803b3240C0"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/optimism/tokens/tokens.js
var require_tokens17 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/optimism/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var ETH = {
      name: "Wrapped Ether",
      address: "0x4200000000000000000000000000000000000006",
      symbol: "WETH",
      decimals: 18,
      chainId: 10,
      website: "https://weth.io/",
      description: "Ether or ETH is the native currency built on the Ethereum blockchain.",
      logoURI: "",
      documentation: "https://ethereum.org/en/developers/docs/"
    };
    var _tokens = {
      ETH,
      WETH: ETH,
      WNATIVE: ETH,
      BIFI: {
        name: "Beefy.Finance",
        symbol: "BIFI",
        address: "0x4E720DD3Ac5CFe1e1fbDE4935f386Bb1C66F4642",
        chainId: 10,
        decimals: 18,
        website: "https://beefy.com",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png",
        documentation: "https://docs.beefy.finance/"
      },
      beOPX: {
        name: "Beefy Escrowed OPX",
        symbol: "beOPX",
        address: "0xEDFBeC807304951785b581dB401fDf76b4bAd1b0",
        chainId: 10,
        decimals: 18,
        website: "https://www.opx.finance/",
        description: "Beefy Escrowed OPX is a liquid staking solution to earn maximum governance rewards from the OPX platform using the highest tier NFT and maximum lock.",
        logoURI: ""
      },
      OPX: {
        name: "OPX",
        symbol: "OPX",
        address: "0xcdB4bB51801A1F399d4402c61bC098a72c382E65",
        chainId: 10,
        decimals: 18,
        website: "https://www.opx.finance/",
        description: "OPX is the utility and governance token of the OPX decentralized spot and perpetual exchange that supports low swap fees, zero price impact trades and up to 30x leverage. Locked OPX earns trading fees and upto 35% of platform fees in the form of ETH.",
        logoURI: "https://app.opx.finance/static/media/logo.0424664f.svg"
      },
      jEUR: {
        name: "Jarvis Synthetic Euro",
        symbol: "jEUR",
        address: "0x79AF5dd14e855823FA3E9ECAcdF001D99647d043",
        chainId: 10,
        decimals: 18,
        website: "https://jarvis.network/",
        description: "jEUR is a multi-collateralized synthetic token tracking the price of Euro. It is built on the top of UMA and Chainlink.",
        logoURI: "https://i.imgur.com/ZvP634G.png"
      },
      HOP: {
        name: "HOP Protocol",
        symbol: "HOP",
        address: "0xc5102fE9359FD9a28f877a67E36B0F050d81a3CC",
        chainId: 10,
        decimals: 18,
        website: "https://app.hop.exchange",
        description: "Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period",
        logoURI: "https://docs.velodrome.finance/tokens/HOP.svg",
        documentation: "https://docs.hop.exchange/"
      },
      BEETS: {
        name: "Beethoven X Token",
        symbol: "BEETS",
        address: "0x97513e975a7fA9072c72C92d8000B0dB90b163c5",
        chainId: 10,
        decimals: 18,
        website: "https://beethovenx.io/",
        description: "BEETS is the governance token for the Beethoven X protocol. Built on Balancer V2, Beethoven X is the first next-generation AMM protocol on Fantom.",
        logoURI: "https://assets.coingecko.com/coins/images/19158/small/beets-icon-large.png?1634545465"
      },
      OP: {
        name: "Optimism Token",
        symbol: "OP",
        address: "0x4200000000000000000000000000000000000042",
        chainId: 10,
        decimals: 18,
        website: "https://app.optimism.io/governance",
        description: "Optimistic Rollup is a layer 2 scaling solution that scales both transaction throughput and computation on Ethereum. The backbone of our implementation is the Optimistic Virtual Machine (OVM), which is fully compatible with the EVM.",
        logoURI: ""
      },
      USDC: {
        name: "USD Coin",
        symbol: "USDC",
        address: "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",
        chainId: 10,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xef4229c8c3250C675F21BCefa42f58EfbfF6002a.svg",
        website: "https://www.circle.com/usdc",
        documentation: "https://developers.circle.com/docs",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      sUSD: {
        name: "Synth sUSD",
        symbol: "sUSD",
        address: "0x8c6f28f2F1A3C87F0f938b96d27520d9751ec8d9",
        chainId: 10,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0xef4229c8c3250C675F21BCefa42f58EfbfF6002a.svg",
        website: "https://www.synthetix.io/",
        description: "sUSD is a synthetic USD token enabled by the Synthetix protocol. It tracks the price of the US Dollar through price feeds supplied by Chainlink\u2019s decentralized network of oracles"
      },
      WBTC: {
        chainId: 10,
        address: "0x68f180fcCe6836688e9084f035309E29Bf0A2095",
        decimals: 8,
        name: "Wrapped BTC",
        symbol: "WBTC",
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB/logo.png"
      },
      sBTC: {
        chainId: 10,
        address: "0x298B9B95708152ff6968aafd889c6586e9169f1D",
        decimals: 18,
        name: "Synthetix: sBTC",
        symbol: "sBTC",
        website: "https://www.synthetix.io/",
        description: "sBTC is a synthetic Bitcoin token enabled by the Synthetix protocol. It tracks the price of Bitcoin through price feeds supplied by Chainlink\u2019s decentralized network of oracles.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB/logo.png"
      },
      LYRA: {
        chainId: 10,
        address: "0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb",
        decimals: 18,
        name: "Lyra Token",
        symbol: "LYRA",
        website: "https://www.lyra.finance/",
        description: "Lyra\u2019s decentralized exchange is the easiest place to buy and sell options on cryptocurrencies.",
        logoURI: ""
      },
      QI: {
        chainId: 10,
        address: "0x3F56e0c36d275367b8C502090EDF38289b3dEa0d",
        decimals: 18,
        name: "Qi Dao",
        symbol: "QI",
        website: "https://www.mai.finance/",
        description: "QiDao is a self-sustaining, community-governed protocol that allows you to borrow stablecoins interest-free against your crypto assets used as collateral. Loans are paid out and repaid in miTokens (stablecoin soft pegged to the USD).",
        logoURI: "",
        documentation: "https://docs.mai.finance/"
      },
      SNX: {
        name: "Synthetix",
        symbol: "SNX",
        address: "0x8700dAec35aF8Ff88c16BdF0418774CB3D7599B4",
        chainId: 10,
        decimals: 18,
        website: "https://www.synthetix.io/",
        description: "Synthetix is the backbone for derivatives trading in DeFi, allowing anyone, anywhere to gain on-chain exposure to a vast range of assets.",
        logoURI: "https://hecoinfo.com/token/images/snx_32.png"
      },
      PERP: {
        name: "Perpetual Protocol",
        symbol: "PERP",
        address: "0x9e1028F5F1D5eDE59748FFceE5532509976840E0",
        chainId: 10,
        decimals: 18,
        website: "https://app.perp.com/",
        description: "Cross margin DeFi trading with up to 10\xD7-leverage.",
        logoURI: ""
      },
      BAL: {
        name: "Balancer",
        symbol: "BAL",
        address: "0xFE8B128bA8C78aabC59d4c64cEE7fF28e9379921",
        chainId: 10,
        decimals: 18,
        website: "https://balancer.fi/",
        description: "Balancer turns the concept of an index fund on its head: instead of a paying fees to portfolio managers to rebalance your portfolio, you collect fees from traders, who rebalance your portfolio by following arbitrage opportunities.",
        logoURI: "https://hecoinfo.com/token/images/bal_32.png"
      },
      MAI: {
        chainId: 10,
        address: "0xdFA46478F9e5EA86d57387849598dbFB2e964b02",
        decimals: 18,
        name: "Mai Stablecoin",
        symbol: "MAI",
        website: "https://www.mai.finance/",
        description: "MAI is a stablecoin collateralized by your crypto holdings. It's powered by Qi Dao, a protocol that enables any cryptocurrency community to create stablecoins backed by their native tokens.",
        logoURI: "https://raw.githubusercontent.com/0xlaozi/qidao/main/images/mimatic-red.png",
        documentation: "https://docs.mai.finance/"
      },
      FRAX: {
        name: "Frax",
        address: "0x2E3D870790dC77A83DD1d18184Acc7439A53f475",
        symbol: "FRAX",
        decimals: 18,
        chainId: 10,
        website: "https://frax.finance/",
        description: "The Frax Protocol introduced the world to the concept of a cryptocurrency being partially backed by collateral and partially stabilized algorithmically.",
        logoURI: "https://avatars.githubusercontent.com/u/56005256?s=200&v=4"
      },
      VELO: {
        chainId: 10,
        address: "0x3c8B650257cFb5f272f799F5e2b4e65093a11a05",
        decimals: 18,
        name: "Velodrome",
        symbol: "VELO",
        website: "https://app.velodrome.finance/",
        description: "Velodrome Finance, at its core, is a solution for protocols on Optimism to properly incentivize liquidity for their own use cases. Building on top of the groundwork laid out by Solidly, our team has addressed that first iteration's core issues to realize its full potential.",
        logoURI: "https://raw.githubusercontent.com/0xlaozi/qidao/main/images/mimatic-red.png"
      },
      sETH: {
        name: "Synth sETH",
        symbol: "sETH",
        address: "0xE405de8F52ba7559f9df3C368500B6E6ae6Cee49",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://synthetix.io/",
        description: "Synths are derivative tokens providing exposure to a range of assets. They can be traded with infinite liquidity and zero slippage by leveraging the Synthetix protocol\u2019s unique pooled collateral model. Trades between Synths generate a small fee that is distributed to SNX collateral providers."
      },
      DAI: {
        name: "DAI Stablecoin",
        symbol: "DAI",
        address: "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://makerdao.com/en/",
        description: "Dai is a stablecoin cryptocurrency which aims to keep its value as close to one United States dollar as possible through an automated system of smart contracts on the Ethereum blockchain"
      },
      LUSD: {
        name: "LUSD Stablecoin",
        symbol: "LUSD",
        address: "0xc40F949F8a4e094D1b49a23ea9241D289B7b2819",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://www.liquity.org/",
        description: "Liquity is a decentralized borrowing protocol that allows you to draw interest-free loans against Ether used as collateral. Loans are paid out in LUSD (a USD pegged stablecoin) and need to maintain a minimum collateral ratio of 110%.",
        documentation: "https://docs.liquity.org/"
      },
      soUSDC: {
        name: "Stargate USD Coin LP",
        symbol: "soUSDC",
        address: "0xDecC0c09c3B5f6e92EF4184125D5648a66E35298",
        chainId: 10,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xef4229c8c3250C675F21BCefa42f58EfbfF6002a.svg",
        website: "https://stargate.finance/",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      soETH: {
        name: "Stargate Ethereum LP",
        symbol: "soETH",
        address: "0xd22363e3762cA7339569F3d33EADe20127D5F98C",
        chainId: 10,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x2170ed0880ac9a755fd29b2688956bd959f933f8.png",
        website: "https://stargate.finance/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      renBTC: {
        name: "renBTC",
        symbol: "renBTC",
        address: "0x85f6583762Bc76d775eAB9A7456db344f12409F7",
        chainId: 10,
        decimals: 8,
        website: "https://renproject.io/",
        description: "RenBTC is an ERC-20 token built on the Ethereum network, pegged to Bitcoin. This means that each RenBTC can be always redeemed for one Bitcoin, and hence tends to maintain its value at close to the Bitcoin market rate.",
        logoURI: "https://tokens.pancakeswap.finance/images/0xfCe146bF3146100cfe5dB4129cf6C82b0eF4Ad8c.png"
      },
      FXS: {
        name: "Frax Share",
        symbol: "FXS",
        address: "0x67CCEA5bb16181E7b4109c9c2143c24a1c2205Be",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://frax.finance/",
        description: "The Frax Protocol introduced the world to the concept of a cryptocurrency being partially backed by collateral and partially stabilized algorithmically."
      },
      THALES: {
        name: "Thales DAO Token",
        symbol: "THALES",
        address: "0x217D47011b23BB961eB6D93cA9945B7501a5BB11",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://thalesmarket.io/tale-of-thales",
        description: "Thales is an Ethereum protocol that allows the creation of peer-to-peer parimutuel markets that anyone can join."
      },
      alUSD: {
        name: "Alchemix USD",
        symbol: "alUSD",
        address: "0xCB8FA9a76b8e203D8C3797bF438d8FB81Ea3326A",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://alchemix.fi/",
        description: "Alchemix Self-Repaying Loans allow you to leverage a range of tokens without risk of liquidation."
      },
      alETH: {
        name: "Alchemix ETH",
        symbol: "alETH",
        address: "0x3E29D3A9316dAB217754d13b28646B76607c5f04",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://alchemix.fi/",
        description: "Alchemix Self-Repaying Loans allow you to leverage a range of tokens without risk of liquidation."
      },
      DOLA: {
        name: "Dola USD Stablecoin",
        symbol: "DOLA",
        address: "0x8aE125E8653821E851F12A49F7765db9a9ce7384",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://www.inverse.finance/",
        description: "Inverse.finance is a suite of permissionless decentralized finance tools governed by Inverse DAO, a decentralized autonomous organization running on the Ethereum blockchain."
      },
      HND: {
        name: "Hundred Finance",
        symbol: "HND",
        address: "0x10010078a54396F62c96dF8532dc2B4847d47ED3",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://hundred.finance/",
        description: "Hundred Finance is a decentralized application (dApp) that enables the lending and borrowing of cryptocurrencies."
      },
      beVELO: {
        name: "Beefy Velo ",
        symbol: "beVELO",
        address: "0xfDeFFc7Ad816BF7867C642dF7eBC2CC5554ec265",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://beefy.com",
        description: "beVELO is Beefy-wrapped VELO that earns more VELO over time. Beefy distributes trading fees and bribe rewards weekly to beVELO holders, swapping VELO to beVELO. beVELO holders receive the same rewards as max-locked veNFT VELO holders."
      },
      agEUR: {
        name: "agEUR",
        symbol: "agEUR",
        address: "0x9485aca5bbBE1667AD97c7fE7C4531a624C8b1ED",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://app.angle.money/",
        description: "Angle is a decentralized, capital-efficient and over-collateralized stablecoins protocol.",
        documentation: "https://docs.angle.money/"
      },
      L2DAO: {
        name: "Layer2DAO",
        symbol: "L2DAO",
        address: "0xd52f94DF742a6F4B4C8b033369fE13A41782Bf44",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://www.layer2dao.org/#/",
        description: "Layer2DAO is expanding the Ethereum L2 ecosystem and investing in L2 ecosystem projects. The DAO uses its treasury to invest into high-impact L2 protocols and ecosystem plays, serving as a diversified venture fund for investors looking to gain exposure to the L2 ecosystem growth. It also provides liquidity, depositing, and staking, perpetually reinvesting proceeds back into the DAO."
      },
      AELIN: {
        name: "Aelin Token",
        symbol: "AELIN",
        address: "0x61BAADcF22d2565B0F471b291C475db5555e0b76",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://aelin.xyz/",
        description: "A permissionless multi-chain protocol for capital raises and OTC deals. No need for VCs, Aelin decentralizes fundraising"
      },
      pETHo: {
        name: "pETHo",
        symbol: "pETHo",
        address: "0x6ca558bd3eaB53DA1B25aB97916dd14bf6CFEe4E",
        chainId: 10,
        decimals: 18,
        website: "https://ripae.finance/",
        description: "Ripae Finance\u2019s full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: ""
      },
      sETHo: {
        name: "sETHo",
        symbol: "sETHo",
        address: "0x09448876068907827ec15F49A8F1a58C70b04d45",
        chainId: 10,
        decimals: 18,
        website: "https://ripae.finance/",
        description: "Ripae Finance\u2019s full focus is to build a true cross-chain algorithmic stable coin protocol that is stabilized with true use-cases all around the DeFi Ecosystem.",
        logoURI: ""
      },
      rETH: {
        name: "Rocket Pool ETH",
        symbol: "rETH",
        address: "0x9Bcef72be871e61ED4fBbc7630889beE758eb81D",
        chainId: 10,
        decimals: 18,
        website: "https://rocketpool.net/",
        description: "As a Rocket Pool staker, your role is to deposit ETH into the deposit pool which will enable a node operator to create a new Beacon Chain validator. You can stake as little as 0.01 ETH. In doing so, you will be given a token called rETH. rETH represents both how much ETH you deposited, and when you deposited it.",
        logoURI: "",
        documentation: "https://docs.rocketpool.net/guides/"
      },
      "bbUSD+": {
        name: "Beets Composable Pool USD+ Stablecoin",
        symbol: "bbUSD+",
        address: "0x88D07558470484c03d3bb44c3ECc36CAfCF43253",
        chainId: 10,
        decimals: 18,
        website: "https://overnight.fi/",
        description: "USD+ is USDC that pays you yield daily via rebase.  It is 100% collateralized with assets immediately convertible into USDC.  Yield is generated via strategies such as lending and stable-to-stable pools. Initial strategies include Aave, Rubicon, and Pika.",
        logoURI: "",
        documentation: "https://docs.overnight.fi/"
      },
      "USD+": {
        name: "USD+ Stablecoin",
        symbol: "USD+",
        address: "0x73cb180bf0521828d8849bc8CF2B920918e23032",
        chainId: 10,
        decimals: 6,
        website: "https://overnight.fi/",
        description: "USD+ is USDC that pays you yield daily via rebase.  It is 100% collateralized with assets immediately convertible into USDC.  Yield is generated via strategies such as lending and stable-to-stable pools. Initial strategies include Aave, Rubicon, and Pika.",
        logoURI: "",
        documentation: "https://docs.overnight.fi/"
      },
      "wUSD+": {
        name: "Wrapped USD+ Stablecoin",
        symbol: "wUSD+",
        address: "0xA348700745D249c3b49D2c2AcAC9A5AE8155F826",
        chainId: 10,
        decimals: 6,
        website: "https://overnight.fi/",
        description: "USD+ is USDC that pays you yield daily via rebase.  It is 100% collateralized with assets immediately convertible into USDC.  Yield is generated via strategies such as lending and stable-to-stable pools. Initial strategies include Aave, Rubicon, and Pika.",
        logoURI: "",
        documentation: "https://docs.overnight.fi/"
      },
      "DAI+": {
        name: "DAI+ Stablecoin",
        symbol: "DAI+",
        address: "0x970D50d09F3a656b43E11B0D45241a84e3a6e011",
        chainId: 10,
        decimals: 18,
        website: "https://overnight.fi/",
        description: "DAI+ is DAI that pays you yield daily via rebase.  It is 100% collateralized with assets immediately convertible into DAI.  Yield is generated via strategies such as lending and stable-to-stable pools. Initial strategies include Aave, Rubicon, and Pika.",
        logoURI: "",
        documentation: "https://docs.overnight.fi/"
      },
      "bbDAI+": {
        name: "Beets Composable Pool DAI+ Stablecoin",
        symbol: "bbDAI+",
        address: "0xb5ad7d6d6F92a77F47f98C28C84893FBccc94809",
        chainId: 10,
        decimals: 18,
        website: "https://overnight.fi/",
        description: "DAI+ is DAI that pays you yield daily via rebase.  It is 100% collateralized with assets immediately convertible into DAI.  Yield is generated via strategies such as lending and stable-to-stable pools. Initial strategies include Aave, Rubicon, and Pika.",
        logoURI: "",
        documentation: "https://docs.overnight.fi/"
      },
      "wDAI+": {
        name: "Wrapped DAI+ Stablecoin",
        symbol: "wDAI+",
        address: "0x0b8f31480249cC717081928B8aF733F45f6915BB",
        chainId: 10,
        decimals: 18,
        website: "https://overnight.fi/",
        description: "DAI+ is DAI that pays you yield daily via rebase.  It is 100% collateralized with assets immediately convertible into DAI.  Yield is generated via strategies such as lending and stable-to-stable pools. Initial strategies include Aave, Rubicon, and Pika.",
        logoURI: "",
        documentation: "https://docs.overnight.fi/"
      },
      TUSD: {
        name: "TrueUSD",
        symbol: "TUSD",
        address: "0xcB59a0A753fDB7491d5F3D794316F1adE197B21E",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://www.trueusd.com/",
        description: "TrueUSD (TUSD) is the first independently-verified digital asset redeemable 1-for-1 for US Dollars."
      },
      BOND: {
        name: "BarnBridge Governance Token (Optimism)",
        symbol: "BOND",
        address: "0x3e7eF8f50246f725885102E8238CBba33F276747",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://barnbridge.com/",
        description: "BarnBridge v2 is an open source, fixed-income, decentralized protocol that allows users to earn a fixed return on their deposits by swapping variable APYs from money markets for a fixed APY.",
        documentation: "https://docs.barnbridge.com/"
      },
      SONNE: {
        name: "Sonne",
        symbol: "SONNE",
        address: "0x1DB2466d9F5e10D7090E7152B68d62703a2245F0",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://sonne.finance/",
        description: "Sonne Finance is an EVM compatible lending/borrowing protocol that launched on Optimism. Sonne Finance provides peer-to-peer lending solutions that are fully decentralized, transparent and non-custodial. ",
        documentation: "https://docs.sonne.finance/"
      },
      USX: {
        name: "dForce USD",
        symbol: "USX",
        address: "0xbfD291DA8A403DAAF7e5E9DC1ec0aCEaCd4848B9",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://dforce.network/",
        description: "USX is the most important DeFi primitive within dForce\u2019s protocol matrix, starting off with an over-collateralization design, where supported assets can be used as collaterals to mint USX within the respective approved LTV ratio (similar to DAI).",
        documentation: "https://docs.dforce.network/protocols/usx"
      },
      MIM: {
        name: "Magic Internet Money",
        symbol: "MIM",
        address: "0xB153FB3d196A8eB25522705560ac152eeEc57901",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://abracadabra.money/",
        description: "You, the Spellcaster, can provide collateral in the form of various interest bearing crypto assets such as yvYFI, yvUSDT, yvUSDC, xSUSHI and more. With this, you can borrow magic internet money (MIM) which is a stable coin that you can swap for any other traditional stable coin.",
        documentation: "https://docs.abracadabra.money/"
      },
      rfaWETH: {
        name: "Reaper.Farm Aave WETH",
        symbol: "rfaWETH",
        address: "0xdf2D2c477078D2cD563648abbb913dA3Db247c00",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://www.reaper.farm/",
        description: "ETH deposited into Reaper.Farm and leveraged through Aave",
        documentation: "https://docs.reaper.farm/reaper-farms/general-knowledge/types-of-strategies/ltv-looping"
      },
      bbrfaWETH: {
        name: "Beets Reaper.Farm Boosted Aave WETH",
        symbol: "bbrfaWETH",
        address: "0xDD89C7cd0613C1557B2DaAC6Ae663282900204f1",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://op.beets.fi/pools",
        description: "Composable Pool with ETH deposited into Reaper.Farm and leveraged through Aave",
        documentation: "https://docs.beets.fi/balancer-v2-1/pools"
      },
      bbrfaUSDC: {
        name: "Beets Reaper.Farm Boosted Aave USDC",
        symbol: "bbrfaUSDC",
        address: "0xba7834bb3cd2DB888E6A06Fb45E82b4225Cd0C71",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://op.beets.fi/pools",
        description: "Composable Pool with USDC deposited into Reaper.Farm and leveraged through Aave",
        documentation: "https://docs.beets.fi/balancer-v2-1/pools"
      },
      rfaUSDC: {
        name: "Reaper.Farm Aave USDC",
        symbol: "rfaUSDC",
        address: "0x7ecc9D0eE071C7b86d0Ae2101231A3615564009e",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://www.reaper.farm/",
        description: "USDC deposited into Reaper.Farm and leveraged through Aave",
        documentation: "https://docs.reaper.farm/reaper-farms/general-knowledge/types-of-strategies/ltv-looping"
      },
      bbrfaUSDT: {
        name: "Beets Reaper.Farm Boosted Aave USDT",
        symbol: "bbrfaUSDT",
        address: "0x9253d7e1B42fa01eDE2c53f3A21b3B4d13239cD4",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://op.beets.fi/pools",
        description: "Composable Pool with USDT deposited into Reaper.Farm and leveraged through Aave",
        documentation: "https://docs.beets.fi/balancer-v2-1/pools"
      },
      bbrfaUSD: {
        name: "Steady Beets, Boosted",
        symbol: "bbrfaUSD",
        address: "0x6222ae1d2a9f6894dA50aA25Cb7b303497f9BEbd",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://op.beets.fi/pools",
        description: "Composable Pool with Reaper.Farm USDT, USDC and DAI deposited into different Reaper.Farm vaults and leveraged through Aave",
        documentation: "https://docs.beets.fi/balancer-v2-1/pools"
      },
      rfaUSDT: {
        name: "Reaper.Farm Aave USDT",
        symbol: "rfaUSDT",
        address: "0x61cbcb4278D737471EE54dc689de50E4455978D8",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://www.reaper.farm/",
        description: "USDT deposited into Reaper.Farm and leveraged through Aave",
        documentation: "https://docs.reaper.farm/reaper-farms/general-knowledge/types-of-strategies/ltv-looping"
      },
      bbrfaDAI: {
        name: "Beets Reaper.Farm Boosted Aave DAI",
        symbol: "bbrfaDAI",
        address: "0x888a6195D42a95e80D81e1c506172772a80b80Bc",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://op.beets.fi/pools",
        description: "Composable Pool with DAI deposited into Reaper.Farm and leveraged through Aave",
        documentation: "https://docs.beets.fi/balancer-v2-1/pools"
      },
      rfaDAI: {
        name: "Reaper.Farm Aave DAI",
        symbol: "rfaDAI",
        address: "0x75441c125890612F95b5FBf3f73DB0C25F5573Cd",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://www.reaper.farm/",
        description: "DAI deposited into Reaper.Farm and leveraged through Aave",
        documentation: "https://docs.reaper.farm/reaper-farms/general-knowledge/types-of-strategies/ltv-looping"
      },
      bbrfaWBTC: {
        name: "Beets Reaper.Farm Boosted Aave WBTC",
        symbol: "bbrfaWBTC",
        address: "0xA1a77E5d7D769BFBB790a08EC976dc738bF795B9",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://op.beets.fi/pools",
        description: "Composable Pool with WBTC deposited into Reaper.Farm and leveraged through Aave",
        documentation: "https://docs.beets.fi/balancer-v2-1/pools"
      },
      rfaWBTC: {
        name: "Reaper.Farm Aave WBTC",
        symbol: "rfaWBTC",
        address: "0x43cB769D5647CC56F5c1E8Df72aB9097DAB59cCe",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://www.reaper.farm/",
        description: "WBTC deposited into Reaper.Farm and leveraged through Aave",
        documentation: "https://docs.reaper.farm/reaper-farms/general-knowledge/types-of-strategies/ltv-looping"
      },
      USDT: {
        name: "USD Tether",
        symbol: "USDT",
        address: "0x94b008aA00579c1307B0EF2c499aD98a8ce58e58",
        chainId: 10,
        decimals: 6,
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        logoURI: "https://tokens.pancakeswap.finance/images/0x55d398326f99059ff775485246999027b3197955.png",
        documentation: "https://tether.to/en/how-it-works"
      },
      wstETH: {
        name: "Lido Wrapped Staked ETH",
        symbol: "wstETH",
        address: "0x1F32b1c2345538c0c6f582fCB022739c4A194Ebb",
        chainId: 10,
        decimals: 18,
        website: "https://lido.fi/",
        description: "Lido is a liquid staking solution for ETH backed by industry-leading staking providers. Lido lets users stake their ETH - without locking assets or maintaining infrastructure - whilst participating in on-chain activities, e.g. lending. Lido attempts to solve the problems associated with initial ETH staking - illiquidity, immovability and accessibility - making staked ETH liquid and allowing for participation with any amount of ETH to improve security of the Ethereum network.",
        logoURI: "",
        documentation: "https://docs.lido.fi/"
      },
      hETH: {
        name: "ETH Hop Token",
        symbol: "hETH",
        address: "0xE38faf9040c7F09958c638bBDB977083722c5156",
        chainId: 10,
        decimals: 18,
        website: "https://app.hop.exchange",
        description: "hETH is the bridge token for transferring ETH via the Hop Protocol. Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "",
        documentation: "https://docs.hop.exchange/"
      },
      hUSDC: {
        name: "USDC Hop Token",
        symbol: "hUSDC",
        address: "0x25D8039bB044dC227f741a9e381CA4cEAE2E6aE8",
        chainId: 10,
        decimals: 6,
        website: "https://app.hop.exchange",
        description: "hUSDC is the bridge token for transferring USDC via the Hop Protocol. Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "",
        documentation: "https://docs.hop.exchange/"
      },
      hUSDT: {
        name: "USDT Hop Token",
        symbol: "hUSDT",
        address: "0x2057C8ECB70Afd7Bee667d76B4CD373A325b1a20",
        chainId: 10,
        decimals: 6,
        website: "https://app.hop.exchange",
        description: "hUSDT is the bridge token for transferring USDT via the Hop Protocol. Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "",
        documentation: "https://docs.hop.exchange/"
      },
      hDAI: {
        name: "DAI Hop Token",
        symbol: "hDAI",
        address: "0x56900d66D74Cb14E3c86895789901C9135c95b16",
        chainId: 10,
        decimals: 18,
        website: "https://app.hop.exchange",
        description: "hDAI is the bridge token for transferring DAI via the Hop Protocol. Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "",
        documentation: "https://docs.hop.exchange/"
      },
      hSNX: {
        name: "SNX Hop Token",
        symbol: "hSNX",
        address: "0x13B7F51BD865410c3AcC4d56083C5B56aB38D203",
        chainId: 10,
        decimals: 18,
        website: "https://app.hop.exchange",
        description: "hSNX is the bridge token for transferring SNX via the Hop Protocol. Hop Protocol is a blockchain bridge protocol that allows users to move tokens from one chain to another without having to wait for a challenge period.",
        logoURI: "",
        documentation: "https://docs.hop.exchange/"
      },
      LDO: {
        name: "Lido DAO Token",
        symbol: "LDO",
        address: "0xFdb794692724153d1488CcdBE0C56c252596735F",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://stake.lido.fi/",
        description: "Lido is a liquid staking solution for ETH 2.0 backed by industry-leading staking providers.",
        documentation: "https://docs.lido.fi/"
      },
      KWENTA: {
        name: "Kwenta",
        symbol: "KWENTA",
        address: "0x920Cf626a271321C151D027030D5d08aF699456b",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://kwenta.eth.limo/dashboard",
        description: "Kwenta is a decentralized derivatives trading platform, live on Optimism, offering real-world and on-chain synthetic assets using the power of the Synthetix protocol.",
        documentation: "https://docs.kwenta.io/"
      },
      UNIDX: {
        name: "UniDex",
        symbol: "UNIDX",
        address: "0x5d47bAbA0d66083C52009271faF3F50DCc01023C",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://app.unidex.exchange/trading",
        description: "UniDex is building on top of the existing landscape by introducing a perpetual leverage trading platform that will allow any synthetic asset to be traded in a permissionless, transparent, and trader-focused platform for any person to tap into.",
        documentation: "https://unidexexchange.gitbook.io/unidex/"
      },
      sEUR: {
        name: "Synth sEUR",
        symbol: "sEUR",
        address: "0xFBc4198702E81aE77c06D58f81b629BDf36f0a71",
        chainId: 10,
        decimals: 18,
        logoURI: "",
        website: "https://synthetix.io/",
        description: "Forex Synths track the price of forex currencies via price feeds supplied by Chainlinks oracle network of distributed node operators.",
        documentation: "https://docs.synthetix.io/tokens/"
      },
      frxETH: {
        name: "Frax Ether",
        symbol: "frxETH",
        address: "0x6806411765Af15Bddd26f8f544A34cC40cb9838B",
        chainId: 10,
        decimals: 18,
        website: "https://app.frax.finance/frxeth/mint",
        description: "frxETH acts as a stablecoin loosely pegged to ETH, so that 1 frxETH always represents 1 ETH and the amount of frxETH in circulation matches the amount of ETH in the Frax ETH system. When ETH is sent to the frxETHMinter, an equivalent amount of frxETH is minted. Holding frxETH on its own is not eligible for staking yield and should be thought of as analogous as holding ETH.",
        logoURI: "",
        documentation: "https://docs.frax.finance/frax-ether/frxeth-and-sfrxeth"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/optimism/index.js
var require_optimism = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/optimism/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.optimism = void 0;
    var beefyfinance_1 = require_beefyfinance17();
    var beethovenX_1 = require_beethovenX();
    var sonne_1 = require_sonne();
    var velodrome_1 = require_velodrome();
    var tokens_1 = require_tokens17();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _optimism = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        beethovenX: beethovenX_1.beethovenX,
        sonne: sonne_1.sonne,
        velodrome: velodrome_1.velodrome
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.optimism = _optimism;
  }
});

// node_modules/blockchain-addressbook/build/address-book/kava/platforms/beefyfinance.js
var require_beefyfinance18 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/kava/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var zeroAddress = "0x0000000000000000000000000000000000000000";
    var hw = "0xdAec0E93A98b6184816dFDA318B1A01EAF026164";
    exports.beefyfinance = {
      devMultisig: zeroAddress,
      treasuryMultisig: zeroAddress,
      strategyOwner: "0x922f8807E781739DDefEe51df990457B522cBCf5",
      vaultOwner: "0xfcDD5a02C611ba6Fe2802f885281500EC95805d7",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: hw,
      launchpoolOwner: hw,
      rewardPool: "0xFE40f6eAD11099D91D51a945c145CFaD1DD15Bb8",
      treasury: "0xFE40f6eAD11099D91D51a945c145CFaD1DD15Bb8",
      beefyFeeRecipient: "0xFE40f6eAD11099D91D51a945c145CFaD1DD15Bb8",
      multicall: "0x13C6bCC2411861A31dcDC2f990ddbe2325482222",
      // bifiMaxiStrategy: '0xd1bAb603eee03fA99A378d90d5d83186fEB81aA9',
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      beefyFeeConfig: "0xa9E6E271b27b20F65394914f8784B3B860dBd259"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/kava/platforms/sushiKava.js
var require_sushiKava = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/kava/platforms/sushiKava.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sushiKava = void 0;
    exports.sushiKava = {
      minichef: "0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5",
      complexRewarderTime: "0xeaf76e3bD36680D98d254B378ED706cb0DFBfc1B",
      bentoBox: "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
      router: "0xbE811A0D44E2553d25d11CB8DC0d3F0D0E6430E6"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/kava/tokens/tokens.js
var require_tokens18 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/kava/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var KAVA = {
      name: "Wrapped KAVA",
      address: "0xc86c7C0eFbd6A49B35E8714C5f59D99De09A225b",
      symbol: "WKAVA",
      decimals: 18,
      chainId: 2222,
      website: "https://www.kava.io/",
      description: "The Kava Network is the first Layer-1 blockchain to combine the speed and scalability of the Cosmos SDK with the developer support of Ethereum. The Kava Network will empower developers to build for Web3 and next-gen blockchain technologies through its unique co-chain architecture. KAVA is the native governance and staking token of the Kava Network, enabling its decentralization and security. ",
      logoURI: "",
      documentation: "https://docs.kava.io/docs/intro/"
    };
    var _tokens = {
      KAVA,
      WKAVA: KAVA,
      WNATIVE: KAVA,
      USDC: {
        name: "USD Coin ",
        symbol: "USDC",
        address: "0xfA9343C3897324496A05fC75abeD6bAC29f8A40f",
        chainId: 2222,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xB12BFcA5A55806AaF64E99521918A4bf0fC40802.svg",
        website: "https://www.circle.com/usdc",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        documentation: "https://developers.circle.com/docs"
      },
      USDT: {
        name: "USDT",
        symbol: "USDT",
        address: "0xB44a9B6905aF7c801311e8F4E76932ee959c663C",
        chainId: 2222,
        decimals: 6,
        website: "https://tether.to/",
        documentation: "https://tether.to/en/how-it-works",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        logoURI: "https://hecoinfo.com/token/images/USDTHECO_32.png"
      },
      DAI: {
        name: "Dai Stablecoin",
        address: "0x765277EebeCA2e31912C9946eAe1021199B39C61",
        symbol: "DAI",
        decimals: 18,
        chainId: 2222,
        website: "https://makerdao.com/",
        documentation: "https://docs.makerdao.com/",
        description: "Multi-Collateral Dai, brings a lot of new and exciting features, such as support for new CDP collateral types and Dai Savings Rate.",
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x6B175474E89094C44Da98b954EedeAC495271d0F/logo.png"
      },
      SUSHI: {
        name: "Sushi",
        address: "0x7C598c96D02398d89FbCb9d41Eab3DF0C16F227D",
        symbol: "SUSHI",
        decimals: 18,
        chainId: 2222,
        website: "https://sushi.com/",
        description: "Sushi is the home of DeFi. Their community is building a comprehensive, decentralized trading platform for the future of finance. Swap, earn, stack yields, lend, borrow, leverage all on one decentralized, community driven platform.",
        logoURI: "https://app.sushi.com/static/media/logo.11fafaa5.png"
      },
      WBTC: {
        name: "Wrapped BTC",
        address: "0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b",
        symbol: "WBTC",
        decimals: 8,
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
        chainId: 2222,
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599/logo.png"
      },
      ETH: {
        name: "Ether",
        address: "0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D",
        symbol: "ETH",
        decimals: 18,
        chainId: 2222,
        website: "https://ethereum.org/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network.",
        logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png"
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/kava/index.js
var require_kava = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/kava/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.kava = void 0;
    var beefyfinance_1 = require_beefyfinance18();
    var sushiKava_1 = require_sushiKava();
    var tokens_1 = require_tokens18();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _kava = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        sushiKava: sushiKava_1.sushiKava
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.kava = _kava;
  }
});

// node_modules/blockchain-addressbook/build/address-book/ethereum/platforms/beefyfinance.js
var require_beefyfinance19 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/ethereum/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var devMultisig = "0x34fEf5DA92c59d6aC21d0A75ce90B351D0Fb6CE6";
    var treasuryMultisig = "0xc9C61194682a3A5f56BF9Cd5B59EE63028aB6041";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0x1c9270ac5C42E51611d7b97b1004313D52c80293",
      vaultOwner: "0x5B6C5363851EC9ED29CB7220C39B44E1dd443992",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: "0xF49c523F08B4e7c8E51a44088ea2a5e6b5f397D9",
      treasury: treasuryMultisig,
      beefyFeeRecipient: "0x8237f3992526036787E8178Def36291Ab94638CD",
      multicall: "0x9dA9f3C6c45F1160b53D395b0A982aEEE1D212fE",
      // bifiMaxiStrategy: '0xd1bAb603eee03fA99A378d90d5d83186fEB81aA9',
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      beefyFeeConfig: "0x3d38BA27974410679afF73abD096D7Ba58870EAd",
      vaultFactory: "0xC551dDCE8e5E657503Cd67A39713c06F2c0d2e97"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/ethereum/platforms/balancer.js
var require_balancer3 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/ethereum/platforms/balancer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.balancer = void 0;
    exports.balancer = {
      router: "0xBA12222222228d8Ba445958a75a0704d566BF2C8"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/ethereum/platforms/aura.js
var require_aura = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/ethereum/platforms/aura.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aura = void 0;
    exports.aura = {
      router: "0xBA12222222228d8Ba445958a75a0704d566BF2C8"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/ethereum/platforms/sushi.js
var require_sushi5 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/ethereum/platforms/sushi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sushi = void 0;
    exports.sushi = {
      masterchef: "0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd",
      masterchefV2: "0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d",
      router: "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/ethereum/platforms/synapse.js
var require_synapse2 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/ethereum/platforms/synapse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.synapse = void 0;
    exports.synapse = {
      minichef: "0xd10eF2A513cEE0Db54E959eF16cAc711470B62cF"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/ethereum/platforms/solidly.js
var require_solidly2 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/ethereum/platforms/solidly.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.solidly = void 0;
    exports.solidly = {
      router: "0x77784f96C936042A3ADB1dD29C91a55EB2A4219f",
      voter: "0x777034fEF3CCBed74536Ea1002faec9620deAe0A"
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/ethereum/tokens/tokens.js
var require_tokens19 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/ethereum/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var ETH = {
      name: "Wrapped Ether",
      address: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      symbol: "WETH",
      decimals: 18,
      chainId: 1,
      website: "https://weth.io/",
      description: "Ether or ETH is the native currency built on the Ethereum blockchain. ",
      logoURI: "https://arbiscan.io/token/images/weth_28.png",
      documentation: "https://ethereum.org/en/developers/docs/"
    };
    var _tokens = {
      ETH,
      WETH: ETH,
      WNATIVE: ETH,
      BIFI: {
        name: "Beefy.Finance",
        symbol: "BIFI",
        address: "0x5870700f1272a1AdbB87C3140bD770880a95e55D",
        chainId: 1,
        decimals: 18,
        website: "https://www.beefy.finance/",
        documentation: "https://docs.beefy.finance/",
        description: "Beefy Finance is a Decentralized, Multi-Chain Yield Optimizer platform that allows its users to earn compound interest on their crypto holdings.",
        logoURI: "https://raw.githubusercontent.com/beefyfinance/beefy-app/prod/src/images/single-assets/BIFI.png"
      },
      USDC: {
        name: "USD Coin",
        address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        symbol: "USDC",
        decimals: 6,
        website: "https://www.circle.com/usdc",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        chainId: 1,
        logoURI: "https://ftmscan.com/token/images/USDC_32.png",
        documentation: "https://developers.circle.com/docs"
      },
      wstETH: {
        name: "Lido Wrapped Staked ETH",
        symbol: "wstETH",
        address: "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
        chainId: 1,
        decimals: 18,
        website: "https://lido.fi/",
        description: "Lido is a liquid staking solution for ETH backed by industry-leading staking providers. Lido lets users stake their ETH - without locking assets or maintaining infrastructure - whilst participating in on-chain activities, e.g. lending. Lido attempts to solve the problems associated with initial ETH staking - illiquidity, immovability and accessibility - making staked ETH liquid and allowing for participation with any amount of ETH to improve security of the Ethereum network.",
        logoURI: "",
        documentation: "https://docs.lido.fi/"
      },
      stETH: {
        name: "Lido Wrapped Staked ETH",
        symbol: "stETH",
        address: "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        chainId: 1,
        decimals: 18,
        website: "https://lido.fi/",
        description: "Lido is a liquid staking solution for ETH backed by industry-leading staking providers. Lido lets users stake their ETH - without locking assets or maintaining infrastructure - whilst participating in on-chain activities, e.g. lending. Lido attempts to solve the problems associated with initial ETH staking - illiquidity, immovability and accessibility - making staked ETH liquid and allowing for participation with any amount of ETH to improve security of the Ethereum network.",
        logoURI: "",
        documentation: "https://docs.lido.fi/"
      },
      pETH: {
        name: "JPEG'd ETH",
        symbol: "pETH",
        address: "0x836A808d4828586A69364065A1e064609F5078c7",
        chainId: 1,
        decimals: 18,
        website: "https://jpegd.io/",
        description: "pETH is an Ethereum derivative supported by the JPEG'd protocol. It is minted when a user borrows against their NFT and burned when they decide to repay their loan. Unlike the 2% interest rate for borrowing PUSd, minting $pETH against an NFT has a 5% interest rate.",
        documentation: "https://docs.jpegd.io/tokenomics/usdpeth"
      },
      FRAX: {
        chainId: 1,
        address: "0x853d955aCEf822Db058eb8505911ED77F175b99e",
        decimals: 18,
        name: "Frax",
        symbol: "FRAX",
        website: "https://frax.finance/",
        description: "Frax is the first fractional-algorithmic stablecoin protocol.",
        logoURI: "https://raw.githubusercontent.com/pangolindex/tokens/main/assets/0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64/logo.png",
        documentation: "https://docs.frax.finance/"
      },
      WBTC: {
        chainId: 1,
        address: "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
        decimals: 8,
        name: "Wrapped BTC",
        symbol: "WBTC",
        website: "https://wbtc.network/",
        description: "Wrapped Bitcoin (WBTC) is the first ERC20 token backed 1:1 with Bitcoin. Completely transparent. 100% verifiable. Community led.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB/logo.png"
      },
      sBTC: {
        chainId: 1,
        address: "0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6",
        decimals: 18,
        name: "Synthetix: sBTC",
        symbol: "sBTC",
        website: "https://www.synthetix.io/",
        description: "sBTC is a synthetic Bitcoin token enabled by the Synthetix protocol. It tracks the price of Bitcoin through price feeds supplied by Chainlink\u2019s decentralized network of oracles.",
        logoURI: "https://raw.githubusercontent.com/ava-labs/bridge-tokens/main/avalanche-tokens/0x408D4cD0ADb7ceBd1F1A1C33A0Ba2098E1295bAB/logo.png"
      },
      multiBTC: {
        chainId: 1,
        address: "0x66eFF5221ca926636224650Fd3B9c497FF828F7D",
        decimals: 8,
        name: "Multichain BTC",
        symbol: "multiBTC",
        website: "https://app.multichain.org/",
        description: "Multichain supports to swap BTC to MultiBTC (Multichain BTC) 1:1."
      },
      alETH: {
        name: "Alchemix ETH",
        symbol: "alETH",
        address: "0x0100546F2cD4C9D97f798fFC9755E47865FF7Ee6",
        chainId: 1,
        decimals: 18,
        logoURI: "",
        website: "https://alchemix.fi/",
        documentation: "https://alchemix-finance.gitbook.io/v2/",
        description: "Alchemix Self-Repaying Loans allow you to leverage a range of tokens without risk of liquidation."
      },
      MIM: {
        name: "Magic Internet Money",
        address: "0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3",
        symbol: "MIM",
        decimals: 18,
        chainId: 1,
        website: "https://abracadabra.money/",
        description: "You, the Spellcaster, can provide collateral in the form of various interest bearing crypto assets such as yvYFI, yvUSDT, yvUSDC, xSUSHI and more. With this, you can borrow magic internet money (MIM) which is a stable coin that you can swap for any other traditional stable coin.",
        logoURI: "",
        documentation: "https://docs.abracadabra.money/"
      },
      ApeUSD: {
        name: "ApeUSD",
        address: "0xfF709449528B6fB6b88f557F7d93dEce33bca78D",
        symbol: "ApeUSD",
        decimals: 18,
        chainId: 1,
        website: "https://ape.fi/",
        documentation: "https://github.com/ape-fi/ape-finance",
        description: "Ape Finance is building DeFi tools for metaverse dwellers, proud PFP owners, and digital collectible enthusiasts in all of us. We appreciate culture, art, and games. Ape Finance begins with the creation of the ApeUSD.",
        logoURI: ""
      },
      auraBAL: {
        name: "Aura Staked BAL BPT",
        symbol: "auraBAL",
        address: "0x616e8BfA43F920657B3497DBf40D6b1A02D4608d",
        chainId: 1,
        decimals: 18,
        website: "https://aura.finance/",
        description: "auraBAL is Aura's liquid staking locked BAL (80 BAL / 20 ETH) BPT",
        logoURI: "",
        documentation: "https://docs.aura.finance/aura/what-is-aura/for-usdbal-stakers"
      },
      BAL: {
        name: "Balancer",
        symbol: "BAL",
        address: "0xba100000625a3754423978a60c9317c58a424e3D",
        chainId: 1,
        decimals: 18,
        website: "https://balancer.fi/",
        description: "Balancer turns the concept of an index fund on its head: instead of a paying fees to portfolio managers to rebalance your portfolio, you collect fees from traders, who rebalance your portfolio by following arbitrage opportunities. ",
        logoURI: "",
        documentation: "https://docs.balancer.fi/"
      },
      AURA: {
        name: "Aura",
        symbol: "AURA",
        address: "0xC0c293ce456fF0ED870ADd98a0828Dd4d2903DBF",
        chainId: 1,
        decimals: 18,
        website: "https://aura.finance/",
        description: "Aura Finance is a protocol built on top of the Balancer system to provide maximum incentives to Balancer liquidity providers and BAL stakers (into veBAL) through social aggregation of BAL deposits and Aura\u2019s native token. For BAL stakers, Aura provides a seamless onboarding process to veBAL, by creating a tokenised wrapper token called auraBAL that represents the 80/20 BPT locked up for the maximum time in VotingEscrow (read more about what this means). This can be staked to receive existing rewards (BAL and bbaUSD) from Balancer, in addition to a share of any BAL earned by Aura (read more about the fees), and additional AURA. This minting process is irreversible however users can trade their auraBAL back to BAL through an incentivised liquidity pool.",
        logoURI: "",
        documentation: "https://docs.aura.finance/"
      },
      MAI: {
        name: "Mai Stablecoin",
        symbol: "MAI",
        address: "0x8D6CeBD76f18E1558D4DB88138e2DeFB3909fAD6",
        chainId: 1,
        decimals: 18,
        logoURI: "",
        website: "https://mai.finance/",
        documentation: "https://docs.mai.finance/",
        description: "MAI is a stable coin collateralized by your MATIC holdings. Its powered by Qi Dao, a protocol that enables any cryptocurrency community to create stablecoins backed by their native tokens."
      },
      CRV: {
        name: "CRV",
        address: "0xD533a949740bb3306d119CC777fa900bA034cd52",
        symbol: "CRV",
        decimals: 18,
        chainId: 1,
        website: "https://curve.fi/",
        description: "Curve is an exchange liquidity pool on Ethereum. Curve is designed for extremely efficient stablecoin trading and low risk, supplemental fee income for liquidity providers, without an opportunity cost.",
        logoURI: "",
        documentation: "https://curve.readthedocs.io/"
      },
      CVX: {
        name: "CVX",
        address: "0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B",
        symbol: "CVX",
        decimals: 18,
        chainId: 1,
        website: "https://www.convexfinance.com/",
        documentation: "https://docs.convexfinance.com/",
        description: "Convex allows Curve.fi liquidity providers to earn trading fees and claim boosted CRV without locking CRV themselves. Liquidity providers can receive boosted CRV and liquidity mining rewards with minimal effort.",
        logoURI: ""
      },
      cvxCRV: {
        name: "cvxCRV",
        address: "0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7",
        symbol: "cvxCRV",
        decimals: 18,
        chainId: 1,
        website: "https://www.convexfinance.com/",
        documentation: "https://docs.convexfinance.com/",
        description: "Convex allows Curve.fi liquidity providers to earn trading fees and claim boosted CRV without locking CRV themselves. Liquidity providers can receive boosted CRV and liquidity mining rewards with minimal effort.",
        logoURI: ""
      },
      cvxFXS: {
        name: "cvxFXS",
        address: "0xFEEf77d3f69374f66429C91d732A244f074bdf74",
        symbol: "cvxFXS",
        decimals: 18,
        chainId: 1,
        website: "https://frax.convexfinance.com/",
        documentation: "https://docs.convexfinance.com/",
        description: "Convex Finance has expanded to optimize opportunities for liquidity providers on Frax the same way it has done so for Curve.fi LPs.",
        logoURI: ""
      },
      sethUSDC: {
        name: "Stargate USD Coin LP",
        symbol: "sethUSDC",
        address: "0xdf0770dF86a8034b3EFEf0A1Bb3c889B8332FF56",
        chainId: 1,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0xef4229c8c3250C675F21BCefa42f58EfbfF6002a.svg",
        website: "https://stargate.finance/",
        description: "Stargate allows users and dApps to bridge native tokens with instant guaranteed finality. USDC is deposited in a LP pool to enable high liquidity for bridging.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      sethUSDT: {
        name: "Stargate Tether USD LP",
        symbol: "sethUSDT",
        address: "0x38EA452219524Bb87e18dE1C24D3bB59510BD783",
        chainId: 1,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://tether.to/",
        description: "Stargate allows users and dApps to bridge native tokens with instant guaranteed finality. USDT is deposited in a LP pool to enable high liquidity for bridging.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      rETH: {
        name: "Rocket Pool ETH",
        symbol: "rETH",
        address: "0xae78736Cd615f374D3085123A210448E74Fc6393",
        chainId: 1,
        decimals: 18,
        website: "https://rocketpool.net/",
        description: "As a Rocket Pool staker, your role is to deposit ETH into the deposit pool which will enable a node operator to create a new Beacon Chain validator. You can stake as little as 0.01 ETH. In doing so, you will be given a token called rETH. rETH represents both how much ETH you deposited, and when you deposited it.",
        logoURI: "",
        documentation: "https://docs.rocketpool.net/guides/"
      },
      USDT: {
        name: "Tether USD",
        symbol: "USDT",
        address: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        chainId: 1,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://tether.to/",
        documentation: "https://tether.to/en/how-it-works",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem."
      },
      DOLA: {
        name: "Dola USD Stablecoin",
        symbol: "DOLA",
        address: "0x865377367054516e17014CcdED1e7d814EDC9ce4",
        chainId: 1,
        decimals: 18,
        logoURI: "",
        website: "https://www.inverse.finance/",
        documentation: "https://docs.inverse.finance/inverse-finance/using-dola/how-to-acquire-dola",
        description: "Inverse.finance is a suite of permissionless decentralized finance tools governed by Inverse DAO, a decentralized autonomous organization running on the Ethereum blockchain."
      },
      sETH: {
        name: "Synth sETH",
        symbol: "sETH",
        address: "0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb",
        chainId: 1,
        decimals: 18,
        logoURI: "",
        website: "https://synthetix.io/",
        description: "Synths are derivative tokens providing exposure to a range of assets. They can be traded with infinite liquidity and zero slippage by leveraging the Synthetix protocol\u2019s unique pooled collateral model. Trades between Synths generate a small fee that is distributed to SNX collateral providers."
      },
      cbETH: {
        name: "Coinbase Wrapped Staked ETH",
        symbol: "cbETH",
        address: "0xBe9895146f7AF43049ca1c1AE358B0541Ea49704",
        chainId: 1,
        decimals: 18,
        logoURI: "",
        website: "https://help.coinbase.com/en/coinbase/trading-and-funding/staking-rewards/cbeth",
        description: "Coinbase Wrapped Staked ETH (\u201CcbETH\u201D) is a utility token that represents Ethereum 2 (ETH2), which is ETH staked through Coinbase. Over time, the price of cbETH will likely deviate from ETH because cbETH represents 1 staked ETH plus all of its accrued staking interest starting from when cbETH's conversion rate and balance were initialized (June 16, 2022 19:34 UTC). cbETH is minted exclusively by Coinbase."
      },
      USDD: {
        name: "Decentralized USD",
        symbol: "USDD",
        address: "0x0C10bF8FcB7Bf5412187A595ab97a3609160b5c6",
        chainId: 1,
        decimals: 18,
        logoURI: "",
        website: "https://usdd.io/",
        description: "The USDD protocol aims to provide the blockchain industry with the most stable, decentralized, tamper-proof, and freeze-free stablecoin system, a perpetual system independent from any centralized entity.",
        documentation: "https://usdd.io/docs/"
      },
      aUSDT: {
        name: "Aave Tether USD",
        symbol: "aUSDT",
        address: "0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811",
        chainId: 1,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://tether.to/",
        description: "Aave interest bearing USDT. Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        documentation: "https://docs.aave.com/developers/v/2.0/the-core-protocol/atokens"
      },
      sethETH: {
        name: "Stargate Ethereum LP",
        symbol: "sethETH",
        address: "0x101816545F6bd2b1076434B54383a1E633390A2E",
        chainId: 1,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x2170ed0880ac9a755fd29b2688956bd959f933f8.png",
        website: "https://stargate.finance/",
        description: "Stargate allows users and dApps to bridge native tokens with instant guaranteed finality. ETH is deposited in a LP pool to enable high liquidity for bridging.",
        documentation: "https://stargateprotocol.gitbook.io/stargate/v/user-docs/"
      },
      waUSDT: {
        name: "Wrapped Aave Tether USD",
        symbol: "waUSDT",
        address: "0xf8Fd466F12e236f4c96F7Cce6c79EAdB819abF58",
        chainId: 1,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://tether.to/",
        documentation: "https://docs.aave.com/developers/v/2.0/the-core-protocol/atokens",
        description: "Wrapped Aave interest bearing USDT. Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem."
      },
      bbaUSDT: {
        name: "Balancer Aave USDT Linear Pool",
        symbol: "bbaUSDT",
        address: "0x2F4eb100552ef93840d5aDC30560E5513DFfFACb",
        chainId: 1,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://app.balancer.fi/#/",
        documentation: "https://docs.balancer.fi/products/balancer-pools/boosted-pools",
        description: "Balancer linear pool that consist of 50/50 USDT and wrapped Aave Interest Bearing USDT."
      },
      aUSDC: {
        name: "Aave USDC",
        symbol: "aUSDC",
        address: "0xBcca60bB61934080951369a648Fb03DF4F96263C",
        chainId: 1,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://www.circle.com/usdc",
        documentation: "https://docs.aave.com/developers/v/2.0/the-core-protocol/atokens",
        description: "Aave interest bearing USDC. USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      waUSDC: {
        name: "Wrapped Aave Tether USD",
        symbol: "waUSDC",
        address: "0xd093fA4Fb80D09bB30817FDcd442d4d02eD3E5de",
        chainId: 1,
        decimals: 6,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://www.circle.com/usdc",
        documentation: "https://docs.aave.com/developers/v/2.0/the-core-protocol/atokens",
        description: "Wrapped Aave interest bearing USDC. USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars."
      },
      bbaUSDC: {
        name: "Balancer Aave USDC Linear Pool",
        symbol: "bbaUSDC",
        address: "0x82698aeCc9E28e9Bb27608Bd52cF57f704BD1B83",
        chainId: 1,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://app.balancer.fi/#/",
        documentation: "https://docs.balancer.fi/products/balancer-pools/boosted-pools",
        description: "Balancer linear pool that consist of 50/50 USDC and wrapped Aave Interest Bearing USDC."
      },
      DAI: {
        name: "DAI Stablecoin",
        symbol: "DAI",
        address: "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        chainId: 1,
        decimals: 18,
        logoURI: "",
        website: "https://makerdao.com/en/",
        documentation: "https://docs.makerdao.com/smart-contract-modules/dai-module/dai-detailed-documentation",
        description: "Dai is a stablecoin cryptocurrency which aims to keep its value as close to one United States dollar as possible through an automated system of smart contracts on the Ethereum blockchain"
      },
      aDAI: {
        name: "Aave DAI",
        symbol: "aDAI",
        address: "0x028171bCA77440897B824Ca71D1c56caC55b68A3",
        chainId: 1,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://makerdao.com/en/",
        documentation: "https://docs.aave.com/developers/v/2.0/the-core-protocol/atokens",
        description: "Aave interest bearing DAI. Dai is a stablecoin cryptocurrency which aims to keep its value as close to one United States dollar as possible through an automated system of smart contracts on the Ethereum blockchain."
      },
      waDAI: {
        name: "Wrapped Aave Tether DAI",
        symbol: "waDAI",
        address: "0x02d60b84491589974263d922D9cC7a3152618Ef6",
        chainId: 1,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://makerdao.com/en/",
        documentation: "https://docs.aave.com/developers/v/2.0/the-core-protocol/atokens",
        description: "Wrapped Aave interest bearing DAI. Dai is a stablecoin cryptocurrency which aims to keep its value as close to one United States dollar as possible through an automated system of smart contracts on the Ethereum blockchain."
      },
      bbaDAI: {
        name: "Balancer Aave DAI Linear Pool",
        symbol: "bbaDAI",
        address: "0xae37D54Ae477268B9997d4161B96b8200755935c",
        chainId: 1,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://app.balancer.fi/#/",
        documentation: "https://docs.balancer.fi/products/balancer-pools/boosted-pools",
        description: "Balancer linear pool that consist of 50/50 DAI and wrapped Aave Interest Bearing DAI."
      },
      bbaUSD: {
        name: "Balancer Aave Stable Composable Pool",
        symbol: "bbaUSD",
        address: "0xA13a9247ea42D743238089903570127DdA72fE44",
        chainId: 1,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x4988a896b1227218e4A686fdE5EabdcAbd91571f.svg",
        website: "https://app.balancer.fi/#/",
        documentation: "https://docs.balancer.fi/products/balancer-pools/boosted-pools",
        description: "Balancer composable pool that consist of bbaUSDT, bbaUSDC, and bbaDAI. bbTokens are Aave boosted linear pools."
      },
      frxETH: {
        name: "Frax Ether",
        symbol: "frxETH",
        address: "0x5E8422345238F34275888049021821E8E08CAa1f",
        chainId: 1,
        decimals: 18,
        website: "https://app.frax.finance/frxeth/mint",
        description: "frxETH acts as a stablecoin loosely pegged to ETH, so that 1 frxETH always represents 1 ETH and the amount of frxETH in circulation matches the amount of ETH in the Frax ETH system. When ETH is sent to the frxETHMinter, an equivalent amount of frxETH is minted. Holding frxETH on its own is not eligible for staking yield and should be thought of as analogous as holding ETH.",
        logoURI: "",
        documentation: "https://docs.frax.finance/frax-ether/frxeth-and-sfrxeth"
      },
      sfrxETH: {
        name: "Staked Frax Ether",
        symbol: "sfrxETH",
        address: "0xac3E018457B222d93114458476f3E3416Abbe38F",
        chainId: 1,
        decimals: 18,
        website: "https://app.frax.finance/frxeth/mint",
        description: "sfrxETH is a ERC-4626 vault designed to accrue the staking yield of the Frax ETH validators. At any time, frxETH can be exchanged for sfrxETH by depositing it into the sfrxETH vault, which allows users to earn staking yield on their frxETH. Over time, as validators accrue staking yield, an equivalent amount of frxETH is minted and added to the vault, allowing users to redeem their sfrxETH for an greater amount of frxETH than they deposited. ",
        logoURI: "",
        documentation: "https://docs.frax.finance/frax-ether/frxeth-and-sfrxeth"
      },
      INV: {
        name: "Inverse Finance",
        symbol: "INV",
        address: "0x41D5D79431A913C4aE7d69a668ecdfE5fF9DFB68",
        chainId: 1,
        decimals: 18,
        website: "https://www.inverse.finance/",
        documentation: "https://docs.inverse.finance/inverse-finance/about-inverse",
        description: "Inverse.finance is a suite of permissionless decentralized finance tools governed by Inverse DAO, a decentralized autonomous organization running on the Ethereum blockchain.",
        logoURI: "https://assets.spookyswap.finance/tokens/INV.png"
      },
      ACX: {
        name: "Across Protocol Token",
        symbol: "ACX",
        address: "0x44108f0223A3C3028F5Fe7AEC7f9bb2E66beF82F",
        chainId: 1,
        decimals: 18,
        website: "https://across.to/",
        documentation: "https://docs.across.to/",
        description: "Across is a cross-chain bridge for L2s and rollups secured by UMAs optimistic oracle. It is optimized for capital efficiency with a single liquidity pool, a competitive relayer landscape, and a no-slippage fee model.",
        logoURI: ""
      },
      "BAL-WETH-80-20": {
        name: "Balancer Pool Token BAL-WETH 80/20",
        symbol: "BAL-WETH-80-20",
        address: "0x5c6Ee304399DBdB9C8Ef030aB642B10820DB8F56",
        chainId: 1,
        decimals: 18,
        website: "https://app.balancer.fi/",
        description: "Instead of locking pure BAL, users obtain veBAL by locking 80/20 BAL/WETH Balancer Pool Tokens (BPTs). This ensures that even if a large portion of BAL tokens are locked, there is deep trading liquidity.",
        logoURI: "",
        documentation: "https://docs.balancer.fi/ecosystem/vebal-and-gauges/vebal"
      },
      SUSHI: {
        name: "SushiToken",
        symbol: "SUSHI",
        address: "0x6B3595068778DD592e39A122f4f5a5cF09C90fE2",
        chainId: 1,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x6B3595068778DD592e39A122f4f5a5cF09C90fE2.svg",
        website: "https://sushi.com/",
        description: "Sushi is the home of DeFi. Their community is building a comprehensive, decentralized trading platform for the future of finance. Swap, earn, stack yields, lend, borrow, leverage all on one decentralized, community driven platform.",
        documentation: "https://dev.sushi.com/"
      },
      ILV: {
        name: "Illuvium",
        symbol: "ILV",
        address: "0x767FE9EDC9E0dF98E07454847909b5E959D7ca0E",
        chainId: 1,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x767FE9EDC9E0dF98E07454847909b5E959D7ca0E.svg",
        website: "https://illuvium.io/",
        description: "A fully decentralized protocol, Illuvium represents a new age in gaming. It has been engineered from the ground-up to support the long-term sustainability of the Illuvium game and governance and provide players with a AAA-rated blockchain gaming experience. What makes Illuvium unique is that stakers receive regular distributions and can vote on everything from tokenomics related issues to the features in the game itself. With Illuvium, the power to define the project into the future is purposefully left to those who stake in the protocol.",
        documentation: "https://docs.illuvium.io/"
      },
      LDO: {
        name: "Lido DAO Token",
        symbol: "LDO",
        address: "0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32",
        chainId: 1,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32.svg",
        website: "https://stake.lido.fi/",
        documentation: "https://docs.lido.fi/",
        description: "Lido is a liquid staking solution for ETH 2.0 backed by industry-leading staking providers."
      },
      SYN: {
        name: "Synapse",
        symbol: "SYN",
        address: "0x0f2D719407FdBeFF09D87557AbB7232601FD9F29",
        chainId: 1,
        decimals: 18,
        logoURI: "https://tokens.pancakeswap.finance/images/0x0f2D719407FdBeFF09D87557AbB7232601FD9F29.svg",
        website: "https://synapseprotocol.com/landing",
        description: "Synapse is a universal interoperability protocol that enables secure cross-chain communication. Synapse connects blockchains by offering an extensible cross-chain messaging protocol that supports assets, smart contract calls, and more. By leveraging Synapse, blockchains can easily and securely interoperate with each other and developers can build truly cross-chain applications including cross-chain DEX, lending platforms, margining systems, derivatives markets, yield aggregators, and much more.",
        documentation: "https://docs.synapseprotocol.com/"
      },
      SOLID: {
        name: "Solidly",
        symbol: "SOLID",
        address: "0x777172D858dC1599914a1C4c6c9fC48c99a60990",
        chainId: 1,
        decimals: 18,
        logoURI: "",
        website: "https://solidly.com/",
        description: "Solidly is an AMM allowing fully decentralized token swapping with support for low slippage trades between pegged assets like stablecoins.",
        documentation: ""
      },
      SNX: {
        name: "Synthetix Network Token",
        symbol: "SNX",
        address: "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
        chainId: 1,
        decimals: 18,
        logoURI: "",
        website: "https://www.synthetix.io/",
        description: "Synthetix is the backbone for derivatives trading in DeFi, allowing anyone, anywhere to gain on-chain exposure to a vast range of assets",
        documentation: "https://docs.synthetix.io/synthetix-protocol/welcome-to-synthetix"
      },
      HEX: {
        name: "HEX",
        symbol: "HEX",
        address: "0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39",
        chainId: 1,
        decimals: 8,
        logoURI: "",
        website: "https://hex.com/",
        description: "HEX is the first high-yield blockchain certificate of deposit",
        documentation: "https://hex.com/faq/"
      },
      moSOLID: {
        name: "moSOLID: Tokenized veSOLID",
        symbol: "moSOLID",
        address: "0x848578e351D25B6Ec0d486E42677891521c3d743",
        chainId: 1,
        decimals: 18,
        logoURI: "",
        website: "https://alpha.mono.farm/home",
        description: "A tokenized version of veSOLID, moSOLID, is returned to the user at a 1:1 rate.",
        documentation: "https://docs.mono.farm/monolith-documentation/"
      },
      FTM: {
        name: "Fantom Token",
        symbol: "FTM",
        address: "0x4E15361FD6b4BB609Fa63C81A2be19d873717870",
        chainId: 1,
        decimals: 18,
        logoURI: "",
        website: "https://fantom.foundation/",
        description: "Fantom is a fast, high-throughput open-source smart contract platform for digital assets and dApps.",
        documentation: ""
      },
      DEUS: {
        name: "DEUS",
        symbol: "DEUS",
        address: "0xDE5ed76E7c05eC5e4572CfC88d1ACEA165109E44",
        chainId: 1,
        decimals: 18,
        website: "https://deus.finance/",
        description: "DEUS Finance Evolution is a marketplace of decentralized financial services. We provide the infrastructure for others to build financial instruments, such as synthetic stock trading platforms, options and futures trading, and more.",
        logoURI: "https://app.deus.finance/tokens/deus.svg",
        documentation: "https://docs.deus.finance/"
      },
      GEAR: {
        name: "Gearbox",
        symbol: "GEAR",
        address: "0xBa3335588D9403515223F109EdC4eB7269a9Ab5D",
        chainId: 1,
        decimals: 18,
        website: "https://gearbox.fi/",
        description: "Gearbox Protocol allows anyone to take DeFi-native leverage and then use it across various (DeFi & more) protocols. This enables you to compose your position as you want. You take leverage with Gearbox and then use it on other protocols you already love: Uniswap, Curve, Convex, Lido, etc. For example, you can leverage trade on Uniswap, leverage farm on Yearn, make delta-neutral strategies, hedge your exposure, get Leverage-as-a-Service for your structured product, and more... ",
        logoURI: "",
        documentation: "https://docs.gearbox.finance/"
      },
      TUSD: {
        name: "TrueUSD",
        symbol: "TUSD",
        address: "0x0000000000085d4780B73119b644AE5ecd22b376",
        chainId: 1,
        decimals: 18,
        website: "https://trueusd.com/",
        description: "The first regulated stablecoin fully backed by the US Dollar.",
        logoURI: ""
      },
      CLEV: {
        name: "CLever Token",
        symbol: "CLEV",
        address: "0x72953a5C32413614d24C29c84a66AE4B59581Bbf",
        chainId: 1,
        decimals: 18,
        website: "https://clever.aladdin.club/",
        description: "Deposit top quality tokens to CLever in high-yielding collateral strategies, then claim your future yields today. Your future yields can be farmed, re-deposited to create leverage, or used wherever you need them.",
        logoURI: "",
        documentation: "https://docs.aladdin.club/clever"
      },
      clevCVX: {
        name: "CLever CVX",
        symbol: "clevCVX",
        address: "0xf05e58fCeA29ab4dA01A495140B349F8410Ba904",
        chainId: 1,
        decimals: 18,
        website: "https://clever.aladdin.club/",
        description: "Deposit top quality tokens to CLever in high-yielding collateral strategies, then claim your future yields today. Your future yields can be farmed, re-deposited to create leverage, or used wherever you need them.",
        logoURI: "",
        documentation: "https://docs.aladdin.club/clever"
      },
      yCRV: {
        name: "Yearn: yCRV Token",
        symbol: "yCRV",
        address: "0xFCc5c47bE19d06BF83eB04298b026F81069ff65b",
        chainId: 1,
        decimals: 18,
        website: "https://yearn.finance/ycrv",
        description: "yCRV is Yearn's new and improved veCRV wrapper system designed to tokenize the different benefits of Yearn's veCRV position.",
        logoURI: "",
        documentation: "https://docs.yearn.finance/getting-started/products/ycrv/overview"
      },
      BLUR: {
        name: "Blur",
        symbol: "BLUR",
        address: "0x5283D291DBCF85356A21bA090E6db59121208b44",
        chainId: 1,
        decimals: 18,
        logoURI: "",
        website: "https://blur.io/",
        description: "Sweep NFTs across multiple marketplaces, snipe reveals faster than others, and manage your portfolio with advanced analytics. Zero fees."
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/ethereum/index.js
var require_ethereum = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/ethereum/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ethereum = void 0;
    var beefyfinance_1 = require_beefyfinance19();
    var balancer_1 = require_balancer3();
    var aura_1 = require_aura();
    var sushi_1 = require_sushi5();
    var synapse_1 = require_synapse2();
    var solidly_1 = require_solidly2();
    var tokens_1 = require_tokens19();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _ethereum = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance,
        balancer: balancer_1.balancer,
        aura: aura_1.aura,
        sushi: sushi_1.sushi,
        synapse: synapse_1.synapse,
        solidly: solidly_1.solidly
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.ethereum = _ethereum;
  }
});

// node_modules/blockchain-addressbook/build/address-book/canto/platforms/beefyfinance.js
var require_beefyfinance20 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/canto/platforms/beefyfinance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.beefyfinance = void 0;
    var treasuryMultisig = "0xF09d213EE8a8B159C884b276b86E08E26B3bfF75";
    var devMultisig = "0x1EFaC1e630939ee5422557D986add59E4996a67C";
    exports.beefyfinance = {
      devMultisig,
      treasuryMultisig,
      strategyOwner: "0xfcDD5a02C611ba6Fe2802f885281500EC95805d7",
      vaultOwner: "0xc8F3D9994bb1670F5f3d78eBaBC35FA8FdEEf8a2",
      keeper: "0x4fED5491693007f0CD49f4614FFC38Ab6A04B619",
      treasurer: treasuryMultisig,
      launchpoolOwner: devMultisig,
      rewardPool: treasuryMultisig,
      treasury: treasuryMultisig,
      beefyFeeRecipient: treasuryMultisig,
      multicall: "0xc34b9c9DBB39Be0Ef850170127A7b4283484f804",
      //bifiMaxiStrategy: '0x6207536011918F1A0D8a53Bc426f4Fd54df2E5a8',
      voter: "0x5e1caC103F943Cd84A1E92dAde4145664ebf692A",
      beefyFeeConfig: "0x09EF0e7b555599A9F810789FfF68Db8DBF4c51a0",
      vaultFactory: "0xC9F6b1B53E056fd04bE5a197ce4B2423d456B982"
      //wrapperFactory: '0x48bF3a071098a09C7D00379b4DBC69Ab6Da83a36',
    };
  }
});

// node_modules/blockchain-addressbook/build/address-book/canto/tokens/tokens.js
var require_tokens20 = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/canto/tokens/tokens.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tokens = void 0;
    var CANTO = {
      name: "Wrapped Canto",
      address: "0x826551890Dc65655a0Aceca109aB11AbDbD7a07B",
      symbol: "WCANTO",
      decimals: 18,
      chainId: 7700,
      website: "https://canto.io/",
      description: "Canto is a permissionless general-purpose blockchain running the Ethereum Virtual Machine (EVM). It was built to deliver on the promise of DeFi \u2013 that through a post-traditional financial movement, new systems will be made accessible, transparent, decentralized, and free.",
      logoURI: "",
      documentation: "https://docs.canto.io/"
    };
    var _tokens = {
      CANTO,
      WCANTO: CANTO,
      WNATIVE: CANTO,
      ATOM: {
        name: "Cosmos Token",
        symbol: "ATOM",
        address: "0xecEEEfCEE421D8062EF8d6b4D814efe4dc898265",
        chainId: 7700,
        decimals: 6,
        website: "https://cosmos.network/",
        description: "Cosmos is an ever-expanding ecosystem of interconnected apps and services, built for a decentralized future.",
        logoURI: ""
      },
      ETH: {
        name: "Ethereum",
        symbol: "ETH",
        address: "0x5FD55A1B9FC24967C4dB09C513C3BA0DFa7FF687",
        chainId: 7700,
        decimals: 18,
        logoURI: "",
        website: "https://ethereum.org/",
        description: "The native currency that flows within the Ethereum economy is called Ether (ETH). Ether is typically used to pay for transaction fees called Gas, and it is the base currency of the network."
      },
      NOTE: {
        name: "Note",
        symbol: "NOTE",
        address: "0x4e71A2E537B7f9D9413D3991D37958c0b5e1e503",
        chainId: 7700,
        decimals: 18,
        logoURI: "",
        website: "https://canto.io/",
        documentation: "https://docs.canto.io/overview/canto-unit-of-account-usdnote",
        description: "$NOTE is the unit of account on Canto. $NOTE is an over-collateralized currency with a value perpetually rebalanced toward $1 through an algorithmic interest rate policy. "
      },
      USDC: {
        name: "USD Coin",
        address: "0x80b5a32E4F032B2a058b4F29EC95EEfEEB87aDcd",
        symbol: "USDC",
        decimals: 6,
        website: "https://www.circle.com/usdc",
        description: "USDC is a fully collateralized US dollar stablecoin. USDC is issued by regulated financial institutions, backed by fully reserved assets, redeemable on a 1:1 basis for US dollars.",
        chainId: 7700,
        logoURI: "",
        documentation: "https://developers.circle.com/docs"
      },
      USDT: {
        name: "USDT",
        symbol: "USDT",
        address: "0xd567B3d7B8FE3C79a1AD8dA978812cfC4Fa05e75",
        chainId: 7700,
        decimals: 6,
        website: "https://tether.to/",
        description: "Tether is a stablecoin pegged to the US Dollar. A stablecoin is a type of cryptocurrency whose value is pegged to another fiat currency like the US Dollar or to a commodity like Gold.Tether is the first stablecoin to be created and it is the most popular stablecoin used in the ecosystem.",
        logoURI: ""
      }
    };
    exports.tokens = _tokens;
  }
});

// node_modules/blockchain-addressbook/build/address-book/canto/index.js
var require_canto = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/canto/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.canto = void 0;
    var beefyfinance_1 = require_beefyfinance20();
    var tokens_1 = require_tokens20();
    var convertSymbolTokenMapToAddressTokenMap_1 = require_convertSymbolTokenMapToAddressTokenMap();
    var _canto = {
      platforms: {
        beefyfinance: beefyfinance_1.beefyfinance
      },
      tokens: tokens_1.tokens,
      tokenAddressMap: convertSymbolTokenMapToAddressTokenMap_1.convertSymbolTokenMapToAddressTokenMap(tokens_1.tokens)
    };
    exports.canto = _canto;
  }
});

// node_modules/blockchain-addressbook/build/types/chainid.js
var require_chainid = __commonJS({
  "node_modules/blockchain-addressbook/build/types/chainid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChainId = void 0;
    var ChainId;
    (function(ChainId2) {
      ChainId2[ChainId2["bsc"] = 56] = "bsc";
      ChainId2[ChainId2["heco"] = 128] = "heco";
      ChainId2[ChainId2["polygon"] = 137] = "polygon";
      ChainId2[ChainId2["fantom"] = 250] = "fantom";
      ChainId2[ChainId2["avax"] = 43114] = "avax";
      ChainId2[ChainId2["one"] = 16666e5] = "one";
      ChainId2[ChainId2["arbitrum"] = 42161] = "arbitrum";
      ChainId2[ChainId2["celo"] = 42220] = "celo";
      ChainId2[ChainId2["moonriver"] = 1285] = "moonriver";
      ChainId2[ChainId2["cronos"] = 25] = "cronos";
      ChainId2[ChainId2["aurora"] = 1313161554] = "aurora";
      ChainId2[ChainId2["fuse"] = 122] = "fuse";
      ChainId2[ChainId2["metis"] = 1088] = "metis";
      ChainId2[ChainId2["moonbeam"] = 1284] = "moonbeam";
      ChainId2[ChainId2["sys"] = 57] = "sys";
      ChainId2[ChainId2["emerald"] = 42262] = "emerald";
      ChainId2[ChainId2["optimism"] = 10] = "optimism";
      ChainId2[ChainId2["kava"] = 2222] = "kava";
      ChainId2[ChainId2["ethereum"] = 1] = "ethereum";
      ChainId2[ChainId2["canto"] = 7700] = "canto";
    })(ChainId = exports.ChainId || (exports.ChainId = {}));
  }
});

// node_modules/blockchain-addressbook/build/address-book/index.js
var require_address_book = __commonJS({
  "node_modules/blockchain-addressbook/build/address-book/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addressBookByChainId = exports.addressBook = void 0;
    var polygon_1 = require_polygon();
    var bsc_1 = require_bsc();
    var avax_1 = require_avax();
    var fantom_1 = require_fantom();
    var heco_1 = require_heco();
    var one_1 = require_one();
    var arbitrum_1 = require_arbitrum();
    var celo_1 = require_celo();
    var moonriver_1 = require_moonriver();
    var cronos_1 = require_cronos();
    var aurora_1 = require_aurora();
    var fuse_1 = require_fuse();
    var metis_1 = require_metis();
    var moonbeam_1 = require_moonbeam();
    var sys_1 = require_sys();
    var emerald_1 = require_emerald();
    var optimism_1 = require_optimism();
    var kava_1 = require_kava();
    var ethereum_1 = require_ethereum();
    var canto_1 = require_canto();
    var chainid_1 = require_chainid();
    __exportStar(require_chainid(), exports);
    var _addressBook = {
      polygon: polygon_1.polygon,
      bsc: bsc_1.bsc,
      avax: avax_1.avax,
      fantom: fantom_1.fantom,
      heco: heco_1.heco,
      one: one_1.one,
      arbitrum: arbitrum_1.arbitrum,
      celo: celo_1.celo,
      moonriver: moonriver_1.moonriver,
      cronos: cronos_1.cronos,
      aurora: aurora_1.aurora,
      fuse: fuse_1.fuse,
      metis: metis_1.metis,
      moonbeam: moonbeam_1.moonbeam,
      sys: sys_1.sys,
      emerald: emerald_1.emerald,
      optimism: optimism_1.optimism,
      kava: kava_1.kava,
      ethereum: ethereum_1.ethereum,
      canto: canto_1.canto
    };
    var _addressBookByChainId = (_a = {}, _a[chainid_1.ChainId.polygon] = polygon_1.polygon, _a[chainid_1.ChainId.bsc] = bsc_1.bsc, _a[chainid_1.ChainId.avax] = avax_1.avax, _a[chainid_1.ChainId.fantom] = fantom_1.fantom, _a[chainid_1.ChainId.heco] = heco_1.heco, _a[chainid_1.ChainId.one] = one_1.one, _a[chainid_1.ChainId.arbitrum] = arbitrum_1.arbitrum, _a[chainid_1.ChainId.celo] = celo_1.celo, _a[chainid_1.ChainId.moonriver] = moonriver_1.moonriver, _a[chainid_1.ChainId.cronos] = cronos_1.cronos, _a[chainid_1.ChainId.aurora] = aurora_1.aurora, _a[chainid_1.ChainId.fuse] = fuse_1.fuse, _a[chainid_1.ChainId.metis] = metis_1.metis, _a[chainid_1.ChainId.moonbeam] = moonbeam_1.moonbeam, _a[chainid_1.ChainId.sys] = sys_1.sys, _a[chainid_1.ChainId.emerald] = emerald_1.emerald, _a[chainid_1.ChainId.optimism] = optimism_1.optimism, _a[chainid_1.ChainId.kava] = kava_1.kava, _a[chainid_1.ChainId.ethereum] = ethereum_1.ethereum, _a[chainid_1.ChainId.canto] = canto_1.canto, _a);
    exports.addressBook = _addressBook;
    exports.addressBookByChainId = _addressBookByChainId;
  }
});

// node_modules/p-queue/node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/p-queue/node_modules/eventemitter3/index.js"(exports, module) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__)
        prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
      else
        emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events();
      else
        delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0)
        return names;
      for (name in events = this._events) {
        if (has.call(events, name))
          names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once)
            this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix;
    EventEmitter2.EventEmitter = EventEmitter2;
    if ("undefined" !== typeof module) {
      module.exports = EventEmitter2;
    }
  }
});

// node_modules/@kargakis/ethers-multicall/dist/contract.js
var require_contract = __commonJS({
  "node_modules/@kargakis/ethers-multicall/dist/contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = void 0;
    var abi_1 = require_lib13();
    var Contract2 = (
      /** @class */
      function() {
        function Contract3(address, abi) {
          this._address = address;
          this._abi = toFragment(abi);
          this._functions = this._abi.filter(function(x) {
            return x.type === "function";
          }).map(function(x) {
            return abi_1.FunctionFragment.from(x);
          });
          var callFunctions = this._functions.filter(function(x) {
            return x.stateMutability === "pure" || x.stateMutability === "view";
          });
          for (var _i = 0, callFunctions_1 = callFunctions; _i < callFunctions_1.length; _i++) {
            var callFunction = callFunctions_1[_i];
            var name = callFunction.name;
            var getCall = makeCallFunction(this, name);
            if (!this[name]) {
              defineReadOnly(this, name, getCall);
            }
          }
        }
        Object.defineProperty(Contract3.prototype, "address", {
          get: function() {
            return this._address;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Contract3.prototype, "abi", {
          get: function() {
            return this._abi;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Contract3.prototype, "functions", {
          get: function() {
            return this._functions;
          },
          enumerable: false,
          configurable: true
        });
        return Contract3;
      }()
    );
    exports.Contract = Contract2;
    function toFragment(abi) {
      return abi.map(function(item) {
        return abi_1.Fragment.from(item);
      });
    }
    function makeCallFunction(contract, name) {
      return function() {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          params[_i] = arguments[_i];
        }
        var address = contract.address;
        var inputs = contract.functions.find(function(f) {
          return f.name === name;
        }).inputs;
        var outputs = contract.functions.find(function(f) {
          return f.name === name;
        }).outputs;
        return {
          contract: {
            address
          },
          name,
          inputs,
          outputs,
          params
        };
      };
    }
    function defineReadOnly(object, name, value) {
      Object.defineProperty(object, name, {
        enumerable: true,
        value,
        writable: false
      });
    }
  }
});

// node_modules/@kargakis/ethers-multicall/dist/abi.js
var require_abi = __commonJS({
  "node_modules/@kargakis/ethers-multicall/dist/abi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Abi = void 0;
    var abi_1 = require_lib13();
    var keccak256_1 = require_lib5();
    var strings_1 = require_lib9();
    var Abi = (
      /** @class */
      function() {
        function Abi2() {
        }
        Abi2.encode = function(name, inputs, params) {
          var functionSignature = getFunctionSignature(name, inputs);
          var functionHash = keccak256_1.keccak256(strings_1.toUtf8Bytes(functionSignature));
          var functionData = functionHash.substring(2, 10);
          var abiCoder = new abi_1.AbiCoder();
          var argumentString = abiCoder.encode(inputs, params);
          var argumentData = argumentString.substring(2);
          var inputData = "0x" + functionData + argumentData;
          return inputData;
        };
        Abi2.decode = function(outputs, data) {
          var abiCoder = new abi_1.AbiCoder();
          var params = abiCoder.decode(outputs, data);
          return params;
        };
        return Abi2;
      }()
    );
    exports.Abi = Abi;
    function getFunctionSignature(name, inputs) {
      var types = [];
      for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
        var input = inputs_1[_i];
        if (input.type === "tuple") {
          var tupleString = getFunctionSignature("", input.components);
          types.push(tupleString);
          continue;
        }
        if (input.type === "tuple[]") {
          var tupleString = getFunctionSignature("", input.components);
          var arrayString = tupleString + "[]";
          types.push(arrayString);
          continue;
        }
        types.push(input.type);
      }
      var typeString = types.join(",");
      var functionSignature = name + "(" + typeString + ")";
      return functionSignature;
    }
  }
});

// node_modules/@kargakis/ethers-multicall/dist/abi/multicall.js
var require_multicall = __commonJS({
  "node_modules/@kargakis/ethers-multicall/dist/abi/multicall.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.multicallAbi = void 0;
    exports.multicallAbi = [
      {
        constant: true,
        inputs: [
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address"
              },
              {
                internalType: "bool",
                name: "allowFailure",
                type: "bool"
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall3.Call3[]",
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "aggregate3",
        outputs: [
          {
            components: [
              {
                internalType: "bool",
                name: "success",
                type: "bool"
              },
              {
                internalType: "bytes",
                name: "returnData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall3.Result[]",
            name: "returnData",
            type: "tuple[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            components: [
              {
                internalType: "address",
                name: "target",
                type: "address"
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes"
              }
            ],
            internalType: "struct Multicall.Call[]",
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "aggregate",
        outputs: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          },
          {
            internalType: "bytes[]",
            name: "returnData",
            type: "bytes[]"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256"
          }
        ],
        name: "getBlockHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getCurrentBlockCoinbase",
        outputs: [
          {
            internalType: "address",
            name: "coinbase",
            type: "address"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getCurrentBlockDifficulty",
        outputs: [
          {
            internalType: "uint256",
            name: "difficulty",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getCurrentBlockGasLimit",
        outputs: [
          {
            internalType: "uint256",
            name: "gaslimit",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getCurrentBlockTimestamp",
        outputs: [
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          {
            internalType: "address",
            name: "addr",
            type: "address"
          }
        ],
        name: "getEthBalance",
        outputs: [
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "getLastBlockHash",
        outputs: [
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32"
          }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
  }
});

// node_modules/@kargakis/ethers-multicall/dist/call.js
var require_call = __commonJS({
  "node_modules/@kargakis/ethers-multicall/dist/call.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.all = void 0;
    var contracts_1 = require_lib18();
    var abi_1 = require_abi();
    var multicall_1 = require_multicall();
    function all(calls, multicallAddress, provider) {
      return __awaiter(this, void 0, void 0, function() {
        var multicall, callRequests, response, callCount, callResult, i, outputs, returnData, params, result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              multicall = new contracts_1.Contract(multicallAddress, multicall_1.multicallAbi, provider);
              callRequests = calls.map(function(call) {
                var callData = abi_1.Abi.encode(call.name, call.inputs, call.params);
                return {
                  target: call.contract.address,
                  callData
                };
              });
              return [4, multicall.aggregate(callRequests)];
            case 1:
              response = _a.sent();
              callCount = calls.length;
              callResult = [];
              for (i = 0; i < callCount; i++) {
                outputs = calls[i].outputs;
                returnData = response.returnData[i];
                params = abi_1.Abi.decode(outputs, returnData);
                result = outputs.length === 1 ? params[0] : params;
                callResult.push(result);
              }
              return [2, callResult];
          }
        });
      });
    }
    exports.all = all;
  }
});

// node_modules/@kargakis/ethers-multicall/dist/calls.js
var require_calls = __commonJS({
  "node_modules/@kargakis/ethers-multicall/dist/calls.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEthBalance = void 0;
    var multicall_1 = require_multicall();
    var contract_1 = require_contract();
    function getEthBalance(address, multicallAddress) {
      var multicall = new contract_1.Contract(multicallAddress, multicall_1.multicallAbi);
      return multicall.getEthBalance(address);
    }
    exports.getEthBalance = getEthBalance;
  }
});

// node_modules/@kargakis/ethers-multicall/dist/provider.js
var require_provider = __commonJS({
  "node_modules/@kargakis/ethers-multicall/dist/provider.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setMulticallAddress = exports.Provider = void 0;
    var call_1 = require_call();
    var calls_1 = require_calls();
    var Provider = (
      /** @class */
      function() {
        function Provider2(provider, chainId) {
          this._provider = provider;
          this._multicallAddress = getAddressForChainId(chainId);
        }
        Provider2.prototype.init = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _a;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  _a = this;
                  return [4, getAddress(this._provider)];
                case 1:
                  _a._multicallAddress = _b.sent();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Provider2.prototype.getEthBalance = function(address) {
          if (!this._provider) {
            throw new Error("Provider should be initialized before use.");
          }
          return calls_1.getEthBalance(address, this._multicallAddress);
        };
        Provider2.prototype.all = function(calls) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              if (!this._provider) {
                throw new Error("Provider should be initialized before use.");
              }
              return [2, call_1.all(calls, this._multicallAddress, this._provider)];
            });
          });
        };
        return Provider2;
      }()
    );
    exports.Provider = Provider;
    var multicallAddresses = {
      1: "0xcA11bde05977b3631167028862bE2a173976CA11",
      3: "0xcA11bde05977b3631167028862bE2a173976CA11",
      4: "0xcA11bde05977b3631167028862bE2a173976CA11",
      5: "0xcA11bde05977b3631167028862bE2a173976CA11",
      10: "0xcA11bde05977b3631167028862bE2a173976CA11",
      25: "0xcA11bde05977b3631167028862bE2a173976CA11",
      42: "0xcA11bde05977b3631167028862bE2a173976CA11",
      56: "0xcA11bde05977b3631167028862bE2a173976CA11",
      66: "0xcA11bde05977b3631167028862bE2a173976CA11",
      69: "0xcA11bde05977b3631167028862bE2a173976CA11",
      97: "0xcA11bde05977b3631167028862bE2a173976CA11",
      100: "0xcA11bde05977b3631167028862bE2a173976CA11",
      128: "0xcA11bde05977b3631167028862bE2a173976CA11",
      137: "0xcA11bde05977b3631167028862bE2a173976CA11",
      250: "0xcA11bde05977b3631167028862bE2a173976CA11",
      288: "0xcA11bde05977b3631167028862bE2a173976CA11",
      338: "0xcA11bde05977b3631167028862bE2a173976CA11",
      420: "0xcA11bde05977b3631167028862bE2a173976CA11",
      1088: "0xcA11bde05977b3631167028862bE2a173976CA11",
      1284: "0xcA11bde05977b3631167028862bE2a173976CA11",
      1285: "0xcA11bde05977b3631167028862bE2a173976CA11",
      1287: "0xcA11bde05977b3631167028862bE2a173976CA11",
      1337: "0xcA11bde05977b3631167028862bE2a173976CA11",
      4002: "0xcA11bde05977b3631167028862bE2a173976CA11",
      9e3: "0xcA11bde05977b3631167028862bE2a173976CA11",
      9001: "0xcA11bde05977b3631167028862bE2a173976CA11",
      42161: "0xcA11bde05977b3631167028862bE2a173976CA11",
      42220: "0xcA11bde05977b3631167028862bE2a173976CA11",
      43113: "0xcA11bde05977b3631167028862bE2a173976CA11",
      43114: "0xcA11bde05977b3631167028862bE2a173976CA11",
      44787: "0xcA11bde05977b3631167028862bE2a173976CA11",
      80001: "0xcA11bde05977b3631167028862bE2a173976CA11",
      421613: "0xcA11bde05977b3631167028862bE2a173976CA11",
      1313161554: "0xcA11bde05977b3631167028862bE2a173976CA11"
    };
    function setMulticallAddress(chainId, address) {
      multicallAddresses[chainId] = address;
    }
    exports.setMulticallAddress = setMulticallAddress;
    function getAddressForChainId(chainId) {
      return multicallAddresses[chainId];
    }
    function getAddress(provider) {
      return __awaiter(this, void 0, void 0, function() {
        var chainId;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, provider.getNetwork()];
            case 1:
              chainId = _a.sent().chainId;
              return [2, getAddressForChainId(chainId)];
          }
        });
      });
    }
  }
});

// node_modules/@kargakis/ethers-multicall/dist/index.js
var require_dist = __commonJS({
  "node_modules/@kargakis/ethers-multicall/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setMulticallAddress = exports.Provider = exports.Contract = void 0;
    var contract_1 = require_contract();
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function() {
      return contract_1.Contract;
    } });
    var provider_1 = require_provider();
    Object.defineProperty(exports, "Provider", { enumerable: true, get: function() {
      return provider_1.Provider;
    } });
    Object.defineProperty(exports, "setMulticallAddress", { enumerable: true, get: function() {
      return provider_1.setMulticallAddress;
    } });
    exports.default = { Contract: contract_1.Contract, Provider: provider_1.Provider, setMulticallAddress: provider_1.setMulticallAddress };
  }
});

// src/web3-functions/beefy-swapper/index.ts
var import_web3_functions_sdk = __toESM(require_lib33());
var import_ethers = __toESM(require_lib32());

// node_modules/ky/distribution/errors/HTTPError.js
var HTTPError = class extends Error {
  constructor(response, request, options) {
    const code = response.status || response.status === 0 ? response.status : "";
    const title = response.statusText || "";
    const status = `${code} ${title}`.trim();
    const reason = status ? `status code ${status}` : "an unknown error";
    super(`Request failed with ${reason}`);
    Object.defineProperty(this, "response", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "request", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "options", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.name = "HTTPError";
    this.response = response;
    this.request = request;
    this.options = options;
  }
};

// node_modules/ky/distribution/errors/TimeoutError.js
var TimeoutError = class extends Error {
  constructor(request) {
    super("Request timed out");
    Object.defineProperty(this, "request", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.name = "TimeoutError";
    this.request = request;
  }
};

// node_modules/ky/distribution/utils/is.js
var isObject = (value) => value !== null && typeof value === "object";

// node_modules/ky/distribution/utils/merge.js
var validateAndMerge = (...sources) => {
  for (const source of sources) {
    if ((!isObject(source) || Array.isArray(source)) && typeof source !== "undefined") {
      throw new TypeError("The `options` argument must be an object");
    }
  }
  return deepMerge({}, ...sources);
};
var mergeHeaders = (source1 = {}, source2 = {}) => {
  const result = new globalThis.Headers(source1);
  const isHeadersInstance = source2 instanceof globalThis.Headers;
  const source = new globalThis.Headers(source2);
  for (const [key, value] of source.entries()) {
    if (isHeadersInstance && value === "undefined" || value === void 0) {
      result.delete(key);
    } else {
      result.set(key, value);
    }
  }
  return result;
};
var deepMerge = (...sources) => {
  let returnValue = {};
  let headers = {};
  for (const source of sources) {
    if (Array.isArray(source)) {
      if (!Array.isArray(returnValue)) {
        returnValue = [];
      }
      returnValue = [...returnValue, ...source];
    } else if (isObject(source)) {
      for (let [key, value] of Object.entries(source)) {
        if (isObject(value) && key in returnValue) {
          value = deepMerge(returnValue[key], value);
        }
        returnValue = { ...returnValue, [key]: value };
      }
      if (isObject(source.headers)) {
        headers = mergeHeaders(headers, source.headers);
        returnValue.headers = headers;
      }
    }
  }
  return returnValue;
};

// node_modules/ky/distribution/core/constants.js
var supportsRequestStreams = (() => {
  let duplexAccessed = false;
  let hasContentType = false;
  const supportsReadableStream = typeof globalThis.ReadableStream === "function";
  if (supportsReadableStream) {
    hasContentType = new globalThis.Request("https://a.com", {
      body: new globalThis.ReadableStream(),
      method: "POST",
      // @ts-expect-error - Types are outdated.
      get duplex() {
        duplexAccessed = true;
        return "half";
      }
    }).headers.has("Content-Type");
  }
  return duplexAccessed && !hasContentType;
})();
var supportsAbortController = typeof globalThis.AbortController === "function";
var supportsResponseStreams = typeof globalThis.ReadableStream === "function";
var supportsFormData = typeof globalThis.FormData === "function";
var requestMethods = ["get", "post", "put", "patch", "head", "delete"];
var validate = () => void 0;
validate();
var responseTypes = {
  json: "application/json",
  text: "text/*",
  formData: "multipart/form-data",
  arrayBuffer: "*/*",
  blob: "*/*"
};
var maxSafeTimeout = 2147483647;
var stop = Symbol("stop");

// node_modules/ky/distribution/utils/normalize.js
var normalizeRequestMethod = (input) => requestMethods.includes(input) ? input.toUpperCase() : input;
var retryMethods = ["get", "put", "head", "delete", "options", "trace"];
var retryStatusCodes = [408, 413, 429, 500, 502, 503, 504];
var retryAfterStatusCodes = [413, 429, 503];
var defaultRetryOptions = {
  limit: 2,
  methods: retryMethods,
  statusCodes: retryStatusCodes,
  afterStatusCodes: retryAfterStatusCodes,
  maxRetryAfter: Number.POSITIVE_INFINITY
};
var normalizeRetryOptions = (retry = {}) => {
  if (typeof retry === "number") {
    return {
      ...defaultRetryOptions,
      limit: retry
    };
  }
  if (retry.methods && !Array.isArray(retry.methods)) {
    throw new Error("retry.methods must be an array");
  }
  if (retry.statusCodes && !Array.isArray(retry.statusCodes)) {
    throw new Error("retry.statusCodes must be an array");
  }
  return {
    ...defaultRetryOptions,
    ...retry,
    afterStatusCodes: retryAfterStatusCodes
  };
};

// node_modules/ky/distribution/utils/timeout.js
async function timeout(request, abortController, options) {
  return new Promise((resolve, reject) => {
    const timeoutId = setTimeout(() => {
      if (abortController) {
        abortController.abort();
      }
      reject(new TimeoutError(request));
    }, options.timeout);
    void options.fetch(request).then(resolve).catch(reject).then(() => {
      clearTimeout(timeoutId);
    });
  });
}

// node_modules/ky/distribution/errors/DOMException.js
var DOMException2 = globalThis.DOMException ?? Error;
function composeAbortError(signal) {
  return new DOMException2(signal?.reason ?? "The operation was aborted.");
}

// node_modules/ky/distribution/utils/delay.js
async function delay(ms, { signal }) {
  return new Promise((resolve, reject) => {
    if (signal) {
      if (signal.aborted) {
        reject(composeAbortError(signal));
        return;
      }
      signal.addEventListener("abort", handleAbort, { once: true });
    }
    function handleAbort() {
      reject(composeAbortError(signal));
      clearTimeout(timeoutId);
    }
    const timeoutId = setTimeout(() => {
      signal?.removeEventListener("abort", handleAbort);
      resolve();
    }, ms);
  });
}

// node_modules/ky/distribution/core/Ky.js
var Ky = class {
  // eslint-disable-next-line complexity
  constructor(input, options = {}) {
    Object.defineProperty(this, "request", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "abortController", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_retryCount", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "_input", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_options", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this._input = input;
    this._options = {
      // TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208
      credentials: this._input.credentials || "same-origin",
      ...options,
      headers: mergeHeaders(this._input.headers, options.headers),
      hooks: deepMerge({
        beforeRequest: [],
        beforeRetry: [],
        beforeError: [],
        afterResponse: []
      }, options.hooks),
      method: normalizeRequestMethod(options.method ?? this._input.method),
      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
      prefixUrl: String(options.prefixUrl || ""),
      retry: normalizeRetryOptions(options.retry),
      throwHttpErrors: options.throwHttpErrors !== false,
      timeout: typeof options.timeout === "undefined" ? 1e4 : options.timeout,
      fetch: options.fetch ?? globalThis.fetch.bind(globalThis)
    };
    if (typeof this._input !== "string" && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {
      throw new TypeError("`input` must be a string, URL, or Request");
    }
    if (this._options.prefixUrl && typeof this._input === "string") {
      if (this._input.startsWith("/")) {
        throw new Error("`input` must not begin with a slash when using `prefixUrl`");
      }
      if (!this._options.prefixUrl.endsWith("/")) {
        this._options.prefixUrl += "/";
      }
      this._input = this._options.prefixUrl + this._input;
    }
    if (supportsAbortController) {
      this.abortController = new globalThis.AbortController();
      if (this._options.signal) {
        const originalSignal = this._options.signal;
        this._options.signal.addEventListener("abort", () => {
          this.abortController.abort(originalSignal.reason);
        });
      }
      this._options.signal = this.abortController.signal;
    }
    this.request = new globalThis.Request(this._input, this._options);
    if (supportsRequestStreams) {
      this.request.duplex = "half";
    }
    if (this._options.searchParams) {
      const textSearchParams = typeof this._options.searchParams === "string" ? this._options.searchParams.replace(/^\?/, "") : new URLSearchParams(this._options.searchParams).toString();
      const searchParams = "?" + textSearchParams;
      const url = this.request.url.replace(/(?:\?.*?)?(?=#|$)/, searchParams);
      if ((supportsFormData && this._options.body instanceof globalThis.FormData || this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers["content-type"])) {
        this.request.headers.delete("content-type");
      }
      this.request = new globalThis.Request(new globalThis.Request(url, this.request), this._options);
    }
    if (this._options.json !== void 0) {
      this._options.body = JSON.stringify(this._options.json);
      this.request.headers.set("content-type", this._options.headers.get("content-type") ?? "application/json");
      this.request = new globalThis.Request(this.request, { body: this._options.body });
    }
  }
  // eslint-disable-next-line @typescript-eslint/promise-function-async
  static create(input, options) {
    const ky2 = new Ky(input, options);
    const fn = async () => {
      if (ky2._options.timeout > maxSafeTimeout) {
        throw new RangeError(`The \`timeout\` option cannot be greater than ${maxSafeTimeout}`);
      }
      await Promise.resolve();
      let response = await ky2._fetch();
      for (const hook of ky2._options.hooks.afterResponse) {
        const modifiedResponse = await hook(ky2.request, ky2._options, ky2._decorateResponse(response.clone()));
        if (modifiedResponse instanceof globalThis.Response) {
          response = modifiedResponse;
        }
      }
      ky2._decorateResponse(response);
      if (!response.ok && ky2._options.throwHttpErrors) {
        let error = new HTTPError(response, ky2.request, ky2._options);
        for (const hook of ky2._options.hooks.beforeError) {
          error = await hook(error);
        }
        throw error;
      }
      if (ky2._options.onDownloadProgress) {
        if (typeof ky2._options.onDownloadProgress !== "function") {
          throw new TypeError("The `onDownloadProgress` option must be a function");
        }
        if (!supportsResponseStreams) {
          throw new Error("Streams are not supported in your environment. `ReadableStream` is missing.");
        }
        return ky2._stream(response.clone(), ky2._options.onDownloadProgress);
      }
      return response;
    };
    const isRetriableMethod = ky2._options.retry.methods.includes(ky2.request.method.toLowerCase());
    const result = isRetriableMethod ? ky2._retry(fn) : fn();
    for (const [type, mimeType] of Object.entries(responseTypes)) {
      result[type] = async () => {
        ky2.request.headers.set("accept", ky2.request.headers.get("accept") || mimeType);
        const awaitedResult = await result;
        const response = awaitedResult.clone();
        if (type === "json") {
          if (response.status === 204) {
            return "";
          }
          const arrayBuffer = await response.clone().arrayBuffer();
          const responseSize = arrayBuffer.byteLength;
          if (responseSize === 0) {
            return "";
          }
          if (options.parseJson) {
            return options.parseJson(await response.text());
          }
        }
        return response[type]();
      };
    }
    return result;
  }
  _calculateRetryDelay(error) {
    this._retryCount++;
    if (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {
      if (error instanceof HTTPError) {
        if (!this._options.retry.statusCodes.includes(error.response.status)) {
          return 0;
        }
        const retryAfter = error.response.headers.get("Retry-After");
        if (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {
          let after = Number(retryAfter);
          if (Number.isNaN(after)) {
            after = Date.parse(retryAfter) - Date.now();
          } else {
            after *= 1e3;
          }
          if (typeof this._options.retry.maxRetryAfter !== "undefined" && after > this._options.retry.maxRetryAfter) {
            return 0;
          }
          return after;
        }
        if (error.response.status === 413) {
          return 0;
        }
      }
      const BACKOFF_FACTOR = 0.3;
      return BACKOFF_FACTOR * 2 ** (this._retryCount - 1) * 1e3;
    }
    return 0;
  }
  _decorateResponse(response) {
    if (this._options.parseJson) {
      response.json = async () => this._options.parseJson(await response.text());
    }
    return response;
  }
  async _retry(fn) {
    try {
      return await fn();
    } catch (error) {
      const ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);
      if (ms !== 0 && this._retryCount > 0) {
        await delay(ms, { signal: this._options.signal });
        for (const hook of this._options.hooks.beforeRetry) {
          const hookResult = await hook({
            request: this.request,
            options: this._options,
            error,
            retryCount: this._retryCount
          });
          if (hookResult === stop) {
            return;
          }
        }
        return this._retry(fn);
      }
      throw error;
    }
  }
  async _fetch() {
    for (const hook of this._options.hooks.beforeRequest) {
      const result = await hook(this.request, this._options);
      if (result instanceof Request) {
        this.request = result;
        break;
      }
      if (result instanceof Response) {
        return result;
      }
    }
    if (this._options.timeout === false) {
      return this._options.fetch(this.request.clone());
    }
    return timeout(this.request.clone(), this.abortController, this._options);
  }
  /* istanbul ignore next */
  _stream(response, onDownloadProgress) {
    const totalBytes = Number(response.headers.get("content-length")) || 0;
    let transferredBytes = 0;
    if (response.status === 204) {
      if (onDownloadProgress) {
        onDownloadProgress({ percent: 1, totalBytes, transferredBytes }, new Uint8Array());
      }
      return new globalThis.Response(null, {
        status: response.status,
        statusText: response.statusText,
        headers: response.headers
      });
    }
    return new globalThis.Response(new globalThis.ReadableStream({
      async start(controller) {
        const reader = response.body.getReader();
        if (onDownloadProgress) {
          onDownloadProgress({ percent: 0, transferredBytes: 0, totalBytes }, new Uint8Array());
        }
        async function read() {
          const { done, value } = await reader.read();
          if (done) {
            controller.close();
            return;
          }
          if (onDownloadProgress) {
            transferredBytes += value.byteLength;
            const percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;
            onDownloadProgress({ percent, transferredBytes, totalBytes }, value);
          }
          controller.enqueue(value);
          await read();
        }
        await read();
      }
    }), {
      status: response.status,
      statusText: response.statusText,
      headers: response.headers
    });
  }
};

// node_modules/ky/distribution/index.js
var createInstance = (defaults) => {
  const ky2 = (input, options) => Ky.create(input, validateAndMerge(defaults, options));
  for (const method of requestMethods) {
    ky2[method] = (input, options) => Ky.create(input, validateAndMerge(defaults, options, { method }));
  }
  ky2.create = (newDefaults) => createInstance(validateAndMerge(newDefaults));
  ky2.extend = (newDefaults) => createInstance(validateAndMerge(defaults, newDefaults));
  ky2.stop = stop;
  return ky2;
};
var ky = createInstance();
var distribution_default = ky;

// src/web3-functions/beefy-swapper/index.ts
var import_blockchain_addressbook = __toESM(require_address_book());

// node_modules/p-queue/dist/index.js
var import_eventemitter3 = __toESM(require_eventemitter3(), 1);

// node_modules/p-timeout/index.js
var TimeoutError2 = class extends Error {
  constructor(message) {
    super(message);
    this.name = "TimeoutError";
  }
};
var AbortError = class extends Error {
  constructor(message) {
    super();
    this.name = "AbortError";
    this.message = message;
  }
};
var getDOMException = (errorMessage) => globalThis.DOMException === void 0 ? new AbortError(errorMessage) : new DOMException(errorMessage);
var getAbortedReason = (signal) => {
  const reason = signal.reason === void 0 ? getDOMException("This operation was aborted.") : signal.reason;
  return reason instanceof Error ? reason : getDOMException(reason);
};
function pTimeout(promise, milliseconds, fallback, options) {
  let timer;
  const cancelablePromise = new Promise((resolve, reject) => {
    if (typeof milliseconds !== "number" || Math.sign(milliseconds) !== 1) {
      throw new TypeError(`Expected \`milliseconds\` to be a positive number, got \`${milliseconds}\``);
    }
    if (milliseconds === Number.POSITIVE_INFINITY) {
      resolve(promise);
      return;
    }
    options = {
      customTimers: { setTimeout, clearTimeout },
      ...options
    };
    if (options.signal) {
      const { signal } = options;
      if (signal.aborted) {
        reject(getAbortedReason(signal));
      }
      signal.addEventListener("abort", () => {
        reject(getAbortedReason(signal));
      });
    }
    timer = options.customTimers.setTimeout.call(void 0, () => {
      if (typeof fallback === "function") {
        try {
          resolve(fallback());
        } catch (error) {
          reject(error);
        }
        return;
      }
      const message = typeof fallback === "string" ? fallback : `Promise timed out after ${milliseconds} milliseconds`;
      const timeoutError = fallback instanceof Error ? fallback : new TimeoutError2(message);
      if (typeof promise.cancel === "function") {
        promise.cancel();
      }
      reject(timeoutError);
    }, milliseconds);
    (async () => {
      try {
        resolve(await promise);
      } catch (error) {
        reject(error);
      } finally {
        options.customTimers.clearTimeout.call(void 0, timer);
      }
    })();
  });
  cancelablePromise.clear = () => {
    clearTimeout(timer);
    timer = void 0;
  };
  return cancelablePromise;
}

// node_modules/p-queue/dist/lower-bound.js
function lowerBound(array, value, comparator) {
  let first = 0;
  let count = array.length;
  while (count > 0) {
    const step = Math.trunc(count / 2);
    let it = first + step;
    if (comparator(array[it], value) <= 0) {
      first = ++it;
      count -= step + 1;
    } else {
      count = step;
    }
  }
  return first;
}

// node_modules/p-queue/dist/priority-queue.js
var __classPrivateFieldGet = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PriorityQueue_queue;
var PriorityQueue = class {
  constructor() {
    _PriorityQueue_queue.set(this, []);
  }
  enqueue(run, options) {
    options = {
      priority: 0,
      ...options
    };
    const element = {
      priority: options.priority,
      run
    };
    if (this.size && __classPrivateFieldGet(this, _PriorityQueue_queue, "f")[this.size - 1].priority >= options.priority) {
      __classPrivateFieldGet(this, _PriorityQueue_queue, "f").push(element);
      return;
    }
    const index = lowerBound(__classPrivateFieldGet(this, _PriorityQueue_queue, "f"), element, (a, b) => b.priority - a.priority);
    __classPrivateFieldGet(this, _PriorityQueue_queue, "f").splice(index, 0, element);
  }
  dequeue() {
    const item = __classPrivateFieldGet(this, _PriorityQueue_queue, "f").shift();
    return item === null || item === void 0 ? void 0 : item.run;
  }
  filter(options) {
    return __classPrivateFieldGet(this, _PriorityQueue_queue, "f").filter((element) => element.priority === options.priority).map((element) => element.run);
  }
  get size() {
    return __classPrivateFieldGet(this, _PriorityQueue_queue, "f").length;
  }
};
_PriorityQueue_queue = /* @__PURE__ */ new WeakMap();

// node_modules/p-queue/dist/index.js
var __classPrivateFieldSet = function(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet2 = function(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PQueue_instances;
var _PQueue_carryoverConcurrencyCount;
var _PQueue_isIntervalIgnored;
var _PQueue_intervalCount;
var _PQueue_intervalCap;
var _PQueue_interval;
var _PQueue_intervalEnd;
var _PQueue_intervalId;
var _PQueue_timeoutId;
var _PQueue_queue;
var _PQueue_queueClass;
var _PQueue_pending;
var _PQueue_concurrency;
var _PQueue_isPaused;
var _PQueue_throwOnTimeout;
var _PQueue_doesIntervalAllowAnother_get;
var _PQueue_doesConcurrentAllowAnother_get;
var _PQueue_next;
var _PQueue_onResumeInterval;
var _PQueue_isIntervalPaused_get;
var _PQueue_tryToStartAnother;
var _PQueue_initializeIntervalIfNeeded;
var _PQueue_onInterval;
var _PQueue_processQueue;
var _PQueue_throwOnAbort;
var _PQueue_onEvent;
var AbortError2 = class extends Error {
};
var PQueue = class extends import_eventemitter3.default {
  // TODO: The `throwOnTimeout` option should affect the return types of `add()` and `addAll()`
  constructor(options) {
    var _a, _b, _c, _d;
    super();
    _PQueue_instances.add(this);
    _PQueue_carryoverConcurrencyCount.set(this, void 0);
    _PQueue_isIntervalIgnored.set(this, void 0);
    _PQueue_intervalCount.set(this, 0);
    _PQueue_intervalCap.set(this, void 0);
    _PQueue_interval.set(this, void 0);
    _PQueue_intervalEnd.set(this, 0);
    _PQueue_intervalId.set(this, void 0);
    _PQueue_timeoutId.set(this, void 0);
    _PQueue_queue.set(this, void 0);
    _PQueue_queueClass.set(this, void 0);
    _PQueue_pending.set(this, 0);
    _PQueue_concurrency.set(this, void 0);
    _PQueue_isPaused.set(this, void 0);
    _PQueue_throwOnTimeout.set(this, void 0);
    Object.defineProperty(this, "timeout", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    options = {
      carryoverConcurrencyCount: false,
      intervalCap: Number.POSITIVE_INFINITY,
      interval: 0,
      concurrency: Number.POSITIVE_INFINITY,
      autoStart: true,
      queueClass: PriorityQueue,
      ...options
    };
    if (!(typeof options.intervalCap === "number" && options.intervalCap >= 1)) {
      throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${(_b = (_a = options.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ""}\` (${typeof options.intervalCap})`);
    }
    if (options.interval === void 0 || !(Number.isFinite(options.interval) && options.interval >= 0)) {
      throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ""}\` (${typeof options.interval})`);
    }
    __classPrivateFieldSet(this, _PQueue_carryoverConcurrencyCount, options.carryoverConcurrencyCount, "f");
    __classPrivateFieldSet(this, _PQueue_isIntervalIgnored, options.intervalCap === Number.POSITIVE_INFINITY || options.interval === 0, "f");
    __classPrivateFieldSet(this, _PQueue_intervalCap, options.intervalCap, "f");
    __classPrivateFieldSet(this, _PQueue_interval, options.interval, "f");
    __classPrivateFieldSet(this, _PQueue_queue, new options.queueClass(), "f");
    __classPrivateFieldSet(this, _PQueue_queueClass, options.queueClass, "f");
    this.concurrency = options.concurrency;
    this.timeout = options.timeout;
    __classPrivateFieldSet(this, _PQueue_throwOnTimeout, options.throwOnTimeout === true, "f");
    __classPrivateFieldSet(this, _PQueue_isPaused, options.autoStart === false, "f");
  }
  get concurrency() {
    return __classPrivateFieldGet2(this, _PQueue_concurrency, "f");
  }
  set concurrency(newConcurrency) {
    if (!(typeof newConcurrency === "number" && newConcurrency >= 1)) {
      throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${newConcurrency}\` (${typeof newConcurrency})`);
    }
    __classPrivateFieldSet(this, _PQueue_concurrency, newConcurrency, "f");
    __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_processQueue).call(this);
  }
  async add(function_, options = {}) {
    options = {
      timeout: this.timeout,
      throwOnTimeout: __classPrivateFieldGet2(this, _PQueue_throwOnTimeout, "f"),
      ...options
    };
    return new Promise((resolve, reject) => {
      __classPrivateFieldGet2(this, _PQueue_queue, "f").enqueue(async () => {
        var _a;
        var _b, _c;
        __classPrivateFieldSet(this, _PQueue_pending, (_b = __classPrivateFieldGet2(this, _PQueue_pending, "f"), _b++, _b), "f");
        __classPrivateFieldSet(this, _PQueue_intervalCount, (_c = __classPrivateFieldGet2(this, _PQueue_intervalCount, "f"), _c++, _c), "f");
        try {
          if ((_a = options.signal) === null || _a === void 0 ? void 0 : _a.aborted) {
            throw new AbortError2("The task was aborted.");
          }
          let operation = function_({ signal: options.signal });
          if (options.timeout) {
            operation = pTimeout(Promise.resolve(operation), options.timeout);
          }
          if (options.signal) {
            operation = Promise.race([operation, __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_throwOnAbort).call(this, options.signal)]);
          }
          const result = await operation;
          resolve(result);
          this.emit("completed", result);
        } catch (error) {
          if (error instanceof TimeoutError2 && !options.throwOnTimeout) {
            resolve();
            return;
          }
          reject(error);
          this.emit("error", error);
        } finally {
          __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_next).call(this);
        }
      }, options);
      this.emit("add");
      __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_tryToStartAnother).call(this);
    });
  }
  async addAll(functions, options) {
    return Promise.all(functions.map(async (function_) => this.add(function_, options)));
  }
  /**
  Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)
  */
  start() {
    if (!__classPrivateFieldGet2(this, _PQueue_isPaused, "f")) {
      return this;
    }
    __classPrivateFieldSet(this, _PQueue_isPaused, false, "f");
    __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_processQueue).call(this);
    return this;
  }
  /**
  Put queue execution on hold.
  */
  pause() {
    __classPrivateFieldSet(this, _PQueue_isPaused, true, "f");
  }
  /**
  Clear the queue.
  */
  clear() {
    __classPrivateFieldSet(this, _PQueue_queue, new (__classPrivateFieldGet2(this, _PQueue_queueClass, "f"))(), "f");
  }
  /**
      Can be called multiple times. Useful if you for example add additional items at a later time.
  
      @returns A promise that settles when the queue becomes empty.
      */
  async onEmpty() {
    if (__classPrivateFieldGet2(this, _PQueue_queue, "f").size === 0) {
      return;
    }
    await __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_onEvent).call(this, "empty");
  }
  /**
      @returns A promise that settles when the queue size is less than the given limit: `queue.size < limit`.
  
      If you want to avoid having the queue grow beyond a certain size you can `await queue.onSizeLessThan()` before adding a new item.
  
      Note that this only limits the number of items waiting to start. There could still be up to `concurrency` jobs already running that this call does not include in its calculation.
      */
  async onSizeLessThan(limit) {
    if (__classPrivateFieldGet2(this, _PQueue_queue, "f").size < limit) {
      return;
    }
    await __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_onEvent).call(this, "next", () => __classPrivateFieldGet2(this, _PQueue_queue, "f").size < limit);
  }
  /**
      The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.
  
      @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.
      */
  async onIdle() {
    if (__classPrivateFieldGet2(this, _PQueue_pending, "f") === 0 && __classPrivateFieldGet2(this, _PQueue_queue, "f").size === 0) {
      return;
    }
    await __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_onEvent).call(this, "idle");
  }
  /**
  Size of the queue, the number of queued items waiting to run.
  */
  get size() {
    return __classPrivateFieldGet2(this, _PQueue_queue, "f").size;
  }
  /**
      Size of the queue, filtered by the given options.
  
      For example, this can be used to find the number of items remaining in the queue with a specific priority level.
      */
  sizeBy(options) {
    return __classPrivateFieldGet2(this, _PQueue_queue, "f").filter(options).length;
  }
  /**
  Number of running items (no longer in the queue).
  */
  get pending() {
    return __classPrivateFieldGet2(this, _PQueue_pending, "f");
  }
  /**
  Whether the queue is currently paused.
  */
  get isPaused() {
    return __classPrivateFieldGet2(this, _PQueue_isPaused, "f");
  }
};
_PQueue_carryoverConcurrencyCount = /* @__PURE__ */ new WeakMap(), _PQueue_isIntervalIgnored = /* @__PURE__ */ new WeakMap(), _PQueue_intervalCount = /* @__PURE__ */ new WeakMap(), _PQueue_intervalCap = /* @__PURE__ */ new WeakMap(), _PQueue_interval = /* @__PURE__ */ new WeakMap(), _PQueue_intervalEnd = /* @__PURE__ */ new WeakMap(), _PQueue_intervalId = /* @__PURE__ */ new WeakMap(), _PQueue_timeoutId = /* @__PURE__ */ new WeakMap(), _PQueue_queue = /* @__PURE__ */ new WeakMap(), _PQueue_queueClass = /* @__PURE__ */ new WeakMap(), _PQueue_pending = /* @__PURE__ */ new WeakMap(), _PQueue_concurrency = /* @__PURE__ */ new WeakMap(), _PQueue_isPaused = /* @__PURE__ */ new WeakMap(), _PQueue_throwOnTimeout = /* @__PURE__ */ new WeakMap(), _PQueue_instances = /* @__PURE__ */ new WeakSet(), _PQueue_doesIntervalAllowAnother_get = function _PQueue_doesIntervalAllowAnother_get2() {
  return __classPrivateFieldGet2(this, _PQueue_isIntervalIgnored, "f") || __classPrivateFieldGet2(this, _PQueue_intervalCount, "f") < __classPrivateFieldGet2(this, _PQueue_intervalCap, "f");
}, _PQueue_doesConcurrentAllowAnother_get = function _PQueue_doesConcurrentAllowAnother_get2() {
  return __classPrivateFieldGet2(this, _PQueue_pending, "f") < __classPrivateFieldGet2(this, _PQueue_concurrency, "f");
}, _PQueue_next = function _PQueue_next2() {
  var _a;
  __classPrivateFieldSet(this, _PQueue_pending, (_a = __classPrivateFieldGet2(this, _PQueue_pending, "f"), _a--, _a), "f");
  __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_tryToStartAnother).call(this);
  this.emit("next");
}, _PQueue_onResumeInterval = function _PQueue_onResumeInterval2() {
  __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_onInterval).call(this);
  __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_initializeIntervalIfNeeded).call(this);
  __classPrivateFieldSet(this, _PQueue_timeoutId, void 0, "f");
}, _PQueue_isIntervalPaused_get = function _PQueue_isIntervalPaused_get2() {
  const now = Date.now();
  if (__classPrivateFieldGet2(this, _PQueue_intervalId, "f") === void 0) {
    const delay2 = __classPrivateFieldGet2(this, _PQueue_intervalEnd, "f") - now;
    if (delay2 < 0) {
      __classPrivateFieldSet(this, _PQueue_intervalCount, __classPrivateFieldGet2(this, _PQueue_carryoverConcurrencyCount, "f") ? __classPrivateFieldGet2(this, _PQueue_pending, "f") : 0, "f");
    } else {
      if (__classPrivateFieldGet2(this, _PQueue_timeoutId, "f") === void 0) {
        __classPrivateFieldSet(this, _PQueue_timeoutId, setTimeout(() => {
          __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_onResumeInterval).call(this);
        }, delay2), "f");
      }
      return true;
    }
  }
  return false;
}, _PQueue_tryToStartAnother = function _PQueue_tryToStartAnother2() {
  if (__classPrivateFieldGet2(this, _PQueue_queue, "f").size === 0) {
    if (__classPrivateFieldGet2(this, _PQueue_intervalId, "f")) {
      clearInterval(__classPrivateFieldGet2(this, _PQueue_intervalId, "f"));
    }
    __classPrivateFieldSet(this, _PQueue_intervalId, void 0, "f");
    this.emit("empty");
    if (__classPrivateFieldGet2(this, _PQueue_pending, "f") === 0) {
      this.emit("idle");
    }
    return false;
  }
  if (!__classPrivateFieldGet2(this, _PQueue_isPaused, "f")) {
    const canInitializeInterval = !__classPrivateFieldGet2(this, _PQueue_instances, "a", _PQueue_isIntervalPaused_get);
    if (__classPrivateFieldGet2(this, _PQueue_instances, "a", _PQueue_doesIntervalAllowAnother_get) && __classPrivateFieldGet2(this, _PQueue_instances, "a", _PQueue_doesConcurrentAllowAnother_get)) {
      const job = __classPrivateFieldGet2(this, _PQueue_queue, "f").dequeue();
      if (!job) {
        return false;
      }
      this.emit("active");
      job();
      if (canInitializeInterval) {
        __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_initializeIntervalIfNeeded).call(this);
      }
      return true;
    }
  }
  return false;
}, _PQueue_initializeIntervalIfNeeded = function _PQueue_initializeIntervalIfNeeded2() {
  if (__classPrivateFieldGet2(this, _PQueue_isIntervalIgnored, "f") || __classPrivateFieldGet2(this, _PQueue_intervalId, "f") !== void 0) {
    return;
  }
  __classPrivateFieldSet(this, _PQueue_intervalId, setInterval(() => {
    __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_onInterval).call(this);
  }, __classPrivateFieldGet2(this, _PQueue_interval, "f")), "f");
  __classPrivateFieldSet(this, _PQueue_intervalEnd, Date.now() + __classPrivateFieldGet2(this, _PQueue_interval, "f"), "f");
}, _PQueue_onInterval = function _PQueue_onInterval2() {
  if (__classPrivateFieldGet2(this, _PQueue_intervalCount, "f") === 0 && __classPrivateFieldGet2(this, _PQueue_pending, "f") === 0 && __classPrivateFieldGet2(this, _PQueue_intervalId, "f")) {
    clearInterval(__classPrivateFieldGet2(this, _PQueue_intervalId, "f"));
    __classPrivateFieldSet(this, _PQueue_intervalId, void 0, "f");
  }
  __classPrivateFieldSet(this, _PQueue_intervalCount, __classPrivateFieldGet2(this, _PQueue_carryoverConcurrencyCount, "f") ? __classPrivateFieldGet2(this, _PQueue_pending, "f") : 0, "f");
  __classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_processQueue).call(this);
}, _PQueue_processQueue = function _PQueue_processQueue2() {
  while (__classPrivateFieldGet2(this, _PQueue_instances, "m", _PQueue_tryToStartAnother).call(this)) {
  }
}, _PQueue_throwOnAbort = async function _PQueue_throwOnAbort2(signal) {
  return new Promise((_resolve, reject) => {
    signal.addEventListener("abort", () => {
      reject(new AbortError2("The task was aborted."));
    }, { once: true });
  });
}, _PQueue_onEvent = async function _PQueue_onEvent2(event, filter) {
  return new Promise((resolve) => {
    const listener = () => {
      if (filter && !filter()) {
        return;
      }
      this.off(event, listener);
      resolve();
    };
    this.on(event, listener);
  });
};

// src/web3-functions/beefy-swapper/index.ts
var import_ethers_multicall = __toESM(require_dist());
var SWAPPER_ABI = [
  {
    inputs: [],
    name: "settings",
    outputs: [
      {
        internalType: "uint256",
        name: "gasPriceLimit",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "threshold",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_tokens",
        type: "address[]"
      },
      {
        internalType: "bytes[]",
        name: "_data",
        type: "bytes[]"
      }
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var ERC_20 = [
  {
    constant: true,
    inputs: [
      {
        name: "_owner",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        name: "balance",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];
var SWAP_MIN_INPUT_AMOUNT = 1e3;
var SWAP_LEAVE = 1;
var SWAP_SLIPPAGE = 1;
var MAX_SWAPS_PER_TX = 3;
var oneInchQueue = new PQueue({
  concurrency: 1,
  intervalCap: 1,
  interval: 1e3,
  carryoverConcurrencyCount: true,
  autoStart: true,
  timeout: 10 * 1e3,
  throwOnTimeout: true
});
import_web3_functions_sdk.Web3Function.onRun(async (context) => {
  const { userArgs, gelatoArgs, provider } = context;
  const swapperAddress = await context.secrets.get("SWAPPER");
  const swapperInterface = new import_ethers.utils.Interface(SWAPPER_ABI);
  const settings = await fetchSettings(swapperAddress, swapperInterface, provider);
  if (!settings) {
    return { canExec: false, message: "Error fetching settings" };
  }
  const { gasPriceLimit, threshold } = settings;
  if (gasPriceLimit.gt(0) && gelatoArgs.gasPrice.gt(gasPriceLimit)) {
    return {
      canExec: false,
      message: `Gas price too high: ${gelatoArgs.gasPrice.toString()} > ${gasPriceLimit.toString()}`
    };
  }
  const TARGET_TOKEN = "USDC";
  const chainId = 10;
  const chainTokensById = import_blockchain_addressbook.addressBookByChainId[chainId].tokens;
  const targetToken = chainTokensById[TARGET_TOKEN];
  const sourceTokens = uniqBy(Object.values(chainTokensById), (t) => t.address).filter(
    (t) => t.address !== targetToken.address
  );
  const tokensWithBalance = (await fetchTokensWithBalance(sourceTokens, provider, chainId, swapperAddress)).filter((tokenAmount) => tokenAmount.amount.gte(SWAP_MIN_INPUT_AMOUNT)).map((tokenAmount) => {
    tokenAmount.amount = tokenAmount.amount.sub(SWAP_LEAVE);
    return tokenAmount;
  });
  if (tokensWithBalance.length === 0) {
    return {
      canExec: false,
      message: `No tokens with balance >=${SWAP_MIN_INPUT_AMOUNT}wei to swap`
    };
  }
  const tokensToCheck = sampleSize(tokensWithBalance, MAX_SWAPS_PER_TX);
  console.log(`Quoting ${tokensToCheck.map((twb) => twb.token.symbol).join(", ")} of ${tokensWithBalance.map((twb) => twb.token.symbol).join(", ")}`);
  const swapInputAddresses = [];
  const swapData = [];
  for (const tokenWithBalance of tokensToCheck) {
    const swap = await fetchSwap(
      chainId,
      swapperAddress,
      tokenWithBalance,
      targetToken,
      SWAP_SLIPPAGE
    );
    if (swap) {
      const outputAmount = import_ethers.BigNumber.from(swap.toTokenAmount);
      if (outputAmount.gt(threshold)) {
        swapInputAddresses.push(tokenWithBalance.token.address);
        swapData.push(swap.tx.data);
        if (swapData.length >= MAX_SWAPS_PER_TX) {
          break;
        }
      }
    }
  }
  if (swapData.length == 0) {
    return { canExec: false, message: "No tokens over swappable threshold" };
  }
  return {
    canExec: true,
    callData: swapperInterface.encodeFunctionData("swap", [swapInputAddresses, swapData])
  };
});
async function fetchSettings(swapperAddress, swapperInterface, provider) {
  try {
    const swapperContract = new import_ethers.Contract(swapperAddress, swapperInterface, provider);
    const settings = await swapperContract.settings();
    if (settings && "gasPriceLimit" in settings && "threshold" in settings) {
      return settings;
    }
  } catch {
  }
  return null;
}
function shuffle(items) {
  return [...items].sort(() => Math.random() - 0.5);
}
function sampleSize(items, n) {
  return shuffle(items).slice(0, n);
}
function uniqBy(items, keyFn) {
  return [...new Map(items.map((item) => [keyFn(item), item])).values()];
}
async function fetchSwap(chainId, fromAddress, input, output, slippage = 1) {
  try {
    const params = new URLSearchParams({
      amount: input.amount.toString(),
      fromTokenAddress: input.token.address,
      toTokenAddress: output.address,
      fromAddress,
      slippage: slippage.toString(),
      disableEstimate: "true"
    });
    const url = `https://api.1inch.io/v5.0/${chainId}/swap?${params.toString()}`;
    return await oneInchQueue.add(
      () => distribution_default.get(url, { timeout: 5e3, retry: 0 }).json()
    );
  } catch (err) {
    console.error(err);
    return null;
  }
}
async function fetchTokensWithBalance(tokens, provider, chainId, swapperAddress) {
  const multicall = new import_ethers_multicall.Provider(provider, chainId);
  const calls = tokens.map((token) => {
    const tokenContract = new import_ethers_multicall.Contract(token.address, ERC_20);
    return tokenContract.balanceOf(swapperAddress);
  });
  const results = await multicall.all(calls);
  return tokens.map((token, i) => ({
    token,
    amount: import_ethers.BigNumber.from(results[i] || "0")
  }));
}
/*! Bundled license information:

js-sha3/src/sha3.js:
  (**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   *)

ky/distribution/index.js:
  (*! MIT License © Sindre Sorhus *)
*/
